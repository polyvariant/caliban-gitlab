package io.pg.gitlab

import caliban.client.CalibanClientError.DecodingError
import caliban.client.FieldBuilder._
import caliban.client._
import caliban.client.__Value._

object graphql {

  type AlertManagementHttpIntegrationID = String

  type AnalyticsDevopsAdoptionEnabledNamespaceID = String

  type AwardableID = String

  type BoardID = String

  type BoardsEpicBoardID = String

  type BoardsEpicListID = String

  type CiBuildID = String

  type CiPipelineID = String

  type CiRunnerID = String

  type ClustersAgentID = String

  type ClustersAgentTokenID = String

  type ClustersClusterID = String

  type ComplianceManagementFrameworkID = String

  type ContainerRepositoryID = String

  type CustomEmojiID = String

  type DastProfileID = String

  type DastScannerProfileID = String

  type DastSiteProfileID = String

  type DastSiteTokenID = String

  type DastSiteValidationID = String

  type Date = String

  type DesignManagementDesignAtVersionID = String

  type DesignManagementDesignID = String

  type DesignManagementVersionID = String

  type DiffNoteID = String

  type DiscussionID = String

  type Duration = String

  type EnvironmentID = String

  type EpicID = String

  type EpicTreeSortingID = String

  type GitlabErrorTrackingDetailedErrorID = String

  type GlobalID = String

  type GroupID = String

  type ID = String

  type ISO8601Date = String

  type IncidentManagementEscalationPolicyID = String

  type IncidentManagementEscalationRuleID = String

  type IncidentManagementOncallParticipantID = String

  type IncidentManagementOncallRotationID = String

  type IntegrationsPrometheusID = String

  type IssuableID = String

  type IssueID = String

  type IterationID = String

  type IterationsCadenceID = String

  type JSON = String

  type JobID = String

  type JsonString = String

  type LabelID = String

  type ListID = String

  type MergeRequestID = String

  type MetricsDashboardAnnotationID = String

  type MilestoneID = String

  type NamespaceID = String

  type NoteID = String

  type NoteableID = String

  type PackagesConanFileMetadatumID = String

  type PackagesConanMetadatumID = String

  type PackagesMavenMetadatumID = String

  type PackagesNugetMetadatumID = String

  type PackagesPackageFileID = String

  type PackagesPackageID = String

  type PackagesPypiMetadatumID = String

  type PathLockID = String

  type PayloadAlertFieldPathSegment = String

  type ProjectID = String

  type ReleasesLinkID = String

  type SnippetID = String

  type TerraformStateID = String

  type Time = String

  type TodoID = String

  type TodoableID = String

  type UntrustedRegexp = String

  type Upload = String

  type UserID = String

  type VulnerabilitiesExternalIssueLinkID = String

  type VulnerabilitiesScannerID = String

  type VulnerabilityID = String

  sealed trait AccessLevelEnum extends scala.Product with scala.Serializable { def value: String }

  object AccessLevelEnum {
    case object NO_ACCESS extends AccessLevelEnum { val value: String = "NO_ACCESS" }
    case object MINIMAL_ACCESS extends AccessLevelEnum { val value: String = "MINIMAL_ACCESS" }
    case object GUEST extends AccessLevelEnum { val value: String = "GUEST" }
    case object REPORTER extends AccessLevelEnum { val value: String = "REPORTER" }
    case object DEVELOPER extends AccessLevelEnum { val value: String = "DEVELOPER" }
    case object MAINTAINER extends AccessLevelEnum { val value: String = "MAINTAINER" }
    case object OWNER extends AccessLevelEnum { val value: String = "OWNER" }

    implicit val decoder: ScalarDecoder[AccessLevelEnum] = {
      case __StringValue("NO_ACCESS")      => Right(AccessLevelEnum.NO_ACCESS)
      case __StringValue("MINIMAL_ACCESS") => Right(AccessLevelEnum.MINIMAL_ACCESS)
      case __StringValue("GUEST")          => Right(AccessLevelEnum.GUEST)
      case __StringValue("REPORTER")       => Right(AccessLevelEnum.REPORTER)
      case __StringValue("DEVELOPER")      => Right(AccessLevelEnum.DEVELOPER)
      case __StringValue("MAINTAINER")     => Right(AccessLevelEnum.MAINTAINER)
      case __StringValue("OWNER")          => Right(AccessLevelEnum.OWNER)
      case other                           => Left(DecodingError(s"Can't build AccessLevelEnum from input $other"))
    }

    implicit val encoder: ArgEncoder[AccessLevelEnum] = {
      case AccessLevelEnum.NO_ACCESS      => __EnumValue("NO_ACCESS")
      case AccessLevelEnum.MINIMAL_ACCESS => __EnumValue("MINIMAL_ACCESS")
      case AccessLevelEnum.GUEST          => __EnumValue("GUEST")
      case AccessLevelEnum.REPORTER       => __EnumValue("REPORTER")
      case AccessLevelEnum.DEVELOPER      => __EnumValue("DEVELOPER")
      case AccessLevelEnum.MAINTAINER     => __EnumValue("MAINTAINER")
      case AccessLevelEnum.OWNER          => __EnumValue("OWNER")
    }

    val values: Vector[AccessLevelEnum] = Vector(NO_ACCESS, MINIMAL_ACCESS, GUEST, REPORTER, DEVELOPER, MAINTAINER, OWNER)
  }

  sealed trait AlertManagementAlertSort extends scala.Product with scala.Serializable { def value: String }

  object AlertManagementAlertSort {
    case object updated_desc extends AlertManagementAlertSort { val value: String = "updated_desc" }
    case object updated_asc extends AlertManagementAlertSort { val value: String = "updated_asc" }
    case object created_desc extends AlertManagementAlertSort { val value: String = "created_desc" }
    case object created_asc extends AlertManagementAlertSort { val value: String = "created_asc" }
    case object UPDATED_DESC_1 extends AlertManagementAlertSort { val value: String = "UPDATED_DESC_1" }
    case object UPDATED_ASC_1 extends AlertManagementAlertSort { val value: String = "UPDATED_ASC_1" }
    case object CREATED_DESC_1 extends AlertManagementAlertSort { val value: String = "CREATED_DESC_1" }
    case object CREATED_ASC_1 extends AlertManagementAlertSort { val value: String = "CREATED_ASC_1" }
    case object STARTED_AT_ASC extends AlertManagementAlertSort { val value: String = "STARTED_AT_ASC" }
    case object STARTED_AT_DESC extends AlertManagementAlertSort { val value: String = "STARTED_AT_DESC" }
    case object ENDED_AT_ASC extends AlertManagementAlertSort { val value: String = "ENDED_AT_ASC" }
    case object ENDED_AT_DESC extends AlertManagementAlertSort { val value: String = "ENDED_AT_DESC" }
    case object CREATED_TIME_ASC extends AlertManagementAlertSort { val value: String = "CREATED_TIME_ASC" }
    case object CREATED_TIME_DESC extends AlertManagementAlertSort { val value: String = "CREATED_TIME_DESC" }
    case object UPDATED_TIME_ASC extends AlertManagementAlertSort { val value: String = "UPDATED_TIME_ASC" }
    case object UPDATED_TIME_DESC extends AlertManagementAlertSort { val value: String = "UPDATED_TIME_DESC" }
    case object EVENT_COUNT_ASC extends AlertManagementAlertSort { val value: String = "EVENT_COUNT_ASC" }
    case object EVENT_COUNT_DESC extends AlertManagementAlertSort { val value: String = "EVENT_COUNT_DESC" }
    case object SEVERITY_ASC extends AlertManagementAlertSort { val value: String = "SEVERITY_ASC" }
    case object SEVERITY_DESC extends AlertManagementAlertSort { val value: String = "SEVERITY_DESC" }
    case object STATUS_ASC extends AlertManagementAlertSort { val value: String = "STATUS_ASC" }
    case object STATUS_DESC extends AlertManagementAlertSort { val value: String = "STATUS_DESC" }

    implicit val decoder: ScalarDecoder[AlertManagementAlertSort] = {
      case __StringValue("updated_desc")      => Right(AlertManagementAlertSort.updated_desc)
      case __StringValue("updated_asc")       => Right(AlertManagementAlertSort.updated_asc)
      case __StringValue("created_desc")      => Right(AlertManagementAlertSort.created_desc)
      case __StringValue("created_asc")       => Right(AlertManagementAlertSort.created_asc)
      case __StringValue("UPDATED_DESC")      => Right(AlertManagementAlertSort.UPDATED_DESC_1)
      case __StringValue("UPDATED_ASC")       => Right(AlertManagementAlertSort.UPDATED_ASC_1)
      case __StringValue("CREATED_DESC")      => Right(AlertManagementAlertSort.CREATED_DESC_1)
      case __StringValue("CREATED_ASC")       => Right(AlertManagementAlertSort.CREATED_ASC_1)
      case __StringValue("STARTED_AT_ASC")    => Right(AlertManagementAlertSort.STARTED_AT_ASC)
      case __StringValue("STARTED_AT_DESC")   => Right(AlertManagementAlertSort.STARTED_AT_DESC)
      case __StringValue("ENDED_AT_ASC")      => Right(AlertManagementAlertSort.ENDED_AT_ASC)
      case __StringValue("ENDED_AT_DESC")     => Right(AlertManagementAlertSort.ENDED_AT_DESC)
      case __StringValue("CREATED_TIME_ASC")  => Right(AlertManagementAlertSort.CREATED_TIME_ASC)
      case __StringValue("CREATED_TIME_DESC") => Right(AlertManagementAlertSort.CREATED_TIME_DESC)
      case __StringValue("UPDATED_TIME_ASC")  => Right(AlertManagementAlertSort.UPDATED_TIME_ASC)
      case __StringValue("UPDATED_TIME_DESC") => Right(AlertManagementAlertSort.UPDATED_TIME_DESC)
      case __StringValue("EVENT_COUNT_ASC")   => Right(AlertManagementAlertSort.EVENT_COUNT_ASC)
      case __StringValue("EVENT_COUNT_DESC")  => Right(AlertManagementAlertSort.EVENT_COUNT_DESC)
      case __StringValue("SEVERITY_ASC")      => Right(AlertManagementAlertSort.SEVERITY_ASC)
      case __StringValue("SEVERITY_DESC")     => Right(AlertManagementAlertSort.SEVERITY_DESC)
      case __StringValue("STATUS_ASC")        => Right(AlertManagementAlertSort.STATUS_ASC)
      case __StringValue("STATUS_DESC")       => Right(AlertManagementAlertSort.STATUS_DESC)
      case other                              => Left(DecodingError(s"Can't build AlertManagementAlertSort from input $other"))
    }

    implicit val encoder: ArgEncoder[AlertManagementAlertSort] = {
      case AlertManagementAlertSort.updated_desc      => __EnumValue("updated_desc")
      case AlertManagementAlertSort.updated_asc       => __EnumValue("updated_asc")
      case AlertManagementAlertSort.created_desc      => __EnumValue("created_desc")
      case AlertManagementAlertSort.created_asc       => __EnumValue("created_asc")
      case AlertManagementAlertSort.UPDATED_DESC_1    => __EnumValue("UPDATED_DESC")
      case AlertManagementAlertSort.UPDATED_ASC_1     => __EnumValue("UPDATED_ASC")
      case AlertManagementAlertSort.CREATED_DESC_1    => __EnumValue("CREATED_DESC")
      case AlertManagementAlertSort.CREATED_ASC_1     => __EnumValue("CREATED_ASC")
      case AlertManagementAlertSort.STARTED_AT_ASC    => __EnumValue("STARTED_AT_ASC")
      case AlertManagementAlertSort.STARTED_AT_DESC   => __EnumValue("STARTED_AT_DESC")
      case AlertManagementAlertSort.ENDED_AT_ASC      => __EnumValue("ENDED_AT_ASC")
      case AlertManagementAlertSort.ENDED_AT_DESC     => __EnumValue("ENDED_AT_DESC")
      case AlertManagementAlertSort.CREATED_TIME_ASC  => __EnumValue("CREATED_TIME_ASC")
      case AlertManagementAlertSort.CREATED_TIME_DESC => __EnumValue("CREATED_TIME_DESC")
      case AlertManagementAlertSort.UPDATED_TIME_ASC  => __EnumValue("UPDATED_TIME_ASC")
      case AlertManagementAlertSort.UPDATED_TIME_DESC => __EnumValue("UPDATED_TIME_DESC")
      case AlertManagementAlertSort.EVENT_COUNT_ASC   => __EnumValue("EVENT_COUNT_ASC")
      case AlertManagementAlertSort.EVENT_COUNT_DESC  => __EnumValue("EVENT_COUNT_DESC")
      case AlertManagementAlertSort.SEVERITY_ASC      => __EnumValue("SEVERITY_ASC")
      case AlertManagementAlertSort.SEVERITY_DESC     => __EnumValue("SEVERITY_DESC")
      case AlertManagementAlertSort.STATUS_ASC        => __EnumValue("STATUS_ASC")
      case AlertManagementAlertSort.STATUS_DESC       => __EnumValue("STATUS_DESC")
    }

    val values: Vector[AlertManagementAlertSort] = Vector(
      updated_desc,
      updated_asc,
      created_desc,
      created_asc,
      UPDATED_DESC_1,
      UPDATED_ASC_1,
      CREATED_DESC_1,
      CREATED_ASC_1,
      STARTED_AT_ASC,
      STARTED_AT_DESC,
      ENDED_AT_ASC,
      ENDED_AT_DESC,
      CREATED_TIME_ASC,
      CREATED_TIME_DESC,
      UPDATED_TIME_ASC,
      UPDATED_TIME_DESC,
      EVENT_COUNT_ASC,
      EVENT_COUNT_DESC,
      SEVERITY_ASC,
      SEVERITY_DESC,
      STATUS_ASC,
      STATUS_DESC
    )

  }

  sealed trait AlertManagementDomainFilter extends scala.Product with scala.Serializable { def value: String }

  object AlertManagementDomainFilter {
    case object operations extends AlertManagementDomainFilter { val value: String = "operations" }
    case object threat_monitoring extends AlertManagementDomainFilter { val value: String = "threat_monitoring" }

    implicit val decoder: ScalarDecoder[AlertManagementDomainFilter] = {
      case __StringValue("operations")        => Right(AlertManagementDomainFilter.operations)
      case __StringValue("threat_monitoring") => Right(AlertManagementDomainFilter.threat_monitoring)
      case other                              => Left(DecodingError(s"Can't build AlertManagementDomainFilter from input $other"))
    }

    implicit val encoder: ArgEncoder[AlertManagementDomainFilter] = {
      case AlertManagementDomainFilter.operations        => __EnumValue("operations")
      case AlertManagementDomainFilter.threat_monitoring => __EnumValue("threat_monitoring")
    }

    val values: Vector[AlertManagementDomainFilter] = Vector(operations, threat_monitoring)
  }

  sealed trait AlertManagementIntegrationType extends scala.Product with scala.Serializable { def value: String }

  object AlertManagementIntegrationType {
    case object PROMETHEUS extends AlertManagementIntegrationType { val value: String = "PROMETHEUS" }
    case object HTTP extends AlertManagementIntegrationType { val value: String = "HTTP" }

    implicit val decoder: ScalarDecoder[AlertManagementIntegrationType] = {
      case __StringValue("PROMETHEUS") => Right(AlertManagementIntegrationType.PROMETHEUS)
      case __StringValue("HTTP")       => Right(AlertManagementIntegrationType.HTTP)
      case other                       => Left(DecodingError(s"Can't build AlertManagementIntegrationType from input $other"))
    }

    implicit val encoder: ArgEncoder[AlertManagementIntegrationType] = {
      case AlertManagementIntegrationType.PROMETHEUS => __EnumValue("PROMETHEUS")
      case AlertManagementIntegrationType.HTTP       => __EnumValue("HTTP")
    }

    val values: Vector[AlertManagementIntegrationType] = Vector(PROMETHEUS, HTTP)
  }

  sealed trait AlertManagementPayloadAlertFieldName extends scala.Product with scala.Serializable { def value: String }

  object AlertManagementPayloadAlertFieldName {
    case object TITLE extends AlertManagementPayloadAlertFieldName { val value: String = "TITLE" }
    case object DESCRIPTION extends AlertManagementPayloadAlertFieldName { val value: String = "DESCRIPTION" }
    case object START_TIME extends AlertManagementPayloadAlertFieldName { val value: String = "START_TIME" }
    case object END_TIME extends AlertManagementPayloadAlertFieldName { val value: String = "END_TIME" }
    case object SERVICE extends AlertManagementPayloadAlertFieldName { val value: String = "SERVICE" }
    case object MONITORING_TOOL extends AlertManagementPayloadAlertFieldName { val value: String = "MONITORING_TOOL" }
    case object HOSTS extends AlertManagementPayloadAlertFieldName { val value: String = "HOSTS" }
    case object SEVERITY extends AlertManagementPayloadAlertFieldName { val value: String = "SEVERITY" }
    case object FINGERPRINT extends AlertManagementPayloadAlertFieldName { val value: String = "FINGERPRINT" }
    case object GITLAB_ENVIRONMENT_NAME extends AlertManagementPayloadAlertFieldName { val value: String = "GITLAB_ENVIRONMENT_NAME" }

    implicit val decoder: ScalarDecoder[AlertManagementPayloadAlertFieldName] = {
      case __StringValue("TITLE")                   => Right(AlertManagementPayloadAlertFieldName.TITLE)
      case __StringValue("DESCRIPTION")             => Right(AlertManagementPayloadAlertFieldName.DESCRIPTION)
      case __StringValue("START_TIME")              => Right(AlertManagementPayloadAlertFieldName.START_TIME)
      case __StringValue("END_TIME")                => Right(AlertManagementPayloadAlertFieldName.END_TIME)
      case __StringValue("SERVICE")                 => Right(AlertManagementPayloadAlertFieldName.SERVICE)
      case __StringValue("MONITORING_TOOL")         => Right(AlertManagementPayloadAlertFieldName.MONITORING_TOOL)
      case __StringValue("HOSTS")                   => Right(AlertManagementPayloadAlertFieldName.HOSTS)
      case __StringValue("SEVERITY")                => Right(AlertManagementPayloadAlertFieldName.SEVERITY)
      case __StringValue("FINGERPRINT")             => Right(AlertManagementPayloadAlertFieldName.FINGERPRINT)
      case __StringValue("GITLAB_ENVIRONMENT_NAME") => Right(AlertManagementPayloadAlertFieldName.GITLAB_ENVIRONMENT_NAME)
      case other => Left(DecodingError(s"Can't build AlertManagementPayloadAlertFieldName from input $other"))
    }

    implicit val encoder: ArgEncoder[AlertManagementPayloadAlertFieldName] = {
      case AlertManagementPayloadAlertFieldName.TITLE                   => __EnumValue("TITLE")
      case AlertManagementPayloadAlertFieldName.DESCRIPTION             => __EnumValue("DESCRIPTION")
      case AlertManagementPayloadAlertFieldName.START_TIME              => __EnumValue("START_TIME")
      case AlertManagementPayloadAlertFieldName.END_TIME                => __EnumValue("END_TIME")
      case AlertManagementPayloadAlertFieldName.SERVICE                 => __EnumValue("SERVICE")
      case AlertManagementPayloadAlertFieldName.MONITORING_TOOL         => __EnumValue("MONITORING_TOOL")
      case AlertManagementPayloadAlertFieldName.HOSTS                   => __EnumValue("HOSTS")
      case AlertManagementPayloadAlertFieldName.SEVERITY                => __EnumValue("SEVERITY")
      case AlertManagementPayloadAlertFieldName.FINGERPRINT             => __EnumValue("FINGERPRINT")
      case AlertManagementPayloadAlertFieldName.GITLAB_ENVIRONMENT_NAME => __EnumValue("GITLAB_ENVIRONMENT_NAME")
    }

    val values: Vector[AlertManagementPayloadAlertFieldName] =
      Vector(TITLE, DESCRIPTION, START_TIME, END_TIME, SERVICE, MONITORING_TOOL, HOSTS, SEVERITY, FINGERPRINT, GITLAB_ENVIRONMENT_NAME)
  }

  sealed trait AlertManagementPayloadAlertFieldType extends scala.Product with scala.Serializable { def value: String }

  object AlertManagementPayloadAlertFieldType {
    case object ARRAY extends AlertManagementPayloadAlertFieldType { val value: String = "ARRAY" }
    case object DATETIME extends AlertManagementPayloadAlertFieldType { val value: String = "DATETIME" }
    case object STRING extends AlertManagementPayloadAlertFieldType { val value: String = "STRING" }

    implicit val decoder: ScalarDecoder[AlertManagementPayloadAlertFieldType] = {
      case __StringValue("ARRAY")    => Right(AlertManagementPayloadAlertFieldType.ARRAY)
      case __StringValue("DATETIME") => Right(AlertManagementPayloadAlertFieldType.DATETIME)
      case __StringValue("STRING")   => Right(AlertManagementPayloadAlertFieldType.STRING)
      case other                     => Left(DecodingError(s"Can't build AlertManagementPayloadAlertFieldType from input $other"))
    }

    implicit val encoder: ArgEncoder[AlertManagementPayloadAlertFieldType] = {
      case AlertManagementPayloadAlertFieldType.ARRAY    => __EnumValue("ARRAY")
      case AlertManagementPayloadAlertFieldType.DATETIME => __EnumValue("DATETIME")
      case AlertManagementPayloadAlertFieldType.STRING   => __EnumValue("STRING")
    }

    val values: Vector[AlertManagementPayloadAlertFieldType] = Vector(ARRAY, DATETIME, STRING)
  }

  sealed trait AlertManagementSeverity extends scala.Product with scala.Serializable { def value: String }

  object AlertManagementSeverity {
    case object CRITICAL extends AlertManagementSeverity { val value: String = "CRITICAL" }
    case object HIGH extends AlertManagementSeverity { val value: String = "HIGH" }
    case object MEDIUM extends AlertManagementSeverity { val value: String = "MEDIUM" }
    case object LOW extends AlertManagementSeverity { val value: String = "LOW" }
    case object INFO extends AlertManagementSeverity { val value: String = "INFO" }
    case object UNKNOWN extends AlertManagementSeverity { val value: String = "UNKNOWN" }

    implicit val decoder: ScalarDecoder[AlertManagementSeverity] = {
      case __StringValue("CRITICAL") => Right(AlertManagementSeverity.CRITICAL)
      case __StringValue("HIGH")     => Right(AlertManagementSeverity.HIGH)
      case __StringValue("MEDIUM")   => Right(AlertManagementSeverity.MEDIUM)
      case __StringValue("LOW")      => Right(AlertManagementSeverity.LOW)
      case __StringValue("INFO")     => Right(AlertManagementSeverity.INFO)
      case __StringValue("UNKNOWN")  => Right(AlertManagementSeverity.UNKNOWN)
      case other                     => Left(DecodingError(s"Can't build AlertManagementSeverity from input $other"))
    }

    implicit val encoder: ArgEncoder[AlertManagementSeverity] = {
      case AlertManagementSeverity.CRITICAL => __EnumValue("CRITICAL")
      case AlertManagementSeverity.HIGH     => __EnumValue("HIGH")
      case AlertManagementSeverity.MEDIUM   => __EnumValue("MEDIUM")
      case AlertManagementSeverity.LOW      => __EnumValue("LOW")
      case AlertManagementSeverity.INFO     => __EnumValue("INFO")
      case AlertManagementSeverity.UNKNOWN  => __EnumValue("UNKNOWN")
    }

    val values: Vector[AlertManagementSeverity] = Vector(CRITICAL, HIGH, MEDIUM, LOW, INFO, UNKNOWN)
  }

  sealed trait AlertManagementStatus extends scala.Product with scala.Serializable { def value: String }

  object AlertManagementStatus {
    case object TRIGGERED extends AlertManagementStatus { val value: String = "TRIGGERED" }
    case object ACKNOWLEDGED extends AlertManagementStatus { val value: String = "ACKNOWLEDGED" }
    case object RESOLVED extends AlertManagementStatus { val value: String = "RESOLVED" }
    case object IGNORED extends AlertManagementStatus { val value: String = "IGNORED" }

    implicit val decoder: ScalarDecoder[AlertManagementStatus] = {
      case __StringValue("TRIGGERED")    => Right(AlertManagementStatus.TRIGGERED)
      case __StringValue("ACKNOWLEDGED") => Right(AlertManagementStatus.ACKNOWLEDGED)
      case __StringValue("RESOLVED")     => Right(AlertManagementStatus.RESOLVED)
      case __StringValue("IGNORED")      => Right(AlertManagementStatus.IGNORED)
      case other                         => Left(DecodingError(s"Can't build AlertManagementStatus from input $other"))
    }

    implicit val encoder: ArgEncoder[AlertManagementStatus] = {
      case AlertManagementStatus.TRIGGERED    => __EnumValue("TRIGGERED")
      case AlertManagementStatus.ACKNOWLEDGED => __EnumValue("ACKNOWLEDGED")
      case AlertManagementStatus.RESOLVED     => __EnumValue("RESOLVED")
      case AlertManagementStatus.IGNORED      => __EnumValue("IGNORED")
    }

    val values: Vector[AlertManagementStatus] = Vector(TRIGGERED, ACKNOWLEDGED, RESOLVED, IGNORED)
  }

  sealed trait ApiFuzzingScanMode extends scala.Product with scala.Serializable { def value: String }

  object ApiFuzzingScanMode {
    case object HAR extends ApiFuzzingScanMode { val value: String = "HAR" }
    case object OPENAPI extends ApiFuzzingScanMode { val value: String = "OPENAPI" }
    case object POSTMAN extends ApiFuzzingScanMode { val value: String = "POSTMAN" }

    implicit val decoder: ScalarDecoder[ApiFuzzingScanMode] = {
      case __StringValue("HAR")     => Right(ApiFuzzingScanMode.HAR)
      case __StringValue("OPENAPI") => Right(ApiFuzzingScanMode.OPENAPI)
      case __StringValue("POSTMAN") => Right(ApiFuzzingScanMode.POSTMAN)
      case other                    => Left(DecodingError(s"Can't build ApiFuzzingScanMode from input $other"))
    }

    implicit val encoder: ArgEncoder[ApiFuzzingScanMode] = {
      case ApiFuzzingScanMode.HAR     => __EnumValue("HAR")
      case ApiFuzzingScanMode.OPENAPI => __EnumValue("OPENAPI")
      case ApiFuzzingScanMode.POSTMAN => __EnumValue("POSTMAN")
    }

    val values: Vector[ApiFuzzingScanMode] = Vector(HAR, OPENAPI, POSTMAN)
  }

  sealed trait ApprovalRuleType extends scala.Product with scala.Serializable { def value: String }

  object ApprovalRuleType {
    case object REGULAR extends ApprovalRuleType { val value: String = "REGULAR" }
    case object CODE_OWNER extends ApprovalRuleType { val value: String = "CODE_OWNER" }
    case object REPORT_APPROVER extends ApprovalRuleType { val value: String = "REPORT_APPROVER" }
    case object ANY_APPROVER extends ApprovalRuleType { val value: String = "ANY_APPROVER" }

    implicit val decoder: ScalarDecoder[ApprovalRuleType] = {
      case __StringValue("REGULAR")         => Right(ApprovalRuleType.REGULAR)
      case __StringValue("CODE_OWNER")      => Right(ApprovalRuleType.CODE_OWNER)
      case __StringValue("REPORT_APPROVER") => Right(ApprovalRuleType.REPORT_APPROVER)
      case __StringValue("ANY_APPROVER")    => Right(ApprovalRuleType.ANY_APPROVER)
      case other                            => Left(DecodingError(s"Can't build ApprovalRuleType from input $other"))
    }

    implicit val encoder: ArgEncoder[ApprovalRuleType] = {
      case ApprovalRuleType.REGULAR         => __EnumValue("REGULAR")
      case ApprovalRuleType.CODE_OWNER      => __EnumValue("CODE_OWNER")
      case ApprovalRuleType.REPORT_APPROVER => __EnumValue("REPORT_APPROVER")
      case ApprovalRuleType.ANY_APPROVER    => __EnumValue("ANY_APPROVER")
    }

    val values: Vector[ApprovalRuleType] = Vector(REGULAR, CODE_OWNER, REPORT_APPROVER, ANY_APPROVER)
  }

  sealed trait AssigneeWildcardId extends scala.Product with scala.Serializable { def value: String }

  object AssigneeWildcardId {
    case object NONE extends AssigneeWildcardId { val value: String = "NONE" }
    case object ANY extends AssigneeWildcardId { val value: String = "ANY" }

    implicit val decoder: ScalarDecoder[AssigneeWildcardId] = {
      case __StringValue("NONE") => Right(AssigneeWildcardId.NONE)
      case __StringValue("ANY")  => Right(AssigneeWildcardId.ANY)
      case other                 => Left(DecodingError(s"Can't build AssigneeWildcardId from input $other"))
    }

    implicit val encoder: ArgEncoder[AssigneeWildcardId] = {
      case AssigneeWildcardId.NONE => __EnumValue("NONE")
      case AssigneeWildcardId.ANY  => __EnumValue("ANY")
    }

    val values: Vector[AssigneeWildcardId] = Vector(NONE, ANY)
  }

  sealed trait AvailabilityEnum extends scala.Product with scala.Serializable { def value: String }

  object AvailabilityEnum {
    case object NOT_SET extends AvailabilityEnum { val value: String = "NOT_SET" }
    case object BUSY extends AvailabilityEnum { val value: String = "BUSY" }

    implicit val decoder: ScalarDecoder[AvailabilityEnum] = {
      case __StringValue("NOT_SET") => Right(AvailabilityEnum.NOT_SET)
      case __StringValue("BUSY")    => Right(AvailabilityEnum.BUSY)
      case other                    => Left(DecodingError(s"Can't build AvailabilityEnum from input $other"))
    }

    implicit val encoder: ArgEncoder[AvailabilityEnum] = {
      case AvailabilityEnum.NOT_SET => __EnumValue("NOT_SET")
      case AvailabilityEnum.BUSY    => __EnumValue("BUSY")
    }

    val values: Vector[AvailabilityEnum] = Vector(NOT_SET, BUSY)
  }

  sealed trait BlobViewersType extends scala.Product with scala.Serializable { def value: String }

  object BlobViewersType {
    case object rich extends BlobViewersType { val value: String = "rich" }
    case object simple extends BlobViewersType { val value: String = "simple" }
    case object auxiliary extends BlobViewersType { val value: String = "auxiliary" }

    implicit val decoder: ScalarDecoder[BlobViewersType] = {
      case __StringValue("rich")      => Right(BlobViewersType.rich)
      case __StringValue("simple")    => Right(BlobViewersType.simple)
      case __StringValue("auxiliary") => Right(BlobViewersType.auxiliary)
      case other                      => Left(DecodingError(s"Can't build BlobViewersType from input $other"))
    }

    implicit val encoder: ArgEncoder[BlobViewersType] = {
      case BlobViewersType.rich      => __EnumValue("rich")
      case BlobViewersType.simple    => __EnumValue("simple")
      case BlobViewersType.auxiliary => __EnumValue("auxiliary")
    }

    val values: Vector[BlobViewersType] = Vector(rich, simple, auxiliary)
  }

  sealed trait CiConfigStatus extends scala.Product with scala.Serializable { def value: String }

  object CiConfigStatus {
    case object VALID extends CiConfigStatus { val value: String = "VALID" }
    case object INVALID extends CiConfigStatus { val value: String = "INVALID" }

    implicit val decoder: ScalarDecoder[CiConfigStatus] = {
      case __StringValue("VALID")   => Right(CiConfigStatus.VALID)
      case __StringValue("INVALID") => Right(CiConfigStatus.INVALID)
      case other                    => Left(DecodingError(s"Can't build CiConfigStatus from input $other"))
    }

    implicit val encoder: ArgEncoder[CiConfigStatus] = {
      case CiConfigStatus.VALID   => __EnumValue("VALID")
      case CiConfigStatus.INVALID => __EnumValue("INVALID")
    }

    val values: Vector[CiConfigStatus] = Vector(VALID, INVALID)
  }

  sealed trait CiJobStatus extends scala.Product with scala.Serializable { def value: String }

  object CiJobStatus {
    case object CREATED extends CiJobStatus { val value: String = "CREATED" }
    case object WAITING_FOR_RESOURCE extends CiJobStatus { val value: String = "WAITING_FOR_RESOURCE" }
    case object PREPARING extends CiJobStatus { val value: String = "PREPARING" }
    case object PENDING extends CiJobStatus { val value: String = "PENDING" }
    case object RUNNING extends CiJobStatus { val value: String = "RUNNING" }
    case object SUCCESS extends CiJobStatus { val value: String = "SUCCESS" }
    case object FAILED extends CiJobStatus { val value: String = "FAILED" }
    case object CANCELED extends CiJobStatus { val value: String = "CANCELED" }
    case object SKIPPED extends CiJobStatus { val value: String = "SKIPPED" }
    case object MANUAL extends CiJobStatus { val value: String = "MANUAL" }
    case object SCHEDULED extends CiJobStatus { val value: String = "SCHEDULED" }

    implicit val decoder: ScalarDecoder[CiJobStatus] = {
      case __StringValue("CREATED")              => Right(CiJobStatus.CREATED)
      case __StringValue("WAITING_FOR_RESOURCE") => Right(CiJobStatus.WAITING_FOR_RESOURCE)
      case __StringValue("PREPARING")            => Right(CiJobStatus.PREPARING)
      case __StringValue("PENDING")              => Right(CiJobStatus.PENDING)
      case __StringValue("RUNNING")              => Right(CiJobStatus.RUNNING)
      case __StringValue("SUCCESS")              => Right(CiJobStatus.SUCCESS)
      case __StringValue("FAILED")               => Right(CiJobStatus.FAILED)
      case __StringValue("CANCELED")             => Right(CiJobStatus.CANCELED)
      case __StringValue("SKIPPED")              => Right(CiJobStatus.SKIPPED)
      case __StringValue("MANUAL")               => Right(CiJobStatus.MANUAL)
      case __StringValue("SCHEDULED")            => Right(CiJobStatus.SCHEDULED)
      case other                                 => Left(DecodingError(s"Can't build CiJobStatus from input $other"))
    }

    implicit val encoder: ArgEncoder[CiJobStatus] = {
      case CiJobStatus.CREATED              => __EnumValue("CREATED")
      case CiJobStatus.WAITING_FOR_RESOURCE => __EnumValue("WAITING_FOR_RESOURCE")
      case CiJobStatus.PREPARING            => __EnumValue("PREPARING")
      case CiJobStatus.PENDING              => __EnumValue("PENDING")
      case CiJobStatus.RUNNING              => __EnumValue("RUNNING")
      case CiJobStatus.SUCCESS              => __EnumValue("SUCCESS")
      case CiJobStatus.FAILED               => __EnumValue("FAILED")
      case CiJobStatus.CANCELED             => __EnumValue("CANCELED")
      case CiJobStatus.SKIPPED              => __EnumValue("SKIPPED")
      case CiJobStatus.MANUAL               => __EnumValue("MANUAL")
      case CiJobStatus.SCHEDULED            => __EnumValue("SCHEDULED")
    }

    val values: Vector[CiJobStatus] =
      Vector(CREATED, WAITING_FOR_RESOURCE, PREPARING, PENDING, RUNNING, SUCCESS, FAILED, CANCELED, SKIPPED, MANUAL, SCHEDULED)
  }

  sealed trait CiRunnerAccessLevel extends scala.Product with scala.Serializable { def value: String }

  object CiRunnerAccessLevel {
    case object NOT_PROTECTED extends CiRunnerAccessLevel { val value: String = "NOT_PROTECTED" }
    case object REF_PROTECTED extends CiRunnerAccessLevel { val value: String = "REF_PROTECTED" }

    implicit val decoder: ScalarDecoder[CiRunnerAccessLevel] = {
      case __StringValue("NOT_PROTECTED") => Right(CiRunnerAccessLevel.NOT_PROTECTED)
      case __StringValue("REF_PROTECTED") => Right(CiRunnerAccessLevel.REF_PROTECTED)
      case other                          => Left(DecodingError(s"Can't build CiRunnerAccessLevel from input $other"))
    }

    implicit val encoder: ArgEncoder[CiRunnerAccessLevel] = {
      case CiRunnerAccessLevel.NOT_PROTECTED => __EnumValue("NOT_PROTECTED")
      case CiRunnerAccessLevel.REF_PROTECTED => __EnumValue("REF_PROTECTED")
    }

    val values: Vector[CiRunnerAccessLevel] = Vector(NOT_PROTECTED, REF_PROTECTED)
  }

  sealed trait CiRunnerSort extends scala.Product with scala.Serializable { def value: String }

  object CiRunnerSort {
    case object CONTACTED_ASC extends CiRunnerSort { val value: String = "CONTACTED_ASC" }
    case object CONTACTED_DESC extends CiRunnerSort { val value: String = "CONTACTED_DESC" }
    case object CREATED_ASC extends CiRunnerSort { val value: String = "CREATED_ASC" }
    case object CREATED_DESC extends CiRunnerSort { val value: String = "CREATED_DESC" }

    implicit val decoder: ScalarDecoder[CiRunnerSort] = {
      case __StringValue("CONTACTED_ASC")  => Right(CiRunnerSort.CONTACTED_ASC)
      case __StringValue("CONTACTED_DESC") => Right(CiRunnerSort.CONTACTED_DESC)
      case __StringValue("CREATED_ASC")    => Right(CiRunnerSort.CREATED_ASC)
      case __StringValue("CREATED_DESC")   => Right(CiRunnerSort.CREATED_DESC)
      case other                           => Left(DecodingError(s"Can't build CiRunnerSort from input $other"))
    }

    implicit val encoder: ArgEncoder[CiRunnerSort] = {
      case CiRunnerSort.CONTACTED_ASC  => __EnumValue("CONTACTED_ASC")
      case CiRunnerSort.CONTACTED_DESC => __EnumValue("CONTACTED_DESC")
      case CiRunnerSort.CREATED_ASC    => __EnumValue("CREATED_ASC")
      case CiRunnerSort.CREATED_DESC   => __EnumValue("CREATED_DESC")
    }

    val values: Vector[CiRunnerSort] = Vector(CONTACTED_ASC, CONTACTED_DESC, CREATED_ASC, CREATED_DESC)
  }

  sealed trait CiRunnerStatus extends scala.Product with scala.Serializable { def value: String }

  object CiRunnerStatus {
    case object ACTIVE extends CiRunnerStatus { val value: String = "ACTIVE" }
    case object PAUSED extends CiRunnerStatus { val value: String = "PAUSED" }
    case object ONLINE extends CiRunnerStatus { val value: String = "ONLINE" }
    case object OFFLINE extends CiRunnerStatus { val value: String = "OFFLINE" }
    case object NOT_CONNECTED extends CiRunnerStatus { val value: String = "NOT_CONNECTED" }

    implicit val decoder: ScalarDecoder[CiRunnerStatus] = {
      case __StringValue("ACTIVE")        => Right(CiRunnerStatus.ACTIVE)
      case __StringValue("PAUSED")        => Right(CiRunnerStatus.PAUSED)
      case __StringValue("ONLINE")        => Right(CiRunnerStatus.ONLINE)
      case __StringValue("OFFLINE")       => Right(CiRunnerStatus.OFFLINE)
      case __StringValue("NOT_CONNECTED") => Right(CiRunnerStatus.NOT_CONNECTED)
      case other                          => Left(DecodingError(s"Can't build CiRunnerStatus from input $other"))
    }

    implicit val encoder: ArgEncoder[CiRunnerStatus] = {
      case CiRunnerStatus.ACTIVE        => __EnumValue("ACTIVE")
      case CiRunnerStatus.PAUSED        => __EnumValue("PAUSED")
      case CiRunnerStatus.ONLINE        => __EnumValue("ONLINE")
      case CiRunnerStatus.OFFLINE       => __EnumValue("OFFLINE")
      case CiRunnerStatus.NOT_CONNECTED => __EnumValue("NOT_CONNECTED")
    }

    val values: Vector[CiRunnerStatus] = Vector(ACTIVE, PAUSED, ONLINE, OFFLINE, NOT_CONNECTED)
  }

  sealed trait CiRunnerType extends scala.Product with scala.Serializable { def value: String }

  object CiRunnerType {
    case object INSTANCE_TYPE extends CiRunnerType { val value: String = "INSTANCE_TYPE" }
    case object GROUP_TYPE extends CiRunnerType { val value: String = "GROUP_TYPE" }
    case object PROJECT_TYPE extends CiRunnerType { val value: String = "PROJECT_TYPE" }

    implicit val decoder: ScalarDecoder[CiRunnerType] = {
      case __StringValue("INSTANCE_TYPE") => Right(CiRunnerType.INSTANCE_TYPE)
      case __StringValue("GROUP_TYPE")    => Right(CiRunnerType.GROUP_TYPE)
      case __StringValue("PROJECT_TYPE")  => Right(CiRunnerType.PROJECT_TYPE)
      case other                          => Left(DecodingError(s"Can't build CiRunnerType from input $other"))
    }

    implicit val encoder: ArgEncoder[CiRunnerType] = {
      case CiRunnerType.INSTANCE_TYPE => __EnumValue("INSTANCE_TYPE")
      case CiRunnerType.GROUP_TYPE    => __EnumValue("GROUP_TYPE")
      case CiRunnerType.PROJECT_TYPE  => __EnumValue("PROJECT_TYPE")
    }

    val values: Vector[CiRunnerType] = Vector(INSTANCE_TYPE, GROUP_TYPE, PROJECT_TYPE)
  }

  sealed trait CodeQualityDegradationSeverity extends scala.Product with scala.Serializable { def value: String }

  object CodeQualityDegradationSeverity {
    case object BLOCKER extends CodeQualityDegradationSeverity { val value: String = "BLOCKER" }
    case object CRITICAL extends CodeQualityDegradationSeverity { val value: String = "CRITICAL" }
    case object MAJOR extends CodeQualityDegradationSeverity { val value: String = "MAJOR" }
    case object MINOR extends CodeQualityDegradationSeverity { val value: String = "MINOR" }
    case object INFO extends CodeQualityDegradationSeverity { val value: String = "INFO" }

    implicit val decoder: ScalarDecoder[CodeQualityDegradationSeverity] = {
      case __StringValue("BLOCKER")  => Right(CodeQualityDegradationSeverity.BLOCKER)
      case __StringValue("CRITICAL") => Right(CodeQualityDegradationSeverity.CRITICAL)
      case __StringValue("MAJOR")    => Right(CodeQualityDegradationSeverity.MAJOR)
      case __StringValue("MINOR")    => Right(CodeQualityDegradationSeverity.MINOR)
      case __StringValue("INFO")     => Right(CodeQualityDegradationSeverity.INFO)
      case other                     => Left(DecodingError(s"Can't build CodeQualityDegradationSeverity from input $other"))
    }

    implicit val encoder: ArgEncoder[CodeQualityDegradationSeverity] = {
      case CodeQualityDegradationSeverity.BLOCKER  => __EnumValue("BLOCKER")
      case CodeQualityDegradationSeverity.CRITICAL => __EnumValue("CRITICAL")
      case CodeQualityDegradationSeverity.MAJOR    => __EnumValue("MAJOR")
      case CodeQualityDegradationSeverity.MINOR    => __EnumValue("MINOR")
      case CodeQualityDegradationSeverity.INFO     => __EnumValue("INFO")
    }

    val values: Vector[CodeQualityDegradationSeverity] = Vector(BLOCKER, CRITICAL, MAJOR, MINOR, INFO)
  }

  sealed trait CommitActionMode extends scala.Product with scala.Serializable { def value: String }

  object CommitActionMode {
    case object CREATE extends CommitActionMode { val value: String = "CREATE" }
    case object DELETE extends CommitActionMode { val value: String = "DELETE" }
    case object MOVE extends CommitActionMode { val value: String = "MOVE" }
    case object UPDATE extends CommitActionMode { val value: String = "UPDATE" }
    case object CHMOD extends CommitActionMode { val value: String = "CHMOD" }

    implicit val decoder: ScalarDecoder[CommitActionMode] = {
      case __StringValue("CREATE") => Right(CommitActionMode.CREATE)
      case __StringValue("DELETE") => Right(CommitActionMode.DELETE)
      case __StringValue("MOVE")   => Right(CommitActionMode.MOVE)
      case __StringValue("UPDATE") => Right(CommitActionMode.UPDATE)
      case __StringValue("CHMOD")  => Right(CommitActionMode.CHMOD)
      case other                   => Left(DecodingError(s"Can't build CommitActionMode from input $other"))
    }

    implicit val encoder: ArgEncoder[CommitActionMode] = {
      case CommitActionMode.CREATE => __EnumValue("CREATE")
      case CommitActionMode.DELETE => __EnumValue("DELETE")
      case CommitActionMode.MOVE   => __EnumValue("MOVE")
      case CommitActionMode.UPDATE => __EnumValue("UPDATE")
      case CommitActionMode.CHMOD  => __EnumValue("CHMOD")
    }

    val values: Vector[CommitActionMode] = Vector(CREATE, DELETE, MOVE, UPDATE, CHMOD)
  }

  sealed trait CommitEncoding extends scala.Product with scala.Serializable { def value: String }

  object CommitEncoding {
    case object TEXT extends CommitEncoding { val value: String = "TEXT" }
    case object BASE64 extends CommitEncoding { val value: String = "BASE64" }

    implicit val decoder: ScalarDecoder[CommitEncoding] = {
      case __StringValue("TEXT")   => Right(CommitEncoding.TEXT)
      case __StringValue("BASE64") => Right(CommitEncoding.BASE64)
      case other                   => Left(DecodingError(s"Can't build CommitEncoding from input $other"))
    }

    implicit val encoder: ArgEncoder[CommitEncoding] = {
      case CommitEncoding.TEXT   => __EnumValue("TEXT")
      case CommitEncoding.BASE64 => __EnumValue("BASE64")
    }

    val values: Vector[CommitEncoding] = Vector(TEXT, BASE64)
  }

  sealed trait ConanMetadatumFileTypeEnum extends scala.Product with scala.Serializable { def value: String }

  object ConanMetadatumFileTypeEnum {
    case object RECIPE_FILE extends ConanMetadatumFileTypeEnum { val value: String = "RECIPE_FILE" }
    case object PACKAGE_FILE extends ConanMetadatumFileTypeEnum { val value: String = "PACKAGE_FILE" }

    implicit val decoder: ScalarDecoder[ConanMetadatumFileTypeEnum] = {
      case __StringValue("RECIPE_FILE")  => Right(ConanMetadatumFileTypeEnum.RECIPE_FILE)
      case __StringValue("PACKAGE_FILE") => Right(ConanMetadatumFileTypeEnum.PACKAGE_FILE)
      case other                         => Left(DecodingError(s"Can't build ConanMetadatumFileTypeEnum from input $other"))
    }

    implicit val encoder: ArgEncoder[ConanMetadatumFileTypeEnum] = {
      case ConanMetadatumFileTypeEnum.RECIPE_FILE  => __EnumValue("RECIPE_FILE")
      case ConanMetadatumFileTypeEnum.PACKAGE_FILE => __EnumValue("PACKAGE_FILE")
    }

    val values: Vector[ConanMetadatumFileTypeEnum] = Vector(RECIPE_FILE, PACKAGE_FILE)
  }

  sealed trait ContainerExpirationPolicyCadenceEnum extends scala.Product with scala.Serializable { def value: String }

  object ContainerExpirationPolicyCadenceEnum {
    case object EVERY_DAY extends ContainerExpirationPolicyCadenceEnum { val value: String = "EVERY_DAY" }
    case object EVERY_WEEK extends ContainerExpirationPolicyCadenceEnum { val value: String = "EVERY_WEEK" }
    case object EVERY_TWO_WEEKS extends ContainerExpirationPolicyCadenceEnum { val value: String = "EVERY_TWO_WEEKS" }
    case object EVERY_MONTH extends ContainerExpirationPolicyCadenceEnum { val value: String = "EVERY_MONTH" }
    case object EVERY_THREE_MONTHS extends ContainerExpirationPolicyCadenceEnum { val value: String = "EVERY_THREE_MONTHS" }

    implicit val decoder: ScalarDecoder[ContainerExpirationPolicyCadenceEnum] = {
      case __StringValue("EVERY_DAY")          => Right(ContainerExpirationPolicyCadenceEnum.EVERY_DAY)
      case __StringValue("EVERY_WEEK")         => Right(ContainerExpirationPolicyCadenceEnum.EVERY_WEEK)
      case __StringValue("EVERY_TWO_WEEKS")    => Right(ContainerExpirationPolicyCadenceEnum.EVERY_TWO_WEEKS)
      case __StringValue("EVERY_MONTH")        => Right(ContainerExpirationPolicyCadenceEnum.EVERY_MONTH)
      case __StringValue("EVERY_THREE_MONTHS") => Right(ContainerExpirationPolicyCadenceEnum.EVERY_THREE_MONTHS)
      case other                               => Left(DecodingError(s"Can't build ContainerExpirationPolicyCadenceEnum from input $other"))
    }

    implicit val encoder: ArgEncoder[ContainerExpirationPolicyCadenceEnum] = {
      case ContainerExpirationPolicyCadenceEnum.EVERY_DAY          => __EnumValue("EVERY_DAY")
      case ContainerExpirationPolicyCadenceEnum.EVERY_WEEK         => __EnumValue("EVERY_WEEK")
      case ContainerExpirationPolicyCadenceEnum.EVERY_TWO_WEEKS    => __EnumValue("EVERY_TWO_WEEKS")
      case ContainerExpirationPolicyCadenceEnum.EVERY_MONTH        => __EnumValue("EVERY_MONTH")
      case ContainerExpirationPolicyCadenceEnum.EVERY_THREE_MONTHS => __EnumValue("EVERY_THREE_MONTHS")
    }

    val values: Vector[ContainerExpirationPolicyCadenceEnum] =
      Vector(EVERY_DAY, EVERY_WEEK, EVERY_TWO_WEEKS, EVERY_MONTH, EVERY_THREE_MONTHS)
  }

  sealed trait ContainerExpirationPolicyKeepEnum extends scala.Product with scala.Serializable { def value: String }

  object ContainerExpirationPolicyKeepEnum {
    case object ONE_TAG extends ContainerExpirationPolicyKeepEnum { val value: String = "ONE_TAG" }
    case object FIVE_TAGS extends ContainerExpirationPolicyKeepEnum { val value: String = "FIVE_TAGS" }
    case object TEN_TAGS extends ContainerExpirationPolicyKeepEnum { val value: String = "TEN_TAGS" }
    case object TWENTY_FIVE_TAGS extends ContainerExpirationPolicyKeepEnum { val value: String = "TWENTY_FIVE_TAGS" }
    case object FIFTY_TAGS extends ContainerExpirationPolicyKeepEnum { val value: String = "FIFTY_TAGS" }
    case object ONE_HUNDRED_TAGS extends ContainerExpirationPolicyKeepEnum { val value: String = "ONE_HUNDRED_TAGS" }

    implicit val decoder: ScalarDecoder[ContainerExpirationPolicyKeepEnum] = {
      case __StringValue("ONE_TAG")          => Right(ContainerExpirationPolicyKeepEnum.ONE_TAG)
      case __StringValue("FIVE_TAGS")        => Right(ContainerExpirationPolicyKeepEnum.FIVE_TAGS)
      case __StringValue("TEN_TAGS")         => Right(ContainerExpirationPolicyKeepEnum.TEN_TAGS)
      case __StringValue("TWENTY_FIVE_TAGS") => Right(ContainerExpirationPolicyKeepEnum.TWENTY_FIVE_TAGS)
      case __StringValue("FIFTY_TAGS")       => Right(ContainerExpirationPolicyKeepEnum.FIFTY_TAGS)
      case __StringValue("ONE_HUNDRED_TAGS") => Right(ContainerExpirationPolicyKeepEnum.ONE_HUNDRED_TAGS)
      case other                             => Left(DecodingError(s"Can't build ContainerExpirationPolicyKeepEnum from input $other"))
    }

    implicit val encoder: ArgEncoder[ContainerExpirationPolicyKeepEnum] = {
      case ContainerExpirationPolicyKeepEnum.ONE_TAG          => __EnumValue("ONE_TAG")
      case ContainerExpirationPolicyKeepEnum.FIVE_TAGS        => __EnumValue("FIVE_TAGS")
      case ContainerExpirationPolicyKeepEnum.TEN_TAGS         => __EnumValue("TEN_TAGS")
      case ContainerExpirationPolicyKeepEnum.TWENTY_FIVE_TAGS => __EnumValue("TWENTY_FIVE_TAGS")
      case ContainerExpirationPolicyKeepEnum.FIFTY_TAGS       => __EnumValue("FIFTY_TAGS")
      case ContainerExpirationPolicyKeepEnum.ONE_HUNDRED_TAGS => __EnumValue("ONE_HUNDRED_TAGS")
    }

    val values: Vector[ContainerExpirationPolicyKeepEnum] =
      Vector(ONE_TAG, FIVE_TAGS, TEN_TAGS, TWENTY_FIVE_TAGS, FIFTY_TAGS, ONE_HUNDRED_TAGS)
  }

  sealed trait ContainerExpirationPolicyOlderThanEnum extends scala.Product with scala.Serializable { def value: String }

  object ContainerExpirationPolicyOlderThanEnum {
    case object SEVEN_DAYS extends ContainerExpirationPolicyOlderThanEnum { val value: String = "SEVEN_DAYS" }
    case object FOURTEEN_DAYS extends ContainerExpirationPolicyOlderThanEnum { val value: String = "FOURTEEN_DAYS" }
    case object THIRTY_DAYS extends ContainerExpirationPolicyOlderThanEnum { val value: String = "THIRTY_DAYS" }
    case object NINETY_DAYS extends ContainerExpirationPolicyOlderThanEnum { val value: String = "NINETY_DAYS" }

    implicit val decoder: ScalarDecoder[ContainerExpirationPolicyOlderThanEnum] = {
      case __StringValue("SEVEN_DAYS")    => Right(ContainerExpirationPolicyOlderThanEnum.SEVEN_DAYS)
      case __StringValue("FOURTEEN_DAYS") => Right(ContainerExpirationPolicyOlderThanEnum.FOURTEEN_DAYS)
      case __StringValue("THIRTY_DAYS")   => Right(ContainerExpirationPolicyOlderThanEnum.THIRTY_DAYS)
      case __StringValue("NINETY_DAYS")   => Right(ContainerExpirationPolicyOlderThanEnum.NINETY_DAYS)
      case other                          => Left(DecodingError(s"Can't build ContainerExpirationPolicyOlderThanEnum from input $other"))
    }

    implicit val encoder: ArgEncoder[ContainerExpirationPolicyOlderThanEnum] = {
      case ContainerExpirationPolicyOlderThanEnum.SEVEN_DAYS    => __EnumValue("SEVEN_DAYS")
      case ContainerExpirationPolicyOlderThanEnum.FOURTEEN_DAYS => __EnumValue("FOURTEEN_DAYS")
      case ContainerExpirationPolicyOlderThanEnum.THIRTY_DAYS   => __EnumValue("THIRTY_DAYS")
      case ContainerExpirationPolicyOlderThanEnum.NINETY_DAYS   => __EnumValue("NINETY_DAYS")
    }

    val values: Vector[ContainerExpirationPolicyOlderThanEnum] = Vector(SEVEN_DAYS, FOURTEEN_DAYS, THIRTY_DAYS, NINETY_DAYS)
  }

  sealed trait ContainerRepositoryCleanupStatus extends scala.Product with scala.Serializable { def value: String }

  object ContainerRepositoryCleanupStatus {
    case object UNSCHEDULED extends ContainerRepositoryCleanupStatus { val value: String = "UNSCHEDULED" }
    case object SCHEDULED extends ContainerRepositoryCleanupStatus { val value: String = "SCHEDULED" }
    case object UNFINISHED extends ContainerRepositoryCleanupStatus { val value: String = "UNFINISHED" }
    case object ONGOING extends ContainerRepositoryCleanupStatus { val value: String = "ONGOING" }

    implicit val decoder: ScalarDecoder[ContainerRepositoryCleanupStatus] = {
      case __StringValue("UNSCHEDULED") => Right(ContainerRepositoryCleanupStatus.UNSCHEDULED)
      case __StringValue("SCHEDULED")   => Right(ContainerRepositoryCleanupStatus.SCHEDULED)
      case __StringValue("UNFINISHED")  => Right(ContainerRepositoryCleanupStatus.UNFINISHED)
      case __StringValue("ONGOING")     => Right(ContainerRepositoryCleanupStatus.ONGOING)
      case other                        => Left(DecodingError(s"Can't build ContainerRepositoryCleanupStatus from input $other"))
    }

    implicit val encoder: ArgEncoder[ContainerRepositoryCleanupStatus] = {
      case ContainerRepositoryCleanupStatus.UNSCHEDULED => __EnumValue("UNSCHEDULED")
      case ContainerRepositoryCleanupStatus.SCHEDULED   => __EnumValue("SCHEDULED")
      case ContainerRepositoryCleanupStatus.UNFINISHED  => __EnumValue("UNFINISHED")
      case ContainerRepositoryCleanupStatus.ONGOING     => __EnumValue("ONGOING")
    }

    val values: Vector[ContainerRepositoryCleanupStatus] = Vector(UNSCHEDULED, SCHEDULED, UNFINISHED, ONGOING)
  }

  sealed trait ContainerRepositorySort extends scala.Product with scala.Serializable { def value: String }

  object ContainerRepositorySort {
    case object updated_desc extends ContainerRepositorySort { val value: String = "updated_desc" }
    case object updated_asc extends ContainerRepositorySort { val value: String = "updated_asc" }
    case object created_desc extends ContainerRepositorySort { val value: String = "created_desc" }
    case object created_asc extends ContainerRepositorySort { val value: String = "created_asc" }
    case object UPDATED_DESC_1 extends ContainerRepositorySort { val value: String = "UPDATED_DESC_1" }
    case object UPDATED_ASC_1 extends ContainerRepositorySort { val value: String = "UPDATED_ASC_1" }
    case object CREATED_DESC_1 extends ContainerRepositorySort { val value: String = "CREATED_DESC_1" }
    case object CREATED_ASC_1 extends ContainerRepositorySort { val value: String = "CREATED_ASC_1" }
    case object NAME_ASC extends ContainerRepositorySort { val value: String = "NAME_ASC" }
    case object NAME_DESC extends ContainerRepositorySort { val value: String = "NAME_DESC" }

    implicit val decoder: ScalarDecoder[ContainerRepositorySort] = {
      case __StringValue("updated_desc") => Right(ContainerRepositorySort.updated_desc)
      case __StringValue("updated_asc")  => Right(ContainerRepositorySort.updated_asc)
      case __StringValue("created_desc") => Right(ContainerRepositorySort.created_desc)
      case __StringValue("created_asc")  => Right(ContainerRepositorySort.created_asc)
      case __StringValue("UPDATED_DESC") => Right(ContainerRepositorySort.UPDATED_DESC_1)
      case __StringValue("UPDATED_ASC")  => Right(ContainerRepositorySort.UPDATED_ASC_1)
      case __StringValue("CREATED_DESC") => Right(ContainerRepositorySort.CREATED_DESC_1)
      case __StringValue("CREATED_ASC")  => Right(ContainerRepositorySort.CREATED_ASC_1)
      case __StringValue("NAME_ASC")     => Right(ContainerRepositorySort.NAME_ASC)
      case __StringValue("NAME_DESC")    => Right(ContainerRepositorySort.NAME_DESC)
      case other                         => Left(DecodingError(s"Can't build ContainerRepositorySort from input $other"))
    }

    implicit val encoder: ArgEncoder[ContainerRepositorySort] = {
      case ContainerRepositorySort.updated_desc   => __EnumValue("updated_desc")
      case ContainerRepositorySort.updated_asc    => __EnumValue("updated_asc")
      case ContainerRepositorySort.created_desc   => __EnumValue("created_desc")
      case ContainerRepositorySort.created_asc    => __EnumValue("created_asc")
      case ContainerRepositorySort.UPDATED_DESC_1 => __EnumValue("UPDATED_DESC")
      case ContainerRepositorySort.UPDATED_ASC_1  => __EnumValue("UPDATED_ASC")
      case ContainerRepositorySort.CREATED_DESC_1 => __EnumValue("CREATED_DESC")
      case ContainerRepositorySort.CREATED_ASC_1  => __EnumValue("CREATED_ASC")
      case ContainerRepositorySort.NAME_ASC       => __EnumValue("NAME_ASC")
      case ContainerRepositorySort.NAME_DESC      => __EnumValue("NAME_DESC")
    }

    val values: Vector[ContainerRepositorySort] = Vector(
      updated_desc,
      updated_asc,
      created_desc,
      created_asc,
      UPDATED_DESC_1,
      UPDATED_ASC_1,
      CREATED_DESC_1,
      CREATED_ASC_1,
      NAME_ASC,
      NAME_DESC
    )

  }

  sealed trait ContainerRepositoryStatus extends scala.Product with scala.Serializable { def value: String }

  object ContainerRepositoryStatus {
    case object DELETE_SCHEDULED extends ContainerRepositoryStatus { val value: String = "DELETE_SCHEDULED" }
    case object DELETE_FAILED extends ContainerRepositoryStatus { val value: String = "DELETE_FAILED" }

    implicit val decoder: ScalarDecoder[ContainerRepositoryStatus] = {
      case __StringValue("DELETE_SCHEDULED") => Right(ContainerRepositoryStatus.DELETE_SCHEDULED)
      case __StringValue("DELETE_FAILED")    => Right(ContainerRepositoryStatus.DELETE_FAILED)
      case other                             => Left(DecodingError(s"Can't build ContainerRepositoryStatus from input $other"))
    }

    implicit val encoder: ArgEncoder[ContainerRepositoryStatus] = {
      case ContainerRepositoryStatus.DELETE_SCHEDULED => __EnumValue("DELETE_SCHEDULED")
      case ContainerRepositoryStatus.DELETE_FAILED    => __EnumValue("DELETE_FAILED")
    }

    val values: Vector[ContainerRepositoryStatus] = Vector(DELETE_SCHEDULED, DELETE_FAILED)
  }

  sealed trait DastScanTypeEnum extends scala.Product with scala.Serializable { def value: String }

  object DastScanTypeEnum {
    case object PASSIVE extends DastScanTypeEnum { val value: String = "PASSIVE" }
    case object ACTIVE extends DastScanTypeEnum { val value: String = "ACTIVE" }

    implicit val decoder: ScalarDecoder[DastScanTypeEnum] = {
      case __StringValue("PASSIVE") => Right(DastScanTypeEnum.PASSIVE)
      case __StringValue("ACTIVE")  => Right(DastScanTypeEnum.ACTIVE)
      case other                    => Left(DecodingError(s"Can't build DastScanTypeEnum from input $other"))
    }

    implicit val encoder: ArgEncoder[DastScanTypeEnum] = {
      case DastScanTypeEnum.PASSIVE => __EnumValue("PASSIVE")
      case DastScanTypeEnum.ACTIVE  => __EnumValue("ACTIVE")
    }

    val values: Vector[DastScanTypeEnum] = Vector(PASSIVE, ACTIVE)
  }

  sealed trait DastSiteProfileValidationStatusEnum extends scala.Product with scala.Serializable { def value: String }

  object DastSiteProfileValidationStatusEnum {
    case object NONE extends DastSiteProfileValidationStatusEnum { val value: String = "NONE" }
    case object PENDING_VALIDATION extends DastSiteProfileValidationStatusEnum { val value: String = "PENDING_VALIDATION" }
    case object INPROGRESS_VALIDATION extends DastSiteProfileValidationStatusEnum { val value: String = "INPROGRESS_VALIDATION" }
    case object PASSED_VALIDATION extends DastSiteProfileValidationStatusEnum { val value: String = "PASSED_VALIDATION" }
    case object FAILED_VALIDATION extends DastSiteProfileValidationStatusEnum { val value: String = "FAILED_VALIDATION" }

    implicit val decoder: ScalarDecoder[DastSiteProfileValidationStatusEnum] = {
      case __StringValue("NONE")                  => Right(DastSiteProfileValidationStatusEnum.NONE)
      case __StringValue("PENDING_VALIDATION")    => Right(DastSiteProfileValidationStatusEnum.PENDING_VALIDATION)
      case __StringValue("INPROGRESS_VALIDATION") => Right(DastSiteProfileValidationStatusEnum.INPROGRESS_VALIDATION)
      case __StringValue("PASSED_VALIDATION")     => Right(DastSiteProfileValidationStatusEnum.PASSED_VALIDATION)
      case __StringValue("FAILED_VALIDATION")     => Right(DastSiteProfileValidationStatusEnum.FAILED_VALIDATION)
      case other => Left(DecodingError(s"Can't build DastSiteProfileValidationStatusEnum from input $other"))
    }

    implicit val encoder: ArgEncoder[DastSiteProfileValidationStatusEnum] = {
      case DastSiteProfileValidationStatusEnum.NONE                  => __EnumValue("NONE")
      case DastSiteProfileValidationStatusEnum.PENDING_VALIDATION    => __EnumValue("PENDING_VALIDATION")
      case DastSiteProfileValidationStatusEnum.INPROGRESS_VALIDATION => __EnumValue("INPROGRESS_VALIDATION")
      case DastSiteProfileValidationStatusEnum.PASSED_VALIDATION     => __EnumValue("PASSED_VALIDATION")
      case DastSiteProfileValidationStatusEnum.FAILED_VALIDATION     => __EnumValue("FAILED_VALIDATION")
    }

    val values: Vector[DastSiteProfileValidationStatusEnum] =
      Vector(NONE, PENDING_VALIDATION, INPROGRESS_VALIDATION, PASSED_VALIDATION, FAILED_VALIDATION)
  }

  sealed trait DastSiteValidationStrategyEnum extends scala.Product with scala.Serializable { def value: String }

  object DastSiteValidationStrategyEnum {
    case object TEXT_FILE extends DastSiteValidationStrategyEnum { val value: String = "TEXT_FILE" }
    case object HEADER extends DastSiteValidationStrategyEnum { val value: String = "HEADER" }

    implicit val decoder: ScalarDecoder[DastSiteValidationStrategyEnum] = {
      case __StringValue("TEXT_FILE") => Right(DastSiteValidationStrategyEnum.TEXT_FILE)
      case __StringValue("HEADER")    => Right(DastSiteValidationStrategyEnum.HEADER)
      case other                      => Left(DecodingError(s"Can't build DastSiteValidationStrategyEnum from input $other"))
    }

    implicit val encoder: ArgEncoder[DastSiteValidationStrategyEnum] = {
      case DastSiteValidationStrategyEnum.TEXT_FILE => __EnumValue("TEXT_FILE")
      case DastSiteValidationStrategyEnum.HEADER    => __EnumValue("HEADER")
    }

    val values: Vector[DastSiteValidationStrategyEnum] = Vector(TEXT_FILE, HEADER)
  }

  sealed trait DastTargetTypeEnum extends scala.Product with scala.Serializable { def value: String }

  object DastTargetTypeEnum {
    case object WEBSITE extends DastTargetTypeEnum { val value: String = "WEBSITE" }
    case object API extends DastTargetTypeEnum { val value: String = "API" }

    implicit val decoder: ScalarDecoder[DastTargetTypeEnum] = {
      case __StringValue("WEBSITE") => Right(DastTargetTypeEnum.WEBSITE)
      case __StringValue("API")     => Right(DastTargetTypeEnum.API)
      case other                    => Left(DecodingError(s"Can't build DastTargetTypeEnum from input $other"))
    }

    implicit val encoder: ArgEncoder[DastTargetTypeEnum] = {
      case DastTargetTypeEnum.WEBSITE => __EnumValue("WEBSITE")
      case DastTargetTypeEnum.API     => __EnumValue("API")
    }

    val values: Vector[DastTargetTypeEnum] = Vector(WEBSITE, API)
  }

  sealed trait DataVisualizationColorEnum extends scala.Product with scala.Serializable { def value: String }

  object DataVisualizationColorEnum {
    case object BLUE extends DataVisualizationColorEnum { val value: String = "BLUE" }
    case object ORANGE extends DataVisualizationColorEnum { val value: String = "ORANGE" }
    case object AQUA extends DataVisualizationColorEnum { val value: String = "AQUA" }
    case object GREEN extends DataVisualizationColorEnum { val value: String = "GREEN" }
    case object MAGENTA extends DataVisualizationColorEnum { val value: String = "MAGENTA" }

    implicit val decoder: ScalarDecoder[DataVisualizationColorEnum] = {
      case __StringValue("BLUE")    => Right(DataVisualizationColorEnum.BLUE)
      case __StringValue("ORANGE")  => Right(DataVisualizationColorEnum.ORANGE)
      case __StringValue("AQUA")    => Right(DataVisualizationColorEnum.AQUA)
      case __StringValue("GREEN")   => Right(DataVisualizationColorEnum.GREEN)
      case __StringValue("MAGENTA") => Right(DataVisualizationColorEnum.MAGENTA)
      case other                    => Left(DecodingError(s"Can't build DataVisualizationColorEnum from input $other"))
    }

    implicit val encoder: ArgEncoder[DataVisualizationColorEnum] = {
      case DataVisualizationColorEnum.BLUE    => __EnumValue("BLUE")
      case DataVisualizationColorEnum.ORANGE  => __EnumValue("ORANGE")
      case DataVisualizationColorEnum.AQUA    => __EnumValue("AQUA")
      case DataVisualizationColorEnum.GREEN   => __EnumValue("GREEN")
      case DataVisualizationColorEnum.MAGENTA => __EnumValue("MAGENTA")
    }

    val values: Vector[DataVisualizationColorEnum] = Vector(BLUE, ORANGE, AQUA, GREEN, MAGENTA)
  }

  sealed trait DataVisualizationWeightEnum extends scala.Product with scala.Serializable { def value: String }

  object DataVisualizationWeightEnum {
    case object WEIGHT_50 extends DataVisualizationWeightEnum { val value: String = "WEIGHT_50" }
    case object WEIGHT_100 extends DataVisualizationWeightEnum { val value: String = "WEIGHT_100" }
    case object WEIGHT_200 extends DataVisualizationWeightEnum { val value: String = "WEIGHT_200" }
    case object WEIGHT_300 extends DataVisualizationWeightEnum { val value: String = "WEIGHT_300" }
    case object WEIGHT_400 extends DataVisualizationWeightEnum { val value: String = "WEIGHT_400" }
    case object WEIGHT_500 extends DataVisualizationWeightEnum { val value: String = "WEIGHT_500" }
    case object WEIGHT_600 extends DataVisualizationWeightEnum { val value: String = "WEIGHT_600" }
    case object WEIGHT_700 extends DataVisualizationWeightEnum { val value: String = "WEIGHT_700" }
    case object WEIGHT_800 extends DataVisualizationWeightEnum { val value: String = "WEIGHT_800" }
    case object WEIGHT_900 extends DataVisualizationWeightEnum { val value: String = "WEIGHT_900" }
    case object WEIGHT_950 extends DataVisualizationWeightEnum { val value: String = "WEIGHT_950" }

    implicit val decoder: ScalarDecoder[DataVisualizationWeightEnum] = {
      case __StringValue("WEIGHT_50")  => Right(DataVisualizationWeightEnum.WEIGHT_50)
      case __StringValue("WEIGHT_100") => Right(DataVisualizationWeightEnum.WEIGHT_100)
      case __StringValue("WEIGHT_200") => Right(DataVisualizationWeightEnum.WEIGHT_200)
      case __StringValue("WEIGHT_300") => Right(DataVisualizationWeightEnum.WEIGHT_300)
      case __StringValue("WEIGHT_400") => Right(DataVisualizationWeightEnum.WEIGHT_400)
      case __StringValue("WEIGHT_500") => Right(DataVisualizationWeightEnum.WEIGHT_500)
      case __StringValue("WEIGHT_600") => Right(DataVisualizationWeightEnum.WEIGHT_600)
      case __StringValue("WEIGHT_700") => Right(DataVisualizationWeightEnum.WEIGHT_700)
      case __StringValue("WEIGHT_800") => Right(DataVisualizationWeightEnum.WEIGHT_800)
      case __StringValue("WEIGHT_900") => Right(DataVisualizationWeightEnum.WEIGHT_900)
      case __StringValue("WEIGHT_950") => Right(DataVisualizationWeightEnum.WEIGHT_950)
      case other                       => Left(DecodingError(s"Can't build DataVisualizationWeightEnum from input $other"))
    }

    implicit val encoder: ArgEncoder[DataVisualizationWeightEnum] = {
      case DataVisualizationWeightEnum.WEIGHT_50  => __EnumValue("WEIGHT_50")
      case DataVisualizationWeightEnum.WEIGHT_100 => __EnumValue("WEIGHT_100")
      case DataVisualizationWeightEnum.WEIGHT_200 => __EnumValue("WEIGHT_200")
      case DataVisualizationWeightEnum.WEIGHT_300 => __EnumValue("WEIGHT_300")
      case DataVisualizationWeightEnum.WEIGHT_400 => __EnumValue("WEIGHT_400")
      case DataVisualizationWeightEnum.WEIGHT_500 => __EnumValue("WEIGHT_500")
      case DataVisualizationWeightEnum.WEIGHT_600 => __EnumValue("WEIGHT_600")
      case DataVisualizationWeightEnum.WEIGHT_700 => __EnumValue("WEIGHT_700")
      case DataVisualizationWeightEnum.WEIGHT_800 => __EnumValue("WEIGHT_800")
      case DataVisualizationWeightEnum.WEIGHT_900 => __EnumValue("WEIGHT_900")
      case DataVisualizationWeightEnum.WEIGHT_950 => __EnumValue("WEIGHT_950")
    }

    val values: Vector[DataVisualizationWeightEnum] = Vector(
      WEIGHT_50,
      WEIGHT_100,
      WEIGHT_200,
      WEIGHT_300,
      WEIGHT_400,
      WEIGHT_500,
      WEIGHT_600,
      WEIGHT_700,
      WEIGHT_800,
      WEIGHT_900,
      WEIGHT_950
    )

  }

  sealed trait DeploymentTier extends scala.Product with scala.Serializable { def value: String }

  object DeploymentTier {
    case object PRODUCTION extends DeploymentTier { val value: String = "PRODUCTION" }
    case object STAGING extends DeploymentTier { val value: String = "STAGING" }
    case object TESTING extends DeploymentTier { val value: String = "TESTING" }
    case object DEVELOPMENT extends DeploymentTier { val value: String = "DEVELOPMENT" }
    case object OTHER extends DeploymentTier { val value: String = "OTHER" }

    implicit val decoder: ScalarDecoder[DeploymentTier] = {
      case __StringValue("PRODUCTION")  => Right(DeploymentTier.PRODUCTION)
      case __StringValue("STAGING")     => Right(DeploymentTier.STAGING)
      case __StringValue("TESTING")     => Right(DeploymentTier.TESTING)
      case __StringValue("DEVELOPMENT") => Right(DeploymentTier.DEVELOPMENT)
      case __StringValue("OTHER")       => Right(DeploymentTier.OTHER)
      case other                        => Left(DecodingError(s"Can't build DeploymentTier from input $other"))
    }

    implicit val encoder: ArgEncoder[DeploymentTier] = {
      case DeploymentTier.PRODUCTION  => __EnumValue("PRODUCTION")
      case DeploymentTier.STAGING     => __EnumValue("STAGING")
      case DeploymentTier.TESTING     => __EnumValue("TESTING")
      case DeploymentTier.DEVELOPMENT => __EnumValue("DEVELOPMENT")
      case DeploymentTier.OTHER       => __EnumValue("OTHER")
    }

    val values: Vector[DeploymentTier] = Vector(PRODUCTION, STAGING, TESTING, DEVELOPMENT, OTHER)
  }

  sealed trait DesignCollectionCopyState extends scala.Product with scala.Serializable { def value: String }

  object DesignCollectionCopyState {
    case object READY extends DesignCollectionCopyState { val value: String = "READY" }
    case object IN_PROGRESS extends DesignCollectionCopyState { val value: String = "IN_PROGRESS" }
    case object ERROR extends DesignCollectionCopyState { val value: String = "ERROR" }

    implicit val decoder: ScalarDecoder[DesignCollectionCopyState] = {
      case __StringValue("READY")       => Right(DesignCollectionCopyState.READY)
      case __StringValue("IN_PROGRESS") => Right(DesignCollectionCopyState.IN_PROGRESS)
      case __StringValue("ERROR")       => Right(DesignCollectionCopyState.ERROR)
      case other                        => Left(DecodingError(s"Can't build DesignCollectionCopyState from input $other"))
    }

    implicit val encoder: ArgEncoder[DesignCollectionCopyState] = {
      case DesignCollectionCopyState.READY       => __EnumValue("READY")
      case DesignCollectionCopyState.IN_PROGRESS => __EnumValue("IN_PROGRESS")
      case DesignCollectionCopyState.ERROR       => __EnumValue("ERROR")
    }

    val values: Vector[DesignCollectionCopyState] = Vector(READY, IN_PROGRESS, ERROR)
  }

  sealed trait DesignVersionEvent extends scala.Product with scala.Serializable { def value: String }

  object DesignVersionEvent {
    case object NONE extends DesignVersionEvent { val value: String = "NONE" }
    case object CREATION extends DesignVersionEvent { val value: String = "CREATION" }
    case object MODIFICATION extends DesignVersionEvent { val value: String = "MODIFICATION" }
    case object DELETION extends DesignVersionEvent { val value: String = "DELETION" }

    implicit val decoder: ScalarDecoder[DesignVersionEvent] = {
      case __StringValue("NONE")         => Right(DesignVersionEvent.NONE)
      case __StringValue("CREATION")     => Right(DesignVersionEvent.CREATION)
      case __StringValue("MODIFICATION") => Right(DesignVersionEvent.MODIFICATION)
      case __StringValue("DELETION")     => Right(DesignVersionEvent.DELETION)
      case other                         => Left(DecodingError(s"Can't build DesignVersionEvent from input $other"))
    }

    implicit val encoder: ArgEncoder[DesignVersionEvent] = {
      case DesignVersionEvent.NONE         => __EnumValue("NONE")
      case DesignVersionEvent.CREATION     => __EnumValue("CREATION")
      case DesignVersionEvent.MODIFICATION => __EnumValue("MODIFICATION")
      case DesignVersionEvent.DELETION     => __EnumValue("DELETION")
    }

    val values: Vector[DesignVersionEvent] = Vector(NONE, CREATION, MODIFICATION, DELETION)
  }

  sealed trait DiffPositionType extends scala.Product with scala.Serializable { def value: String }

  object DiffPositionType {
    case object text extends DiffPositionType { val value: String = "text" }
    case object image extends DiffPositionType { val value: String = "image" }

    implicit val decoder: ScalarDecoder[DiffPositionType] = {
      case __StringValue("text")  => Right(DiffPositionType.text)
      case __StringValue("image") => Right(DiffPositionType.image)
      case other                  => Left(DecodingError(s"Can't build DiffPositionType from input $other"))
    }

    implicit val encoder: ArgEncoder[DiffPositionType] = {
      case DiffPositionType.text  => __EnumValue("text")
      case DiffPositionType.image => __EnumValue("image")
    }

    val values: Vector[DiffPositionType] = Vector(text, image)
  }

  sealed trait DoraMetricBucketingInterval extends scala.Product with scala.Serializable { def value: String }

  object DoraMetricBucketingInterval {
    case object ALL extends DoraMetricBucketingInterval { val value: String = "ALL" }
    case object MONTHLY extends DoraMetricBucketingInterval { val value: String = "MONTHLY" }
    case object DAILY extends DoraMetricBucketingInterval { val value: String = "DAILY" }

    implicit val decoder: ScalarDecoder[DoraMetricBucketingInterval] = {
      case __StringValue("ALL")     => Right(DoraMetricBucketingInterval.ALL)
      case __StringValue("MONTHLY") => Right(DoraMetricBucketingInterval.MONTHLY)
      case __StringValue("DAILY")   => Right(DoraMetricBucketingInterval.DAILY)
      case other                    => Left(DecodingError(s"Can't build DoraMetricBucketingInterval from input $other"))
    }

    implicit val encoder: ArgEncoder[DoraMetricBucketingInterval] = {
      case DoraMetricBucketingInterval.ALL     => __EnumValue("ALL")
      case DoraMetricBucketingInterval.MONTHLY => __EnumValue("MONTHLY")
      case DoraMetricBucketingInterval.DAILY   => __EnumValue("DAILY")
    }

    val values: Vector[DoraMetricBucketingInterval] = Vector(ALL, MONTHLY, DAILY)
  }

  sealed trait DoraMetricType extends scala.Product with scala.Serializable { def value: String }

  object DoraMetricType {
    case object DEPLOYMENT_FREQUENCY extends DoraMetricType { val value: String = "DEPLOYMENT_FREQUENCY" }
    case object LEAD_TIME_FOR_CHANGES extends DoraMetricType { val value: String = "LEAD_TIME_FOR_CHANGES" }

    implicit val decoder: ScalarDecoder[DoraMetricType] = {
      case __StringValue("DEPLOYMENT_FREQUENCY")  => Right(DoraMetricType.DEPLOYMENT_FREQUENCY)
      case __StringValue("LEAD_TIME_FOR_CHANGES") => Right(DoraMetricType.LEAD_TIME_FOR_CHANGES)
      case other                                  => Left(DecodingError(s"Can't build DoraMetricType from input $other"))
    }

    implicit val encoder: ArgEncoder[DoraMetricType] = {
      case DoraMetricType.DEPLOYMENT_FREQUENCY  => __EnumValue("DEPLOYMENT_FREQUENCY")
      case DoraMetricType.LEAD_TIME_FOR_CHANGES => __EnumValue("LEAD_TIME_FOR_CHANGES")
    }

    val values: Vector[DoraMetricType] = Vector(DEPLOYMENT_FREQUENCY, LEAD_TIME_FOR_CHANGES)
  }

  sealed trait EntryType extends scala.Product with scala.Serializable { def value: String }

  object EntryType {
    case object tree extends EntryType { val value: String = "tree" }
    case object blob extends EntryType { val value: String = "blob" }
    case object commit extends EntryType { val value: String = "commit" }

    implicit val decoder: ScalarDecoder[EntryType] = {
      case __StringValue("tree")   => Right(EntryType.tree)
      case __StringValue("blob")   => Right(EntryType.blob)
      case __StringValue("commit") => Right(EntryType.commit)
      case other                   => Left(DecodingError(s"Can't build EntryType from input $other"))
    }

    implicit val encoder: ArgEncoder[EntryType] = {
      case EntryType.tree   => __EnumValue("tree")
      case EntryType.blob   => __EnumValue("blob")
      case EntryType.commit => __EnumValue("commit")
    }

    val values: Vector[EntryType] = Vector(tree, blob, commit)
  }

  sealed trait EpicSort extends scala.Product with scala.Serializable { def value: String }

  object EpicSort {
    case object start_date_desc extends EpicSort { val value: String = "start_date_desc" }
    case object start_date_asc extends EpicSort { val value: String = "start_date_asc" }
    case object end_date_desc extends EpicSort { val value: String = "end_date_desc" }
    case object end_date_asc extends EpicSort { val value: String = "end_date_asc" }
    case object START_DATE_DESC_1 extends EpicSort { val value: String = "START_DATE_DESC_1" }
    case object START_DATE_ASC_1 extends EpicSort { val value: String = "START_DATE_ASC_1" }
    case object END_DATE_DESC_1 extends EpicSort { val value: String = "END_DATE_DESC_1" }
    case object END_DATE_ASC_1 extends EpicSort { val value: String = "END_DATE_ASC_1" }
    case object TITLE_DESC extends EpicSort { val value: String = "TITLE_DESC" }
    case object TITLE_ASC extends EpicSort { val value: String = "TITLE_ASC" }

    implicit val decoder: ScalarDecoder[EpicSort] = {
      case __StringValue("start_date_desc") => Right(EpicSort.start_date_desc)
      case __StringValue("start_date_asc")  => Right(EpicSort.start_date_asc)
      case __StringValue("end_date_desc")   => Right(EpicSort.end_date_desc)
      case __StringValue("end_date_asc")    => Right(EpicSort.end_date_asc)
      case __StringValue("START_DATE_DESC") => Right(EpicSort.START_DATE_DESC_1)
      case __StringValue("START_DATE_ASC")  => Right(EpicSort.START_DATE_ASC_1)
      case __StringValue("END_DATE_DESC")   => Right(EpicSort.END_DATE_DESC_1)
      case __StringValue("END_DATE_ASC")    => Right(EpicSort.END_DATE_ASC_1)
      case __StringValue("TITLE_DESC")      => Right(EpicSort.TITLE_DESC)
      case __StringValue("TITLE_ASC")       => Right(EpicSort.TITLE_ASC)
      case other                            => Left(DecodingError(s"Can't build EpicSort from input $other"))
    }

    implicit val encoder: ArgEncoder[EpicSort] = {
      case EpicSort.start_date_desc   => __EnumValue("start_date_desc")
      case EpicSort.start_date_asc    => __EnumValue("start_date_asc")
      case EpicSort.end_date_desc     => __EnumValue("end_date_desc")
      case EpicSort.end_date_asc      => __EnumValue("end_date_asc")
      case EpicSort.START_DATE_DESC_1 => __EnumValue("START_DATE_DESC")
      case EpicSort.START_DATE_ASC_1  => __EnumValue("START_DATE_ASC")
      case EpicSort.END_DATE_DESC_1   => __EnumValue("END_DATE_DESC")
      case EpicSort.END_DATE_ASC_1    => __EnumValue("END_DATE_ASC")
      case EpicSort.TITLE_DESC        => __EnumValue("TITLE_DESC")
      case EpicSort.TITLE_ASC         => __EnumValue("TITLE_ASC")
    }

    val values: Vector[EpicSort] = Vector(
      start_date_desc,
      start_date_asc,
      end_date_desc,
      end_date_asc,
      START_DATE_DESC_1,
      START_DATE_ASC_1,
      END_DATE_DESC_1,
      END_DATE_ASC_1,
      TITLE_DESC,
      TITLE_ASC
    )

  }

  sealed trait EpicState extends scala.Product with scala.Serializable { def value: String }

  object EpicState {
    case object all extends EpicState { val value: String = "all" }
    case object opened extends EpicState { val value: String = "opened" }
    case object closed extends EpicState { val value: String = "closed" }

    implicit val decoder: ScalarDecoder[EpicState] = {
      case __StringValue("all")    => Right(EpicState.all)
      case __StringValue("opened") => Right(EpicState.opened)
      case __StringValue("closed") => Right(EpicState.closed)
      case other                   => Left(DecodingError(s"Can't build EpicState from input $other"))
    }

    implicit val encoder: ArgEncoder[EpicState] = {
      case EpicState.all    => __EnumValue("all")
      case EpicState.opened => __EnumValue("opened")
      case EpicState.closed => __EnumValue("closed")
    }

    val values: Vector[EpicState] = Vector(all, opened, closed)
  }

  sealed trait EpicStateEvent extends scala.Product with scala.Serializable { def value: String }

  object EpicStateEvent {
    case object REOPEN extends EpicStateEvent { val value: String = "REOPEN" }
    case object CLOSE extends EpicStateEvent { val value: String = "CLOSE" }

    implicit val decoder: ScalarDecoder[EpicStateEvent] = {
      case __StringValue("REOPEN") => Right(EpicStateEvent.REOPEN)
      case __StringValue("CLOSE")  => Right(EpicStateEvent.CLOSE)
      case other                   => Left(DecodingError(s"Can't build EpicStateEvent from input $other"))
    }

    implicit val encoder: ArgEncoder[EpicStateEvent] = {
      case EpicStateEvent.REOPEN => __EnumValue("REOPEN")
      case EpicStateEvent.CLOSE  => __EnumValue("CLOSE")
    }

    val values: Vector[EpicStateEvent] = Vector(REOPEN, CLOSE)
  }

  sealed trait EpicWildcardId extends scala.Product with scala.Serializable { def value: String }

  object EpicWildcardId {
    case object NONE extends EpicWildcardId { val value: String = "NONE" }
    case object ANY extends EpicWildcardId { val value: String = "ANY" }

    implicit val decoder: ScalarDecoder[EpicWildcardId] = {
      case __StringValue("NONE") => Right(EpicWildcardId.NONE)
      case __StringValue("ANY")  => Right(EpicWildcardId.ANY)
      case other                 => Left(DecodingError(s"Can't build EpicWildcardId from input $other"))
    }

    implicit val encoder: ArgEncoder[EpicWildcardId] = {
      case EpicWildcardId.NONE => __EnumValue("NONE")
      case EpicWildcardId.ANY  => __EnumValue("ANY")
    }

    val values: Vector[EpicWildcardId] = Vector(NONE, ANY)
  }

  sealed trait EscalationRuleStatus extends scala.Product with scala.Serializable { def value: String }

  object EscalationRuleStatus {
    case object ACKNOWLEDGED extends EscalationRuleStatus { val value: String = "ACKNOWLEDGED" }
    case object RESOLVED extends EscalationRuleStatus { val value: String = "RESOLVED" }

    implicit val decoder: ScalarDecoder[EscalationRuleStatus] = {
      case __StringValue("ACKNOWLEDGED") => Right(EscalationRuleStatus.ACKNOWLEDGED)
      case __StringValue("RESOLVED")     => Right(EscalationRuleStatus.RESOLVED)
      case other                         => Left(DecodingError(s"Can't build EscalationRuleStatus from input $other"))
    }

    implicit val encoder: ArgEncoder[EscalationRuleStatus] = {
      case EscalationRuleStatus.ACKNOWLEDGED => __EnumValue("ACKNOWLEDGED")
      case EscalationRuleStatus.RESOLVED     => __EnumValue("RESOLVED")
    }

    val values: Vector[EscalationRuleStatus] = Vector(ACKNOWLEDGED, RESOLVED)
  }

  sealed trait EventAction extends scala.Product with scala.Serializable { def value: String }

  object EventAction {
    case object CREATED extends EventAction { val value: String = "CREATED" }
    case object UPDATED extends EventAction { val value: String = "UPDATED" }
    case object CLOSED extends EventAction { val value: String = "CLOSED" }
    case object REOPENED extends EventAction { val value: String = "REOPENED" }
    case object PUSHED extends EventAction { val value: String = "PUSHED" }
    case object COMMENTED extends EventAction { val value: String = "COMMENTED" }
    case object MERGED extends EventAction { val value: String = "MERGED" }
    case object JOINED extends EventAction { val value: String = "JOINED" }
    case object LEFT extends EventAction { val value: String = "LEFT" }
    case object DESTROYED extends EventAction { val value: String = "DESTROYED" }
    case object EXPIRED extends EventAction { val value: String = "EXPIRED" }
    case object APPROVED extends EventAction { val value: String = "APPROVED" }

    implicit val decoder: ScalarDecoder[EventAction] = {
      case __StringValue("CREATED")   => Right(EventAction.CREATED)
      case __StringValue("UPDATED")   => Right(EventAction.UPDATED)
      case __StringValue("CLOSED")    => Right(EventAction.CLOSED)
      case __StringValue("REOPENED")  => Right(EventAction.REOPENED)
      case __StringValue("PUSHED")    => Right(EventAction.PUSHED)
      case __StringValue("COMMENTED") => Right(EventAction.COMMENTED)
      case __StringValue("MERGED")    => Right(EventAction.MERGED)
      case __StringValue("JOINED")    => Right(EventAction.JOINED)
      case __StringValue("LEFT")      => Right(EventAction.LEFT)
      case __StringValue("DESTROYED") => Right(EventAction.DESTROYED)
      case __StringValue("EXPIRED")   => Right(EventAction.EXPIRED)
      case __StringValue("APPROVED")  => Right(EventAction.APPROVED)
      case other                      => Left(DecodingError(s"Can't build EventAction from input $other"))
    }

    implicit val encoder: ArgEncoder[EventAction] = {
      case EventAction.CREATED   => __EnumValue("CREATED")
      case EventAction.UPDATED   => __EnumValue("UPDATED")
      case EventAction.CLOSED    => __EnumValue("CLOSED")
      case EventAction.REOPENED  => __EnumValue("REOPENED")
      case EventAction.PUSHED    => __EnumValue("PUSHED")
      case EventAction.COMMENTED => __EnumValue("COMMENTED")
      case EventAction.MERGED    => __EnumValue("MERGED")
      case EventAction.JOINED    => __EnumValue("JOINED")
      case EventAction.LEFT      => __EnumValue("LEFT")
      case EventAction.DESTROYED => __EnumValue("DESTROYED")
      case EventAction.EXPIRED   => __EnumValue("EXPIRED")
      case EventAction.APPROVED  => __EnumValue("APPROVED")
    }

    val values: Vector[EventAction] =
      Vector(CREATED, UPDATED, CLOSED, REOPENED, PUSHED, COMMENTED, MERGED, JOINED, LEFT, DESTROYED, EXPIRED, APPROVED)
  }

  sealed trait GroupMemberRelation extends scala.Product with scala.Serializable { def value: String }

  object GroupMemberRelation {
    case object DIRECT extends GroupMemberRelation { val value: String = "DIRECT" }
    case object INHERITED extends GroupMemberRelation { val value: String = "INHERITED" }
    case object DESCENDANTS extends GroupMemberRelation { val value: String = "DESCENDANTS" }

    implicit val decoder: ScalarDecoder[GroupMemberRelation] = {
      case __StringValue("DIRECT")      => Right(GroupMemberRelation.DIRECT)
      case __StringValue("INHERITED")   => Right(GroupMemberRelation.INHERITED)
      case __StringValue("DESCENDANTS") => Right(GroupMemberRelation.DESCENDANTS)
      case other                        => Left(DecodingError(s"Can't build GroupMemberRelation from input $other"))
    }

    implicit val encoder: ArgEncoder[GroupMemberRelation] = {
      case GroupMemberRelation.DIRECT      => __EnumValue("DIRECT")
      case GroupMemberRelation.INHERITED   => __EnumValue("INHERITED")
      case GroupMemberRelation.DESCENDANTS => __EnumValue("DESCENDANTS")
    }

    val values: Vector[GroupMemberRelation] = Vector(DIRECT, INHERITED, DESCENDANTS)
  }

  sealed trait HealthStatus extends scala.Product with scala.Serializable { def value: String }

  object HealthStatus {
    case object onTrack extends HealthStatus { val value: String = "onTrack" }
    case object needsAttention extends HealthStatus { val value: String = "needsAttention" }
    case object atRisk extends HealthStatus { val value: String = "atRisk" }

    implicit val decoder: ScalarDecoder[HealthStatus] = {
      case __StringValue("onTrack")        => Right(HealthStatus.onTrack)
      case __StringValue("needsAttention") => Right(HealthStatus.needsAttention)
      case __StringValue("atRisk")         => Right(HealthStatus.atRisk)
      case other                           => Left(DecodingError(s"Can't build HealthStatus from input $other"))
    }

    implicit val encoder: ArgEncoder[HealthStatus] = {
      case HealthStatus.onTrack        => __EnumValue("onTrack")
      case HealthStatus.needsAttention => __EnumValue("needsAttention")
      case HealthStatus.atRisk         => __EnumValue("atRisk")
    }

    val values: Vector[HealthStatus] = Vector(onTrack, needsAttention, atRisk)
  }

  sealed trait IssuableSearchableField extends scala.Product with scala.Serializable { def value: String }

  object IssuableSearchableField {
    case object TITLE extends IssuableSearchableField { val value: String = "TITLE" }
    case object DESCRIPTION extends IssuableSearchableField { val value: String = "DESCRIPTION" }

    implicit val decoder: ScalarDecoder[IssuableSearchableField] = {
      case __StringValue("TITLE")       => Right(IssuableSearchableField.TITLE)
      case __StringValue("DESCRIPTION") => Right(IssuableSearchableField.DESCRIPTION)
      case other                        => Left(DecodingError(s"Can't build IssuableSearchableField from input $other"))
    }

    implicit val encoder: ArgEncoder[IssuableSearchableField] = {
      case IssuableSearchableField.TITLE       => __EnumValue("TITLE")
      case IssuableSearchableField.DESCRIPTION => __EnumValue("DESCRIPTION")
    }

    val values: Vector[IssuableSearchableField] = Vector(TITLE, DESCRIPTION)
  }

  sealed trait IssuableSeverity extends scala.Product with scala.Serializable { def value: String }

  object IssuableSeverity {
    case object UNKNOWN extends IssuableSeverity { val value: String = "UNKNOWN" }
    case object LOW extends IssuableSeverity { val value: String = "LOW" }
    case object MEDIUM extends IssuableSeverity { val value: String = "MEDIUM" }
    case object HIGH extends IssuableSeverity { val value: String = "HIGH" }
    case object CRITICAL extends IssuableSeverity { val value: String = "CRITICAL" }

    implicit val decoder: ScalarDecoder[IssuableSeverity] = {
      case __StringValue("UNKNOWN")  => Right(IssuableSeverity.UNKNOWN)
      case __StringValue("LOW")      => Right(IssuableSeverity.LOW)
      case __StringValue("MEDIUM")   => Right(IssuableSeverity.MEDIUM)
      case __StringValue("HIGH")     => Right(IssuableSeverity.HIGH)
      case __StringValue("CRITICAL") => Right(IssuableSeverity.CRITICAL)
      case other                     => Left(DecodingError(s"Can't build IssuableSeverity from input $other"))
    }

    implicit val encoder: ArgEncoder[IssuableSeverity] = {
      case IssuableSeverity.UNKNOWN  => __EnumValue("UNKNOWN")
      case IssuableSeverity.LOW      => __EnumValue("LOW")
      case IssuableSeverity.MEDIUM   => __EnumValue("MEDIUM")
      case IssuableSeverity.HIGH     => __EnumValue("HIGH")
      case IssuableSeverity.CRITICAL => __EnumValue("CRITICAL")
    }

    val values: Vector[IssuableSeverity] = Vector(UNKNOWN, LOW, MEDIUM, HIGH, CRITICAL)
  }

  sealed trait IssuableState extends scala.Product with scala.Serializable { def value: String }

  object IssuableState {
    case object opened extends IssuableState { val value: String = "opened" }
    case object closed extends IssuableState { val value: String = "closed" }
    case object locked extends IssuableState { val value: String = "locked" }
    case object all extends IssuableState { val value: String = "all" }

    implicit val decoder: ScalarDecoder[IssuableState] = {
      case __StringValue("opened") => Right(IssuableState.opened)
      case __StringValue("closed") => Right(IssuableState.closed)
      case __StringValue("locked") => Right(IssuableState.locked)
      case __StringValue("all")    => Right(IssuableState.all)
      case other                   => Left(DecodingError(s"Can't build IssuableState from input $other"))
    }

    implicit val encoder: ArgEncoder[IssuableState] = {
      case IssuableState.opened => __EnumValue("opened")
      case IssuableState.closed => __EnumValue("closed")
      case IssuableState.locked => __EnumValue("locked")
      case IssuableState.all    => __EnumValue("all")
    }

    val values: Vector[IssuableState] = Vector(opened, closed, locked, all)
  }

  sealed trait IssueSort extends scala.Product with scala.Serializable { def value: String }

  object IssueSort {
    case object updated_desc extends IssueSort { val value: String = "updated_desc" }
    case object updated_asc extends IssueSort { val value: String = "updated_asc" }
    case object created_desc extends IssueSort { val value: String = "created_desc" }
    case object created_asc extends IssueSort { val value: String = "created_asc" }
    case object UPDATED_DESC_1 extends IssueSort { val value: String = "UPDATED_DESC_1" }
    case object UPDATED_ASC_1 extends IssueSort { val value: String = "UPDATED_ASC_1" }
    case object CREATED_DESC_1 extends IssueSort { val value: String = "CREATED_DESC_1" }
    case object CREATED_ASC_1 extends IssueSort { val value: String = "CREATED_ASC_1" }
    case object PRIORITY_ASC extends IssueSort { val value: String = "PRIORITY_ASC" }
    case object PRIORITY_DESC extends IssueSort { val value: String = "PRIORITY_DESC" }
    case object LABEL_PRIORITY_ASC extends IssueSort { val value: String = "LABEL_PRIORITY_ASC" }
    case object LABEL_PRIORITY_DESC extends IssueSort { val value: String = "LABEL_PRIORITY_DESC" }
    case object MILESTONE_DUE_ASC extends IssueSort { val value: String = "MILESTONE_DUE_ASC" }
    case object MILESTONE_DUE_DESC extends IssueSort { val value: String = "MILESTONE_DUE_DESC" }
    case object DUE_DATE_ASC extends IssueSort { val value: String = "DUE_DATE_ASC" }
    case object DUE_DATE_DESC extends IssueSort { val value: String = "DUE_DATE_DESC" }
    case object RELATIVE_POSITION_ASC extends IssueSort { val value: String = "RELATIVE_POSITION_ASC" }
    case object SEVERITY_ASC extends IssueSort { val value: String = "SEVERITY_ASC" }
    case object SEVERITY_DESC extends IssueSort { val value: String = "SEVERITY_DESC" }
    case object WEIGHT_ASC extends IssueSort { val value: String = "WEIGHT_ASC" }
    case object WEIGHT_DESC extends IssueSort { val value: String = "WEIGHT_DESC" }
    case object PUBLISHED_ASC extends IssueSort { val value: String = "PUBLISHED_ASC" }
    case object PUBLISHED_DESC extends IssueSort { val value: String = "PUBLISHED_DESC" }
    case object SLA_DUE_AT_ASC extends IssueSort { val value: String = "SLA_DUE_AT_ASC" }
    case object SLA_DUE_AT_DESC extends IssueSort { val value: String = "SLA_DUE_AT_DESC" }

    implicit val decoder: ScalarDecoder[IssueSort] = {
      case __StringValue("updated_desc")          => Right(IssueSort.updated_desc)
      case __StringValue("updated_asc")           => Right(IssueSort.updated_asc)
      case __StringValue("created_desc")          => Right(IssueSort.created_desc)
      case __StringValue("created_asc")           => Right(IssueSort.created_asc)
      case __StringValue("UPDATED_DESC")          => Right(IssueSort.UPDATED_DESC_1)
      case __StringValue("UPDATED_ASC")           => Right(IssueSort.UPDATED_ASC_1)
      case __StringValue("CREATED_DESC")          => Right(IssueSort.CREATED_DESC_1)
      case __StringValue("CREATED_ASC")           => Right(IssueSort.CREATED_ASC_1)
      case __StringValue("PRIORITY_ASC")          => Right(IssueSort.PRIORITY_ASC)
      case __StringValue("PRIORITY_DESC")         => Right(IssueSort.PRIORITY_DESC)
      case __StringValue("LABEL_PRIORITY_ASC")    => Right(IssueSort.LABEL_PRIORITY_ASC)
      case __StringValue("LABEL_PRIORITY_DESC")   => Right(IssueSort.LABEL_PRIORITY_DESC)
      case __StringValue("MILESTONE_DUE_ASC")     => Right(IssueSort.MILESTONE_DUE_ASC)
      case __StringValue("MILESTONE_DUE_DESC")    => Right(IssueSort.MILESTONE_DUE_DESC)
      case __StringValue("DUE_DATE_ASC")          => Right(IssueSort.DUE_DATE_ASC)
      case __StringValue("DUE_DATE_DESC")         => Right(IssueSort.DUE_DATE_DESC)
      case __StringValue("RELATIVE_POSITION_ASC") => Right(IssueSort.RELATIVE_POSITION_ASC)
      case __StringValue("SEVERITY_ASC")          => Right(IssueSort.SEVERITY_ASC)
      case __StringValue("SEVERITY_DESC")         => Right(IssueSort.SEVERITY_DESC)
      case __StringValue("WEIGHT_ASC")            => Right(IssueSort.WEIGHT_ASC)
      case __StringValue("WEIGHT_DESC")           => Right(IssueSort.WEIGHT_DESC)
      case __StringValue("PUBLISHED_ASC")         => Right(IssueSort.PUBLISHED_ASC)
      case __StringValue("PUBLISHED_DESC")        => Right(IssueSort.PUBLISHED_DESC)
      case __StringValue("SLA_DUE_AT_ASC")        => Right(IssueSort.SLA_DUE_AT_ASC)
      case __StringValue("SLA_DUE_AT_DESC")       => Right(IssueSort.SLA_DUE_AT_DESC)
      case other                                  => Left(DecodingError(s"Can't build IssueSort from input $other"))
    }

    implicit val encoder: ArgEncoder[IssueSort] = {
      case IssueSort.updated_desc          => __EnumValue("updated_desc")
      case IssueSort.updated_asc           => __EnumValue("updated_asc")
      case IssueSort.created_desc          => __EnumValue("created_desc")
      case IssueSort.created_asc           => __EnumValue("created_asc")
      case IssueSort.UPDATED_DESC_1        => __EnumValue("UPDATED_DESC")
      case IssueSort.UPDATED_ASC_1         => __EnumValue("UPDATED_ASC")
      case IssueSort.CREATED_DESC_1        => __EnumValue("CREATED_DESC")
      case IssueSort.CREATED_ASC_1         => __EnumValue("CREATED_ASC")
      case IssueSort.PRIORITY_ASC          => __EnumValue("PRIORITY_ASC")
      case IssueSort.PRIORITY_DESC         => __EnumValue("PRIORITY_DESC")
      case IssueSort.LABEL_PRIORITY_ASC    => __EnumValue("LABEL_PRIORITY_ASC")
      case IssueSort.LABEL_PRIORITY_DESC   => __EnumValue("LABEL_PRIORITY_DESC")
      case IssueSort.MILESTONE_DUE_ASC     => __EnumValue("MILESTONE_DUE_ASC")
      case IssueSort.MILESTONE_DUE_DESC    => __EnumValue("MILESTONE_DUE_DESC")
      case IssueSort.DUE_DATE_ASC          => __EnumValue("DUE_DATE_ASC")
      case IssueSort.DUE_DATE_DESC         => __EnumValue("DUE_DATE_DESC")
      case IssueSort.RELATIVE_POSITION_ASC => __EnumValue("RELATIVE_POSITION_ASC")
      case IssueSort.SEVERITY_ASC          => __EnumValue("SEVERITY_ASC")
      case IssueSort.SEVERITY_DESC         => __EnumValue("SEVERITY_DESC")
      case IssueSort.WEIGHT_ASC            => __EnumValue("WEIGHT_ASC")
      case IssueSort.WEIGHT_DESC           => __EnumValue("WEIGHT_DESC")
      case IssueSort.PUBLISHED_ASC         => __EnumValue("PUBLISHED_ASC")
      case IssueSort.PUBLISHED_DESC        => __EnumValue("PUBLISHED_DESC")
      case IssueSort.SLA_DUE_AT_ASC        => __EnumValue("SLA_DUE_AT_ASC")
      case IssueSort.SLA_DUE_AT_DESC       => __EnumValue("SLA_DUE_AT_DESC")
    }

    val values: Vector[IssueSort] = Vector(
      updated_desc,
      updated_asc,
      created_desc,
      created_asc,
      UPDATED_DESC_1,
      UPDATED_ASC_1,
      CREATED_DESC_1,
      CREATED_ASC_1,
      PRIORITY_ASC,
      PRIORITY_DESC,
      LABEL_PRIORITY_ASC,
      LABEL_PRIORITY_DESC,
      MILESTONE_DUE_ASC,
      MILESTONE_DUE_DESC,
      DUE_DATE_ASC,
      DUE_DATE_DESC,
      RELATIVE_POSITION_ASC,
      SEVERITY_ASC,
      SEVERITY_DESC,
      WEIGHT_ASC,
      WEIGHT_DESC,
      PUBLISHED_ASC,
      PUBLISHED_DESC,
      SLA_DUE_AT_ASC,
      SLA_DUE_AT_DESC
    )

  }

  sealed trait IssueState extends scala.Product with scala.Serializable { def value: String }

  object IssueState {
    case object opened extends IssueState { val value: String = "opened" }
    case object closed extends IssueState { val value: String = "closed" }
    case object locked extends IssueState { val value: String = "locked" }
    case object all extends IssueState { val value: String = "all" }

    implicit val decoder: ScalarDecoder[IssueState] = {
      case __StringValue("opened") => Right(IssueState.opened)
      case __StringValue("closed") => Right(IssueState.closed)
      case __StringValue("locked") => Right(IssueState.locked)
      case __StringValue("all")    => Right(IssueState.all)
      case other                   => Left(DecodingError(s"Can't build IssueState from input $other"))
    }

    implicit val encoder: ArgEncoder[IssueState] = {
      case IssueState.opened => __EnumValue("opened")
      case IssueState.closed => __EnumValue("closed")
      case IssueState.locked => __EnumValue("locked")
      case IssueState.all    => __EnumValue("all")
    }

    val values: Vector[IssueState] = Vector(opened, closed, locked, all)
  }

  sealed trait IssueStateEvent extends scala.Product with scala.Serializable { def value: String }

  object IssueStateEvent {
    case object REOPEN extends IssueStateEvent { val value: String = "REOPEN" }
    case object CLOSE extends IssueStateEvent { val value: String = "CLOSE" }

    implicit val decoder: ScalarDecoder[IssueStateEvent] = {
      case __StringValue("REOPEN") => Right(IssueStateEvent.REOPEN)
      case __StringValue("CLOSE")  => Right(IssueStateEvent.CLOSE)
      case other                   => Left(DecodingError(s"Can't build IssueStateEvent from input $other"))
    }

    implicit val encoder: ArgEncoder[IssueStateEvent] = {
      case IssueStateEvent.REOPEN => __EnumValue("REOPEN")
      case IssueStateEvent.CLOSE  => __EnumValue("CLOSE")
    }

    val values: Vector[IssueStateEvent] = Vector(REOPEN, CLOSE)
  }

  sealed trait IssueType extends scala.Product with scala.Serializable { def value: String }

  object IssueType {
    case object ISSUE extends IssueType { val value: String = "ISSUE" }
    case object INCIDENT extends IssueType { val value: String = "INCIDENT" }
    case object TEST_CASE extends IssueType { val value: String = "TEST_CASE" }
    case object REQUIREMENT extends IssueType { val value: String = "REQUIREMENT" }

    implicit val decoder: ScalarDecoder[IssueType] = {
      case __StringValue("ISSUE")       => Right(IssueType.ISSUE)
      case __StringValue("INCIDENT")    => Right(IssueType.INCIDENT)
      case __StringValue("TEST_CASE")   => Right(IssueType.TEST_CASE)
      case __StringValue("REQUIREMENT") => Right(IssueType.REQUIREMENT)
      case other                        => Left(DecodingError(s"Can't build IssueType from input $other"))
    }

    implicit val encoder: ArgEncoder[IssueType] = {
      case IssueType.ISSUE       => __EnumValue("ISSUE")
      case IssueType.INCIDENT    => __EnumValue("INCIDENT")
      case IssueType.TEST_CASE   => __EnumValue("TEST_CASE")
      case IssueType.REQUIREMENT => __EnumValue("REQUIREMENT")
    }

    val values: Vector[IssueType] = Vector(ISSUE, INCIDENT, TEST_CASE, REQUIREMENT)
  }

  sealed trait IterationState extends scala.Product with scala.Serializable { def value: String }

  object IterationState {
    case object upcoming extends IterationState { val value: String = "upcoming" }
    case object started extends IterationState { val value: String = "started" }
    case object current extends IterationState { val value: String = "current" }
    case object opened extends IterationState { val value: String = "opened" }
    case object closed extends IterationState { val value: String = "closed" }
    case object all extends IterationState { val value: String = "all" }

    implicit val decoder: ScalarDecoder[IterationState] = {
      case __StringValue("upcoming") => Right(IterationState.upcoming)
      case __StringValue("started")  => Right(IterationState.started)
      case __StringValue("current")  => Right(IterationState.current)
      case __StringValue("opened")   => Right(IterationState.opened)
      case __StringValue("closed")   => Right(IterationState.closed)
      case __StringValue("all")      => Right(IterationState.all)
      case other                     => Left(DecodingError(s"Can't build IterationState from input $other"))
    }

    implicit val encoder: ArgEncoder[IterationState] = {
      case IterationState.upcoming => __EnumValue("upcoming")
      case IterationState.started  => __EnumValue("started")
      case IterationState.current  => __EnumValue("current")
      case IterationState.opened   => __EnumValue("opened")
      case IterationState.closed   => __EnumValue("closed")
      case IterationState.all      => __EnumValue("all")
    }

    val values: Vector[IterationState] = Vector(upcoming, started, current, opened, closed, all)
  }

  sealed trait IterationWildcardId extends scala.Product with scala.Serializable { def value: String }

  object IterationWildcardId {
    case object NONE extends IterationWildcardId { val value: String = "NONE" }
    case object ANY extends IterationWildcardId { val value: String = "ANY" }
    case object CURRENT extends IterationWildcardId { val value: String = "CURRENT" }

    implicit val decoder: ScalarDecoder[IterationWildcardId] = {
      case __StringValue("NONE")    => Right(IterationWildcardId.NONE)
      case __StringValue("ANY")     => Right(IterationWildcardId.ANY)
      case __StringValue("CURRENT") => Right(IterationWildcardId.CURRENT)
      case other                    => Left(DecodingError(s"Can't build IterationWildcardId from input $other"))
    }

    implicit val encoder: ArgEncoder[IterationWildcardId] = {
      case IterationWildcardId.NONE    => __EnumValue("NONE")
      case IterationWildcardId.ANY     => __EnumValue("ANY")
      case IterationWildcardId.CURRENT => __EnumValue("CURRENT")
    }

    val values: Vector[IterationWildcardId] = Vector(NONE, ANY, CURRENT)
  }

  sealed trait JobArtifactFileType extends scala.Product with scala.Serializable { def value: String }

  object JobArtifactFileType {
    case object ARCHIVE extends JobArtifactFileType { val value: String = "ARCHIVE" }
    case object METADATA extends JobArtifactFileType { val value: String = "METADATA" }
    case object TRACE extends JobArtifactFileType { val value: String = "TRACE" }
    case object JUNIT extends JobArtifactFileType { val value: String = "JUNIT" }
    case object METRICS extends JobArtifactFileType { val value: String = "METRICS" }
    case object METRICS_REFEREE extends JobArtifactFileType { val value: String = "METRICS_REFEREE" }
    case object NETWORK_REFEREE extends JobArtifactFileType { val value: String = "NETWORK_REFEREE" }
    case object DOTENV extends JobArtifactFileType { val value: String = "DOTENV" }
    case object COBERTURA extends JobArtifactFileType { val value: String = "COBERTURA" }
    case object CLUSTER_APPLICATIONS extends JobArtifactFileType { val value: String = "CLUSTER_APPLICATIONS" }
    case object LSIF extends JobArtifactFileType { val value: String = "LSIF" }
    case object SAST extends JobArtifactFileType { val value: String = "SAST" }
    case object SECRET_DETECTION extends JobArtifactFileType { val value: String = "SECRET_DETECTION" }
    case object DEPENDENCY_SCANNING extends JobArtifactFileType { val value: String = "DEPENDENCY_SCANNING" }
    case object CONTAINER_SCANNING extends JobArtifactFileType { val value: String = "CONTAINER_SCANNING" }
    case object CLUSTER_IMAGE_SCANNING extends JobArtifactFileType { val value: String = "CLUSTER_IMAGE_SCANNING" }
    case object DAST extends JobArtifactFileType { val value: String = "DAST" }
    case object LICENSE_SCANNING extends JobArtifactFileType { val value: String = "LICENSE_SCANNING" }
    case object ACCESSIBILITY extends JobArtifactFileType { val value: String = "ACCESSIBILITY" }
    case object CODEQUALITY extends JobArtifactFileType { val value: String = "CODEQUALITY" }
    case object PERFORMANCE extends JobArtifactFileType { val value: String = "PERFORMANCE" }
    case object BROWSER_PERFORMANCE extends JobArtifactFileType { val value: String = "BROWSER_PERFORMANCE" }
    case object LOAD_PERFORMANCE extends JobArtifactFileType { val value: String = "LOAD_PERFORMANCE" }
    case object TERRAFORM extends JobArtifactFileType { val value: String = "TERRAFORM" }
    case object REQUIREMENTS extends JobArtifactFileType { val value: String = "REQUIREMENTS" }
    case object COVERAGE_FUZZING extends JobArtifactFileType { val value: String = "COVERAGE_FUZZING" }
    case object API_FUZZING extends JobArtifactFileType { val value: String = "API_FUZZING" }

    implicit val decoder: ScalarDecoder[JobArtifactFileType] = {
      case __StringValue("ARCHIVE")                => Right(JobArtifactFileType.ARCHIVE)
      case __StringValue("METADATA")               => Right(JobArtifactFileType.METADATA)
      case __StringValue("TRACE")                  => Right(JobArtifactFileType.TRACE)
      case __StringValue("JUNIT")                  => Right(JobArtifactFileType.JUNIT)
      case __StringValue("METRICS")                => Right(JobArtifactFileType.METRICS)
      case __StringValue("METRICS_REFEREE")        => Right(JobArtifactFileType.METRICS_REFEREE)
      case __StringValue("NETWORK_REFEREE")        => Right(JobArtifactFileType.NETWORK_REFEREE)
      case __StringValue("DOTENV")                 => Right(JobArtifactFileType.DOTENV)
      case __StringValue("COBERTURA")              => Right(JobArtifactFileType.COBERTURA)
      case __StringValue("CLUSTER_APPLICATIONS")   => Right(JobArtifactFileType.CLUSTER_APPLICATIONS)
      case __StringValue("LSIF")                   => Right(JobArtifactFileType.LSIF)
      case __StringValue("SAST")                   => Right(JobArtifactFileType.SAST)
      case __StringValue("SECRET_DETECTION")       => Right(JobArtifactFileType.SECRET_DETECTION)
      case __StringValue("DEPENDENCY_SCANNING")    => Right(JobArtifactFileType.DEPENDENCY_SCANNING)
      case __StringValue("CONTAINER_SCANNING")     => Right(JobArtifactFileType.CONTAINER_SCANNING)
      case __StringValue("CLUSTER_IMAGE_SCANNING") => Right(JobArtifactFileType.CLUSTER_IMAGE_SCANNING)
      case __StringValue("DAST")                   => Right(JobArtifactFileType.DAST)
      case __StringValue("LICENSE_SCANNING")       => Right(JobArtifactFileType.LICENSE_SCANNING)
      case __StringValue("ACCESSIBILITY")          => Right(JobArtifactFileType.ACCESSIBILITY)
      case __StringValue("CODEQUALITY")            => Right(JobArtifactFileType.CODEQUALITY)
      case __StringValue("PERFORMANCE")            => Right(JobArtifactFileType.PERFORMANCE)
      case __StringValue("BROWSER_PERFORMANCE")    => Right(JobArtifactFileType.BROWSER_PERFORMANCE)
      case __StringValue("LOAD_PERFORMANCE")       => Right(JobArtifactFileType.LOAD_PERFORMANCE)
      case __StringValue("TERRAFORM")              => Right(JobArtifactFileType.TERRAFORM)
      case __StringValue("REQUIREMENTS")           => Right(JobArtifactFileType.REQUIREMENTS)
      case __StringValue("COVERAGE_FUZZING")       => Right(JobArtifactFileType.COVERAGE_FUZZING)
      case __StringValue("API_FUZZING")            => Right(JobArtifactFileType.API_FUZZING)
      case other                                   => Left(DecodingError(s"Can't build JobArtifactFileType from input $other"))
    }

    implicit val encoder: ArgEncoder[JobArtifactFileType] = {
      case JobArtifactFileType.ARCHIVE                => __EnumValue("ARCHIVE")
      case JobArtifactFileType.METADATA               => __EnumValue("METADATA")
      case JobArtifactFileType.TRACE                  => __EnumValue("TRACE")
      case JobArtifactFileType.JUNIT                  => __EnumValue("JUNIT")
      case JobArtifactFileType.METRICS                => __EnumValue("METRICS")
      case JobArtifactFileType.METRICS_REFEREE        => __EnumValue("METRICS_REFEREE")
      case JobArtifactFileType.NETWORK_REFEREE        => __EnumValue("NETWORK_REFEREE")
      case JobArtifactFileType.DOTENV                 => __EnumValue("DOTENV")
      case JobArtifactFileType.COBERTURA              => __EnumValue("COBERTURA")
      case JobArtifactFileType.CLUSTER_APPLICATIONS   => __EnumValue("CLUSTER_APPLICATIONS")
      case JobArtifactFileType.LSIF                   => __EnumValue("LSIF")
      case JobArtifactFileType.SAST                   => __EnumValue("SAST")
      case JobArtifactFileType.SECRET_DETECTION       => __EnumValue("SECRET_DETECTION")
      case JobArtifactFileType.DEPENDENCY_SCANNING    => __EnumValue("DEPENDENCY_SCANNING")
      case JobArtifactFileType.CONTAINER_SCANNING     => __EnumValue("CONTAINER_SCANNING")
      case JobArtifactFileType.CLUSTER_IMAGE_SCANNING => __EnumValue("CLUSTER_IMAGE_SCANNING")
      case JobArtifactFileType.DAST                   => __EnumValue("DAST")
      case JobArtifactFileType.LICENSE_SCANNING       => __EnumValue("LICENSE_SCANNING")
      case JobArtifactFileType.ACCESSIBILITY          => __EnumValue("ACCESSIBILITY")
      case JobArtifactFileType.CODEQUALITY            => __EnumValue("CODEQUALITY")
      case JobArtifactFileType.PERFORMANCE            => __EnumValue("PERFORMANCE")
      case JobArtifactFileType.BROWSER_PERFORMANCE    => __EnumValue("BROWSER_PERFORMANCE")
      case JobArtifactFileType.LOAD_PERFORMANCE       => __EnumValue("LOAD_PERFORMANCE")
      case JobArtifactFileType.TERRAFORM              => __EnumValue("TERRAFORM")
      case JobArtifactFileType.REQUIREMENTS           => __EnumValue("REQUIREMENTS")
      case JobArtifactFileType.COVERAGE_FUZZING       => __EnumValue("COVERAGE_FUZZING")
      case JobArtifactFileType.API_FUZZING            => __EnumValue("API_FUZZING")
    }

    val values: Vector[JobArtifactFileType] = Vector(
      ARCHIVE,
      METADATA,
      TRACE,
      JUNIT,
      METRICS,
      METRICS_REFEREE,
      NETWORK_REFEREE,
      DOTENV,
      COBERTURA,
      CLUSTER_APPLICATIONS,
      LSIF,
      SAST,
      SECRET_DETECTION,
      DEPENDENCY_SCANNING,
      CONTAINER_SCANNING,
      CLUSTER_IMAGE_SCANNING,
      DAST,
      LICENSE_SCANNING,
      ACCESSIBILITY,
      CODEQUALITY,
      PERFORMANCE,
      BROWSER_PERFORMANCE,
      LOAD_PERFORMANCE,
      TERRAFORM,
      REQUIREMENTS,
      COVERAGE_FUZZING,
      API_FUZZING
    )

  }

  sealed trait ListLimitMetric extends scala.Product with scala.Serializable { def value: String }

  object ListLimitMetric {
    case object all_metrics extends ListLimitMetric { val value: String = "all_metrics" }
    case object issue_count extends ListLimitMetric { val value: String = "issue_count" }
    case object issue_weights extends ListLimitMetric { val value: String = "issue_weights" }

    implicit val decoder: ScalarDecoder[ListLimitMetric] = {
      case __StringValue("all_metrics")   => Right(ListLimitMetric.all_metrics)
      case __StringValue("issue_count")   => Right(ListLimitMetric.issue_count)
      case __StringValue("issue_weights") => Right(ListLimitMetric.issue_weights)
      case other                          => Left(DecodingError(s"Can't build ListLimitMetric from input $other"))
    }

    implicit val encoder: ArgEncoder[ListLimitMetric] = {
      case ListLimitMetric.all_metrics   => __EnumValue("all_metrics")
      case ListLimitMetric.issue_count   => __EnumValue("issue_count")
      case ListLimitMetric.issue_weights => __EnumValue("issue_weights")
    }

    val values: Vector[ListLimitMetric] = Vector(all_metrics, issue_count, issue_weights)
  }

  sealed trait MeasurementIdentifier extends scala.Product with scala.Serializable { def value: String }

  object MeasurementIdentifier {
    case object PROJECTS extends MeasurementIdentifier { val value: String = "PROJECTS" }
    case object USERS extends MeasurementIdentifier { val value: String = "USERS" }
    case object ISSUES extends MeasurementIdentifier { val value: String = "ISSUES" }
    case object MERGE_REQUESTS extends MeasurementIdentifier { val value: String = "MERGE_REQUESTS" }
    case object GROUPS extends MeasurementIdentifier { val value: String = "GROUPS" }
    case object PIPELINES extends MeasurementIdentifier { val value: String = "PIPELINES" }
    case object PIPELINES_SUCCEEDED extends MeasurementIdentifier { val value: String = "PIPELINES_SUCCEEDED" }
    case object PIPELINES_FAILED extends MeasurementIdentifier { val value: String = "PIPELINES_FAILED" }
    case object PIPELINES_CANCELED extends MeasurementIdentifier { val value: String = "PIPELINES_CANCELED" }
    case object PIPELINES_SKIPPED extends MeasurementIdentifier { val value: String = "PIPELINES_SKIPPED" }

    implicit val decoder: ScalarDecoder[MeasurementIdentifier] = {
      case __StringValue("PROJECTS")            => Right(MeasurementIdentifier.PROJECTS)
      case __StringValue("USERS")               => Right(MeasurementIdentifier.USERS)
      case __StringValue("ISSUES")              => Right(MeasurementIdentifier.ISSUES)
      case __StringValue("MERGE_REQUESTS")      => Right(MeasurementIdentifier.MERGE_REQUESTS)
      case __StringValue("GROUPS")              => Right(MeasurementIdentifier.GROUPS)
      case __StringValue("PIPELINES")           => Right(MeasurementIdentifier.PIPELINES)
      case __StringValue("PIPELINES_SUCCEEDED") => Right(MeasurementIdentifier.PIPELINES_SUCCEEDED)
      case __StringValue("PIPELINES_FAILED")    => Right(MeasurementIdentifier.PIPELINES_FAILED)
      case __StringValue("PIPELINES_CANCELED")  => Right(MeasurementIdentifier.PIPELINES_CANCELED)
      case __StringValue("PIPELINES_SKIPPED")   => Right(MeasurementIdentifier.PIPELINES_SKIPPED)
      case other                                => Left(DecodingError(s"Can't build MeasurementIdentifier from input $other"))
    }

    implicit val encoder: ArgEncoder[MeasurementIdentifier] = {
      case MeasurementIdentifier.PROJECTS            => __EnumValue("PROJECTS")
      case MeasurementIdentifier.USERS               => __EnumValue("USERS")
      case MeasurementIdentifier.ISSUES              => __EnumValue("ISSUES")
      case MeasurementIdentifier.MERGE_REQUESTS      => __EnumValue("MERGE_REQUESTS")
      case MeasurementIdentifier.GROUPS              => __EnumValue("GROUPS")
      case MeasurementIdentifier.PIPELINES           => __EnumValue("PIPELINES")
      case MeasurementIdentifier.PIPELINES_SUCCEEDED => __EnumValue("PIPELINES_SUCCEEDED")
      case MeasurementIdentifier.PIPELINES_FAILED    => __EnumValue("PIPELINES_FAILED")
      case MeasurementIdentifier.PIPELINES_CANCELED  => __EnumValue("PIPELINES_CANCELED")
      case MeasurementIdentifier.PIPELINES_SKIPPED   => __EnumValue("PIPELINES_SKIPPED")
    }

    val values: Vector[MeasurementIdentifier] = Vector(
      PROJECTS,
      USERS,
      ISSUES,
      MERGE_REQUESTS,
      GROUPS,
      PIPELINES,
      PIPELINES_SUCCEEDED,
      PIPELINES_FAILED,
      PIPELINES_CANCELED,
      PIPELINES_SKIPPED
    )

  }

  sealed trait MergeRequestNewState extends scala.Product with scala.Serializable { def value: String }

  object MergeRequestNewState {
    case object OPEN extends MergeRequestNewState { val value: String = "OPEN" }
    case object CLOSED extends MergeRequestNewState { val value: String = "CLOSED" }

    implicit val decoder: ScalarDecoder[MergeRequestNewState] = {
      case __StringValue("OPEN")   => Right(MergeRequestNewState.OPEN)
      case __StringValue("CLOSED") => Right(MergeRequestNewState.CLOSED)
      case other                   => Left(DecodingError(s"Can't build MergeRequestNewState from input $other"))
    }

    implicit val encoder: ArgEncoder[MergeRequestNewState] = {
      case MergeRequestNewState.OPEN   => __EnumValue("OPEN")
      case MergeRequestNewState.CLOSED => __EnumValue("CLOSED")
    }

    val values: Vector[MergeRequestNewState] = Vector(OPEN, CLOSED)
  }

  sealed trait MergeRequestReviewState extends scala.Product with scala.Serializable { def value: String }

  object MergeRequestReviewState {
    case object UNREVIEWED extends MergeRequestReviewState { val value: String = "UNREVIEWED" }
    case object REVIEWED extends MergeRequestReviewState { val value: String = "REVIEWED" }

    implicit val decoder: ScalarDecoder[MergeRequestReviewState] = {
      case __StringValue("UNREVIEWED") => Right(MergeRequestReviewState.UNREVIEWED)
      case __StringValue("REVIEWED")   => Right(MergeRequestReviewState.REVIEWED)
      case other                       => Left(DecodingError(s"Can't build MergeRequestReviewState from input $other"))
    }

    implicit val encoder: ArgEncoder[MergeRequestReviewState] = {
      case MergeRequestReviewState.UNREVIEWED => __EnumValue("UNREVIEWED")
      case MergeRequestReviewState.REVIEWED   => __EnumValue("REVIEWED")
    }

    val values: Vector[MergeRequestReviewState] = Vector(UNREVIEWED, REVIEWED)
  }

  sealed trait MergeRequestSort extends scala.Product with scala.Serializable { def value: String }

  object MergeRequestSort {
    case object updated_desc extends MergeRequestSort { val value: String = "updated_desc" }
    case object updated_asc extends MergeRequestSort { val value: String = "updated_asc" }
    case object created_desc extends MergeRequestSort { val value: String = "created_desc" }
    case object created_asc extends MergeRequestSort { val value: String = "created_asc" }
    case object UPDATED_DESC_1 extends MergeRequestSort { val value: String = "UPDATED_DESC_1" }
    case object UPDATED_ASC_1 extends MergeRequestSort { val value: String = "UPDATED_ASC_1" }
    case object CREATED_DESC_1 extends MergeRequestSort { val value: String = "CREATED_DESC_1" }
    case object CREATED_ASC_1 extends MergeRequestSort { val value: String = "CREATED_ASC_1" }
    case object PRIORITY_ASC extends MergeRequestSort { val value: String = "PRIORITY_ASC" }
    case object PRIORITY_DESC extends MergeRequestSort { val value: String = "PRIORITY_DESC" }
    case object LABEL_PRIORITY_ASC extends MergeRequestSort { val value: String = "LABEL_PRIORITY_ASC" }
    case object LABEL_PRIORITY_DESC extends MergeRequestSort { val value: String = "LABEL_PRIORITY_DESC" }
    case object MILESTONE_DUE_ASC extends MergeRequestSort { val value: String = "MILESTONE_DUE_ASC" }
    case object MILESTONE_DUE_DESC extends MergeRequestSort { val value: String = "MILESTONE_DUE_DESC" }
    case object MERGED_AT_ASC extends MergeRequestSort { val value: String = "MERGED_AT_ASC" }
    case object MERGED_AT_DESC extends MergeRequestSort { val value: String = "MERGED_AT_DESC" }

    implicit val decoder: ScalarDecoder[MergeRequestSort] = {
      case __StringValue("updated_desc")        => Right(MergeRequestSort.updated_desc)
      case __StringValue("updated_asc")         => Right(MergeRequestSort.updated_asc)
      case __StringValue("created_desc")        => Right(MergeRequestSort.created_desc)
      case __StringValue("created_asc")         => Right(MergeRequestSort.created_asc)
      case __StringValue("UPDATED_DESC")        => Right(MergeRequestSort.UPDATED_DESC_1)
      case __StringValue("UPDATED_ASC")         => Right(MergeRequestSort.UPDATED_ASC_1)
      case __StringValue("CREATED_DESC")        => Right(MergeRequestSort.CREATED_DESC_1)
      case __StringValue("CREATED_ASC")         => Right(MergeRequestSort.CREATED_ASC_1)
      case __StringValue("PRIORITY_ASC")        => Right(MergeRequestSort.PRIORITY_ASC)
      case __StringValue("PRIORITY_DESC")       => Right(MergeRequestSort.PRIORITY_DESC)
      case __StringValue("LABEL_PRIORITY_ASC")  => Right(MergeRequestSort.LABEL_PRIORITY_ASC)
      case __StringValue("LABEL_PRIORITY_DESC") => Right(MergeRequestSort.LABEL_PRIORITY_DESC)
      case __StringValue("MILESTONE_DUE_ASC")   => Right(MergeRequestSort.MILESTONE_DUE_ASC)
      case __StringValue("MILESTONE_DUE_DESC")  => Right(MergeRequestSort.MILESTONE_DUE_DESC)
      case __StringValue("MERGED_AT_ASC")       => Right(MergeRequestSort.MERGED_AT_ASC)
      case __StringValue("MERGED_AT_DESC")      => Right(MergeRequestSort.MERGED_AT_DESC)
      case other                                => Left(DecodingError(s"Can't build MergeRequestSort from input $other"))
    }

    implicit val encoder: ArgEncoder[MergeRequestSort] = {
      case MergeRequestSort.updated_desc        => __EnumValue("updated_desc")
      case MergeRequestSort.updated_asc         => __EnumValue("updated_asc")
      case MergeRequestSort.created_desc        => __EnumValue("created_desc")
      case MergeRequestSort.created_asc         => __EnumValue("created_asc")
      case MergeRequestSort.UPDATED_DESC_1      => __EnumValue("UPDATED_DESC")
      case MergeRequestSort.UPDATED_ASC_1       => __EnumValue("UPDATED_ASC")
      case MergeRequestSort.CREATED_DESC_1      => __EnumValue("CREATED_DESC")
      case MergeRequestSort.CREATED_ASC_1       => __EnumValue("CREATED_ASC")
      case MergeRequestSort.PRIORITY_ASC        => __EnumValue("PRIORITY_ASC")
      case MergeRequestSort.PRIORITY_DESC       => __EnumValue("PRIORITY_DESC")
      case MergeRequestSort.LABEL_PRIORITY_ASC  => __EnumValue("LABEL_PRIORITY_ASC")
      case MergeRequestSort.LABEL_PRIORITY_DESC => __EnumValue("LABEL_PRIORITY_DESC")
      case MergeRequestSort.MILESTONE_DUE_ASC   => __EnumValue("MILESTONE_DUE_ASC")
      case MergeRequestSort.MILESTONE_DUE_DESC  => __EnumValue("MILESTONE_DUE_DESC")
      case MergeRequestSort.MERGED_AT_ASC       => __EnumValue("MERGED_AT_ASC")
      case MergeRequestSort.MERGED_AT_DESC      => __EnumValue("MERGED_AT_DESC")
    }

    val values: Vector[MergeRequestSort] = Vector(
      updated_desc,
      updated_asc,
      created_desc,
      created_asc,
      UPDATED_DESC_1,
      UPDATED_ASC_1,
      CREATED_DESC_1,
      CREATED_ASC_1,
      PRIORITY_ASC,
      PRIORITY_DESC,
      LABEL_PRIORITY_ASC,
      LABEL_PRIORITY_DESC,
      MILESTONE_DUE_ASC,
      MILESTONE_DUE_DESC,
      MERGED_AT_ASC,
      MERGED_AT_DESC
    )

  }

  sealed trait MergeRequestState extends scala.Product with scala.Serializable { def value: String }

  object MergeRequestState {
    case object opened extends MergeRequestState { val value: String = "opened" }
    case object closed extends MergeRequestState { val value: String = "closed" }
    case object locked extends MergeRequestState { val value: String = "locked" }
    case object all extends MergeRequestState { val value: String = "all" }
    case object merged extends MergeRequestState { val value: String = "merged" }

    implicit val decoder: ScalarDecoder[MergeRequestState] = {
      case __StringValue("opened") => Right(MergeRequestState.opened)
      case __StringValue("closed") => Right(MergeRequestState.closed)
      case __StringValue("locked") => Right(MergeRequestState.locked)
      case __StringValue("all")    => Right(MergeRequestState.all)
      case __StringValue("merged") => Right(MergeRequestState.merged)
      case other                   => Left(DecodingError(s"Can't build MergeRequestState from input $other"))
    }

    implicit val encoder: ArgEncoder[MergeRequestState] = {
      case MergeRequestState.opened => __EnumValue("opened")
      case MergeRequestState.closed => __EnumValue("closed")
      case MergeRequestState.locked => __EnumValue("locked")
      case MergeRequestState.all    => __EnumValue("all")
      case MergeRequestState.merged => __EnumValue("merged")
    }

    val values: Vector[MergeRequestState] = Vector(opened, closed, locked, all, merged)
  }

  sealed trait MergeStatus extends scala.Product with scala.Serializable { def value: String }

  object MergeStatus {
    case object UNCHECKED extends MergeStatus { val value: String = "UNCHECKED" }
    case object CHECKING extends MergeStatus { val value: String = "CHECKING" }
    case object CAN_BE_MERGED extends MergeStatus { val value: String = "CAN_BE_MERGED" }
    case object CANNOT_BE_MERGED extends MergeStatus { val value: String = "CANNOT_BE_MERGED" }
    case object CANNOT_BE_MERGED_RECHECK extends MergeStatus { val value: String = "CANNOT_BE_MERGED_RECHECK" }

    implicit val decoder: ScalarDecoder[MergeStatus] = {
      case __StringValue("UNCHECKED")                => Right(MergeStatus.UNCHECKED)
      case __StringValue("CHECKING")                 => Right(MergeStatus.CHECKING)
      case __StringValue("CAN_BE_MERGED")            => Right(MergeStatus.CAN_BE_MERGED)
      case __StringValue("CANNOT_BE_MERGED")         => Right(MergeStatus.CANNOT_BE_MERGED)
      case __StringValue("CANNOT_BE_MERGED_RECHECK") => Right(MergeStatus.CANNOT_BE_MERGED_RECHECK)
      case other                                     => Left(DecodingError(s"Can't build MergeStatus from input $other"))
    }

    implicit val encoder: ArgEncoder[MergeStatus] = {
      case MergeStatus.UNCHECKED                => __EnumValue("UNCHECKED")
      case MergeStatus.CHECKING                 => __EnumValue("CHECKING")
      case MergeStatus.CAN_BE_MERGED            => __EnumValue("CAN_BE_MERGED")
      case MergeStatus.CANNOT_BE_MERGED         => __EnumValue("CANNOT_BE_MERGED")
      case MergeStatus.CANNOT_BE_MERGED_RECHECK => __EnumValue("CANNOT_BE_MERGED_RECHECK")
    }

    val values: Vector[MergeStatus] = Vector(UNCHECKED, CHECKING, CAN_BE_MERGED, CANNOT_BE_MERGED, CANNOT_BE_MERGED_RECHECK)
  }

  sealed trait MergeStrategyEnum extends scala.Product with scala.Serializable { def value: String }

  object MergeStrategyEnum {
    case object MERGE_TRAIN extends MergeStrategyEnum { val value: String = "MERGE_TRAIN" }

    case object ADD_TO_MERGE_TRAIN_WHEN_PIPELINE_SUCCEEDS extends MergeStrategyEnum {
      val value: String = "ADD_TO_MERGE_TRAIN_WHEN_PIPELINE_SUCCEEDS"
    }

    case object MERGE_WHEN_PIPELINE_SUCCEEDS extends MergeStrategyEnum { val value: String = "MERGE_WHEN_PIPELINE_SUCCEEDS" }

    implicit val decoder: ScalarDecoder[MergeStrategyEnum] = {
      case __StringValue("MERGE_TRAIN")                               => Right(MergeStrategyEnum.MERGE_TRAIN)
      case __StringValue("ADD_TO_MERGE_TRAIN_WHEN_PIPELINE_SUCCEEDS") => Right(MergeStrategyEnum.ADD_TO_MERGE_TRAIN_WHEN_PIPELINE_SUCCEEDS)
      case __StringValue("MERGE_WHEN_PIPELINE_SUCCEEDS")              => Right(MergeStrategyEnum.MERGE_WHEN_PIPELINE_SUCCEEDS)
      case other => Left(DecodingError(s"Can't build MergeStrategyEnum from input $other"))
    }

    implicit val encoder: ArgEncoder[MergeStrategyEnum] = {
      case MergeStrategyEnum.MERGE_TRAIN                               => __EnumValue("MERGE_TRAIN")
      case MergeStrategyEnum.ADD_TO_MERGE_TRAIN_WHEN_PIPELINE_SUCCEEDS => __EnumValue("ADD_TO_MERGE_TRAIN_WHEN_PIPELINE_SUCCEEDS")
      case MergeStrategyEnum.MERGE_WHEN_PIPELINE_SUCCEEDS              => __EnumValue("MERGE_WHEN_PIPELINE_SUCCEEDS")
    }

    val values: Vector[MergeStrategyEnum] = Vector(MERGE_TRAIN, ADD_TO_MERGE_TRAIN_WHEN_PIPELINE_SUCCEEDS, MERGE_WHEN_PIPELINE_SUCCEEDS)
  }

  sealed trait MilestoneSort extends scala.Product with scala.Serializable { def value: String }

  object MilestoneSort {
    case object updated_desc extends MilestoneSort { val value: String = "updated_desc" }
    case object updated_asc extends MilestoneSort { val value: String = "updated_asc" }
    case object created_desc extends MilestoneSort { val value: String = "created_desc" }
    case object created_asc extends MilestoneSort { val value: String = "created_asc" }
    case object UPDATED_DESC_1 extends MilestoneSort { val value: String = "UPDATED_DESC_1" }
    case object UPDATED_ASC_1 extends MilestoneSort { val value: String = "UPDATED_ASC_1" }
    case object CREATED_DESC_1 extends MilestoneSort { val value: String = "CREATED_DESC_1" }
    case object CREATED_ASC_1 extends MilestoneSort { val value: String = "CREATED_ASC_1" }
    case object DUE_DATE_ASC extends MilestoneSort { val value: String = "DUE_DATE_ASC" }
    case object DUE_DATE_DESC extends MilestoneSort { val value: String = "DUE_DATE_DESC" }
    case object EXPIRED_LAST_DUE_DATE_ASC extends MilestoneSort { val value: String = "EXPIRED_LAST_DUE_DATE_ASC" }
    case object EXPIRED_LAST_DUE_DATE_DESC extends MilestoneSort { val value: String = "EXPIRED_LAST_DUE_DATE_DESC" }

    implicit val decoder: ScalarDecoder[MilestoneSort] = {
      case __StringValue("updated_desc")               => Right(MilestoneSort.updated_desc)
      case __StringValue("updated_asc")                => Right(MilestoneSort.updated_asc)
      case __StringValue("created_desc")               => Right(MilestoneSort.created_desc)
      case __StringValue("created_asc")                => Right(MilestoneSort.created_asc)
      case __StringValue("UPDATED_DESC")               => Right(MilestoneSort.UPDATED_DESC_1)
      case __StringValue("UPDATED_ASC")                => Right(MilestoneSort.UPDATED_ASC_1)
      case __StringValue("CREATED_DESC")               => Right(MilestoneSort.CREATED_DESC_1)
      case __StringValue("CREATED_ASC")                => Right(MilestoneSort.CREATED_ASC_1)
      case __StringValue("DUE_DATE_ASC")               => Right(MilestoneSort.DUE_DATE_ASC)
      case __StringValue("DUE_DATE_DESC")              => Right(MilestoneSort.DUE_DATE_DESC)
      case __StringValue("EXPIRED_LAST_DUE_DATE_ASC")  => Right(MilestoneSort.EXPIRED_LAST_DUE_DATE_ASC)
      case __StringValue("EXPIRED_LAST_DUE_DATE_DESC") => Right(MilestoneSort.EXPIRED_LAST_DUE_DATE_DESC)
      case other                                       => Left(DecodingError(s"Can't build MilestoneSort from input $other"))
    }

    implicit val encoder: ArgEncoder[MilestoneSort] = {
      case MilestoneSort.updated_desc               => __EnumValue("updated_desc")
      case MilestoneSort.updated_asc                => __EnumValue("updated_asc")
      case MilestoneSort.created_desc               => __EnumValue("created_desc")
      case MilestoneSort.created_asc                => __EnumValue("created_asc")
      case MilestoneSort.UPDATED_DESC_1             => __EnumValue("UPDATED_DESC")
      case MilestoneSort.UPDATED_ASC_1              => __EnumValue("UPDATED_ASC")
      case MilestoneSort.CREATED_DESC_1             => __EnumValue("CREATED_DESC")
      case MilestoneSort.CREATED_ASC_1              => __EnumValue("CREATED_ASC")
      case MilestoneSort.DUE_DATE_ASC               => __EnumValue("DUE_DATE_ASC")
      case MilestoneSort.DUE_DATE_DESC              => __EnumValue("DUE_DATE_DESC")
      case MilestoneSort.EXPIRED_LAST_DUE_DATE_ASC  => __EnumValue("EXPIRED_LAST_DUE_DATE_ASC")
      case MilestoneSort.EXPIRED_LAST_DUE_DATE_DESC => __EnumValue("EXPIRED_LAST_DUE_DATE_DESC")
    }

    val values: Vector[MilestoneSort] = Vector(
      updated_desc,
      updated_asc,
      created_desc,
      created_asc,
      UPDATED_DESC_1,
      UPDATED_ASC_1,
      CREATED_DESC_1,
      CREATED_ASC_1,
      DUE_DATE_ASC,
      DUE_DATE_DESC,
      EXPIRED_LAST_DUE_DATE_ASC,
      EXPIRED_LAST_DUE_DATE_DESC
    )

  }

  sealed trait MilestoneStateEnum extends scala.Product with scala.Serializable { def value: String }

  object MilestoneStateEnum {
    case object active extends MilestoneStateEnum { val value: String = "active" }
    case object closed extends MilestoneStateEnum { val value: String = "closed" }

    implicit val decoder: ScalarDecoder[MilestoneStateEnum] = {
      case __StringValue("active") => Right(MilestoneStateEnum.active)
      case __StringValue("closed") => Right(MilestoneStateEnum.closed)
      case other                   => Left(DecodingError(s"Can't build MilestoneStateEnum from input $other"))
    }

    implicit val encoder: ArgEncoder[MilestoneStateEnum] = {
      case MilestoneStateEnum.active => __EnumValue("active")
      case MilestoneStateEnum.closed => __EnumValue("closed")
    }

    val values: Vector[MilestoneStateEnum] = Vector(active, closed)
  }

  sealed trait MoveType extends scala.Product with scala.Serializable { def value: String }

  object MoveType {
    case object before extends MoveType { val value: String = "before" }
    case object after extends MoveType { val value: String = "after" }

    implicit val decoder: ScalarDecoder[MoveType] = {
      case __StringValue("before") => Right(MoveType.before)
      case __StringValue("after")  => Right(MoveType.after)
      case other                   => Left(DecodingError(s"Can't build MoveType from input $other"))
    }

    implicit val encoder: ArgEncoder[MoveType] = {
      case MoveType.before => __EnumValue("before")
      case MoveType.after  => __EnumValue("after")
    }

    val values: Vector[MoveType] = Vector(before, after)
  }

  sealed trait MutationOperationMode extends scala.Product with scala.Serializable { def value: String }

  object MutationOperationMode {
    case object REPLACE extends MutationOperationMode { val value: String = "REPLACE" }
    case object APPEND extends MutationOperationMode { val value: String = "APPEND" }
    case object REMOVE extends MutationOperationMode { val value: String = "REMOVE" }

    implicit val decoder: ScalarDecoder[MutationOperationMode] = {
      case __StringValue("REPLACE") => Right(MutationOperationMode.REPLACE)
      case __StringValue("APPEND")  => Right(MutationOperationMode.APPEND)
      case __StringValue("REMOVE")  => Right(MutationOperationMode.REMOVE)
      case other                    => Left(DecodingError(s"Can't build MutationOperationMode from input $other"))
    }

    implicit val encoder: ArgEncoder[MutationOperationMode] = {
      case MutationOperationMode.REPLACE => __EnumValue("REPLACE")
      case MutationOperationMode.APPEND  => __EnumValue("APPEND")
      case MutationOperationMode.REMOVE  => __EnumValue("REMOVE")
    }

    val values: Vector[MutationOperationMode] = Vector(REPLACE, APPEND, REMOVE)
  }

  sealed trait NamespaceProjectSort extends scala.Product with scala.Serializable { def value: String }

  object NamespaceProjectSort {
    case object SIMILARITY extends NamespaceProjectSort { val value: String = "SIMILARITY" }
    case object STORAGE extends NamespaceProjectSort { val value: String = "STORAGE" }

    implicit val decoder: ScalarDecoder[NamespaceProjectSort] = {
      case __StringValue("SIMILARITY") => Right(NamespaceProjectSort.SIMILARITY)
      case __StringValue("STORAGE")    => Right(NamespaceProjectSort.STORAGE)
      case other                       => Left(DecodingError(s"Can't build NamespaceProjectSort from input $other"))
    }

    implicit val encoder: ArgEncoder[NamespaceProjectSort] = {
      case NamespaceProjectSort.SIMILARITY => __EnumValue("SIMILARITY")
      case NamespaceProjectSort.STORAGE    => __EnumValue("STORAGE")
    }

    val values: Vector[NamespaceProjectSort] = Vector(SIMILARITY, STORAGE)
  }

  sealed trait NegatedIterationWildcardId extends scala.Product with scala.Serializable { def value: String }

  object NegatedIterationWildcardId {
    case object CURRENT extends NegatedIterationWildcardId { val value: String = "CURRENT" }

    implicit val decoder: ScalarDecoder[NegatedIterationWildcardId] = {
      case __StringValue("CURRENT") => Right(NegatedIterationWildcardId.CURRENT)
      case other                    => Left(DecodingError(s"Can't build NegatedIterationWildcardId from input $other"))
    }

    implicit val encoder: ArgEncoder[NegatedIterationWildcardId] = { case NegatedIterationWildcardId.CURRENT =>
      __EnumValue("CURRENT")
    }

    val values: Vector[NegatedIterationWildcardId] = Vector(CURRENT)
  }

  sealed trait OncallRotationUnitEnum extends scala.Product with scala.Serializable { def value: String }

  object OncallRotationUnitEnum {
    case object HOURS extends OncallRotationUnitEnum { val value: String = "HOURS" }
    case object DAYS extends OncallRotationUnitEnum { val value: String = "DAYS" }
    case object WEEKS extends OncallRotationUnitEnum { val value: String = "WEEKS" }

    implicit val decoder: ScalarDecoder[OncallRotationUnitEnum] = {
      case __StringValue("HOURS") => Right(OncallRotationUnitEnum.HOURS)
      case __StringValue("DAYS")  => Right(OncallRotationUnitEnum.DAYS)
      case __StringValue("WEEKS") => Right(OncallRotationUnitEnum.WEEKS)
      case other                  => Left(DecodingError(s"Can't build OncallRotationUnitEnum from input $other"))
    }

    implicit val encoder: ArgEncoder[OncallRotationUnitEnum] = {
      case OncallRotationUnitEnum.HOURS => __EnumValue("HOURS")
      case OncallRotationUnitEnum.DAYS  => __EnumValue("DAYS")
      case OncallRotationUnitEnum.WEEKS => __EnumValue("WEEKS")
    }

    val values: Vector[OncallRotationUnitEnum] = Vector(HOURS, DAYS, WEEKS)
  }

  sealed trait PackageGroupSort extends scala.Product with scala.Serializable { def value: String }

  object PackageGroupSort {
    case object CREATED_DESC extends PackageGroupSort { val value: String = "CREATED_DESC" }
    case object CREATED_ASC extends PackageGroupSort { val value: String = "CREATED_ASC" }
    case object NAME_DESC extends PackageGroupSort { val value: String = "NAME_DESC" }
    case object NAME_ASC extends PackageGroupSort { val value: String = "NAME_ASC" }
    case object VERSION_DESC extends PackageGroupSort { val value: String = "VERSION_DESC" }
    case object VERSION_ASC extends PackageGroupSort { val value: String = "VERSION_ASC" }
    case object TYPE_DESC extends PackageGroupSort { val value: String = "TYPE_DESC" }
    case object TYPE_ASC extends PackageGroupSort { val value: String = "TYPE_ASC" }
    case object PROJECT_PATH_DESC extends PackageGroupSort { val value: String = "PROJECT_PATH_DESC" }
    case object PROJECT_PATH_ASC extends PackageGroupSort { val value: String = "PROJECT_PATH_ASC" }

    implicit val decoder: ScalarDecoder[PackageGroupSort] = {
      case __StringValue("CREATED_DESC")      => Right(PackageGroupSort.CREATED_DESC)
      case __StringValue("CREATED_ASC")       => Right(PackageGroupSort.CREATED_ASC)
      case __StringValue("NAME_DESC")         => Right(PackageGroupSort.NAME_DESC)
      case __StringValue("NAME_ASC")          => Right(PackageGroupSort.NAME_ASC)
      case __StringValue("VERSION_DESC")      => Right(PackageGroupSort.VERSION_DESC)
      case __StringValue("VERSION_ASC")       => Right(PackageGroupSort.VERSION_ASC)
      case __StringValue("TYPE_DESC")         => Right(PackageGroupSort.TYPE_DESC)
      case __StringValue("TYPE_ASC")          => Right(PackageGroupSort.TYPE_ASC)
      case __StringValue("PROJECT_PATH_DESC") => Right(PackageGroupSort.PROJECT_PATH_DESC)
      case __StringValue("PROJECT_PATH_ASC")  => Right(PackageGroupSort.PROJECT_PATH_ASC)
      case other                              => Left(DecodingError(s"Can't build PackageGroupSort from input $other"))
    }

    implicit val encoder: ArgEncoder[PackageGroupSort] = {
      case PackageGroupSort.CREATED_DESC      => __EnumValue("CREATED_DESC")
      case PackageGroupSort.CREATED_ASC       => __EnumValue("CREATED_ASC")
      case PackageGroupSort.NAME_DESC         => __EnumValue("NAME_DESC")
      case PackageGroupSort.NAME_ASC          => __EnumValue("NAME_ASC")
      case PackageGroupSort.VERSION_DESC      => __EnumValue("VERSION_DESC")
      case PackageGroupSort.VERSION_ASC       => __EnumValue("VERSION_ASC")
      case PackageGroupSort.TYPE_DESC         => __EnumValue("TYPE_DESC")
      case PackageGroupSort.TYPE_ASC          => __EnumValue("TYPE_ASC")
      case PackageGroupSort.PROJECT_PATH_DESC => __EnumValue("PROJECT_PATH_DESC")
      case PackageGroupSort.PROJECT_PATH_ASC  => __EnumValue("PROJECT_PATH_ASC")
    }

    val values: Vector[PackageGroupSort] = Vector(
      CREATED_DESC,
      CREATED_ASC,
      NAME_DESC,
      NAME_ASC,
      VERSION_DESC,
      VERSION_ASC,
      TYPE_DESC,
      TYPE_ASC,
      PROJECT_PATH_DESC,
      PROJECT_PATH_ASC
    )

  }

  sealed trait PackageSort extends scala.Product with scala.Serializable { def value: String }

  object PackageSort {
    case object CREATED_DESC extends PackageSort { val value: String = "CREATED_DESC" }
    case object CREATED_ASC extends PackageSort { val value: String = "CREATED_ASC" }
    case object NAME_DESC extends PackageSort { val value: String = "NAME_DESC" }
    case object NAME_ASC extends PackageSort { val value: String = "NAME_ASC" }
    case object VERSION_DESC extends PackageSort { val value: String = "VERSION_DESC" }
    case object VERSION_ASC extends PackageSort { val value: String = "VERSION_ASC" }
    case object TYPE_DESC extends PackageSort { val value: String = "TYPE_DESC" }
    case object TYPE_ASC extends PackageSort { val value: String = "TYPE_ASC" }

    implicit val decoder: ScalarDecoder[PackageSort] = {
      case __StringValue("CREATED_DESC") => Right(PackageSort.CREATED_DESC)
      case __StringValue("CREATED_ASC")  => Right(PackageSort.CREATED_ASC)
      case __StringValue("NAME_DESC")    => Right(PackageSort.NAME_DESC)
      case __StringValue("NAME_ASC")     => Right(PackageSort.NAME_ASC)
      case __StringValue("VERSION_DESC") => Right(PackageSort.VERSION_DESC)
      case __StringValue("VERSION_ASC")  => Right(PackageSort.VERSION_ASC)
      case __StringValue("TYPE_DESC")    => Right(PackageSort.TYPE_DESC)
      case __StringValue("TYPE_ASC")     => Right(PackageSort.TYPE_ASC)
      case other                         => Left(DecodingError(s"Can't build PackageSort from input $other"))
    }

    implicit val encoder: ArgEncoder[PackageSort] = {
      case PackageSort.CREATED_DESC => __EnumValue("CREATED_DESC")
      case PackageSort.CREATED_ASC  => __EnumValue("CREATED_ASC")
      case PackageSort.NAME_DESC    => __EnumValue("NAME_DESC")
      case PackageSort.NAME_ASC     => __EnumValue("NAME_ASC")
      case PackageSort.VERSION_DESC => __EnumValue("VERSION_DESC")
      case PackageSort.VERSION_ASC  => __EnumValue("VERSION_ASC")
      case PackageSort.TYPE_DESC    => __EnumValue("TYPE_DESC")
      case PackageSort.TYPE_ASC     => __EnumValue("TYPE_ASC")
    }

    val values: Vector[PackageSort] = Vector(CREATED_DESC, CREATED_ASC, NAME_DESC, NAME_ASC, VERSION_DESC, VERSION_ASC, TYPE_DESC, TYPE_ASC)
  }

  sealed trait PackageStatus extends scala.Product with scala.Serializable { def value: String }

  object PackageStatus {
    case object DEFAULT extends PackageStatus { val value: String = "DEFAULT" }
    case object HIDDEN extends PackageStatus { val value: String = "HIDDEN" }
    case object PROCESSING extends PackageStatus { val value: String = "PROCESSING" }
    case object ERROR extends PackageStatus { val value: String = "ERROR" }

    implicit val decoder: ScalarDecoder[PackageStatus] = {
      case __StringValue("DEFAULT")    => Right(PackageStatus.DEFAULT)
      case __StringValue("HIDDEN")     => Right(PackageStatus.HIDDEN)
      case __StringValue("PROCESSING") => Right(PackageStatus.PROCESSING)
      case __StringValue("ERROR")      => Right(PackageStatus.ERROR)
      case other                       => Left(DecodingError(s"Can't build PackageStatus from input $other"))
    }

    implicit val encoder: ArgEncoder[PackageStatus] = {
      case PackageStatus.DEFAULT    => __EnumValue("DEFAULT")
      case PackageStatus.HIDDEN     => __EnumValue("HIDDEN")
      case PackageStatus.PROCESSING => __EnumValue("PROCESSING")
      case PackageStatus.ERROR      => __EnumValue("ERROR")
    }

    val values: Vector[PackageStatus] = Vector(DEFAULT, HIDDEN, PROCESSING, ERROR)
  }

  sealed trait PackageTypeEnum extends scala.Product with scala.Serializable { def value: String }

  object PackageTypeEnum {
    case object MAVEN extends PackageTypeEnum { val value: String = "MAVEN" }
    case object NPM extends PackageTypeEnum { val value: String = "NPM" }
    case object CONAN extends PackageTypeEnum { val value: String = "CONAN" }
    case object NUGET extends PackageTypeEnum { val value: String = "NUGET" }
    case object PYPI extends PackageTypeEnum { val value: String = "PYPI" }
    case object COMPOSER extends PackageTypeEnum { val value: String = "COMPOSER" }
    case object GENERIC extends PackageTypeEnum { val value: String = "GENERIC" }
    case object GOLANG extends PackageTypeEnum { val value: String = "GOLANG" }
    case object DEBIAN extends PackageTypeEnum { val value: String = "DEBIAN" }
    case object RUBYGEMS extends PackageTypeEnum { val value: String = "RUBYGEMS" }
    case object HELM extends PackageTypeEnum { val value: String = "HELM" }
    case object TERRAFORM_MODULE extends PackageTypeEnum { val value: String = "TERRAFORM_MODULE" }

    implicit val decoder: ScalarDecoder[PackageTypeEnum] = {
      case __StringValue("MAVEN")            => Right(PackageTypeEnum.MAVEN)
      case __StringValue("NPM")              => Right(PackageTypeEnum.NPM)
      case __StringValue("CONAN")            => Right(PackageTypeEnum.CONAN)
      case __StringValue("NUGET")            => Right(PackageTypeEnum.NUGET)
      case __StringValue("PYPI")             => Right(PackageTypeEnum.PYPI)
      case __StringValue("COMPOSER")         => Right(PackageTypeEnum.COMPOSER)
      case __StringValue("GENERIC")          => Right(PackageTypeEnum.GENERIC)
      case __StringValue("GOLANG")           => Right(PackageTypeEnum.GOLANG)
      case __StringValue("DEBIAN")           => Right(PackageTypeEnum.DEBIAN)
      case __StringValue("RUBYGEMS")         => Right(PackageTypeEnum.RUBYGEMS)
      case __StringValue("HELM")             => Right(PackageTypeEnum.HELM)
      case __StringValue("TERRAFORM_MODULE") => Right(PackageTypeEnum.TERRAFORM_MODULE)
      case other                             => Left(DecodingError(s"Can't build PackageTypeEnum from input $other"))
    }

    implicit val encoder: ArgEncoder[PackageTypeEnum] = {
      case PackageTypeEnum.MAVEN            => __EnumValue("MAVEN")
      case PackageTypeEnum.NPM              => __EnumValue("NPM")
      case PackageTypeEnum.CONAN            => __EnumValue("CONAN")
      case PackageTypeEnum.NUGET            => __EnumValue("NUGET")
      case PackageTypeEnum.PYPI             => __EnumValue("PYPI")
      case PackageTypeEnum.COMPOSER         => __EnumValue("COMPOSER")
      case PackageTypeEnum.GENERIC          => __EnumValue("GENERIC")
      case PackageTypeEnum.GOLANG           => __EnumValue("GOLANG")
      case PackageTypeEnum.DEBIAN           => __EnumValue("DEBIAN")
      case PackageTypeEnum.RUBYGEMS         => __EnumValue("RUBYGEMS")
      case PackageTypeEnum.HELM             => __EnumValue("HELM")
      case PackageTypeEnum.TERRAFORM_MODULE => __EnumValue("TERRAFORM_MODULE")
    }

    val values: Vector[PackageTypeEnum] =
      Vector(MAVEN, NPM, CONAN, NUGET, PYPI, COMPOSER, GENERIC, GOLANG, DEBIAN, RUBYGEMS, HELM, TERRAFORM_MODULE)
  }

  sealed trait PipelineConfigSourceEnum extends scala.Product with scala.Serializable { def value: String }

  object PipelineConfigSourceEnum {
    case object UNKNOWN_SOURCE extends PipelineConfigSourceEnum { val value: String = "UNKNOWN_SOURCE" }
    case object REPOSITORY_SOURCE extends PipelineConfigSourceEnum { val value: String = "REPOSITORY_SOURCE" }
    case object AUTO_DEVOPS_SOURCE extends PipelineConfigSourceEnum { val value: String = "AUTO_DEVOPS_SOURCE" }
    case object WEBIDE_SOURCE extends PipelineConfigSourceEnum { val value: String = "WEBIDE_SOURCE" }
    case object REMOTE_SOURCE extends PipelineConfigSourceEnum { val value: String = "REMOTE_SOURCE" }
    case object EXTERNAL_PROJECT_SOURCE extends PipelineConfigSourceEnum { val value: String = "EXTERNAL_PROJECT_SOURCE" }
    case object BRIDGE_SOURCE extends PipelineConfigSourceEnum { val value: String = "BRIDGE_SOURCE" }
    case object PARAMETER_SOURCE extends PipelineConfigSourceEnum { val value: String = "PARAMETER_SOURCE" }
    case object COMPLIANCE_SOURCE extends PipelineConfigSourceEnum { val value: String = "COMPLIANCE_SOURCE" }

    implicit val decoder: ScalarDecoder[PipelineConfigSourceEnum] = {
      case __StringValue("UNKNOWN_SOURCE")          => Right(PipelineConfigSourceEnum.UNKNOWN_SOURCE)
      case __StringValue("REPOSITORY_SOURCE")       => Right(PipelineConfigSourceEnum.REPOSITORY_SOURCE)
      case __StringValue("AUTO_DEVOPS_SOURCE")      => Right(PipelineConfigSourceEnum.AUTO_DEVOPS_SOURCE)
      case __StringValue("WEBIDE_SOURCE")           => Right(PipelineConfigSourceEnum.WEBIDE_SOURCE)
      case __StringValue("REMOTE_SOURCE")           => Right(PipelineConfigSourceEnum.REMOTE_SOURCE)
      case __StringValue("EXTERNAL_PROJECT_SOURCE") => Right(PipelineConfigSourceEnum.EXTERNAL_PROJECT_SOURCE)
      case __StringValue("BRIDGE_SOURCE")           => Right(PipelineConfigSourceEnum.BRIDGE_SOURCE)
      case __StringValue("PARAMETER_SOURCE")        => Right(PipelineConfigSourceEnum.PARAMETER_SOURCE)
      case __StringValue("COMPLIANCE_SOURCE")       => Right(PipelineConfigSourceEnum.COMPLIANCE_SOURCE)
      case other                                    => Left(DecodingError(s"Can't build PipelineConfigSourceEnum from input $other"))
    }

    implicit val encoder: ArgEncoder[PipelineConfigSourceEnum] = {
      case PipelineConfigSourceEnum.UNKNOWN_SOURCE          => __EnumValue("UNKNOWN_SOURCE")
      case PipelineConfigSourceEnum.REPOSITORY_SOURCE       => __EnumValue("REPOSITORY_SOURCE")
      case PipelineConfigSourceEnum.AUTO_DEVOPS_SOURCE      => __EnumValue("AUTO_DEVOPS_SOURCE")
      case PipelineConfigSourceEnum.WEBIDE_SOURCE           => __EnumValue("WEBIDE_SOURCE")
      case PipelineConfigSourceEnum.REMOTE_SOURCE           => __EnumValue("REMOTE_SOURCE")
      case PipelineConfigSourceEnum.EXTERNAL_PROJECT_SOURCE => __EnumValue("EXTERNAL_PROJECT_SOURCE")
      case PipelineConfigSourceEnum.BRIDGE_SOURCE           => __EnumValue("BRIDGE_SOURCE")
      case PipelineConfigSourceEnum.PARAMETER_SOURCE        => __EnumValue("PARAMETER_SOURCE")
      case PipelineConfigSourceEnum.COMPLIANCE_SOURCE       => __EnumValue("COMPLIANCE_SOURCE")
    }

    val values: Vector[PipelineConfigSourceEnum] = Vector(
      UNKNOWN_SOURCE,
      REPOSITORY_SOURCE,
      AUTO_DEVOPS_SOURCE,
      WEBIDE_SOURCE,
      REMOTE_SOURCE,
      EXTERNAL_PROJECT_SOURCE,
      BRIDGE_SOURCE,
      PARAMETER_SOURCE,
      COMPLIANCE_SOURCE
    )

  }

  sealed trait PipelineStatusEnum extends scala.Product with scala.Serializable { def value: String }

  object PipelineStatusEnum {
    case object CREATED extends PipelineStatusEnum { val value: String = "CREATED" }
    case object WAITING_FOR_RESOURCE extends PipelineStatusEnum { val value: String = "WAITING_FOR_RESOURCE" }
    case object PREPARING extends PipelineStatusEnum { val value: String = "PREPARING" }
    case object PENDING extends PipelineStatusEnum { val value: String = "PENDING" }
    case object RUNNING extends PipelineStatusEnum { val value: String = "RUNNING" }
    case object FAILED extends PipelineStatusEnum { val value: String = "FAILED" }
    case object SUCCESS extends PipelineStatusEnum { val value: String = "SUCCESS" }
    case object CANCELED extends PipelineStatusEnum { val value: String = "CANCELED" }
    case object SKIPPED extends PipelineStatusEnum { val value: String = "SKIPPED" }
    case object MANUAL extends PipelineStatusEnum { val value: String = "MANUAL" }
    case object SCHEDULED extends PipelineStatusEnum { val value: String = "SCHEDULED" }

    implicit val decoder: ScalarDecoder[PipelineStatusEnum] = {
      case __StringValue("CREATED")              => Right(PipelineStatusEnum.CREATED)
      case __StringValue("WAITING_FOR_RESOURCE") => Right(PipelineStatusEnum.WAITING_FOR_RESOURCE)
      case __StringValue("PREPARING")            => Right(PipelineStatusEnum.PREPARING)
      case __StringValue("PENDING")              => Right(PipelineStatusEnum.PENDING)
      case __StringValue("RUNNING")              => Right(PipelineStatusEnum.RUNNING)
      case __StringValue("FAILED")               => Right(PipelineStatusEnum.FAILED)
      case __StringValue("SUCCESS")              => Right(PipelineStatusEnum.SUCCESS)
      case __StringValue("CANCELED")             => Right(PipelineStatusEnum.CANCELED)
      case __StringValue("SKIPPED")              => Right(PipelineStatusEnum.SKIPPED)
      case __StringValue("MANUAL")               => Right(PipelineStatusEnum.MANUAL)
      case __StringValue("SCHEDULED")            => Right(PipelineStatusEnum.SCHEDULED)
      case other                                 => Left(DecodingError(s"Can't build PipelineStatusEnum from input $other"))
    }

    implicit val encoder: ArgEncoder[PipelineStatusEnum] = {
      case PipelineStatusEnum.CREATED              => __EnumValue("CREATED")
      case PipelineStatusEnum.WAITING_FOR_RESOURCE => __EnumValue("WAITING_FOR_RESOURCE")
      case PipelineStatusEnum.PREPARING            => __EnumValue("PREPARING")
      case PipelineStatusEnum.PENDING              => __EnumValue("PENDING")
      case PipelineStatusEnum.RUNNING              => __EnumValue("RUNNING")
      case PipelineStatusEnum.FAILED               => __EnumValue("FAILED")
      case PipelineStatusEnum.SUCCESS              => __EnumValue("SUCCESS")
      case PipelineStatusEnum.CANCELED             => __EnumValue("CANCELED")
      case PipelineStatusEnum.SKIPPED              => __EnumValue("SKIPPED")
      case PipelineStatusEnum.MANUAL               => __EnumValue("MANUAL")
      case PipelineStatusEnum.SCHEDULED            => __EnumValue("SCHEDULED")
    }

    val values: Vector[PipelineStatusEnum] =
      Vector(CREATED, WAITING_FOR_RESOURCE, PREPARING, PENDING, RUNNING, FAILED, SUCCESS, CANCELED, SKIPPED, MANUAL, SCHEDULED)
  }

  sealed trait ProjectMemberRelation extends scala.Product with scala.Serializable { def value: String }

  object ProjectMemberRelation {
    case object DIRECT extends ProjectMemberRelation { val value: String = "DIRECT" }
    case object INHERITED extends ProjectMemberRelation { val value: String = "INHERITED" }
    case object DESCENDANTS extends ProjectMemberRelation { val value: String = "DESCENDANTS" }
    case object INVITED_GROUPS extends ProjectMemberRelation { val value: String = "INVITED_GROUPS" }

    implicit val decoder: ScalarDecoder[ProjectMemberRelation] = {
      case __StringValue("DIRECT")         => Right(ProjectMemberRelation.DIRECT)
      case __StringValue("INHERITED")      => Right(ProjectMemberRelation.INHERITED)
      case __StringValue("DESCENDANTS")    => Right(ProjectMemberRelation.DESCENDANTS)
      case __StringValue("INVITED_GROUPS") => Right(ProjectMemberRelation.INVITED_GROUPS)
      case other                           => Left(DecodingError(s"Can't build ProjectMemberRelation from input $other"))
    }

    implicit val encoder: ArgEncoder[ProjectMemberRelation] = {
      case ProjectMemberRelation.DIRECT         => __EnumValue("DIRECT")
      case ProjectMemberRelation.INHERITED      => __EnumValue("INHERITED")
      case ProjectMemberRelation.DESCENDANTS    => __EnumValue("DESCENDANTS")
      case ProjectMemberRelation.INVITED_GROUPS => __EnumValue("INVITED_GROUPS")
    }

    val values: Vector[ProjectMemberRelation] = Vector(DIRECT, INHERITED, DESCENDANTS, INVITED_GROUPS)
  }

  sealed trait RegistryState extends scala.Product with scala.Serializable { def value: String }

  object RegistryState {
    case object PENDING extends RegistryState { val value: String = "PENDING" }
    case object STARTED extends RegistryState { val value: String = "STARTED" }
    case object SYNCED extends RegistryState { val value: String = "SYNCED" }
    case object FAILED extends RegistryState { val value: String = "FAILED" }

    implicit val decoder: ScalarDecoder[RegistryState] = {
      case __StringValue("PENDING") => Right(RegistryState.PENDING)
      case __StringValue("STARTED") => Right(RegistryState.STARTED)
      case __StringValue("SYNCED")  => Right(RegistryState.SYNCED)
      case __StringValue("FAILED")  => Right(RegistryState.FAILED)
      case other                    => Left(DecodingError(s"Can't build RegistryState from input $other"))
    }

    implicit val encoder: ArgEncoder[RegistryState] = {
      case RegistryState.PENDING => __EnumValue("PENDING")
      case RegistryState.STARTED => __EnumValue("STARTED")
      case RegistryState.SYNCED  => __EnumValue("SYNCED")
      case RegistryState.FAILED  => __EnumValue("FAILED")
    }

    val values: Vector[RegistryState] = Vector(PENDING, STARTED, SYNCED, FAILED)
  }

  sealed trait ReleaseAssetLinkType extends scala.Product with scala.Serializable { def value: String }

  object ReleaseAssetLinkType {
    case object OTHER extends ReleaseAssetLinkType { val value: String = "OTHER" }
    case object RUNBOOK extends ReleaseAssetLinkType { val value: String = "RUNBOOK" }
    case object PACKAGE extends ReleaseAssetLinkType { val value: String = "PACKAGE" }
    case object IMAGE extends ReleaseAssetLinkType { val value: String = "IMAGE" }

    implicit val decoder: ScalarDecoder[ReleaseAssetLinkType] = {
      case __StringValue("OTHER")   => Right(ReleaseAssetLinkType.OTHER)
      case __StringValue("RUNBOOK") => Right(ReleaseAssetLinkType.RUNBOOK)
      case __StringValue("PACKAGE") => Right(ReleaseAssetLinkType.PACKAGE)
      case __StringValue("IMAGE")   => Right(ReleaseAssetLinkType.IMAGE)
      case other                    => Left(DecodingError(s"Can't build ReleaseAssetLinkType from input $other"))
    }

    implicit val encoder: ArgEncoder[ReleaseAssetLinkType] = {
      case ReleaseAssetLinkType.OTHER   => __EnumValue("OTHER")
      case ReleaseAssetLinkType.RUNBOOK => __EnumValue("RUNBOOK")
      case ReleaseAssetLinkType.PACKAGE => __EnumValue("PACKAGE")
      case ReleaseAssetLinkType.IMAGE   => __EnumValue("IMAGE")
    }

    val values: Vector[ReleaseAssetLinkType] = Vector(OTHER, RUNBOOK, PACKAGE, IMAGE)
  }

  sealed trait ReleaseSort extends scala.Product with scala.Serializable { def value: String }

  object ReleaseSort {
    case object CREATED_DESC extends ReleaseSort { val value: String = "CREATED_DESC" }
    case object CREATED_ASC extends ReleaseSort { val value: String = "CREATED_ASC" }
    case object RELEASED_AT_DESC extends ReleaseSort { val value: String = "RELEASED_AT_DESC" }
    case object RELEASED_AT_ASC extends ReleaseSort { val value: String = "RELEASED_AT_ASC" }

    implicit val decoder: ScalarDecoder[ReleaseSort] = {
      case __StringValue("CREATED_DESC")     => Right(ReleaseSort.CREATED_DESC)
      case __StringValue("CREATED_ASC")      => Right(ReleaseSort.CREATED_ASC)
      case __StringValue("RELEASED_AT_DESC") => Right(ReleaseSort.RELEASED_AT_DESC)
      case __StringValue("RELEASED_AT_ASC")  => Right(ReleaseSort.RELEASED_AT_ASC)
      case other                             => Left(DecodingError(s"Can't build ReleaseSort from input $other"))
    }

    implicit val encoder: ArgEncoder[ReleaseSort] = {
      case ReleaseSort.CREATED_DESC     => __EnumValue("CREATED_DESC")
      case ReleaseSort.CREATED_ASC      => __EnumValue("CREATED_ASC")
      case ReleaseSort.RELEASED_AT_DESC => __EnumValue("RELEASED_AT_DESC")
      case ReleaseSort.RELEASED_AT_ASC  => __EnumValue("RELEASED_AT_ASC")
    }

    val values: Vector[ReleaseSort] = Vector(CREATED_DESC, CREATED_ASC, RELEASED_AT_DESC, RELEASED_AT_ASC)
  }

  sealed trait RequirementState extends scala.Product with scala.Serializable { def value: String }

  object RequirementState {
    case object OPENED extends RequirementState { val value: String = "OPENED" }
    case object ARCHIVED extends RequirementState { val value: String = "ARCHIVED" }

    implicit val decoder: ScalarDecoder[RequirementState] = {
      case __StringValue("OPENED")   => Right(RequirementState.OPENED)
      case __StringValue("ARCHIVED") => Right(RequirementState.ARCHIVED)
      case other                     => Left(DecodingError(s"Can't build RequirementState from input $other"))
    }

    implicit val encoder: ArgEncoder[RequirementState] = {
      case RequirementState.OPENED   => __EnumValue("OPENED")
      case RequirementState.ARCHIVED => __EnumValue("ARCHIVED")
    }

    val values: Vector[RequirementState] = Vector(OPENED, ARCHIVED)
  }

  sealed trait RequirementStatusFilter extends scala.Product with scala.Serializable { def value: String }

  object RequirementStatusFilter {
    case object PASSED extends RequirementStatusFilter { val value: String = "PASSED" }
    case object FAILED extends RequirementStatusFilter { val value: String = "FAILED" }
    case object MISSING extends RequirementStatusFilter { val value: String = "MISSING" }

    implicit val decoder: ScalarDecoder[RequirementStatusFilter] = {
      case __StringValue("PASSED")  => Right(RequirementStatusFilter.PASSED)
      case __StringValue("FAILED")  => Right(RequirementStatusFilter.FAILED)
      case __StringValue("MISSING") => Right(RequirementStatusFilter.MISSING)
      case other                    => Left(DecodingError(s"Can't build RequirementStatusFilter from input $other"))
    }

    implicit val encoder: ArgEncoder[RequirementStatusFilter] = {
      case RequirementStatusFilter.PASSED  => __EnumValue("PASSED")
      case RequirementStatusFilter.FAILED  => __EnumValue("FAILED")
      case RequirementStatusFilter.MISSING => __EnumValue("MISSING")
    }

    val values: Vector[RequirementStatusFilter] = Vector(PASSED, FAILED, MISSING)
  }

  sealed trait SastUiComponentSize extends scala.Product with scala.Serializable { def value: String }

  object SastUiComponentSize {
    case object SMALL extends SastUiComponentSize { val value: String = "SMALL" }
    case object MEDIUM extends SastUiComponentSize { val value: String = "MEDIUM" }
    case object LARGE extends SastUiComponentSize { val value: String = "LARGE" }

    implicit val decoder: ScalarDecoder[SastUiComponentSize] = {
      case __StringValue("SMALL")  => Right(SastUiComponentSize.SMALL)
      case __StringValue("MEDIUM") => Right(SastUiComponentSize.MEDIUM)
      case __StringValue("LARGE")  => Right(SastUiComponentSize.LARGE)
      case other                   => Left(DecodingError(s"Can't build SastUiComponentSize from input $other"))
    }

    implicit val encoder: ArgEncoder[SastUiComponentSize] = {
      case SastUiComponentSize.SMALL  => __EnumValue("SMALL")
      case SastUiComponentSize.MEDIUM => __EnumValue("MEDIUM")
      case SastUiComponentSize.LARGE  => __EnumValue("LARGE")
    }

    val values: Vector[SastUiComponentSize] = Vector(SMALL, MEDIUM, LARGE)
  }

  sealed trait SecurityReportTypeEnum extends scala.Product with scala.Serializable { def value: String }

  object SecurityReportTypeEnum {
    case object SAST extends SecurityReportTypeEnum { val value: String = "SAST" }
    case object DAST extends SecurityReportTypeEnum { val value: String = "DAST" }
    case object DEPENDENCY_SCANNING extends SecurityReportTypeEnum { val value: String = "DEPENDENCY_SCANNING" }
    case object CONTAINER_SCANNING extends SecurityReportTypeEnum { val value: String = "CONTAINER_SCANNING" }
    case object SECRET_DETECTION extends SecurityReportTypeEnum { val value: String = "SECRET_DETECTION" }
    case object COVERAGE_FUZZING extends SecurityReportTypeEnum { val value: String = "COVERAGE_FUZZING" }
    case object API_FUZZING extends SecurityReportTypeEnum { val value: String = "API_FUZZING" }
    case object CLUSTER_IMAGE_SCANNING extends SecurityReportTypeEnum { val value: String = "CLUSTER_IMAGE_SCANNING" }

    implicit val decoder: ScalarDecoder[SecurityReportTypeEnum] = {
      case __StringValue("SAST")                   => Right(SecurityReportTypeEnum.SAST)
      case __StringValue("DAST")                   => Right(SecurityReportTypeEnum.DAST)
      case __StringValue("DEPENDENCY_SCANNING")    => Right(SecurityReportTypeEnum.DEPENDENCY_SCANNING)
      case __StringValue("CONTAINER_SCANNING")     => Right(SecurityReportTypeEnum.CONTAINER_SCANNING)
      case __StringValue("SECRET_DETECTION")       => Right(SecurityReportTypeEnum.SECRET_DETECTION)
      case __StringValue("COVERAGE_FUZZING")       => Right(SecurityReportTypeEnum.COVERAGE_FUZZING)
      case __StringValue("API_FUZZING")            => Right(SecurityReportTypeEnum.API_FUZZING)
      case __StringValue("CLUSTER_IMAGE_SCANNING") => Right(SecurityReportTypeEnum.CLUSTER_IMAGE_SCANNING)
      case other                                   => Left(DecodingError(s"Can't build SecurityReportTypeEnum from input $other"))
    }

    implicit val encoder: ArgEncoder[SecurityReportTypeEnum] = {
      case SecurityReportTypeEnum.SAST                   => __EnumValue("SAST")
      case SecurityReportTypeEnum.DAST                   => __EnumValue("DAST")
      case SecurityReportTypeEnum.DEPENDENCY_SCANNING    => __EnumValue("DEPENDENCY_SCANNING")
      case SecurityReportTypeEnum.CONTAINER_SCANNING     => __EnumValue("CONTAINER_SCANNING")
      case SecurityReportTypeEnum.SECRET_DETECTION       => __EnumValue("SECRET_DETECTION")
      case SecurityReportTypeEnum.COVERAGE_FUZZING       => __EnumValue("COVERAGE_FUZZING")
      case SecurityReportTypeEnum.API_FUZZING            => __EnumValue("API_FUZZING")
      case SecurityReportTypeEnum.CLUSTER_IMAGE_SCANNING => __EnumValue("CLUSTER_IMAGE_SCANNING")
    }

    val values: Vector[SecurityReportTypeEnum] =
      Vector(SAST, DAST, DEPENDENCY_SCANNING, CONTAINER_SCANNING, SECRET_DETECTION, COVERAGE_FUZZING, API_FUZZING, CLUSTER_IMAGE_SCANNING)
  }

  sealed trait SecurityScannerType extends scala.Product with scala.Serializable { def value: String }

  object SecurityScannerType {
    case object SAST extends SecurityScannerType { val value: String = "SAST" }
    case object DAST extends SecurityScannerType { val value: String = "DAST" }
    case object DEPENDENCY_SCANNING extends SecurityScannerType { val value: String = "DEPENDENCY_SCANNING" }
    case object CONTAINER_SCANNING extends SecurityScannerType { val value: String = "CONTAINER_SCANNING" }
    case object SECRET_DETECTION extends SecurityScannerType { val value: String = "SECRET_DETECTION" }
    case object COVERAGE_FUZZING extends SecurityScannerType { val value: String = "COVERAGE_FUZZING" }
    case object API_FUZZING extends SecurityScannerType { val value: String = "API_FUZZING" }
    case object CLUSTER_IMAGE_SCANNING extends SecurityScannerType { val value: String = "CLUSTER_IMAGE_SCANNING" }

    implicit val decoder: ScalarDecoder[SecurityScannerType] = {
      case __StringValue("SAST")                   => Right(SecurityScannerType.SAST)
      case __StringValue("DAST")                   => Right(SecurityScannerType.DAST)
      case __StringValue("DEPENDENCY_SCANNING")    => Right(SecurityScannerType.DEPENDENCY_SCANNING)
      case __StringValue("CONTAINER_SCANNING")     => Right(SecurityScannerType.CONTAINER_SCANNING)
      case __StringValue("SECRET_DETECTION")       => Right(SecurityScannerType.SECRET_DETECTION)
      case __StringValue("COVERAGE_FUZZING")       => Right(SecurityScannerType.COVERAGE_FUZZING)
      case __StringValue("API_FUZZING")            => Right(SecurityScannerType.API_FUZZING)
      case __StringValue("CLUSTER_IMAGE_SCANNING") => Right(SecurityScannerType.CLUSTER_IMAGE_SCANNING)
      case other                                   => Left(DecodingError(s"Can't build SecurityScannerType from input $other"))
    }

    implicit val encoder: ArgEncoder[SecurityScannerType] = {
      case SecurityScannerType.SAST                   => __EnumValue("SAST")
      case SecurityScannerType.DAST                   => __EnumValue("DAST")
      case SecurityScannerType.DEPENDENCY_SCANNING    => __EnumValue("DEPENDENCY_SCANNING")
      case SecurityScannerType.CONTAINER_SCANNING     => __EnumValue("CONTAINER_SCANNING")
      case SecurityScannerType.SECRET_DETECTION       => __EnumValue("SECRET_DETECTION")
      case SecurityScannerType.COVERAGE_FUZZING       => __EnumValue("COVERAGE_FUZZING")
      case SecurityScannerType.API_FUZZING            => __EnumValue("API_FUZZING")
      case SecurityScannerType.CLUSTER_IMAGE_SCANNING => __EnumValue("CLUSTER_IMAGE_SCANNING")
    }

    val values: Vector[SecurityScannerType] =
      Vector(SAST, DAST, DEPENDENCY_SCANNING, CONTAINER_SCANNING, SECRET_DETECTION, COVERAGE_FUZZING, API_FUZZING, CLUSTER_IMAGE_SCANNING)
  }

  sealed trait SentryErrorStatus extends scala.Product with scala.Serializable { def value: String }

  object SentryErrorStatus {
    case object RESOLVED extends SentryErrorStatus { val value: String = "RESOLVED" }
    case object RESOLVED_IN_NEXT_RELEASE extends SentryErrorStatus { val value: String = "RESOLVED_IN_NEXT_RELEASE" }
    case object UNRESOLVED extends SentryErrorStatus { val value: String = "UNRESOLVED" }
    case object IGNORED extends SentryErrorStatus { val value: String = "IGNORED" }

    implicit val decoder: ScalarDecoder[SentryErrorStatus] = {
      case __StringValue("RESOLVED")                 => Right(SentryErrorStatus.RESOLVED)
      case __StringValue("RESOLVED_IN_NEXT_RELEASE") => Right(SentryErrorStatus.RESOLVED_IN_NEXT_RELEASE)
      case __StringValue("UNRESOLVED")               => Right(SentryErrorStatus.UNRESOLVED)
      case __StringValue("IGNORED")                  => Right(SentryErrorStatus.IGNORED)
      case other                                     => Left(DecodingError(s"Can't build SentryErrorStatus from input $other"))
    }

    implicit val encoder: ArgEncoder[SentryErrorStatus] = {
      case SentryErrorStatus.RESOLVED                 => __EnumValue("RESOLVED")
      case SentryErrorStatus.RESOLVED_IN_NEXT_RELEASE => __EnumValue("RESOLVED_IN_NEXT_RELEASE")
      case SentryErrorStatus.UNRESOLVED               => __EnumValue("UNRESOLVED")
      case SentryErrorStatus.IGNORED                  => __EnumValue("IGNORED")
    }

    val values: Vector[SentryErrorStatus] = Vector(RESOLVED, RESOLVED_IN_NEXT_RELEASE, UNRESOLVED, IGNORED)
  }

  sealed trait ServiceType extends scala.Product with scala.Serializable { def value: String }

  object ServiceType {
    case object ASANA_SERVICE extends ServiceType { val value: String = "ASANA_SERVICE" }
    case object ASSEMBLA_SERVICE extends ServiceType { val value: String = "ASSEMBLA_SERVICE" }
    case object BAMBOO_SERVICE extends ServiceType { val value: String = "BAMBOO_SERVICE" }
    case object BUGZILLA_SERVICE extends ServiceType { val value: String = "BUGZILLA_SERVICE" }
    case object BUILDKITE_SERVICE extends ServiceType { val value: String = "BUILDKITE_SERVICE" }
    case object CAMPFIRE_SERVICE extends ServiceType { val value: String = "CAMPFIRE_SERVICE" }
    case object CONFLUENCE_SERVICE extends ServiceType { val value: String = "CONFLUENCE_SERVICE" }
    case object CUSTOM_ISSUE_TRACKER_SERVICE extends ServiceType { val value: String = "CUSTOM_ISSUE_TRACKER_SERVICE" }
    case object DATADOG_SERVICE extends ServiceType { val value: String = "DATADOG_SERVICE" }
    case object DISCORD_SERVICE extends ServiceType { val value: String = "DISCORD_SERVICE" }
    case object DRONE_CI_SERVICE extends ServiceType { val value: String = "DRONE_CI_SERVICE" }
    case object EMAILS_ON_PUSH_SERVICE extends ServiceType { val value: String = "EMAILS_ON_PUSH_SERVICE" }
    case object EWM_SERVICE extends ServiceType { val value: String = "EWM_SERVICE" }
    case object EXTERNAL_WIKI_SERVICE extends ServiceType { val value: String = "EXTERNAL_WIKI_SERVICE" }
    case object FLOWDOCK_SERVICE extends ServiceType { val value: String = "FLOWDOCK_SERVICE" }
    case object GITHUB_SERVICE extends ServiceType { val value: String = "GITHUB_SERVICE" }
    case object GITLAB_SLACK_APPLICATION_SERVICE extends ServiceType { val value: String = "GITLAB_SLACK_APPLICATION_SERVICE" }
    case object HANGOUTS_CHAT_SERVICE extends ServiceType { val value: String = "HANGOUTS_CHAT_SERVICE" }
    case object IRKER_SERVICE extends ServiceType { val value: String = "IRKER_SERVICE" }
    case object JENKINS_SERVICE extends ServiceType { val value: String = "JENKINS_SERVICE" }
    case object JIRA_SERVICE extends ServiceType { val value: String = "JIRA_SERVICE" }
    case object MATTERMOST_SERVICE extends ServiceType { val value: String = "MATTERMOST_SERVICE" }
    case object MATTERMOST_SLASH_COMMANDS_SERVICE extends ServiceType { val value: String = "MATTERMOST_SLASH_COMMANDS_SERVICE" }
    case object MICROSOFT_TEAMS_SERVICE extends ServiceType { val value: String = "MICROSOFT_TEAMS_SERVICE" }
    case object PACKAGIST_SERVICE extends ServiceType { val value: String = "PACKAGIST_SERVICE" }
    case object PIPELINES_EMAIL_SERVICE extends ServiceType { val value: String = "PIPELINES_EMAIL_SERVICE" }
    case object PIVOTALTRACKER_SERVICE extends ServiceType { val value: String = "PIVOTALTRACKER_SERVICE" }
    case object PROMETHEUS_SERVICE extends ServiceType { val value: String = "PROMETHEUS_SERVICE" }
    case object PUSHOVER_SERVICE extends ServiceType { val value: String = "PUSHOVER_SERVICE" }
    case object REDMINE_SERVICE extends ServiceType { val value: String = "REDMINE_SERVICE" }
    case object SLACK_SERVICE extends ServiceType { val value: String = "SLACK_SERVICE" }
    case object SLACK_SLASH_COMMANDS_SERVICE extends ServiceType { val value: String = "SLACK_SLASH_COMMANDS_SERVICE" }
    case object TEAMCITY_SERVICE extends ServiceType { val value: String = "TEAMCITY_SERVICE" }
    case object UNIFY_CIRCUIT_SERVICE extends ServiceType { val value: String = "UNIFY_CIRCUIT_SERVICE" }
    case object WEBEX_TEAMS_SERVICE extends ServiceType { val value: String = "WEBEX_TEAMS_SERVICE" }
    case object YOUTRACK_SERVICE extends ServiceType { val value: String = "YOUTRACK_SERVICE" }

    implicit val decoder: ScalarDecoder[ServiceType] = {
      case __StringValue("ASANA_SERVICE")                     => Right(ServiceType.ASANA_SERVICE)
      case __StringValue("ASSEMBLA_SERVICE")                  => Right(ServiceType.ASSEMBLA_SERVICE)
      case __StringValue("BAMBOO_SERVICE")                    => Right(ServiceType.BAMBOO_SERVICE)
      case __StringValue("BUGZILLA_SERVICE")                  => Right(ServiceType.BUGZILLA_SERVICE)
      case __StringValue("BUILDKITE_SERVICE")                 => Right(ServiceType.BUILDKITE_SERVICE)
      case __StringValue("CAMPFIRE_SERVICE")                  => Right(ServiceType.CAMPFIRE_SERVICE)
      case __StringValue("CONFLUENCE_SERVICE")                => Right(ServiceType.CONFLUENCE_SERVICE)
      case __StringValue("CUSTOM_ISSUE_TRACKER_SERVICE")      => Right(ServiceType.CUSTOM_ISSUE_TRACKER_SERVICE)
      case __StringValue("DATADOG_SERVICE")                   => Right(ServiceType.DATADOG_SERVICE)
      case __StringValue("DISCORD_SERVICE")                   => Right(ServiceType.DISCORD_SERVICE)
      case __StringValue("DRONE_CI_SERVICE")                  => Right(ServiceType.DRONE_CI_SERVICE)
      case __StringValue("EMAILS_ON_PUSH_SERVICE")            => Right(ServiceType.EMAILS_ON_PUSH_SERVICE)
      case __StringValue("EWM_SERVICE")                       => Right(ServiceType.EWM_SERVICE)
      case __StringValue("EXTERNAL_WIKI_SERVICE")             => Right(ServiceType.EXTERNAL_WIKI_SERVICE)
      case __StringValue("FLOWDOCK_SERVICE")                  => Right(ServiceType.FLOWDOCK_SERVICE)
      case __StringValue("GITHUB_SERVICE")                    => Right(ServiceType.GITHUB_SERVICE)
      case __StringValue("GITLAB_SLACK_APPLICATION_SERVICE")  => Right(ServiceType.GITLAB_SLACK_APPLICATION_SERVICE)
      case __StringValue("HANGOUTS_CHAT_SERVICE")             => Right(ServiceType.HANGOUTS_CHAT_SERVICE)
      case __StringValue("IRKER_SERVICE")                     => Right(ServiceType.IRKER_SERVICE)
      case __StringValue("JENKINS_SERVICE")                   => Right(ServiceType.JENKINS_SERVICE)
      case __StringValue("JIRA_SERVICE")                      => Right(ServiceType.JIRA_SERVICE)
      case __StringValue("MATTERMOST_SERVICE")                => Right(ServiceType.MATTERMOST_SERVICE)
      case __StringValue("MATTERMOST_SLASH_COMMANDS_SERVICE") => Right(ServiceType.MATTERMOST_SLASH_COMMANDS_SERVICE)
      case __StringValue("MICROSOFT_TEAMS_SERVICE")           => Right(ServiceType.MICROSOFT_TEAMS_SERVICE)
      case __StringValue("PACKAGIST_SERVICE")                 => Right(ServiceType.PACKAGIST_SERVICE)
      case __StringValue("PIPELINES_EMAIL_SERVICE")           => Right(ServiceType.PIPELINES_EMAIL_SERVICE)
      case __StringValue("PIVOTALTRACKER_SERVICE")            => Right(ServiceType.PIVOTALTRACKER_SERVICE)
      case __StringValue("PROMETHEUS_SERVICE")                => Right(ServiceType.PROMETHEUS_SERVICE)
      case __StringValue("PUSHOVER_SERVICE")                  => Right(ServiceType.PUSHOVER_SERVICE)
      case __StringValue("REDMINE_SERVICE")                   => Right(ServiceType.REDMINE_SERVICE)
      case __StringValue("SLACK_SERVICE")                     => Right(ServiceType.SLACK_SERVICE)
      case __StringValue("SLACK_SLASH_COMMANDS_SERVICE")      => Right(ServiceType.SLACK_SLASH_COMMANDS_SERVICE)
      case __StringValue("TEAMCITY_SERVICE")                  => Right(ServiceType.TEAMCITY_SERVICE)
      case __StringValue("UNIFY_CIRCUIT_SERVICE")             => Right(ServiceType.UNIFY_CIRCUIT_SERVICE)
      case __StringValue("WEBEX_TEAMS_SERVICE")               => Right(ServiceType.WEBEX_TEAMS_SERVICE)
      case __StringValue("YOUTRACK_SERVICE")                  => Right(ServiceType.YOUTRACK_SERVICE)
      case other                                              => Left(DecodingError(s"Can't build ServiceType from input $other"))
    }

    implicit val encoder: ArgEncoder[ServiceType] = {
      case ServiceType.ASANA_SERVICE                     => __EnumValue("ASANA_SERVICE")
      case ServiceType.ASSEMBLA_SERVICE                  => __EnumValue("ASSEMBLA_SERVICE")
      case ServiceType.BAMBOO_SERVICE                    => __EnumValue("BAMBOO_SERVICE")
      case ServiceType.BUGZILLA_SERVICE                  => __EnumValue("BUGZILLA_SERVICE")
      case ServiceType.BUILDKITE_SERVICE                 => __EnumValue("BUILDKITE_SERVICE")
      case ServiceType.CAMPFIRE_SERVICE                  => __EnumValue("CAMPFIRE_SERVICE")
      case ServiceType.CONFLUENCE_SERVICE                => __EnumValue("CONFLUENCE_SERVICE")
      case ServiceType.CUSTOM_ISSUE_TRACKER_SERVICE      => __EnumValue("CUSTOM_ISSUE_TRACKER_SERVICE")
      case ServiceType.DATADOG_SERVICE                   => __EnumValue("DATADOG_SERVICE")
      case ServiceType.DISCORD_SERVICE                   => __EnumValue("DISCORD_SERVICE")
      case ServiceType.DRONE_CI_SERVICE                  => __EnumValue("DRONE_CI_SERVICE")
      case ServiceType.EMAILS_ON_PUSH_SERVICE            => __EnumValue("EMAILS_ON_PUSH_SERVICE")
      case ServiceType.EWM_SERVICE                       => __EnumValue("EWM_SERVICE")
      case ServiceType.EXTERNAL_WIKI_SERVICE             => __EnumValue("EXTERNAL_WIKI_SERVICE")
      case ServiceType.FLOWDOCK_SERVICE                  => __EnumValue("FLOWDOCK_SERVICE")
      case ServiceType.GITHUB_SERVICE                    => __EnumValue("GITHUB_SERVICE")
      case ServiceType.GITLAB_SLACK_APPLICATION_SERVICE  => __EnumValue("GITLAB_SLACK_APPLICATION_SERVICE")
      case ServiceType.HANGOUTS_CHAT_SERVICE             => __EnumValue("HANGOUTS_CHAT_SERVICE")
      case ServiceType.IRKER_SERVICE                     => __EnumValue("IRKER_SERVICE")
      case ServiceType.JENKINS_SERVICE                   => __EnumValue("JENKINS_SERVICE")
      case ServiceType.JIRA_SERVICE                      => __EnumValue("JIRA_SERVICE")
      case ServiceType.MATTERMOST_SERVICE                => __EnumValue("MATTERMOST_SERVICE")
      case ServiceType.MATTERMOST_SLASH_COMMANDS_SERVICE => __EnumValue("MATTERMOST_SLASH_COMMANDS_SERVICE")
      case ServiceType.MICROSOFT_TEAMS_SERVICE           => __EnumValue("MICROSOFT_TEAMS_SERVICE")
      case ServiceType.PACKAGIST_SERVICE                 => __EnumValue("PACKAGIST_SERVICE")
      case ServiceType.PIPELINES_EMAIL_SERVICE           => __EnumValue("PIPELINES_EMAIL_SERVICE")
      case ServiceType.PIVOTALTRACKER_SERVICE            => __EnumValue("PIVOTALTRACKER_SERVICE")
      case ServiceType.PROMETHEUS_SERVICE                => __EnumValue("PROMETHEUS_SERVICE")
      case ServiceType.PUSHOVER_SERVICE                  => __EnumValue("PUSHOVER_SERVICE")
      case ServiceType.REDMINE_SERVICE                   => __EnumValue("REDMINE_SERVICE")
      case ServiceType.SLACK_SERVICE                     => __EnumValue("SLACK_SERVICE")
      case ServiceType.SLACK_SLASH_COMMANDS_SERVICE      => __EnumValue("SLACK_SLASH_COMMANDS_SERVICE")
      case ServiceType.TEAMCITY_SERVICE                  => __EnumValue("TEAMCITY_SERVICE")
      case ServiceType.UNIFY_CIRCUIT_SERVICE             => __EnumValue("UNIFY_CIRCUIT_SERVICE")
      case ServiceType.WEBEX_TEAMS_SERVICE               => __EnumValue("WEBEX_TEAMS_SERVICE")
      case ServiceType.YOUTRACK_SERVICE                  => __EnumValue("YOUTRACK_SERVICE")
    }

    val values: Vector[ServiceType] = Vector(
      ASANA_SERVICE,
      ASSEMBLA_SERVICE,
      BAMBOO_SERVICE,
      BUGZILLA_SERVICE,
      BUILDKITE_SERVICE,
      CAMPFIRE_SERVICE,
      CONFLUENCE_SERVICE,
      CUSTOM_ISSUE_TRACKER_SERVICE,
      DATADOG_SERVICE,
      DISCORD_SERVICE,
      DRONE_CI_SERVICE,
      EMAILS_ON_PUSH_SERVICE,
      EWM_SERVICE,
      EXTERNAL_WIKI_SERVICE,
      FLOWDOCK_SERVICE,
      GITHUB_SERVICE,
      GITLAB_SLACK_APPLICATION_SERVICE,
      HANGOUTS_CHAT_SERVICE,
      IRKER_SERVICE,
      JENKINS_SERVICE,
      JIRA_SERVICE,
      MATTERMOST_SERVICE,
      MATTERMOST_SLASH_COMMANDS_SERVICE,
      MICROSOFT_TEAMS_SERVICE,
      PACKAGIST_SERVICE,
      PIPELINES_EMAIL_SERVICE,
      PIVOTALTRACKER_SERVICE,
      PROMETHEUS_SERVICE,
      PUSHOVER_SERVICE,
      REDMINE_SERVICE,
      SLACK_SERVICE,
      SLACK_SLASH_COMMANDS_SERVICE,
      TEAMCITY_SERVICE,
      UNIFY_CIRCUIT_SERVICE,
      WEBEX_TEAMS_SERVICE,
      YOUTRACK_SERVICE
    )

  }

  sealed trait SnippetBlobActionEnum extends scala.Product with scala.Serializable { def value: String }

  object SnippetBlobActionEnum {
    case object create extends SnippetBlobActionEnum { val value: String = "create" }
    case object update extends SnippetBlobActionEnum { val value: String = "update" }
    case object delete extends SnippetBlobActionEnum { val value: String = "delete" }
    case object move extends SnippetBlobActionEnum { val value: String = "move" }

    implicit val decoder: ScalarDecoder[SnippetBlobActionEnum] = {
      case __StringValue("create") => Right(SnippetBlobActionEnum.create)
      case __StringValue("update") => Right(SnippetBlobActionEnum.update)
      case __StringValue("delete") => Right(SnippetBlobActionEnum.delete)
      case __StringValue("move")   => Right(SnippetBlobActionEnum.move)
      case other                   => Left(DecodingError(s"Can't build SnippetBlobActionEnum from input $other"))
    }

    implicit val encoder: ArgEncoder[SnippetBlobActionEnum] = {
      case SnippetBlobActionEnum.create => __EnumValue("create")
      case SnippetBlobActionEnum.update => __EnumValue("update")
      case SnippetBlobActionEnum.delete => __EnumValue("delete")
      case SnippetBlobActionEnum.move   => __EnumValue("move")
    }

    val values: Vector[SnippetBlobActionEnum] = Vector(create, update, delete, move)
  }

  sealed trait Sort extends scala.Product with scala.Serializable { def value: String }

  object Sort {
    case object updated_desc extends Sort { val value: String = "updated_desc" }
    case object updated_asc extends Sort { val value: String = "updated_asc" }
    case object created_desc extends Sort { val value: String = "created_desc" }
    case object created_asc extends Sort { val value: String = "created_asc" }
    case object UPDATED_DESC_1 extends Sort { val value: String = "UPDATED_DESC_1" }
    case object UPDATED_ASC_1 extends Sort { val value: String = "UPDATED_ASC_1" }
    case object CREATED_DESC_1 extends Sort { val value: String = "CREATED_DESC_1" }
    case object CREATED_ASC_1 extends Sort { val value: String = "CREATED_ASC_1" }

    implicit val decoder: ScalarDecoder[Sort] = {
      case __StringValue("updated_desc") => Right(Sort.updated_desc)
      case __StringValue("updated_asc")  => Right(Sort.updated_asc)
      case __StringValue("created_desc") => Right(Sort.created_desc)
      case __StringValue("created_asc")  => Right(Sort.created_asc)
      case __StringValue("UPDATED_DESC") => Right(Sort.UPDATED_DESC_1)
      case __StringValue("UPDATED_ASC")  => Right(Sort.UPDATED_ASC_1)
      case __StringValue("CREATED_DESC") => Right(Sort.CREATED_DESC_1)
      case __StringValue("CREATED_ASC")  => Right(Sort.CREATED_ASC_1)
      case other                         => Left(DecodingError(s"Can't build Sort from input $other"))
    }

    implicit val encoder: ArgEncoder[Sort] = {
      case Sort.updated_desc   => __EnumValue("updated_desc")
      case Sort.updated_asc    => __EnumValue("updated_asc")
      case Sort.created_desc   => __EnumValue("created_desc")
      case Sort.created_asc    => __EnumValue("created_asc")
      case Sort.UPDATED_DESC_1 => __EnumValue("UPDATED_DESC")
      case Sort.UPDATED_ASC_1  => __EnumValue("UPDATED_ASC")
      case Sort.CREATED_DESC_1 => __EnumValue("CREATED_DESC")
      case Sort.CREATED_ASC_1  => __EnumValue("CREATED_ASC")
    }

    val values: Vector[Sort] =
      Vector(updated_desc, updated_asc, created_desc, created_asc, UPDATED_DESC_1, UPDATED_ASC_1, CREATED_DESC_1, CREATED_ASC_1)
  }

  sealed trait TestCaseStatus extends scala.Product with scala.Serializable { def value: String }

  object TestCaseStatus {
    case object error extends TestCaseStatus { val value: String = "error" }
    case object failed extends TestCaseStatus { val value: String = "failed" }
    case object success extends TestCaseStatus { val value: String = "success" }
    case object skipped extends TestCaseStatus { val value: String = "skipped" }

    implicit val decoder: ScalarDecoder[TestCaseStatus] = {
      case __StringValue("error")   => Right(TestCaseStatus.error)
      case __StringValue("failed")  => Right(TestCaseStatus.failed)
      case __StringValue("success") => Right(TestCaseStatus.success)
      case __StringValue("skipped") => Right(TestCaseStatus.skipped)
      case other                    => Left(DecodingError(s"Can't build TestCaseStatus from input $other"))
    }

    implicit val encoder: ArgEncoder[TestCaseStatus] = {
      case TestCaseStatus.error   => __EnumValue("error")
      case TestCaseStatus.failed  => __EnumValue("failed")
      case TestCaseStatus.success => __EnumValue("success")
      case TestCaseStatus.skipped => __EnumValue("skipped")
    }

    val values: Vector[TestCaseStatus] = Vector(error, failed, success, skipped)
  }

  sealed trait TestReportState extends scala.Product with scala.Serializable { def value: String }

  object TestReportState {
    case object PASSED extends TestReportState { val value: String = "PASSED" }
    case object FAILED extends TestReportState { val value: String = "FAILED" }

    implicit val decoder: ScalarDecoder[TestReportState] = {
      case __StringValue("PASSED") => Right(TestReportState.PASSED)
      case __StringValue("FAILED") => Right(TestReportState.FAILED)
      case other                   => Left(DecodingError(s"Can't build TestReportState from input $other"))
    }

    implicit val encoder: ArgEncoder[TestReportState] = {
      case TestReportState.PASSED => __EnumValue("PASSED")
      case TestReportState.FAILED => __EnumValue("FAILED")
    }

    val values: Vector[TestReportState] = Vector(PASSED, FAILED)
  }

  sealed trait TodoActionEnum extends scala.Product with scala.Serializable { def value: String }

  object TodoActionEnum {
    case object assigned extends TodoActionEnum { val value: String = "assigned" }
    case object mentioned extends TodoActionEnum { val value: String = "mentioned" }
    case object build_failed extends TodoActionEnum { val value: String = "build_failed" }
    case object marked extends TodoActionEnum { val value: String = "marked" }
    case object approval_required extends TodoActionEnum { val value: String = "approval_required" }
    case object unmergeable extends TodoActionEnum { val value: String = "unmergeable" }
    case object directly_addressed extends TodoActionEnum { val value: String = "directly_addressed" }
    case object merge_train_removed extends TodoActionEnum { val value: String = "merge_train_removed" }
    case object review_requested extends TodoActionEnum { val value: String = "review_requested" }

    implicit val decoder: ScalarDecoder[TodoActionEnum] = {
      case __StringValue("assigned")            => Right(TodoActionEnum.assigned)
      case __StringValue("mentioned")           => Right(TodoActionEnum.mentioned)
      case __StringValue("build_failed")        => Right(TodoActionEnum.build_failed)
      case __StringValue("marked")              => Right(TodoActionEnum.marked)
      case __StringValue("approval_required")   => Right(TodoActionEnum.approval_required)
      case __StringValue("unmergeable")         => Right(TodoActionEnum.unmergeable)
      case __StringValue("directly_addressed")  => Right(TodoActionEnum.directly_addressed)
      case __StringValue("merge_train_removed") => Right(TodoActionEnum.merge_train_removed)
      case __StringValue("review_requested")    => Right(TodoActionEnum.review_requested)
      case other                                => Left(DecodingError(s"Can't build TodoActionEnum from input $other"))
    }

    implicit val encoder: ArgEncoder[TodoActionEnum] = {
      case TodoActionEnum.assigned            => __EnumValue("assigned")
      case TodoActionEnum.mentioned           => __EnumValue("mentioned")
      case TodoActionEnum.build_failed        => __EnumValue("build_failed")
      case TodoActionEnum.marked              => __EnumValue("marked")
      case TodoActionEnum.approval_required   => __EnumValue("approval_required")
      case TodoActionEnum.unmergeable         => __EnumValue("unmergeable")
      case TodoActionEnum.directly_addressed  => __EnumValue("directly_addressed")
      case TodoActionEnum.merge_train_removed => __EnumValue("merge_train_removed")
      case TodoActionEnum.review_requested    => __EnumValue("review_requested")
    }

    val values: Vector[TodoActionEnum] = Vector(
      assigned,
      mentioned,
      build_failed,
      marked,
      approval_required,
      unmergeable,
      directly_addressed,
      merge_train_removed,
      review_requested
    )

  }

  sealed trait TodoStateEnum extends scala.Product with scala.Serializable { def value: String }

  object TodoStateEnum {
    case object pending extends TodoStateEnum { val value: String = "pending" }
    case object done extends TodoStateEnum { val value: String = "done" }

    implicit val decoder: ScalarDecoder[TodoStateEnum] = {
      case __StringValue("pending") => Right(TodoStateEnum.pending)
      case __StringValue("done")    => Right(TodoStateEnum.done)
      case other                    => Left(DecodingError(s"Can't build TodoStateEnum from input $other"))
    }

    implicit val encoder: ArgEncoder[TodoStateEnum] = {
      case TodoStateEnum.pending => __EnumValue("pending")
      case TodoStateEnum.done    => __EnumValue("done")
    }

    val values: Vector[TodoStateEnum] = Vector(pending, done)
  }

  sealed trait TodoTargetEnum extends scala.Product with scala.Serializable { def value: String }

  object TodoTargetEnum {
    case object COMMIT extends TodoTargetEnum { val value: String = "COMMIT" }
    case object ISSUE extends TodoTargetEnum { val value: String = "ISSUE" }
    case object MERGEREQUEST extends TodoTargetEnum { val value: String = "MERGEREQUEST" }
    case object DESIGN extends TodoTargetEnum { val value: String = "DESIGN" }
    case object ALERT extends TodoTargetEnum { val value: String = "ALERT" }
    case object EPIC extends TodoTargetEnum { val value: String = "EPIC" }

    implicit val decoder: ScalarDecoder[TodoTargetEnum] = {
      case __StringValue("COMMIT")       => Right(TodoTargetEnum.COMMIT)
      case __StringValue("ISSUE")        => Right(TodoTargetEnum.ISSUE)
      case __StringValue("MERGEREQUEST") => Right(TodoTargetEnum.MERGEREQUEST)
      case __StringValue("DESIGN")       => Right(TodoTargetEnum.DESIGN)
      case __StringValue("ALERT")        => Right(TodoTargetEnum.ALERT)
      case __StringValue("EPIC")         => Right(TodoTargetEnum.EPIC)
      case other                         => Left(DecodingError(s"Can't build TodoTargetEnum from input $other"))
    }

    implicit val encoder: ArgEncoder[TodoTargetEnum] = {
      case TodoTargetEnum.COMMIT       => __EnumValue("COMMIT")
      case TodoTargetEnum.ISSUE        => __EnumValue("ISSUE")
      case TodoTargetEnum.MERGEREQUEST => __EnumValue("MERGEREQUEST")
      case TodoTargetEnum.DESIGN       => __EnumValue("DESIGN")
      case TodoTargetEnum.ALERT        => __EnumValue("ALERT")
      case TodoTargetEnum.EPIC         => __EnumValue("EPIC")
    }

    val values: Vector[TodoTargetEnum] = Vector(COMMIT, ISSUE, MERGEREQUEST, DESIGN, ALERT, EPIC)
  }

  sealed trait TypeEnum extends scala.Product with scala.Serializable { def value: String }

  object TypeEnum {
    case object personal extends TypeEnum { val value: String = "personal" }
    case object project extends TypeEnum { val value: String = "project" }

    implicit val decoder: ScalarDecoder[TypeEnum] = {
      case __StringValue("personal") => Right(TypeEnum.personal)
      case __StringValue("project")  => Right(TypeEnum.project)
      case other                     => Left(DecodingError(s"Can't build TypeEnum from input $other"))
    }

    implicit val encoder: ArgEncoder[TypeEnum] = {
      case TypeEnum.personal => __EnumValue("personal")
      case TypeEnum.project  => __EnumValue("project")
    }

    val values: Vector[TypeEnum] = Vector(personal, project)
  }

  sealed trait UserCalloutFeatureNameEnum extends scala.Product with scala.Serializable { def value: String }

  object UserCalloutFeatureNameEnum {
    case object GKE_CLUSTER_INTEGRATION extends UserCalloutFeatureNameEnum { val value: String = "GKE_CLUSTER_INTEGRATION" }
    case object GCP_SIGNUP_OFFER extends UserCalloutFeatureNameEnum { val value: String = "GCP_SIGNUP_OFFER" }
    case object CLUSTER_SECURITY_WARNING extends UserCalloutFeatureNameEnum { val value: String = "CLUSTER_SECURITY_WARNING" }
    case object ULTIMATE_TRIAL extends UserCalloutFeatureNameEnum { val value: String = "ULTIMATE_TRIAL" }
    case object GEO_ENABLE_HASHED_STORAGE extends UserCalloutFeatureNameEnum { val value: String = "GEO_ENABLE_HASHED_STORAGE" }
    case object GEO_MIGRATE_HASHED_STORAGE extends UserCalloutFeatureNameEnum { val value: String = "GEO_MIGRATE_HASHED_STORAGE" }
    case object CANARY_DEPLOYMENT extends UserCalloutFeatureNameEnum { val value: String = "CANARY_DEPLOYMENT" }
    case object GOLD_TRIAL_BILLINGS extends UserCalloutFeatureNameEnum { val value: String = "GOLD_TRIAL_BILLINGS" }
    case object SUGGEST_POPOVER_DISMISSED extends UserCalloutFeatureNameEnum { val value: String = "SUGGEST_POPOVER_DISMISSED" }
    case object TABS_POSITION_HIGHLIGHT extends UserCalloutFeatureNameEnum { val value: String = "TABS_POSITION_HIGHLIGHT" }
    case object THREAT_MONITORING_INFO extends UserCalloutFeatureNameEnum { val value: String = "THREAT_MONITORING_INFO" }
    case object ACCOUNT_RECOVERY_REGULAR_CHECK extends UserCalloutFeatureNameEnum { val value: String = "ACCOUNT_RECOVERY_REGULAR_CHECK" }

    case object SERVICE_TEMPLATES_DEPRECATED_CALLOUT extends UserCalloutFeatureNameEnum {
      val value: String = "SERVICE_TEMPLATES_DEPRECATED_CALLOUT"
    }

    case object WEB_IDE_ALERT_DISMISSED extends UserCalloutFeatureNameEnum { val value: String = "WEB_IDE_ALERT_DISMISSED" }
    case object ACTIVE_USER_COUNT_THRESHOLD extends UserCalloutFeatureNameEnum { val value: String = "ACTIVE_USER_COUNT_THRESHOLD" }

    case object BUY_PIPELINE_MINUTES_NOTIFICATION_DOT extends UserCalloutFeatureNameEnum {
      val value: String = "BUY_PIPELINE_MINUTES_NOTIFICATION_DOT"
    }

    case object PERSONAL_ACCESS_TOKEN_EXPIRY extends UserCalloutFeatureNameEnum { val value: String = "PERSONAL_ACCESS_TOKEN_EXPIRY" }
    case object SUGGEST_PIPELINE extends UserCalloutFeatureNameEnum { val value: String = "SUGGEST_PIPELINE" }
    case object CUSTOMIZE_HOMEPAGE extends UserCalloutFeatureNameEnum { val value: String = "CUSTOMIZE_HOMEPAGE" }
    case object FEATURE_FLAGS_NEW_VERSION extends UserCalloutFeatureNameEnum { val value: String = "FEATURE_FLAGS_NEW_VERSION" }
    case object REGISTRATION_ENABLED_CALLOUT extends UserCalloutFeatureNameEnum { val value: String = "REGISTRATION_ENABLED_CALLOUT" }
    case object NEW_USER_SIGNUPS_CAP_REACHED extends UserCalloutFeatureNameEnum { val value: String = "NEW_USER_SIGNUPS_CAP_REACHED" }
    case object UNFINISHED_TAG_CLEANUP_CALLOUT extends UserCalloutFeatureNameEnum { val value: String = "UNFINISHED_TAG_CLEANUP_CALLOUT" }
    case object EOA_BRONZE_PLAN_BANNER extends UserCalloutFeatureNameEnum { val value: String = "EOA_BRONZE_PLAN_BANNER" }
    case object PIPELINE_NEEDS_BANNER extends UserCalloutFeatureNameEnum { val value: String = "PIPELINE_NEEDS_BANNER" }
    case object PIPELINE_NEEDS_HOVER_TIP extends UserCalloutFeatureNameEnum { val value: String = "PIPELINE_NEEDS_HOVER_TIP" }

    case object WEB_IDE_CI_ENVIRONMENTS_GUIDANCE extends UserCalloutFeatureNameEnum {
      val value: String = "WEB_IDE_CI_ENVIRONMENTS_GUIDANCE"
    }

    case object SECURITY_CONFIGURATION_UPGRADE_BANNER extends UserCalloutFeatureNameEnum {
      val value: String = "SECURITY_CONFIGURATION_UPGRADE_BANNER"
    }

    case object CLOUD_LICENSING_SUBSCRIPTION_ACTIVATION_BANNER extends UserCalloutFeatureNameEnum {
      val value: String = "CLOUD_LICENSING_SUBSCRIPTION_ACTIVATION_BANNER"
    }

    implicit val decoder: ScalarDecoder[UserCalloutFeatureNameEnum] = {
      case __StringValue("GKE_CLUSTER_INTEGRATION")               => Right(UserCalloutFeatureNameEnum.GKE_CLUSTER_INTEGRATION)
      case __StringValue("GCP_SIGNUP_OFFER")                      => Right(UserCalloutFeatureNameEnum.GCP_SIGNUP_OFFER)
      case __StringValue("CLUSTER_SECURITY_WARNING")              => Right(UserCalloutFeatureNameEnum.CLUSTER_SECURITY_WARNING)
      case __StringValue("ULTIMATE_TRIAL")                        => Right(UserCalloutFeatureNameEnum.ULTIMATE_TRIAL)
      case __StringValue("GEO_ENABLE_HASHED_STORAGE")             => Right(UserCalloutFeatureNameEnum.GEO_ENABLE_HASHED_STORAGE)
      case __StringValue("GEO_MIGRATE_HASHED_STORAGE")            => Right(UserCalloutFeatureNameEnum.GEO_MIGRATE_HASHED_STORAGE)
      case __StringValue("CANARY_DEPLOYMENT")                     => Right(UserCalloutFeatureNameEnum.CANARY_DEPLOYMENT)
      case __StringValue("GOLD_TRIAL_BILLINGS")                   => Right(UserCalloutFeatureNameEnum.GOLD_TRIAL_BILLINGS)
      case __StringValue("SUGGEST_POPOVER_DISMISSED")             => Right(UserCalloutFeatureNameEnum.SUGGEST_POPOVER_DISMISSED)
      case __StringValue("TABS_POSITION_HIGHLIGHT")               => Right(UserCalloutFeatureNameEnum.TABS_POSITION_HIGHLIGHT)
      case __StringValue("THREAT_MONITORING_INFO")                => Right(UserCalloutFeatureNameEnum.THREAT_MONITORING_INFO)
      case __StringValue("ACCOUNT_RECOVERY_REGULAR_CHECK")        => Right(UserCalloutFeatureNameEnum.ACCOUNT_RECOVERY_REGULAR_CHECK)
      case __StringValue("SERVICE_TEMPLATES_DEPRECATED_CALLOUT")  => Right(UserCalloutFeatureNameEnum.SERVICE_TEMPLATES_DEPRECATED_CALLOUT)
      case __StringValue("WEB_IDE_ALERT_DISMISSED")               => Right(UserCalloutFeatureNameEnum.WEB_IDE_ALERT_DISMISSED)
      case __StringValue("ACTIVE_USER_COUNT_THRESHOLD")           => Right(UserCalloutFeatureNameEnum.ACTIVE_USER_COUNT_THRESHOLD)
      case __StringValue("BUY_PIPELINE_MINUTES_NOTIFICATION_DOT") => Right(UserCalloutFeatureNameEnum.BUY_PIPELINE_MINUTES_NOTIFICATION_DOT)
      case __StringValue("PERSONAL_ACCESS_TOKEN_EXPIRY")          => Right(UserCalloutFeatureNameEnum.PERSONAL_ACCESS_TOKEN_EXPIRY)
      case __StringValue("SUGGEST_PIPELINE")                      => Right(UserCalloutFeatureNameEnum.SUGGEST_PIPELINE)
      case __StringValue("CUSTOMIZE_HOMEPAGE")                    => Right(UserCalloutFeatureNameEnum.CUSTOMIZE_HOMEPAGE)
      case __StringValue("FEATURE_FLAGS_NEW_VERSION")             => Right(UserCalloutFeatureNameEnum.FEATURE_FLAGS_NEW_VERSION)
      case __StringValue("REGISTRATION_ENABLED_CALLOUT")          => Right(UserCalloutFeatureNameEnum.REGISTRATION_ENABLED_CALLOUT)
      case __StringValue("NEW_USER_SIGNUPS_CAP_REACHED")          => Right(UserCalloutFeatureNameEnum.NEW_USER_SIGNUPS_CAP_REACHED)
      case __StringValue("UNFINISHED_TAG_CLEANUP_CALLOUT")        => Right(UserCalloutFeatureNameEnum.UNFINISHED_TAG_CLEANUP_CALLOUT)
      case __StringValue("EOA_BRONZE_PLAN_BANNER")                => Right(UserCalloutFeatureNameEnum.EOA_BRONZE_PLAN_BANNER)
      case __StringValue("PIPELINE_NEEDS_BANNER")                 => Right(UserCalloutFeatureNameEnum.PIPELINE_NEEDS_BANNER)
      case __StringValue("PIPELINE_NEEDS_HOVER_TIP")              => Right(UserCalloutFeatureNameEnum.PIPELINE_NEEDS_HOVER_TIP)
      case __StringValue("WEB_IDE_CI_ENVIRONMENTS_GUIDANCE")      => Right(UserCalloutFeatureNameEnum.WEB_IDE_CI_ENVIRONMENTS_GUIDANCE)
      case __StringValue("SECURITY_CONFIGURATION_UPGRADE_BANNER") => Right(UserCalloutFeatureNameEnum.SECURITY_CONFIGURATION_UPGRADE_BANNER)
      case __StringValue("CLOUD_LICENSING_SUBSCRIPTION_ACTIVATION_BANNER") =>
        Right(UserCalloutFeatureNameEnum.CLOUD_LICENSING_SUBSCRIPTION_ACTIVATION_BANNER)
      case other => Left(DecodingError(s"Can't build UserCalloutFeatureNameEnum from input $other"))
    }

    implicit val encoder: ArgEncoder[UserCalloutFeatureNameEnum] = {
      case UserCalloutFeatureNameEnum.GKE_CLUSTER_INTEGRATION                        => __EnumValue("GKE_CLUSTER_INTEGRATION")
      case UserCalloutFeatureNameEnum.GCP_SIGNUP_OFFER                               => __EnumValue("GCP_SIGNUP_OFFER")
      case UserCalloutFeatureNameEnum.CLUSTER_SECURITY_WARNING                       => __EnumValue("CLUSTER_SECURITY_WARNING")
      case UserCalloutFeatureNameEnum.ULTIMATE_TRIAL                                 => __EnumValue("ULTIMATE_TRIAL")
      case UserCalloutFeatureNameEnum.GEO_ENABLE_HASHED_STORAGE                      => __EnumValue("GEO_ENABLE_HASHED_STORAGE")
      case UserCalloutFeatureNameEnum.GEO_MIGRATE_HASHED_STORAGE                     => __EnumValue("GEO_MIGRATE_HASHED_STORAGE")
      case UserCalloutFeatureNameEnum.CANARY_DEPLOYMENT                              => __EnumValue("CANARY_DEPLOYMENT")
      case UserCalloutFeatureNameEnum.GOLD_TRIAL_BILLINGS                            => __EnumValue("GOLD_TRIAL_BILLINGS")
      case UserCalloutFeatureNameEnum.SUGGEST_POPOVER_DISMISSED                      => __EnumValue("SUGGEST_POPOVER_DISMISSED")
      case UserCalloutFeatureNameEnum.TABS_POSITION_HIGHLIGHT                        => __EnumValue("TABS_POSITION_HIGHLIGHT")
      case UserCalloutFeatureNameEnum.THREAT_MONITORING_INFO                         => __EnumValue("THREAT_MONITORING_INFO")
      case UserCalloutFeatureNameEnum.ACCOUNT_RECOVERY_REGULAR_CHECK                 => __EnumValue("ACCOUNT_RECOVERY_REGULAR_CHECK")
      case UserCalloutFeatureNameEnum.SERVICE_TEMPLATES_DEPRECATED_CALLOUT           => __EnumValue("SERVICE_TEMPLATES_DEPRECATED_CALLOUT")
      case UserCalloutFeatureNameEnum.WEB_IDE_ALERT_DISMISSED                        => __EnumValue("WEB_IDE_ALERT_DISMISSED")
      case UserCalloutFeatureNameEnum.ACTIVE_USER_COUNT_THRESHOLD                    => __EnumValue("ACTIVE_USER_COUNT_THRESHOLD")
      case UserCalloutFeatureNameEnum.BUY_PIPELINE_MINUTES_NOTIFICATION_DOT          => __EnumValue("BUY_PIPELINE_MINUTES_NOTIFICATION_DOT")
      case UserCalloutFeatureNameEnum.PERSONAL_ACCESS_TOKEN_EXPIRY                   => __EnumValue("PERSONAL_ACCESS_TOKEN_EXPIRY")
      case UserCalloutFeatureNameEnum.SUGGEST_PIPELINE                               => __EnumValue("SUGGEST_PIPELINE")
      case UserCalloutFeatureNameEnum.CUSTOMIZE_HOMEPAGE                             => __EnumValue("CUSTOMIZE_HOMEPAGE")
      case UserCalloutFeatureNameEnum.FEATURE_FLAGS_NEW_VERSION                      => __EnumValue("FEATURE_FLAGS_NEW_VERSION")
      case UserCalloutFeatureNameEnum.REGISTRATION_ENABLED_CALLOUT                   => __EnumValue("REGISTRATION_ENABLED_CALLOUT")
      case UserCalloutFeatureNameEnum.NEW_USER_SIGNUPS_CAP_REACHED                   => __EnumValue("NEW_USER_SIGNUPS_CAP_REACHED")
      case UserCalloutFeatureNameEnum.UNFINISHED_TAG_CLEANUP_CALLOUT                 => __EnumValue("UNFINISHED_TAG_CLEANUP_CALLOUT")
      case UserCalloutFeatureNameEnum.EOA_BRONZE_PLAN_BANNER                         => __EnumValue("EOA_BRONZE_PLAN_BANNER")
      case UserCalloutFeatureNameEnum.PIPELINE_NEEDS_BANNER                          => __EnumValue("PIPELINE_NEEDS_BANNER")
      case UserCalloutFeatureNameEnum.PIPELINE_NEEDS_HOVER_TIP                       => __EnumValue("PIPELINE_NEEDS_HOVER_TIP")
      case UserCalloutFeatureNameEnum.WEB_IDE_CI_ENVIRONMENTS_GUIDANCE               => __EnumValue("WEB_IDE_CI_ENVIRONMENTS_GUIDANCE")
      case UserCalloutFeatureNameEnum.SECURITY_CONFIGURATION_UPGRADE_BANNER          => __EnumValue("SECURITY_CONFIGURATION_UPGRADE_BANNER")
      case UserCalloutFeatureNameEnum.CLOUD_LICENSING_SUBSCRIPTION_ACTIVATION_BANNER =>
        __EnumValue("CLOUD_LICENSING_SUBSCRIPTION_ACTIVATION_BANNER")
    }

    val values: Vector[UserCalloutFeatureNameEnum] = Vector(
      GKE_CLUSTER_INTEGRATION,
      GCP_SIGNUP_OFFER,
      CLUSTER_SECURITY_WARNING,
      ULTIMATE_TRIAL,
      GEO_ENABLE_HASHED_STORAGE,
      GEO_MIGRATE_HASHED_STORAGE,
      CANARY_DEPLOYMENT,
      GOLD_TRIAL_BILLINGS,
      SUGGEST_POPOVER_DISMISSED,
      TABS_POSITION_HIGHLIGHT,
      THREAT_MONITORING_INFO,
      ACCOUNT_RECOVERY_REGULAR_CHECK,
      SERVICE_TEMPLATES_DEPRECATED_CALLOUT,
      WEB_IDE_ALERT_DISMISSED,
      ACTIVE_USER_COUNT_THRESHOLD,
      BUY_PIPELINE_MINUTES_NOTIFICATION_DOT,
      PERSONAL_ACCESS_TOKEN_EXPIRY,
      SUGGEST_PIPELINE,
      CUSTOMIZE_HOMEPAGE,
      FEATURE_FLAGS_NEW_VERSION,
      REGISTRATION_ENABLED_CALLOUT,
      NEW_USER_SIGNUPS_CAP_REACHED,
      UNFINISHED_TAG_CLEANUP_CALLOUT,
      EOA_BRONZE_PLAN_BANNER,
      PIPELINE_NEEDS_BANNER,
      PIPELINE_NEEDS_HOVER_TIP,
      WEB_IDE_CI_ENVIRONMENTS_GUIDANCE,
      SECURITY_CONFIGURATION_UPGRADE_BANNER,
      CLOUD_LICENSING_SUBSCRIPTION_ACTIVATION_BANNER
    )

  }

  sealed trait UserState extends scala.Product with scala.Serializable { def value: String }

  object UserState {
    case object active extends UserState { val value: String = "active" }
    case object blocked extends UserState { val value: String = "blocked" }
    case object deactivated extends UserState { val value: String = "deactivated" }

    implicit val decoder: ScalarDecoder[UserState] = {
      case __StringValue("active")      => Right(UserState.active)
      case __StringValue("blocked")     => Right(UserState.blocked)
      case __StringValue("deactivated") => Right(UserState.deactivated)
      case other                        => Left(DecodingError(s"Can't build UserState from input $other"))
    }

    implicit val encoder: ArgEncoder[UserState] = {
      case UserState.active      => __EnumValue("active")
      case UserState.blocked     => __EnumValue("blocked")
      case UserState.deactivated => __EnumValue("deactivated")
    }

    val values: Vector[UserState] = Vector(active, blocked, deactivated)
  }

  sealed trait VisibilityLevelsEnum extends scala.Product with scala.Serializable { def value: String }

  object VisibilityLevelsEnum {
    case object `private` extends VisibilityLevelsEnum { val value: String = "`private`" }
    case object internal extends VisibilityLevelsEnum { val value: String = "internal" }
    case object public extends VisibilityLevelsEnum { val value: String = "public" }

    implicit val decoder: ScalarDecoder[VisibilityLevelsEnum] = {
      case __StringValue("private")  => Right(VisibilityLevelsEnum.`private`)
      case __StringValue("internal") => Right(VisibilityLevelsEnum.internal)
      case __StringValue("public")   => Right(VisibilityLevelsEnum.public)
      case other                     => Left(DecodingError(s"Can't build VisibilityLevelsEnum from input $other"))
    }

    implicit val encoder: ArgEncoder[VisibilityLevelsEnum] = {
      case VisibilityLevelsEnum.`private` => __EnumValue("private")
      case VisibilityLevelsEnum.internal  => __EnumValue("internal")
      case VisibilityLevelsEnum.public    => __EnumValue("public")
    }

    val values: Vector[VisibilityLevelsEnum] = Vector(`private`, internal, public)
  }

  sealed trait VisibilityScopesEnum extends scala.Product with scala.Serializable { def value: String }

  object VisibilityScopesEnum {
    case object `private` extends VisibilityScopesEnum { val value: String = "`private`" }
    case object internal extends VisibilityScopesEnum { val value: String = "internal" }
    case object public extends VisibilityScopesEnum { val value: String = "public" }

    implicit val decoder: ScalarDecoder[VisibilityScopesEnum] = {
      case __StringValue("private")  => Right(VisibilityScopesEnum.`private`)
      case __StringValue("internal") => Right(VisibilityScopesEnum.internal)
      case __StringValue("public")   => Right(VisibilityScopesEnum.public)
      case other                     => Left(DecodingError(s"Can't build VisibilityScopesEnum from input $other"))
    }

    implicit val encoder: ArgEncoder[VisibilityScopesEnum] = {
      case VisibilityScopesEnum.`private` => __EnumValue("private")
      case VisibilityScopesEnum.internal  => __EnumValue("internal")
      case VisibilityScopesEnum.public    => __EnumValue("public")
    }

    val values: Vector[VisibilityScopesEnum] = Vector(`private`, internal, public)
  }

  sealed trait VulnerabilityDismissalReason extends scala.Product with scala.Serializable { def value: String }

  object VulnerabilityDismissalReason {
    case object ACCEPTABLE_RISK extends VulnerabilityDismissalReason { val value: String = "ACCEPTABLE_RISK" }
    case object FALSE_POSITIVE extends VulnerabilityDismissalReason { val value: String = "FALSE_POSITIVE" }
    case object MITIGATING_CONTROL extends VulnerabilityDismissalReason { val value: String = "MITIGATING_CONTROL" }
    case object USED_IN_TESTS extends VulnerabilityDismissalReason { val value: String = "USED_IN_TESTS" }
    case object NOT_APPLICABLE extends VulnerabilityDismissalReason { val value: String = "NOT_APPLICABLE" }

    implicit val decoder: ScalarDecoder[VulnerabilityDismissalReason] = {
      case __StringValue("ACCEPTABLE_RISK")    => Right(VulnerabilityDismissalReason.ACCEPTABLE_RISK)
      case __StringValue("FALSE_POSITIVE")     => Right(VulnerabilityDismissalReason.FALSE_POSITIVE)
      case __StringValue("MITIGATING_CONTROL") => Right(VulnerabilityDismissalReason.MITIGATING_CONTROL)
      case __StringValue("USED_IN_TESTS")      => Right(VulnerabilityDismissalReason.USED_IN_TESTS)
      case __StringValue("NOT_APPLICABLE")     => Right(VulnerabilityDismissalReason.NOT_APPLICABLE)
      case other                               => Left(DecodingError(s"Can't build VulnerabilityDismissalReason from input $other"))
    }

    implicit val encoder: ArgEncoder[VulnerabilityDismissalReason] = {
      case VulnerabilityDismissalReason.ACCEPTABLE_RISK    => __EnumValue("ACCEPTABLE_RISK")
      case VulnerabilityDismissalReason.FALSE_POSITIVE     => __EnumValue("FALSE_POSITIVE")
      case VulnerabilityDismissalReason.MITIGATING_CONTROL => __EnumValue("MITIGATING_CONTROL")
      case VulnerabilityDismissalReason.USED_IN_TESTS      => __EnumValue("USED_IN_TESTS")
      case VulnerabilityDismissalReason.NOT_APPLICABLE     => __EnumValue("NOT_APPLICABLE")
    }

    val values: Vector[VulnerabilityDismissalReason] =
      Vector(ACCEPTABLE_RISK, FALSE_POSITIVE, MITIGATING_CONTROL, USED_IN_TESTS, NOT_APPLICABLE)
  }

  sealed trait VulnerabilityExternalIssueLinkExternalTracker extends scala.Product with scala.Serializable { def value: String }

  object VulnerabilityExternalIssueLinkExternalTracker {
    case object JIRA extends VulnerabilityExternalIssueLinkExternalTracker { val value: String = "JIRA" }

    implicit val decoder: ScalarDecoder[VulnerabilityExternalIssueLinkExternalTracker] = {
      case __StringValue("JIRA") => Right(VulnerabilityExternalIssueLinkExternalTracker.JIRA)
      case other                 => Left(DecodingError(s"Can't build VulnerabilityExternalIssueLinkExternalTracker from input $other"))
    }

    implicit val encoder: ArgEncoder[VulnerabilityExternalIssueLinkExternalTracker] = {
      case VulnerabilityExternalIssueLinkExternalTracker.JIRA => __EnumValue("JIRA")
    }

    val values: Vector[VulnerabilityExternalIssueLinkExternalTracker] = Vector(JIRA)
  }

  sealed trait VulnerabilityExternalIssueLinkType extends scala.Product with scala.Serializable { def value: String }

  object VulnerabilityExternalIssueLinkType {
    case object CREATED extends VulnerabilityExternalIssueLinkType { val value: String = "CREATED" }

    implicit val decoder: ScalarDecoder[VulnerabilityExternalIssueLinkType] = {
      case __StringValue("CREATED") => Right(VulnerabilityExternalIssueLinkType.CREATED)
      case other                    => Left(DecodingError(s"Can't build VulnerabilityExternalIssueLinkType from input $other"))
    }

    implicit val encoder: ArgEncoder[VulnerabilityExternalIssueLinkType] = { case VulnerabilityExternalIssueLinkType.CREATED =>
      __EnumValue("CREATED")
    }

    val values: Vector[VulnerabilityExternalIssueLinkType] = Vector(CREATED)
  }

  sealed trait VulnerabilityGrade extends scala.Product with scala.Serializable { def value: String }

  object VulnerabilityGrade {
    case object A extends VulnerabilityGrade { val value: String = "A" }
    case object B extends VulnerabilityGrade { val value: String = "B" }
    case object C extends VulnerabilityGrade { val value: String = "C" }
    case object D extends VulnerabilityGrade { val value: String = "D" }
    case object F extends VulnerabilityGrade { val value: String = "F" }

    implicit val decoder: ScalarDecoder[VulnerabilityGrade] = {
      case __StringValue("A") => Right(VulnerabilityGrade.A)
      case __StringValue("B") => Right(VulnerabilityGrade.B)
      case __StringValue("C") => Right(VulnerabilityGrade.C)
      case __StringValue("D") => Right(VulnerabilityGrade.D)
      case __StringValue("F") => Right(VulnerabilityGrade.F)
      case other              => Left(DecodingError(s"Can't build VulnerabilityGrade from input $other"))
    }

    implicit val encoder: ArgEncoder[VulnerabilityGrade] = {
      case VulnerabilityGrade.A => __EnumValue("A")
      case VulnerabilityGrade.B => __EnumValue("B")
      case VulnerabilityGrade.C => __EnumValue("C")
      case VulnerabilityGrade.D => __EnumValue("D")
      case VulnerabilityGrade.F => __EnumValue("F")
    }

    val values: Vector[VulnerabilityGrade] = Vector(A, B, C, D, F)
  }

  sealed trait VulnerabilityIssueLinkType extends scala.Product with scala.Serializable { def value: String }

  object VulnerabilityIssueLinkType {
    case object RELATED extends VulnerabilityIssueLinkType { val value: String = "RELATED" }
    case object CREATED extends VulnerabilityIssueLinkType { val value: String = "CREATED" }

    implicit val decoder: ScalarDecoder[VulnerabilityIssueLinkType] = {
      case __StringValue("RELATED") => Right(VulnerabilityIssueLinkType.RELATED)
      case __StringValue("CREATED") => Right(VulnerabilityIssueLinkType.CREATED)
      case other                    => Left(DecodingError(s"Can't build VulnerabilityIssueLinkType from input $other"))
    }

    implicit val encoder: ArgEncoder[VulnerabilityIssueLinkType] = {
      case VulnerabilityIssueLinkType.RELATED => __EnumValue("RELATED")
      case VulnerabilityIssueLinkType.CREATED => __EnumValue("CREATED")
    }

    val values: Vector[VulnerabilityIssueLinkType] = Vector(RELATED, CREATED)
  }

  sealed trait VulnerabilityReportType extends scala.Product with scala.Serializable { def value: String }

  object VulnerabilityReportType {
    case object SAST extends VulnerabilityReportType { val value: String = "SAST" }
    case object DEPENDENCY_SCANNING extends VulnerabilityReportType { val value: String = "DEPENDENCY_SCANNING" }
    case object CONTAINER_SCANNING extends VulnerabilityReportType { val value: String = "CONTAINER_SCANNING" }
    case object DAST extends VulnerabilityReportType { val value: String = "DAST" }
    case object SECRET_DETECTION extends VulnerabilityReportType { val value: String = "SECRET_DETECTION" }
    case object COVERAGE_FUZZING extends VulnerabilityReportType { val value: String = "COVERAGE_FUZZING" }
    case object API_FUZZING extends VulnerabilityReportType { val value: String = "API_FUZZING" }
    case object CLUSTER_IMAGE_SCANNING extends VulnerabilityReportType { val value: String = "CLUSTER_IMAGE_SCANNING" }

    implicit val decoder: ScalarDecoder[VulnerabilityReportType] = {
      case __StringValue("SAST")                   => Right(VulnerabilityReportType.SAST)
      case __StringValue("DEPENDENCY_SCANNING")    => Right(VulnerabilityReportType.DEPENDENCY_SCANNING)
      case __StringValue("CONTAINER_SCANNING")     => Right(VulnerabilityReportType.CONTAINER_SCANNING)
      case __StringValue("DAST")                   => Right(VulnerabilityReportType.DAST)
      case __StringValue("SECRET_DETECTION")       => Right(VulnerabilityReportType.SECRET_DETECTION)
      case __StringValue("COVERAGE_FUZZING")       => Right(VulnerabilityReportType.COVERAGE_FUZZING)
      case __StringValue("API_FUZZING")            => Right(VulnerabilityReportType.API_FUZZING)
      case __StringValue("CLUSTER_IMAGE_SCANNING") => Right(VulnerabilityReportType.CLUSTER_IMAGE_SCANNING)
      case other                                   => Left(DecodingError(s"Can't build VulnerabilityReportType from input $other"))
    }

    implicit val encoder: ArgEncoder[VulnerabilityReportType] = {
      case VulnerabilityReportType.SAST                   => __EnumValue("SAST")
      case VulnerabilityReportType.DEPENDENCY_SCANNING    => __EnumValue("DEPENDENCY_SCANNING")
      case VulnerabilityReportType.CONTAINER_SCANNING     => __EnumValue("CONTAINER_SCANNING")
      case VulnerabilityReportType.DAST                   => __EnumValue("DAST")
      case VulnerabilityReportType.SECRET_DETECTION       => __EnumValue("SECRET_DETECTION")
      case VulnerabilityReportType.COVERAGE_FUZZING       => __EnumValue("COVERAGE_FUZZING")
      case VulnerabilityReportType.API_FUZZING            => __EnumValue("API_FUZZING")
      case VulnerabilityReportType.CLUSTER_IMAGE_SCANNING => __EnumValue("CLUSTER_IMAGE_SCANNING")
    }

    val values: Vector[VulnerabilityReportType] =
      Vector(SAST, DEPENDENCY_SCANNING, CONTAINER_SCANNING, DAST, SECRET_DETECTION, COVERAGE_FUZZING, API_FUZZING, CLUSTER_IMAGE_SCANNING)
  }

  sealed trait VulnerabilitySeverity extends scala.Product with scala.Serializable { def value: String }

  object VulnerabilitySeverity {
    case object INFO extends VulnerabilitySeverity { val value: String = "INFO" }
    case object UNKNOWN extends VulnerabilitySeverity { val value: String = "UNKNOWN" }
    case object LOW extends VulnerabilitySeverity { val value: String = "LOW" }
    case object MEDIUM extends VulnerabilitySeverity { val value: String = "MEDIUM" }
    case object HIGH extends VulnerabilitySeverity { val value: String = "HIGH" }
    case object CRITICAL extends VulnerabilitySeverity { val value: String = "CRITICAL" }

    implicit val decoder: ScalarDecoder[VulnerabilitySeverity] = {
      case __StringValue("INFO")     => Right(VulnerabilitySeverity.INFO)
      case __StringValue("UNKNOWN")  => Right(VulnerabilitySeverity.UNKNOWN)
      case __StringValue("LOW")      => Right(VulnerabilitySeverity.LOW)
      case __StringValue("MEDIUM")   => Right(VulnerabilitySeverity.MEDIUM)
      case __StringValue("HIGH")     => Right(VulnerabilitySeverity.HIGH)
      case __StringValue("CRITICAL") => Right(VulnerabilitySeverity.CRITICAL)
      case other                     => Left(DecodingError(s"Can't build VulnerabilitySeverity from input $other"))
    }

    implicit val encoder: ArgEncoder[VulnerabilitySeverity] = {
      case VulnerabilitySeverity.INFO     => __EnumValue("INFO")
      case VulnerabilitySeverity.UNKNOWN  => __EnumValue("UNKNOWN")
      case VulnerabilitySeverity.LOW      => __EnumValue("LOW")
      case VulnerabilitySeverity.MEDIUM   => __EnumValue("MEDIUM")
      case VulnerabilitySeverity.HIGH     => __EnumValue("HIGH")
      case VulnerabilitySeverity.CRITICAL => __EnumValue("CRITICAL")
    }

    val values: Vector[VulnerabilitySeverity] = Vector(INFO, UNKNOWN, LOW, MEDIUM, HIGH, CRITICAL)
  }

  sealed trait VulnerabilitySort extends scala.Product with scala.Serializable { def value: String }

  object VulnerabilitySort {
    case object severity_desc extends VulnerabilitySort { val value: String = "severity_desc" }
    case object severity_asc extends VulnerabilitySort { val value: String = "severity_asc" }
    case object title_desc extends VulnerabilitySort { val value: String = "title_desc" }
    case object title_asc extends VulnerabilitySort { val value: String = "title_asc" }
    case object detected_desc extends VulnerabilitySort { val value: String = "detected_desc" }
    case object detected_asc extends VulnerabilitySort { val value: String = "detected_asc" }
    case object report_type_desc extends VulnerabilitySort { val value: String = "report_type_desc" }
    case object report_type_asc extends VulnerabilitySort { val value: String = "report_type_asc" }
    case object state_desc extends VulnerabilitySort { val value: String = "state_desc" }
    case object state_asc extends VulnerabilitySort { val value: String = "state_asc" }

    implicit val decoder: ScalarDecoder[VulnerabilitySort] = {
      case __StringValue("severity_desc")    => Right(VulnerabilitySort.severity_desc)
      case __StringValue("severity_asc")     => Right(VulnerabilitySort.severity_asc)
      case __StringValue("title_desc")       => Right(VulnerabilitySort.title_desc)
      case __StringValue("title_asc")        => Right(VulnerabilitySort.title_asc)
      case __StringValue("detected_desc")    => Right(VulnerabilitySort.detected_desc)
      case __StringValue("detected_asc")     => Right(VulnerabilitySort.detected_asc)
      case __StringValue("report_type_desc") => Right(VulnerabilitySort.report_type_desc)
      case __StringValue("report_type_asc")  => Right(VulnerabilitySort.report_type_asc)
      case __StringValue("state_desc")       => Right(VulnerabilitySort.state_desc)
      case __StringValue("state_asc")        => Right(VulnerabilitySort.state_asc)
      case other                             => Left(DecodingError(s"Can't build VulnerabilitySort from input $other"))
    }

    implicit val encoder: ArgEncoder[VulnerabilitySort] = {
      case VulnerabilitySort.severity_desc    => __EnumValue("severity_desc")
      case VulnerabilitySort.severity_asc     => __EnumValue("severity_asc")
      case VulnerabilitySort.title_desc       => __EnumValue("title_desc")
      case VulnerabilitySort.title_asc        => __EnumValue("title_asc")
      case VulnerabilitySort.detected_desc    => __EnumValue("detected_desc")
      case VulnerabilitySort.detected_asc     => __EnumValue("detected_asc")
      case VulnerabilitySort.report_type_desc => __EnumValue("report_type_desc")
      case VulnerabilitySort.report_type_asc  => __EnumValue("report_type_asc")
      case VulnerabilitySort.state_desc       => __EnumValue("state_desc")
      case VulnerabilitySort.state_asc        => __EnumValue("state_asc")
    }

    val values: Vector[VulnerabilitySort] = Vector(
      severity_desc,
      severity_asc,
      title_desc,
      title_asc,
      detected_desc,
      detected_asc,
      report_type_desc,
      report_type_asc,
      state_desc,
      state_asc
    )

  }

  sealed trait VulnerabilityState extends scala.Product with scala.Serializable { def value: String }

  object VulnerabilityState {
    case object DETECTED extends VulnerabilityState { val value: String = "DETECTED" }
    case object CONFIRMED extends VulnerabilityState { val value: String = "CONFIRMED" }
    case object RESOLVED extends VulnerabilityState { val value: String = "RESOLVED" }
    case object DISMISSED extends VulnerabilityState { val value: String = "DISMISSED" }

    implicit val decoder: ScalarDecoder[VulnerabilityState] = {
      case __StringValue("DETECTED")  => Right(VulnerabilityState.DETECTED)
      case __StringValue("CONFIRMED") => Right(VulnerabilityState.CONFIRMED)
      case __StringValue("RESOLVED")  => Right(VulnerabilityState.RESOLVED)
      case __StringValue("DISMISSED") => Right(VulnerabilityState.DISMISSED)
      case other                      => Left(DecodingError(s"Can't build VulnerabilityState from input $other"))
    }

    implicit val encoder: ArgEncoder[VulnerabilityState] = {
      case VulnerabilityState.DETECTED  => __EnumValue("DETECTED")
      case VulnerabilityState.CONFIRMED => __EnumValue("CONFIRMED")
      case VulnerabilityState.RESOLVED  => __EnumValue("RESOLVED")
      case VulnerabilityState.DISMISSED => __EnumValue("DISMISSED")
    }

    val values: Vector[VulnerabilityState] = Vector(DETECTED, CONFIRMED, RESOLVED, DISMISSED)
  }

  sealed trait WeightWildcardId extends scala.Product with scala.Serializable { def value: String }

  object WeightWildcardId {
    case object NONE extends WeightWildcardId { val value: String = "NONE" }
    case object ANY extends WeightWildcardId { val value: String = "ANY" }

    implicit val decoder: ScalarDecoder[WeightWildcardId] = {
      case __StringValue("NONE") => Right(WeightWildcardId.NONE)
      case __StringValue("ANY")  => Right(WeightWildcardId.ANY)
      case other                 => Left(DecodingError(s"Can't build WeightWildcardId from input $other"))
    }

    implicit val encoder: ArgEncoder[WeightWildcardId] = {
      case WeightWildcardId.NONE => __EnumValue("NONE")
      case WeightWildcardId.ANY  => __EnumValue("ANY")
    }

    val values: Vector[WeightWildcardId] = Vector(NONE, ANY)
  }

  type AccessLevel

  object AccessLevel {

    /** Integer representation of access level.
      */
    def integerValue: SelectionBuilder[AccessLevel, Option[Int]] =
      _root_.caliban.client.SelectionBuilder.Field("integerValue", OptionOf(Scalar()))

    /** String representation of access level.
      */
    def stringValue: SelectionBuilder[AccessLevel, Option[AccessLevelEnum]] =
      _root_.caliban.client.SelectionBuilder.Field("stringValue", OptionOf(Scalar()))
  }

  type AddProjectToSecurityDashboardPayload

  object AddProjectToSecurityDashboardPayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[AddProjectToSecurityDashboardPayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[AddProjectToSecurityDashboardPayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** Project that was added to the Instance Security Dashboard.
      */
    def project[A](innerSelection: SelectionBuilder[Project, A]): SelectionBuilder[AddProjectToSecurityDashboardPayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("project", OptionOf(Obj(innerSelection)))
  }

  type AdminSidekiqQueuesDeleteJobsPayload

  object AdminSidekiqQueuesDeleteJobsPayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[AdminSidekiqQueuesDeleteJobsPayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[AdminSidekiqQueuesDeleteJobsPayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** Information about the status of the deletion request.
      */
    def result[A](
      innerSelection: SelectionBuilder[DeleteJobsResponse, A]
    ): SelectionBuilder[AdminSidekiqQueuesDeleteJobsPayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("result", OptionOf(Obj(innerSelection)))

  }

  type AgentConfiguration

  object AgentConfiguration {

    /** Name of the agent.
      */
    def agentName: SelectionBuilder[AgentConfiguration, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("agentName", OptionOf(Scalar()))
  }

  type AgentConfigurationConnection

  object AgentConfigurationConnection {

    /** A list of edges.
      */
    def edges[A](
      innerSelection: SelectionBuilder[AgentConfigurationEdge, A]
    ): SelectionBuilder[AgentConfigurationConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](
      innerSelection: SelectionBuilder[AgentConfiguration, A]
    ): SelectionBuilder[AgentConfigurationConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[AgentConfigurationConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  }

  type AgentConfigurationEdge

  object AgentConfigurationEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[AgentConfigurationEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](innerSelection: SelectionBuilder[AgentConfiguration, A]): SelectionBuilder[AgentConfigurationEdge, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
  }

  type AlertManagementAlert

  object AlertManagementAlert {

    /** Assignees of the alert.
      */
    def assignees[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[UserCoreConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[AlertManagementAlert, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "assignees",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** Timestamp the alert was created.
      */
    def createdAt: SelectionBuilder[AlertManagementAlert, Option[Time]] =
      _root_.caliban.client.SelectionBuilder.Field("createdAt", OptionOf(Scalar()))

    /** Description of the alert.
      */
    def description: SelectionBuilder[AlertManagementAlert, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("description", OptionOf(Scalar()))

    /** Alert details.
      */
    def details: SelectionBuilder[AlertManagementAlert, Option[JSON]] =
      _root_.caliban.client.SelectionBuilder.Field("details", OptionOf(Scalar()))

    /** The URL of the alert detail page.
      */
    def detailsUrl: SelectionBuilder[AlertManagementAlert, String] = _root_.caliban.client.SelectionBuilder.Field("detailsUrl", Scalar())

    /** All discussions on this noteable.
      */
    def discussions[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[DiscussionConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[AlertManagementAlert, A] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "discussions",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** Timestamp the alert ended.
      */
    def endedAt: SelectionBuilder[AlertManagementAlert, Option[Time]] =
      _root_.caliban.client.SelectionBuilder.Field("endedAt", OptionOf(Scalar()))

    /** Environment for the alert.
      */
    def environment[A](innerSelection: SelectionBuilder[Environment, A]): SelectionBuilder[AlertManagementAlert, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("environment", OptionOf(Obj(innerSelection)))

    /** Number of events of this alert.
      */
    def eventCount: SelectionBuilder[AlertManagementAlert, Option[Int]] =
      _root_.caliban.client.SelectionBuilder.Field("eventCount", OptionOf(Scalar()))

    /** List of hosts the alert came from.
      */
    def hosts: SelectionBuilder[AlertManagementAlert, Option[List[String]]] =
      _root_.caliban.client.SelectionBuilder.Field("hosts", OptionOf(ListOf(Scalar())))

    /** Internal ID of the alert.
      */
    def iid: SelectionBuilder[AlertManagementAlert, String] = _root_.caliban.client.SelectionBuilder.Field("iid", Scalar())

    /** Issue attached to the alert.
      */
    def issue[A](innerSelection: SelectionBuilder[Issue, A]): SelectionBuilder[AlertManagementAlert, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("issue", OptionOf(Obj(innerSelection)))

    /** Internal ID of the GitLab issue attached to the alert. Deprecated in 13.10: Use issue field.
      */
    @deprecated("Use issue field. Deprecated in 13.10.", "")
    def issueIid: SelectionBuilder[AlertManagementAlert, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("issueIid", OptionOf(Scalar()))

    /** URL for metrics embed for the alert.
      */
    def metricsDashboardUrl: SelectionBuilder[AlertManagementAlert, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("metricsDashboardUrl", OptionOf(Scalar()))

    /** Monitoring tool the alert came from.
      */
    def monitoringTool: SelectionBuilder[AlertManagementAlert, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("monitoringTool", OptionOf(Scalar()))

    /** All notes on this noteable.
      */
    def notes[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[NoteConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[AlertManagementAlert, A] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "notes",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** The alert condition for Prometheus.
      */
    def prometheusAlert[A](innerSelection: SelectionBuilder[PrometheusAlert, A]): SelectionBuilder[AlertManagementAlert, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("prometheusAlert", OptionOf(Obj(innerSelection)))

    /** Runbook for the alert as defined in alert details.
      */
    def runbook: SelectionBuilder[AlertManagementAlert, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("runbook", OptionOf(Scalar()))

    /** Service the alert came from.
      */
    def service: SelectionBuilder[AlertManagementAlert, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("service", OptionOf(Scalar()))

    /** Severity of the alert.
      */
    def severity: SelectionBuilder[AlertManagementAlert, Option[AlertManagementSeverity]] =
      _root_.caliban.client.SelectionBuilder.Field("severity", OptionOf(Scalar()))

    /** Timestamp the alert was raised.
      */
    def startedAt: SelectionBuilder[AlertManagementAlert, Option[Time]] =
      _root_.caliban.client.SelectionBuilder.Field("startedAt", OptionOf(Scalar()))

    /** Status of the alert.
      */
    def status: SelectionBuilder[AlertManagementAlert, Option[AlertManagementStatus]] =
      _root_.caliban.client.SelectionBuilder.Field("status", OptionOf(Scalar()))

    /** Title of the alert.
      */
    def title: SelectionBuilder[AlertManagementAlert, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("title", OptionOf(Scalar()))

    /** To-do items of the current user for the alert.
      */
    def todos[A](
      action: Option[List[TodoActionEnum]] = None,
      authorId: Option[List[String]] = None,
      projectId: Option[List[String]] = None,
      groupId: Option[List[String]] = None,
      state: Option[List[TodoStateEnum]] = None,
      `type`: Option[List[TodoTargetEnum]] = None,
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[TodoConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[List[TodoActionEnum]]],
      encoder1: ArgEncoder[Option[List[String]]],
      encoder2: ArgEncoder[Option[List[String]]],
      encoder3: ArgEncoder[Option[List[String]]],
      encoder4: ArgEncoder[Option[List[TodoStateEnum]]],
      encoder5: ArgEncoder[Option[List[TodoTargetEnum]]],
      encoder6: ArgEncoder[Option[String]],
      encoder7: ArgEncoder[Option[String]],
      encoder8: ArgEncoder[Option[Int]],
      encoder9: ArgEncoder[Option[Int]]
    ): SelectionBuilder[AlertManagementAlert, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "todos",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("action", action, "[TodoActionEnum!]")(encoder0),
          Argument("authorId", authorId, "[ID!]")(encoder1),
          Argument("projectId", projectId, "[ID!]")(encoder2),
          Argument("groupId", groupId, "[ID!]")(encoder3),
          Argument("state", state, "[TodoStateEnum!]")(encoder4),
          Argument("type", `type`, "[TodoTargetEnum!]")(encoder5),
          Argument("after", after, "String")(encoder6),
          Argument("before", before, "String")(encoder7),
          Argument("first", first, "Int")(encoder8),
          Argument("last", last, "Int")(encoder9)
        )
      )

    /** Timestamp the alert was last updated.
      */
    def updatedAt: SelectionBuilder[AlertManagementAlert, Option[Time]] =
      _root_.caliban.client.SelectionBuilder.Field("updatedAt", OptionOf(Scalar()))
  }

  type AlertManagementAlertConnection

  object AlertManagementAlertConnection {

    /** A list of edges.
      */
    def edges[A](
      innerSelection: SelectionBuilder[AlertManagementAlertEdge, A]
    ): SelectionBuilder[AlertManagementAlertConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](
      innerSelection: SelectionBuilder[AlertManagementAlert, A]
    ): SelectionBuilder[AlertManagementAlertConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[AlertManagementAlertConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  }

  type AlertManagementAlertEdge

  object AlertManagementAlertEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[AlertManagementAlertEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](innerSelection: SelectionBuilder[AlertManagementAlert, A]): SelectionBuilder[AlertManagementAlertEdge, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
  }

  type AlertManagementAlertStatusCountsType

  object AlertManagementAlertStatusCountsType {

    /** Number of alerts with status ACKNOWLEDGED for the project
      */
    def acknowledged: SelectionBuilder[AlertManagementAlertStatusCountsType, Option[Int]] =
      _root_.caliban.client.SelectionBuilder.Field("acknowledged", OptionOf(Scalar()))

    /** Total number of alerts for the project.
      */
    def all: SelectionBuilder[AlertManagementAlertStatusCountsType, Option[Int]] =
      _root_.caliban.client.SelectionBuilder.Field("all", OptionOf(Scalar()))

    /** Number of alerts with status IGNORED for the project
      */
    def ignored: SelectionBuilder[AlertManagementAlertStatusCountsType, Option[Int]] =
      _root_.caliban.client.SelectionBuilder.Field("ignored", OptionOf(Scalar()))

    /** Number of alerts with status TRIGGERED or ACKNOWLEDGED for the project.
      */
    def open: SelectionBuilder[AlertManagementAlertStatusCountsType, Option[Int]] =
      _root_.caliban.client.SelectionBuilder.Field("open", OptionOf(Scalar()))

    /** Number of alerts with status RESOLVED for the project
      */
    def resolved: SelectionBuilder[AlertManagementAlertStatusCountsType, Option[Int]] =
      _root_.caliban.client.SelectionBuilder.Field("resolved", OptionOf(Scalar()))

    /** Number of alerts with status TRIGGERED for the project
      */
    def triggered: SelectionBuilder[AlertManagementAlertStatusCountsType, Option[Int]] =
      _root_.caliban.client.SelectionBuilder.Field("triggered", OptionOf(Scalar()))
  }

  type AlertManagementHttpIntegration

  object AlertManagementHttpIntegration {

    /** Whether the endpoint is currently accepting alerts.
      */
    def active: SelectionBuilder[AlertManagementHttpIntegration, Option[Boolean]] =
      _root_.caliban.client.SelectionBuilder.Field("active", OptionOf(Scalar()))

    /** URL at which Prometheus metrics can be queried to populate the metrics dashboard.
      */
    def apiUrl: SelectionBuilder[AlertManagementHttpIntegration, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("apiUrl", OptionOf(Scalar()))

    /** ID of the integration.
      */
    def id: SelectionBuilder[AlertManagementHttpIntegration, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())

    /** Name of the integration.
      */
    def name: SelectionBuilder[AlertManagementHttpIntegration, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("name", OptionOf(Scalar()))

    /** Extract alert fields from payload example for custom mapping.
      */
    def payloadAlertFields[A](
      innerSelection: SelectionBuilder[AlertManagementPayloadAlertField, A]
    ): SelectionBuilder[AlertManagementHttpIntegration, Option[List[A]]] =
      _root_.caliban.client.SelectionBuilder.Field("payloadAlertFields", OptionOf(ListOf(Obj(innerSelection))))

    /** The custom mapping of GitLab alert attributes to fields from the payload_example.
      */
    def payloadAttributeMappings[A](
      innerSelection: SelectionBuilder[AlertManagementPayloadAlertMappingField, A]
    ): SelectionBuilder[AlertManagementHttpIntegration, Option[List[A]]] =
      _root_.caliban.client.SelectionBuilder.Field("payloadAttributeMappings", OptionOf(ListOf(Obj(innerSelection))))

    /** The example of an alert payload.
      */
    def payloadExample: SelectionBuilder[AlertManagementHttpIntegration, Option[JsonString]] =
      _root_.caliban.client.SelectionBuilder.Field("payloadExample", OptionOf(Scalar()))

    /** Token used to authenticate alert notification requests.
      */
    def token: SelectionBuilder[AlertManagementHttpIntegration, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("token", OptionOf(Scalar()))

    /** Type of integration.
      */
    def `type`: SelectionBuilder[AlertManagementHttpIntegration, AlertManagementIntegrationType] =
      _root_.caliban.client.SelectionBuilder.Field("type", Scalar())

    /** Endpoint which accepts alert notifications.
      */
    def url: SelectionBuilder[AlertManagementHttpIntegration, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("url", OptionOf(Scalar()))
  }

  type AlertManagementHttpIntegrationConnection

  object AlertManagementHttpIntegrationConnection {

    /** A list of edges.
      */
    def edges[A](
      innerSelection: SelectionBuilder[AlertManagementHttpIntegrationEdge, A]
    ): SelectionBuilder[AlertManagementHttpIntegrationConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](
      innerSelection: SelectionBuilder[AlertManagementHttpIntegration, A]
    ): SelectionBuilder[AlertManagementHttpIntegrationConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[AlertManagementHttpIntegrationConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  }

  type AlertManagementHttpIntegrationEdge

  object AlertManagementHttpIntegrationEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[AlertManagementHttpIntegrationEdge, String] =
      _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](
      innerSelection: SelectionBuilder[AlertManagementHttpIntegration, A]
    ): SelectionBuilder[AlertManagementHttpIntegrationEdge, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))

  }

  type AlertManagementIntegrationConnection

  object AlertManagementIntegrationConnection {

    /** A list of edges.
      */
    def edges[A](
      innerSelection: SelectionBuilder[AlertManagementIntegrationEdge, A]
    ): SelectionBuilder[AlertManagementIntegrationConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](
      onAlertManagementHttpIntegration: Option[SelectionBuilder[AlertManagementHttpIntegration, A]] = None,
      onAlertManagementPrometheusIntegration: Option[SelectionBuilder[AlertManagementPrometheusIntegration, A]] = None
    ): SelectionBuilder[AlertManagementIntegrationConnection, Option[List[Option[A]]]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "nodes",
        OptionOf(
          ListOf(
            OptionOf(
              ChoiceOf(
                Map(
                  "AlertManagementHttpIntegration" -> onAlertManagementHttpIntegration,
                  "AlertManagementPrometheusIntegration" -> onAlertManagementPrometheusIntegration
                ).collect { case (k, Some(v)) => k -> Obj(v) }
              )
            )
          )
        )
      )

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[AlertManagementIntegrationConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  }

  type AlertManagementIntegrationEdge

  object AlertManagementIntegrationEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[AlertManagementIntegrationEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](
      onAlertManagementHttpIntegration: Option[SelectionBuilder[AlertManagementHttpIntegration, A]] = None,
      onAlertManagementPrometheusIntegration: Option[SelectionBuilder[AlertManagementPrometheusIntegration, A]] = None
    ): SelectionBuilder[AlertManagementIntegrationEdge, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "node",
        OptionOf(
          ChoiceOf(
            Map(
              "AlertManagementHttpIntegration" -> onAlertManagementHttpIntegration,
              "AlertManagementPrometheusIntegration" -> onAlertManagementPrometheusIntegration
            ).collect { case (k, Some(v)) => k -> Obj(v) }
          )
        )
      )

  }

  type AlertManagementPayloadAlertField

  object AlertManagementPayloadAlertField {

    /** Human-readable label of the payload path.
      */
    def label: SelectionBuilder[AlertManagementPayloadAlertField, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("label", OptionOf(Scalar()))

    /** Path to value inside payload JSON.
      */
    def path: SelectionBuilder[AlertManagementPayloadAlertField, Option[List[PayloadAlertFieldPathSegment]]] =
      _root_.caliban.client.SelectionBuilder.Field("path", OptionOf(ListOf(Scalar())))

    /** Type of the parsed value.
      */
    def `type`: SelectionBuilder[AlertManagementPayloadAlertField, Option[AlertManagementPayloadAlertFieldType]] =
      _root_.caliban.client.SelectionBuilder.Field("type", OptionOf(Scalar()))
  }

  type AlertManagementPayloadAlertMappingField

  object AlertManagementPayloadAlertMappingField {

    /** A GitLab alert field name.
      */
    def fieldName: SelectionBuilder[AlertManagementPayloadAlertMappingField, Option[AlertManagementPayloadAlertFieldName]] =
      _root_.caliban.client.SelectionBuilder.Field("fieldName", OptionOf(Scalar()))

    /** Human-readable label of the payload path.
      */
    def label: SelectionBuilder[AlertManagementPayloadAlertMappingField, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("label", OptionOf(Scalar()))

    /** Path to value inside payload JSON.
      */
    def path: SelectionBuilder[AlertManagementPayloadAlertMappingField, Option[List[PayloadAlertFieldPathSegment]]] =
      _root_.caliban.client.SelectionBuilder.Field("path", OptionOf(ListOf(Scalar())))

    /** Type of the parsed value.
      */
    def `type`: SelectionBuilder[AlertManagementPayloadAlertMappingField, Option[AlertManagementPayloadAlertFieldType]] =
      _root_.caliban.client.SelectionBuilder.Field("type", OptionOf(Scalar()))
  }

  type AlertManagementPrometheusIntegration

  object AlertManagementPrometheusIntegration {

    /** Whether the endpoint is currently accepting alerts.
      */
    def active: SelectionBuilder[AlertManagementPrometheusIntegration, Option[Boolean]] =
      _root_.caliban.client.SelectionBuilder.Field("active", OptionOf(Scalar()))

    /** URL at which Prometheus metrics can be queried to populate the metrics dashboard.
      */
    def apiUrl: SelectionBuilder[AlertManagementPrometheusIntegration, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("apiUrl", OptionOf(Scalar()))

    /** ID of the integration.
      */
    def id: SelectionBuilder[AlertManagementPrometheusIntegration, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())

    /** Name of the integration.
      */
    def name: SelectionBuilder[AlertManagementPrometheusIntegration, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("name", OptionOf(Scalar()))

    /** Token used to authenticate alert notification requests.
      */
    def token: SelectionBuilder[AlertManagementPrometheusIntegration, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("token", OptionOf(Scalar()))

    /** Type of integration.
      */
    def `type`: SelectionBuilder[AlertManagementPrometheusIntegration, AlertManagementIntegrationType] =
      _root_.caliban.client.SelectionBuilder.Field("type", Scalar())

    /** Endpoint which accepts alert notifications.
      */
    def url: SelectionBuilder[AlertManagementPrometheusIntegration, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("url", OptionOf(Scalar()))
  }

  type AlertSetAssigneesPayload

  object AlertSetAssigneesPayload {

    /** The alert after mutation.
      */
    def alert[A](innerSelection: SelectionBuilder[AlertManagementAlert, A]): SelectionBuilder[AlertSetAssigneesPayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("alert", OptionOf(Obj(innerSelection)))

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[AlertSetAssigneesPayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[AlertSetAssigneesPayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** The issue created after mutation.
      */
    def issue[A](innerSelection: SelectionBuilder[Issue, A]): SelectionBuilder[AlertSetAssigneesPayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("issue", OptionOf(Obj(innerSelection)))

    /** The to-do item after mutation.
      */
    def todo[A](innerSelection: SelectionBuilder[Todo, A]): SelectionBuilder[AlertSetAssigneesPayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("todo", OptionOf(Obj(innerSelection)))
  }

  type AlertTodoCreatePayload

  object AlertTodoCreatePayload {

    /** The alert after mutation.
      */
    def alert[A](innerSelection: SelectionBuilder[AlertManagementAlert, A]): SelectionBuilder[AlertTodoCreatePayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("alert", OptionOf(Obj(innerSelection)))

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[AlertTodoCreatePayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[AlertTodoCreatePayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** The issue created after mutation.
      */
    def issue[A](innerSelection: SelectionBuilder[Issue, A]): SelectionBuilder[AlertTodoCreatePayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("issue", OptionOf(Obj(innerSelection)))

    /** The to-do item after mutation.
      */
    def todo[A](innerSelection: SelectionBuilder[Todo, A]): SelectionBuilder[AlertTodoCreatePayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("todo", OptionOf(Obj(innerSelection)))
  }

  type ApiFuzzingCiConfiguration

  object ApiFuzzingCiConfiguration {

    /** All available scan modes.
      */
    def scanModes: SelectionBuilder[ApiFuzzingCiConfiguration, Option[List[ApiFuzzingScanMode]]] =
      _root_.caliban.client.SelectionBuilder.Field("scanModes", OptionOf(ListOf(Scalar())))

    /** All default scan profiles.
      */
    def scanProfiles[A](
      innerSelection: SelectionBuilder[ApiFuzzingScanProfile, A]
    ): SelectionBuilder[ApiFuzzingCiConfiguration, Option[List[A]]] =
      _root_.caliban.client.SelectionBuilder.Field("scanProfiles", OptionOf(ListOf(Obj(innerSelection))))

  }

  type ApiFuzzingCiConfigurationCreatePayload

  object ApiFuzzingCiConfigurationCreatePayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[ApiFuzzingCiConfigurationCreatePayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** A YAML snippet that can be inserted into the project's `.gitlab-ci.yml` to set up API fuzzing scans.
      */
    def configurationYaml: SelectionBuilder[ApiFuzzingCiConfigurationCreatePayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("configurationYaml", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[ApiFuzzingCiConfigurationCreatePayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** The location at which the project's `.gitlab-ci.yml` file can be edited in the browser.
      */
    def gitlabCiYamlEditPath: SelectionBuilder[ApiFuzzingCiConfigurationCreatePayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("gitlabCiYamlEditPath", OptionOf(Scalar()))
  }

  type ApiFuzzingScanProfile

  object ApiFuzzingScanProfile {

    /** A short description of the profile.
      */
    def description: SelectionBuilder[ApiFuzzingScanProfile, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("description", OptionOf(Scalar()))

    /** The unique name of the profile.
      */
    def name: SelectionBuilder[ApiFuzzingScanProfile, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("name", OptionOf(Scalar()))

    /** A syntax highlit HTML representation of the YAML.
      */
    def yaml: SelectionBuilder[ApiFuzzingScanProfile, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("yaml", OptionOf(Scalar()))
  }

  type ApprovalRule

  object ApprovalRule {

    /** ID of the rule.
      */
    def id: SelectionBuilder[ApprovalRule, GlobalID] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())

    /** Name of the rule.
      */
    def name: SelectionBuilder[ApprovalRule, Option[String]] = _root_.caliban.client.SelectionBuilder.Field("name", OptionOf(Scalar()))

    /** Type of the rule.
      */
    def `type`: SelectionBuilder[ApprovalRule, Option[ApprovalRuleType]] =
      _root_.caliban.client.SelectionBuilder.Field("type", OptionOf(Scalar()))
  }

  type AwardEmoji

  object AwardEmoji {

    /** The emoji description.
      */
    def description: SelectionBuilder[AwardEmoji, String] = _root_.caliban.client.SelectionBuilder.Field("description", Scalar())

    /** The emoji as an icon.
      */
    def emoji: SelectionBuilder[AwardEmoji, String] = _root_.caliban.client.SelectionBuilder.Field("emoji", Scalar())

    /** The emoji name.
      */
    def name: SelectionBuilder[AwardEmoji, String] = _root_.caliban.client.SelectionBuilder.Field("name", Scalar())

    /** The emoji in Unicode.
      */
    def unicode: SelectionBuilder[AwardEmoji, String] = _root_.caliban.client.SelectionBuilder.Field("unicode", Scalar())

    /** The Unicode version for this emoji.
      */
    def unicodeVersion: SelectionBuilder[AwardEmoji, String] = _root_.caliban.client.SelectionBuilder.Field("unicodeVersion", Scalar())

    /** The user who awarded the emoji.
      */
    def user[A](innerSelection: SelectionBuilder[UserCore, A]): SelectionBuilder[AwardEmoji, A] =
      _root_.caliban.client.SelectionBuilder.Field("user", Obj(innerSelection))
  }

  type AwardEmojiAddPayload

  object AwardEmojiAddPayload {

    /** The award emoji after mutation.
      */
    def awardEmoji[A](innerSelection: SelectionBuilder[AwardEmoji, A]): SelectionBuilder[AwardEmojiAddPayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("awardEmoji", OptionOf(Obj(innerSelection)))

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[AwardEmojiAddPayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[AwardEmojiAddPayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))
  }

  type AwardEmojiConnection

  object AwardEmojiConnection {

    /** A list of edges.
      */
    def edges[A](innerSelection: SelectionBuilder[AwardEmojiEdge, A]): SelectionBuilder[AwardEmojiConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](innerSelection: SelectionBuilder[AwardEmoji, A]): SelectionBuilder[AwardEmojiConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[AwardEmojiConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  }

  type AwardEmojiEdge

  object AwardEmojiEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[AwardEmojiEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](innerSelection: SelectionBuilder[AwardEmoji, A]): SelectionBuilder[AwardEmojiEdge, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
  }

  type AwardEmojiRemovePayload

  object AwardEmojiRemovePayload {

    /** The award emoji after mutation.
      */
    def awardEmoji[A](innerSelection: SelectionBuilder[AwardEmoji, A]): SelectionBuilder[AwardEmojiRemovePayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("awardEmoji", OptionOf(Obj(innerSelection)))

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[AwardEmojiRemovePayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[AwardEmojiRemovePayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))
  }

  type AwardEmojiTogglePayload

  object AwardEmojiTogglePayload {

    /** The award emoji after mutation.
      */
    def awardEmoji[A](innerSelection: SelectionBuilder[AwardEmoji, A]): SelectionBuilder[AwardEmojiTogglePayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("awardEmoji", OptionOf(Obj(innerSelection)))

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[AwardEmojiTogglePayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[AwardEmojiTogglePayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** Indicates the status of the emoji. True if the toggle awarded the emoji, and false if the toggle removed the emoji.
      */
    def toggledOn: SelectionBuilder[AwardEmojiTogglePayload, Boolean] = _root_.caliban.client.SelectionBuilder.Field("toggledOn", Scalar())
  }

  type BaseService

  object BaseService {

    /** Indicates if the service is active.
      */
    def active: SelectionBuilder[BaseService, Option[Boolean]] = _root_.caliban.client.SelectionBuilder.Field("active", OptionOf(Scalar()))

    /** Class name of the service.
      */
    def `type`: SelectionBuilder[BaseService, Option[String]] = _root_.caliban.client.SelectionBuilder.Field("type", OptionOf(Scalar()))
  }

  type Blob

  object Blob {

    /** Flat path of the entry.
      */
    def flatPath: SelectionBuilder[Blob, String] = _root_.caliban.client.SelectionBuilder.Field("flatPath", Scalar())

    /** ID of the entry.
      */
    def id: SelectionBuilder[Blob, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())

    /** LFS ID of the blob.
      */
    def lfsOid: SelectionBuilder[Blob, Option[String]] = _root_.caliban.client.SelectionBuilder.Field("lfsOid", OptionOf(Scalar()))

    /** Blob mode in numeric format.
      */
    def mode: SelectionBuilder[Blob, Option[String]] = _root_.caliban.client.SelectionBuilder.Field("mode", OptionOf(Scalar()))

    /** Name of the entry.
      */
    def name: SelectionBuilder[Blob, String] = _root_.caliban.client.SelectionBuilder.Field("name", Scalar())

    /** Path of the entry.
      */
    def path: SelectionBuilder[Blob, String] = _root_.caliban.client.SelectionBuilder.Field("path", Scalar())

    /** Last commit SHA for the entry.
      */
    def sha: SelectionBuilder[Blob, String] = _root_.caliban.client.SelectionBuilder.Field("sha", Scalar())

    /** Type of tree entry.
      */
    def `type`: SelectionBuilder[Blob, EntryType] = _root_.caliban.client.SelectionBuilder.Field("type", Scalar())

    /** Web path of the blob.
      */
    def webPath: SelectionBuilder[Blob, Option[String]] = _root_.caliban.client.SelectionBuilder.Field("webPath", OptionOf(Scalar()))

    /** Web URL of the blob.
      */
    def webUrl: SelectionBuilder[Blob, Option[String]] = _root_.caliban.client.SelectionBuilder.Field("webUrl", OptionOf(Scalar()))
  }

  type BlobConnection

  object BlobConnection {

    /** A list of edges.
      */
    def edges[A](innerSelection: SelectionBuilder[BlobEdge, A]): SelectionBuilder[BlobConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](innerSelection: SelectionBuilder[Blob, A]): SelectionBuilder[BlobConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[BlobConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  }

  type BlobEdge

  object BlobEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[BlobEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](innerSelection: SelectionBuilder[Blob, A]): SelectionBuilder[BlobEdge, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
  }

  type BlobViewer

  object BlobViewer {

    /** Shows whether the blob should be displayed collapsed.
      */
    def collapsed: SelectionBuilder[BlobViewer, Boolean] = _root_.caliban.client.SelectionBuilder.Field("collapsed", Scalar())

    /** Content file type.
      */
    def fileType: SelectionBuilder[BlobViewer, String] = _root_.caliban.client.SelectionBuilder.Field("fileType", Scalar())

    /** Shows whether the blob content is loaded asynchronously.
      */
    def loadAsync: SelectionBuilder[BlobViewer, Boolean] = _root_.caliban.client.SelectionBuilder.Field("loadAsync", Scalar())

    /** Loading partial name.
      */
    def loadingPartialName: SelectionBuilder[BlobViewer, String] =
      _root_.caliban.client.SelectionBuilder.Field("loadingPartialName", Scalar())

    /** Error rendering the blob content.
      */
    def renderError: SelectionBuilder[BlobViewer, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("renderError", OptionOf(Scalar()))

    /** Shows whether the blob is too large to be displayed.
      */
    def tooLarge: SelectionBuilder[BlobViewer, Boolean] = _root_.caliban.client.SelectionBuilder.Field("tooLarge", Scalar())

    /** Type of blob viewer.
      */
    def `type`: SelectionBuilder[BlobViewer, BlobViewersType] = _root_.caliban.client.SelectionBuilder.Field("type", Scalar())
  }

  type Board

  object Board {

    /** The board assignee.
      */
    def assignee[A](innerSelection: SelectionBuilder[UserCore, A]): SelectionBuilder[Board, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("assignee", OptionOf(Obj(innerSelection)))

    /** Timestamp of when the board was created.
      */
    def createdAt: SelectionBuilder[Board, Time] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())

    /** Epics associated with board issues.
      */
    def epics[A](
      issueFilters: Option[BoardIssueInput] = None,
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[BoardEpicConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[BoardIssueInput]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[String]],
      encoder3: ArgEncoder[Option[Int]],
      encoder4: ArgEncoder[Option[Int]]
    ): SelectionBuilder[Board, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "epics",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("issueFilters", issueFilters, "BoardIssueInput")(encoder0),
          Argument("after", after, "String")(encoder1),
          Argument("before", before, "String")(encoder2),
          Argument("first", first, "Int")(encoder3),
          Argument("last", last, "Int")(encoder4)
        )
      )

    /** Whether or not backlog list is hidden.
      */
    def hideBacklogList: SelectionBuilder[Board, Option[Boolean]] =
      _root_.caliban.client.SelectionBuilder.Field("hideBacklogList", OptionOf(Scalar()))

    /** Whether or not closed list is hidden.
      */
    def hideClosedList: SelectionBuilder[Board, Option[Boolean]] =
      _root_.caliban.client.SelectionBuilder.Field("hideClosedList", OptionOf(Scalar()))

    /** ID (global ID) of the board.
      */
    def id: SelectionBuilder[Board, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())

    /** The board iteration.
      */
    def iteration[A](innerSelection: SelectionBuilder[Iteration, A]): SelectionBuilder[Board, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("iteration", OptionOf(Obj(innerSelection)))

    /** Labels of the board.
      */
    def labels[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[LabelConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[Board, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "labels",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** Lists of the board.
      */
    def lists[A](
      id: Option[ListID] = None,
      issueFilters: Option[BoardIssueInput] = None,
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[BoardListConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[ListID]],
      encoder1: ArgEncoder[Option[BoardIssueInput]],
      encoder2: ArgEncoder[Option[String]],
      encoder3: ArgEncoder[Option[String]],
      encoder4: ArgEncoder[Option[Int]],
      encoder5: ArgEncoder[Option[Int]]
    ): SelectionBuilder[Board, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "lists",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("id", id, "ListID")(encoder0),
          Argument("issueFilters", issueFilters, "BoardIssueInput")(encoder1),
          Argument("after", after, "String")(encoder2),
          Argument("before", before, "String")(encoder3),
          Argument("first", first, "Int")(encoder4),
          Argument("last", last, "Int")(encoder5)
        )
      )

    /** The board milestone.
      */
    def milestone[A](innerSelection: SelectionBuilder[Milestone, A]): SelectionBuilder[Board, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("milestone", OptionOf(Obj(innerSelection)))

    /** Name of the board.
      */
    def name: SelectionBuilder[Board, Option[String]] = _root_.caliban.client.SelectionBuilder.Field("name", OptionOf(Scalar()))

    /** Timestamp of when the board was last updated.
      */
    def updatedAt: SelectionBuilder[Board, Time] = _root_.caliban.client.SelectionBuilder.Field("updatedAt", Scalar())

    /** Web path of the board.
      */
    def webPath: SelectionBuilder[Board, String] = _root_.caliban.client.SelectionBuilder.Field("webPath", Scalar())

    /** Web URL of the board.
      */
    def webUrl: SelectionBuilder[Board, String] = _root_.caliban.client.SelectionBuilder.Field("webUrl", Scalar())

    /** Weight of the board.
      */
    def weight: SelectionBuilder[Board, Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("weight", OptionOf(Scalar()))
  }

  type BoardConnection

  object BoardConnection {

    /** A list of edges.
      */
    def edges[A](innerSelection: SelectionBuilder[BoardEdge, A]): SelectionBuilder[BoardConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](innerSelection: SelectionBuilder[Board, A]): SelectionBuilder[BoardConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[BoardConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  }

  type BoardEdge

  object BoardEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[BoardEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](innerSelection: SelectionBuilder[Board, A]): SelectionBuilder[BoardEdge, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
  }

  type BoardEpic

  object BoardEpic {

    /** Ancestors (parents) of the epic.
      */
    def ancestors[A](
      timeframe: Option[Timeframe] = None,
      iid: Option[String] = None,
      iids: Option[List[String]] = None,
      state: Option[EpicState] = None,
      search: Option[String] = None,
      in: Option[List[IssuableSearchableField]] = None,
      sort: Option[EpicSort] = None,
      authorUsername: Option[String] = None,
      labelName: Option[List[String]] = None,
      milestoneTitle: Option[String] = None,
      iidStartsWith: Option[String] = None,
      includeAncestorGroups: Option[Boolean] = None,
      includeDescendantGroups: Option[Boolean] = None,
      confidential: Option[Boolean] = None,
      myReactionEmoji: Option[String] = None,
      not: Option[NegatedEpicFilterInput] = None,
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[EpicConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[Timeframe]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[List[String]]],
      encoder3: ArgEncoder[Option[EpicState]],
      encoder4: ArgEncoder[Option[String]],
      encoder5: ArgEncoder[Option[List[IssuableSearchableField]]],
      encoder6: ArgEncoder[Option[EpicSort]],
      encoder7: ArgEncoder[Option[String]],
      encoder8: ArgEncoder[Option[List[String]]],
      encoder9: ArgEncoder[Option[String]],
      encoder10: ArgEncoder[Option[String]],
      encoder11: ArgEncoder[Option[Boolean]],
      encoder12: ArgEncoder[Option[Boolean]],
      encoder13: ArgEncoder[Option[Boolean]],
      encoder14: ArgEncoder[Option[String]],
      encoder15: ArgEncoder[Option[NegatedEpicFilterInput]],
      encoder16: ArgEncoder[Option[String]],
      encoder17: ArgEncoder[Option[String]],
      encoder18: ArgEncoder[Option[Int]],
      encoder19: ArgEncoder[Option[Int]]
    ): SelectionBuilder[BoardEpic, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "ancestors",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("timeframe", timeframe, "Timeframe")(encoder0),
          Argument("iid", iid, "ID")(encoder1),
          Argument("iids", iids, "[ID!]")(encoder2),
          Argument("state", state, "EpicState")(encoder3),
          Argument("search", search, "String")(encoder4),
          Argument("in", in, "[IssuableSearchableField!]")(encoder5),
          Argument("sort", sort, "EpicSort")(encoder6),
          Argument("authorUsername", authorUsername, "String")(encoder7),
          Argument("labelName", labelName, "[String!]")(encoder8),
          Argument("milestoneTitle", milestoneTitle, "String")(encoder9),
          Argument("iidStartsWith", iidStartsWith, "String")(encoder10),
          Argument("includeAncestorGroups", includeAncestorGroups, "Boolean")(encoder11),
          Argument("includeDescendantGroups", includeDescendantGroups, "Boolean")(encoder12),
          Argument("confidential", confidential, "Boolean")(encoder13),
          Argument("myReactionEmoji", myReactionEmoji, "String")(encoder14),
          Argument("not", not, "NegatedEpicFilterInput")(encoder15),
          Argument("after", after, "String")(encoder16),
          Argument("before", before, "String")(encoder17),
          Argument("first", first, "Int")(encoder18),
          Argument("last", last, "Int")(encoder19)
        )
      )

    /** Author of the epic.
      */
    def author[A](innerSelection: SelectionBuilder[UserCore, A]): SelectionBuilder[BoardEpic, A] =
      _root_.caliban.client.SelectionBuilder.Field("author", Obj(innerSelection))

    /** A list of award emojis associated with the epic.
      */
    def awardEmoji[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[AwardEmojiConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[BoardEpic, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "awardEmoji",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** Children (sub-epics) of the epic.
      */
    def children[A](
      timeframe: Option[Timeframe] = None,
      iid: Option[String] = None,
      iids: Option[List[String]] = None,
      state: Option[EpicState] = None,
      search: Option[String] = None,
      in: Option[List[IssuableSearchableField]] = None,
      sort: Option[EpicSort] = None,
      authorUsername: Option[String] = None,
      labelName: Option[List[String]] = None,
      milestoneTitle: Option[String] = None,
      iidStartsWith: Option[String] = None,
      includeAncestorGroups: Option[Boolean] = None,
      includeDescendantGroups: Option[Boolean] = None,
      confidential: Option[Boolean] = None,
      myReactionEmoji: Option[String] = None,
      not: Option[NegatedEpicFilterInput] = None,
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[EpicConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[Timeframe]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[List[String]]],
      encoder3: ArgEncoder[Option[EpicState]],
      encoder4: ArgEncoder[Option[String]],
      encoder5: ArgEncoder[Option[List[IssuableSearchableField]]],
      encoder6: ArgEncoder[Option[EpicSort]],
      encoder7: ArgEncoder[Option[String]],
      encoder8: ArgEncoder[Option[List[String]]],
      encoder9: ArgEncoder[Option[String]],
      encoder10: ArgEncoder[Option[String]],
      encoder11: ArgEncoder[Option[Boolean]],
      encoder12: ArgEncoder[Option[Boolean]],
      encoder13: ArgEncoder[Option[Boolean]],
      encoder14: ArgEncoder[Option[String]],
      encoder15: ArgEncoder[Option[NegatedEpicFilterInput]],
      encoder16: ArgEncoder[Option[String]],
      encoder17: ArgEncoder[Option[String]],
      encoder18: ArgEncoder[Option[Int]],
      encoder19: ArgEncoder[Option[Int]]
    ): SelectionBuilder[BoardEpic, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "children",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("timeframe", timeframe, "Timeframe")(encoder0),
          Argument("iid", iid, "ID")(encoder1),
          Argument("iids", iids, "[ID!]")(encoder2),
          Argument("state", state, "EpicState")(encoder3),
          Argument("search", search, "String")(encoder4),
          Argument("in", in, "[IssuableSearchableField!]")(encoder5),
          Argument("sort", sort, "EpicSort")(encoder6),
          Argument("authorUsername", authorUsername, "String")(encoder7),
          Argument("labelName", labelName, "[String!]")(encoder8),
          Argument("milestoneTitle", milestoneTitle, "String")(encoder9),
          Argument("iidStartsWith", iidStartsWith, "String")(encoder10),
          Argument("includeAncestorGroups", includeAncestorGroups, "Boolean")(encoder11),
          Argument("includeDescendantGroups", includeDescendantGroups, "Boolean")(encoder12),
          Argument("confidential", confidential, "Boolean")(encoder13),
          Argument("myReactionEmoji", myReactionEmoji, "String")(encoder14),
          Argument("not", not, "NegatedEpicFilterInput")(encoder15),
          Argument("after", after, "String")(encoder16),
          Argument("before", before, "String")(encoder17),
          Argument("first", first, "Int")(encoder18),
          Argument("last", last, "Int")(encoder19)
        )
      )

    /** Timestamp of when the epic was closed.
      */
    def closedAt: SelectionBuilder[BoardEpic, Option[Time]] = _root_.caliban.client.SelectionBuilder.Field("closedAt", OptionOf(Scalar()))

    /** Indicates if the epic is confidential.
      */
    def confidential: SelectionBuilder[BoardEpic, Option[Boolean]] =
      _root_.caliban.client.SelectionBuilder.Field("confidential", OptionOf(Scalar()))

    /** Timestamp of when the epic was created.
      */
    def createdAt: SelectionBuilder[BoardEpic, Option[Time]] = _root_.caliban.client.SelectionBuilder.Field("createdAt", OptionOf(Scalar()))

    /** To-do items for the current user.
      */
    def currentUserTodos[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None,
      state: Option[TodoStateEnum] = None
    )(
      innerSelection: SelectionBuilder[TodoConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]],
      encoder4: ArgEncoder[Option[TodoStateEnum]]
    ): SelectionBuilder[BoardEpic, A] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "currentUserTodos",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3),
          Argument("state", state, "TodoStateEnum")(encoder4)
        )
      )

    /** Number of open and closed descendant epics and issues.
      */
    def descendantCounts[A](innerSelection: SelectionBuilder[EpicDescendantCount, A]): SelectionBuilder[BoardEpic, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("descendantCounts", OptionOf(Obj(innerSelection)))

    /** Total weight of open and closed issues in the epic and its descendants.
      */
    def descendantWeightSum[A](innerSelection: SelectionBuilder[EpicDescendantWeights, A]): SelectionBuilder[BoardEpic, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("descendantWeightSum", OptionOf(Obj(innerSelection)))

    /** Description of the epic.
      */
    def description: SelectionBuilder[BoardEpic, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("description", OptionOf(Scalar()))

    /** The GitLab Flavored Markdown rendering of `description`
      */
    def descriptionHtml: SelectionBuilder[BoardEpic, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("descriptionHtml", OptionOf(Scalar()))

    /** All discussions on this noteable.
      */
    def discussions[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[DiscussionConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[BoardEpic, A] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "discussions",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** Number of downvotes the epic has received.
      */
    def downvotes: SelectionBuilder[BoardEpic, Int] = _root_.caliban.client.SelectionBuilder.Field("downvotes", Scalar())

    /** Due date of the epic.
      */
    def dueDate: SelectionBuilder[BoardEpic, Option[Time]] = _root_.caliban.client.SelectionBuilder.Field("dueDate", OptionOf(Scalar()))

    /** Fixed due date of the epic.
      */
    def dueDateFixed: SelectionBuilder[BoardEpic, Option[Time]] =
      _root_.caliban.client.SelectionBuilder.Field("dueDateFixed", OptionOf(Scalar()))

    /** Inherited due date of the epic from milestones.
      */
    def dueDateFromMilestones: SelectionBuilder[BoardEpic, Option[Time]] =
      _root_.caliban.client.SelectionBuilder.Field("dueDateFromMilestones", OptionOf(Scalar()))

    /** Indicates if the due date has been manually set.
      */
    def dueDateIsFixed: SelectionBuilder[BoardEpic, Option[Boolean]] =
      _root_.caliban.client.SelectionBuilder.Field("dueDateIsFixed", OptionOf(Scalar()))

    /** A list of events associated with the object.
      */
    def events[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[EventConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[BoardEpic, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "events",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** Group to which the epic belongs.
      */
    def group[A](innerSelection: SelectionBuilder[Group, A]): SelectionBuilder[BoardEpic, A] =
      _root_.caliban.client.SelectionBuilder.Field("group", Obj(innerSelection))

    /** Indicates if the epic has children.
      */
    def hasChildren: SelectionBuilder[BoardEpic, Boolean] = _root_.caliban.client.SelectionBuilder.Field("hasChildren", Scalar())

    /** Indicates if the epic has direct issues.
      */
    def hasIssues: SelectionBuilder[BoardEpic, Boolean] = _root_.caliban.client.SelectionBuilder.Field("hasIssues", Scalar())

    /** Indicates if the epic has a parent epic.
      */
    def hasParent: SelectionBuilder[BoardEpic, Boolean] = _root_.caliban.client.SelectionBuilder.Field("hasParent", Scalar())

    /** Current health status of the epic.
      */
    def healthStatus[A](innerSelection: SelectionBuilder[EpicHealthStatus, A]): SelectionBuilder[BoardEpic, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("healthStatus", OptionOf(Obj(innerSelection)))

    /** ID of the epic.
      */
    def id: SelectionBuilder[BoardEpic, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())

    /** Internal ID of the epic.
      */
    def iid: SelectionBuilder[BoardEpic, String] = _root_.caliban.client.SelectionBuilder.Field("iid", Scalar())

    /** A list of issues associated with the epic.
      */
    def issues[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[EpicIssueConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[BoardEpic, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "issues",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** Labels assigned to the epic.
      */
    def labels[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[LabelConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[BoardEpic, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "labels",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** All notes on this noteable.
      */
    def notes[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[NoteConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[BoardEpic, A] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "notes",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** Parent epic of the epic.
      */
    def parent[A](innerSelection: SelectionBuilder[Epic, A]): SelectionBuilder[BoardEpic, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("parent", OptionOf(Obj(innerSelection)))

    /** List of participants for the epic.
      */
    def participants[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[UserCoreConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[BoardEpic, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "participants",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** Internal reference of the epic. Returned in shortened format by default.
      */
    def reference(full: Option[Boolean] = None)(implicit encoder0: ArgEncoder[Option[Boolean]]): SelectionBuilder[BoardEpic, String] =
      _root_.caliban.client.SelectionBuilder.Field("reference", Scalar(), arguments = List(Argument("full", full, "Boolean")(encoder0)))

    /** URI path of the epic-issue relationship.
      */
    def relationPath: SelectionBuilder[BoardEpic, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("relationPath", OptionOf(Scalar()))

    /** The relative position of the epic in the epic tree.
      */
    def relativePosition: SelectionBuilder[BoardEpic, Option[Int]] =
      _root_.caliban.client.SelectionBuilder.Field("relativePosition", OptionOf(Scalar()))

    /** Start date of the epic.
      */
    def startDate: SelectionBuilder[BoardEpic, Option[Time]] = _root_.caliban.client.SelectionBuilder.Field("startDate", OptionOf(Scalar()))

    /** Fixed start date of the epic.
      */
    def startDateFixed: SelectionBuilder[BoardEpic, Option[Time]] =
      _root_.caliban.client.SelectionBuilder.Field("startDateFixed", OptionOf(Scalar()))

    /** Inherited start date of the epic from milestones.
      */
    def startDateFromMilestones: SelectionBuilder[BoardEpic, Option[Time]] =
      _root_.caliban.client.SelectionBuilder.Field("startDateFromMilestones", OptionOf(Scalar()))

    /** Indicates if the start date has been manually set.
      */
    def startDateIsFixed: SelectionBuilder[BoardEpic, Option[Boolean]] =
      _root_.caliban.client.SelectionBuilder.Field("startDateIsFixed", OptionOf(Scalar()))

    /** State of the epic.
      */
    def state: SelectionBuilder[BoardEpic, EpicState] = _root_.caliban.client.SelectionBuilder.Field("state", Scalar())

    /** Indicates the currently logged in user is subscribed to the epic.
      */
    def subscribed: SelectionBuilder[BoardEpic, Boolean] = _root_.caliban.client.SelectionBuilder.Field("subscribed", Scalar())

    /** Title of the epic.
      */
    def title: SelectionBuilder[BoardEpic, Option[String]] = _root_.caliban.client.SelectionBuilder.Field("title", OptionOf(Scalar()))

    /** The GitLab Flavored Markdown rendering of `title`
      */
    def titleHtml: SelectionBuilder[BoardEpic, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("titleHtml", OptionOf(Scalar()))

    /** Timestamp of when the epic was updated.
      */
    def updatedAt: SelectionBuilder[BoardEpic, Option[Time]] = _root_.caliban.client.SelectionBuilder.Field("updatedAt", OptionOf(Scalar()))

    /** Number of upvotes the epic has received.
      */
    def upvotes: SelectionBuilder[BoardEpic, Int] = _root_.caliban.client.SelectionBuilder.Field("upvotes", Scalar())

    /** Number of user discussions in the epic.
      */
    def userDiscussionsCount: SelectionBuilder[BoardEpic, Int] =
      _root_.caliban.client.SelectionBuilder.Field("userDiscussionsCount", Scalar())

    /** Number of user notes of the epic.
      */
    def userNotesCount: SelectionBuilder[BoardEpic, Int] = _root_.caliban.client.SelectionBuilder.Field("userNotesCount", Scalar())

    /** Permissions for the current user on the resource
      */
    def userPermissions[A](innerSelection: SelectionBuilder[EpicPermissions, A]): SelectionBuilder[BoardEpic, A] =
      _root_.caliban.client.SelectionBuilder.Field("userPermissions", Obj(innerSelection))

    /** User preferences for the epic on the issue board.
      */
    def userPreferences[A](innerSelection: SelectionBuilder[BoardEpicUserPreferences, A]): SelectionBuilder[BoardEpic, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("userPreferences", OptionOf(Obj(innerSelection)))

    /** Web path of the epic.
      */
    def webPath: SelectionBuilder[BoardEpic, String] = _root_.caliban.client.SelectionBuilder.Field("webPath", Scalar())

    /** Web URL of the epic.
      */
    def webUrl: SelectionBuilder[BoardEpic, String] = _root_.caliban.client.SelectionBuilder.Field("webUrl", Scalar())
  }

  type BoardEpicConnection

  object BoardEpicConnection {

    /** A list of edges.
      */
    def edges[A](innerSelection: SelectionBuilder[BoardEpicEdge, A]): SelectionBuilder[BoardEpicConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](innerSelection: SelectionBuilder[BoardEpic, A]): SelectionBuilder[BoardEpicConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[BoardEpicConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  }

  type BoardEpicCreatePayload

  object BoardEpicCreatePayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[BoardEpicCreatePayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Epic after creation.
      */
    def epic[A](innerSelection: SelectionBuilder[Epic, A]): SelectionBuilder[BoardEpicCreatePayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("epic", OptionOf(Obj(innerSelection)))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[BoardEpicCreatePayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))
  }

  type BoardEpicEdge

  object BoardEpicEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[BoardEpicEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](innerSelection: SelectionBuilder[BoardEpic, A]): SelectionBuilder[BoardEpicEdge, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
  }

  type BoardEpicUserPreferences

  object BoardEpicUserPreferences {

    /** Indicates epic should be displayed as collapsed.
      */
    def collapsed: SelectionBuilder[BoardEpicUserPreferences, Boolean] = _root_.caliban.client.SelectionBuilder.Field("collapsed", Scalar())
  }

  type BoardList

  object BoardList {

    /** Assignee in the list.
      */
    def assignee[A](innerSelection: SelectionBuilder[UserCore, A]): SelectionBuilder[BoardList, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("assignee", OptionOf(Obj(innerSelection)))

    /** Indicates if the list is collapsed for this user.
      */
    def collapsed: SelectionBuilder[BoardList, Option[Boolean]] =
      _root_.caliban.client.SelectionBuilder.Field("collapsed", OptionOf(Scalar()))

    /** ID (global ID) of the list.
      */
    def id: SelectionBuilder[BoardList, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())

    /** Board issues.
      */
    def issues[A](
      filters: Option[BoardIssueInput] = None,
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[IssueConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[BoardIssueInput]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[String]],
      encoder3: ArgEncoder[Option[Int]],
      encoder4: ArgEncoder[Option[Int]]
    ): SelectionBuilder[BoardList, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "issues",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("filters", filters, "BoardIssueInput")(encoder0),
          Argument("after", after, "String")(encoder1),
          Argument("before", before, "String")(encoder2),
          Argument("first", first, "Int")(encoder3),
          Argument("last", last, "Int")(encoder4)
        )
      )

    /** Count of issues in the list.
      */
    def issuesCount: SelectionBuilder[BoardList, Option[Int]] =
      _root_.caliban.client.SelectionBuilder.Field("issuesCount", OptionOf(Scalar()))

    /** Iteration of the list.
      */
    def iteration[A](innerSelection: SelectionBuilder[Iteration, A]): SelectionBuilder[BoardList, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("iteration", OptionOf(Obj(innerSelection)))

    /** Label of the list.
      */
    def label[A](innerSelection: SelectionBuilder[Label, A]): SelectionBuilder[BoardList, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("label", OptionOf(Obj(innerSelection)))

    /** The current limit metric for the list.
      */
    def limitMetric: SelectionBuilder[BoardList, Option[ListLimitMetric]] =
      _root_.caliban.client.SelectionBuilder.Field("limitMetric", OptionOf(Scalar()))

    /** Type of the list.
      */
    def listType: SelectionBuilder[BoardList, String] = _root_.caliban.client.SelectionBuilder.Field("listType", Scalar())

    /** Maximum number of issues in the list.
      */
    def maxIssueCount: SelectionBuilder[BoardList, Option[Int]] =
      _root_.caliban.client.SelectionBuilder.Field("maxIssueCount", OptionOf(Scalar()))

    /** Maximum weight of issues in the list.
      */
    def maxIssueWeight: SelectionBuilder[BoardList, Option[Int]] =
      _root_.caliban.client.SelectionBuilder.Field("maxIssueWeight", OptionOf(Scalar()))

    /** Milestone of the list.
      */
    def milestone[A](innerSelection: SelectionBuilder[Milestone, A]): SelectionBuilder[BoardList, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("milestone", OptionOf(Obj(innerSelection)))

    /** Position of list within the board.
      */
    def position: SelectionBuilder[BoardList, Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("position", OptionOf(Scalar()))

    /** Title of the list.
      */
    def title: SelectionBuilder[BoardList, String] = _root_.caliban.client.SelectionBuilder.Field("title", Scalar())

    /** Total weight of all issues in the list.
      */
    def totalWeight: SelectionBuilder[BoardList, Option[Int]] =
      _root_.caliban.client.SelectionBuilder.Field("totalWeight", OptionOf(Scalar()))
  }

  type BoardListConnection

  object BoardListConnection {

    /** A list of edges.
      */
    def edges[A](innerSelection: SelectionBuilder[BoardListEdge, A]): SelectionBuilder[BoardListConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](innerSelection: SelectionBuilder[BoardList, A]): SelectionBuilder[BoardListConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[BoardListConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  }

  type BoardListCreatePayload

  object BoardListCreatePayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[BoardListCreatePayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[BoardListCreatePayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** Issue list in the issue board.
      */
    def list[A](innerSelection: SelectionBuilder[BoardList, A]): SelectionBuilder[BoardListCreatePayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("list", OptionOf(Obj(innerSelection)))
  }

  type BoardListEdge

  object BoardListEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[BoardListEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](innerSelection: SelectionBuilder[BoardList, A]): SelectionBuilder[BoardListEdge, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
  }

  type BoardListUpdateLimitMetricsPayload

  object BoardListUpdateLimitMetricsPayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[BoardListUpdateLimitMetricsPayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[BoardListUpdateLimitMetricsPayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** The updated list.
      */
    def list[A](innerSelection: SelectionBuilder[BoardList, A]): SelectionBuilder[BoardListUpdateLimitMetricsPayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("list", OptionOf(Obj(innerSelection)))
  }

  type Branch

  object Branch {

    /** Commit for the branch.
      */
    def commit[A](innerSelection: SelectionBuilder[Commit, A]): SelectionBuilder[Branch, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("commit", OptionOf(Obj(innerSelection)))

    /** Name of the branch.
      */
    def name: SelectionBuilder[Branch, String] = _root_.caliban.client.SelectionBuilder.Field("name", Scalar())
  }

  type BulkEnableDevopsAdoptionNamespacesPayload

  object BulkEnableDevopsAdoptionNamespacesPayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[BulkEnableDevopsAdoptionNamespacesPayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Enabled namespaces after mutation.
      */
    def enabledNamespaces[A](
      innerSelection: SelectionBuilder[DevopsAdoptionEnabledNamespace, A]
    ): SelectionBuilder[BulkEnableDevopsAdoptionNamespacesPayload, Option[List[A]]] =
      _root_.caliban.client.SelectionBuilder.Field("enabledNamespaces", OptionOf(ListOf(Obj(innerSelection))))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[BulkEnableDevopsAdoptionNamespacesPayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))
  }

  type BurnupChartDailyTotals

  object BurnupChartDailyTotals {

    /** Number of closed issues as of this day.
      */
    def completedCount: SelectionBuilder[BurnupChartDailyTotals, Int] =
      _root_.caliban.client.SelectionBuilder.Field("completedCount", Scalar())

    /** Total weight of closed issues as of this day.
      */
    def completedWeight: SelectionBuilder[BurnupChartDailyTotals, Int] =
      _root_.caliban.client.SelectionBuilder.Field("completedWeight", Scalar())

    /** Date for burnup totals.
      */
    def date: SelectionBuilder[BurnupChartDailyTotals, ISO8601Date] = _root_.caliban.client.SelectionBuilder.Field("date", Scalar())

    /** Number of issues as of this day.
      */
    def scopeCount: SelectionBuilder[BurnupChartDailyTotals, Int] = _root_.caliban.client.SelectionBuilder.Field("scopeCount", Scalar())

    /** Total weight of issues as of this day.
      */
    def scopeWeight: SelectionBuilder[BurnupChartDailyTotals, Int] = _root_.caliban.client.SelectionBuilder.Field("scopeWeight", Scalar())
  }

  type CiApplicationSettings

  object CiApplicationSettings {

    /** Whether to keep the latest jobs artifacts.
      */
    def keepLatestArtifact: SelectionBuilder[CiApplicationSettings, Option[Boolean]] =
      _root_.caliban.client.SelectionBuilder.Field("keepLatestArtifact", OptionOf(Scalar()))
  }

  type CiBuildNeed

  object CiBuildNeed {

    /** Name of the job we need to complete.
      */
    def name: SelectionBuilder[CiBuildNeed, Option[String]] = _root_.caliban.client.SelectionBuilder.Field("name", OptionOf(Scalar()))
  }

  type CiBuildNeedConnection

  object CiBuildNeedConnection {

    /** A list of edges.
      */
    def edges[A](innerSelection: SelectionBuilder[CiBuildNeedEdge, A]): SelectionBuilder[CiBuildNeedConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](innerSelection: SelectionBuilder[CiBuildNeed, A]): SelectionBuilder[CiBuildNeedConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[CiBuildNeedConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  }

  type CiBuildNeedEdge

  object CiBuildNeedEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[CiBuildNeedEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](innerSelection: SelectionBuilder[CiBuildNeed, A]): SelectionBuilder[CiBuildNeedEdge, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
  }

  type CiCdSettingsUpdatePayload

  object CiCdSettingsUpdatePayload {

    /** The CI/CD settings after mutation.
      */
    def ciCdSettings[A](innerSelection: SelectionBuilder[ProjectCiCdSetting, A]): SelectionBuilder[CiCdSettingsUpdatePayload, A] =
      _root_.caliban.client.SelectionBuilder.Field("ciCdSettings", Obj(innerSelection))

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[CiCdSettingsUpdatePayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[CiCdSettingsUpdatePayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))
  }

  type CiConfig

  object CiConfig {

    /** Linting errors.
      */
    def errors: SelectionBuilder[CiConfig, Option[List[String]]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", OptionOf(ListOf(Scalar())))

    /** Merged CI configuration YAML.
      */
    def mergedYaml: SelectionBuilder[CiConfig, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("mergedYaml", OptionOf(Scalar()))

    /** Stages of the pipeline.
      */
    def stages[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[CiConfigStageConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[CiConfig, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "stages",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** Status of linting, can be either valid or invalid.
      */
    def status: SelectionBuilder[CiConfig, Option[CiConfigStatus]] =
      _root_.caliban.client.SelectionBuilder.Field("status", OptionOf(Scalar()))
  }

  type CiConfigGroup

  object CiConfigGroup {

    /** Jobs in group.
      */
    def jobs[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[CiConfigJobConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[CiConfigGroup, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "jobs",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** Name of the job group.
      */
    def name: SelectionBuilder[CiConfigGroup, Option[String]] = _root_.caliban.client.SelectionBuilder.Field("name", OptionOf(Scalar()))

    /** Size of the job group.
      */
    def size: SelectionBuilder[CiConfigGroup, Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("size", OptionOf(Scalar()))
  }

  type CiConfigGroupConnection

  object CiConfigGroupConnection {

    /** A list of edges.
      */
    def edges[A](
      innerSelection: SelectionBuilder[CiConfigGroupEdge, A]
    ): SelectionBuilder[CiConfigGroupConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](innerSelection: SelectionBuilder[CiConfigGroup, A]): SelectionBuilder[CiConfigGroupConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[CiConfigGroupConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  }

  type CiConfigGroupEdge

  object CiConfigGroupEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[CiConfigGroupEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](innerSelection: SelectionBuilder[CiConfigGroup, A]): SelectionBuilder[CiConfigGroupEdge, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
  }

  type CiConfigJob

  object CiConfigJob {

    /** Override a set of commands that are executed after the job.
      */
    def afterScript: SelectionBuilder[CiConfigJob, Option[List[String]]] =
      _root_.caliban.client.SelectionBuilder.Field("afterScript", OptionOf(ListOf(Scalar())))

    /** Allow job to fail.
      */
    def allowFailure: SelectionBuilder[CiConfigJob, Option[Boolean]] =
      _root_.caliban.client.SelectionBuilder.Field("allowFailure", OptionOf(Scalar()))

    /** Override a set of commands that are executed before the job.
      */
    def beforeScript: SelectionBuilder[CiConfigJob, Option[List[String]]] =
      _root_.caliban.client.SelectionBuilder.Field("beforeScript", OptionOf(ListOf(Scalar())))

    /** Name of an environment to which the job deploys.
      */
    def environment: SelectionBuilder[CiConfigJob, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("environment", OptionOf(Scalar()))

    /** Limit when jobs are not created.
      */
    def except[A](innerSelection: SelectionBuilder[CiConfigJobRestriction, A]): SelectionBuilder[CiConfigJob, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("except", OptionOf(Obj(innerSelection)))

    /** Name of the job group.
      */
    def groupName: SelectionBuilder[CiConfigJob, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("groupName", OptionOf(Scalar()))

    /** Name of the job.
      */
    def name: SelectionBuilder[CiConfigJob, Option[String]] = _root_.caliban.client.SelectionBuilder.Field("name", OptionOf(Scalar()))

    /** Builds that must complete before the jobs run.
      */
    def needs[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[CiConfigNeedConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[CiConfigJob, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "needs",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** Jobs are created when these conditions do not apply.
      */
    def only[A](innerSelection: SelectionBuilder[CiConfigJobRestriction, A]): SelectionBuilder[CiConfigJob, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("only", OptionOf(Obj(innerSelection)))

    /** Shell script that is executed by a runner.
      */
    def script: SelectionBuilder[CiConfigJob, Option[List[String]]] =
      _root_.caliban.client.SelectionBuilder.Field("script", OptionOf(ListOf(Scalar())))

    /** Name of the job stage.
      */
    def stage: SelectionBuilder[CiConfigJob, Option[String]] = _root_.caliban.client.SelectionBuilder.Field("stage", OptionOf(Scalar()))

    /** List of tags that are used to select a runner.
      */
    def tags: SelectionBuilder[CiConfigJob, Option[List[String]]] =
      _root_.caliban.client.SelectionBuilder.Field("tags", OptionOf(ListOf(Scalar())))

    /** When to run the job.
      */
    def when: SelectionBuilder[CiConfigJob, Option[String]] = _root_.caliban.client.SelectionBuilder.Field("when", OptionOf(Scalar()))
  }

  type CiConfigJobConnection

  object CiConfigJobConnection {

    /** A list of edges.
      */
    def edges[A](innerSelection: SelectionBuilder[CiConfigJobEdge, A]): SelectionBuilder[CiConfigJobConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](innerSelection: SelectionBuilder[CiConfigJob, A]): SelectionBuilder[CiConfigJobConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[CiConfigJobConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  }

  type CiConfigJobEdge

  object CiConfigJobEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[CiConfigJobEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](innerSelection: SelectionBuilder[CiConfigJob, A]): SelectionBuilder[CiConfigJobEdge, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
  }

  type CiConfigJobRestriction

  object CiConfigJobRestriction {

    /** The Git refs the job restriction applies to.
      */
    def refs: SelectionBuilder[CiConfigJobRestriction, Option[List[String]]] =
      _root_.caliban.client.SelectionBuilder.Field("refs", OptionOf(ListOf(Scalar())))
  }

  type CiConfigNeed

  object CiConfigNeed {

    /** Name of the need.
      */
    def name: SelectionBuilder[CiConfigNeed, Option[String]] = _root_.caliban.client.SelectionBuilder.Field("name", OptionOf(Scalar()))
  }

  type CiConfigNeedConnection

  object CiConfigNeedConnection {

    /** A list of edges.
      */
    def edges[A](innerSelection: SelectionBuilder[CiConfigNeedEdge, A]): SelectionBuilder[CiConfigNeedConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](innerSelection: SelectionBuilder[CiConfigNeed, A]): SelectionBuilder[CiConfigNeedConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[CiConfigNeedConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  }

  type CiConfigNeedEdge

  object CiConfigNeedEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[CiConfigNeedEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](innerSelection: SelectionBuilder[CiConfigNeed, A]): SelectionBuilder[CiConfigNeedEdge, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
  }

  type CiConfigStage

  object CiConfigStage {

    /** Groups of jobs for the stage.
      */
    def groups[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[CiConfigGroupConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[CiConfigStage, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "groups",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** Name of the stage.
      */
    def name: SelectionBuilder[CiConfigStage, Option[String]] = _root_.caliban.client.SelectionBuilder.Field("name", OptionOf(Scalar()))
  }

  type CiConfigStageConnection

  object CiConfigStageConnection {

    /** A list of edges.
      */
    def edges[A](
      innerSelection: SelectionBuilder[CiConfigStageEdge, A]
    ): SelectionBuilder[CiConfigStageConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](innerSelection: SelectionBuilder[CiConfigStage, A]): SelectionBuilder[CiConfigStageConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[CiConfigStageConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  }

  type CiConfigStageEdge

  object CiConfigStageEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[CiConfigStageEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](innerSelection: SelectionBuilder[CiConfigStage, A]): SelectionBuilder[CiConfigStageEdge, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
  }

  type CiGroup

  object CiGroup {

    /** Detailed status of the group.
      */
    def detailedStatus[A](innerSelection: SelectionBuilder[DetailedStatus, A]): SelectionBuilder[CiGroup, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("detailedStatus", OptionOf(Obj(innerSelection)))

    /** Jobs in group.
      */
    def jobs[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[CiJobConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[CiGroup, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "jobs",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** Name of the job group.
      */
    def name: SelectionBuilder[CiGroup, Option[String]] = _root_.caliban.client.SelectionBuilder.Field("name", OptionOf(Scalar()))

    /** Size of the group.
      */
    def size: SelectionBuilder[CiGroup, Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("size", OptionOf(Scalar()))
  }

  type CiGroupConnection

  object CiGroupConnection {

    /** A list of edges.
      */
    def edges[A](innerSelection: SelectionBuilder[CiGroupEdge, A]): SelectionBuilder[CiGroupConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](innerSelection: SelectionBuilder[CiGroup, A]): SelectionBuilder[CiGroupConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[CiGroupConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  }

  type CiGroupEdge

  object CiGroupEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[CiGroupEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](innerSelection: SelectionBuilder[CiGroup, A]): SelectionBuilder[CiGroupEdge, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
  }

  type CiJob

  object CiJob {

    /** Indicates the job is active.
      */
    def active: SelectionBuilder[CiJob, Boolean] = _root_.caliban.client.SelectionBuilder.Field("active", Scalar())

    /** Whether the job is allowed to fail.
      */
    def allowFailure: SelectionBuilder[CiJob, Boolean] = _root_.caliban.client.SelectionBuilder.Field("allowFailure", Scalar())

    /** Artifacts generated by the job.
      */
    def artifacts[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[CiJobArtifactConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[CiJob, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "artifacts",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** Indicates the job can be canceled.
      */
    def cancelable: SelectionBuilder[CiJob, Boolean] = _root_.caliban.client.SelectionBuilder.Field("cancelable", Scalar())

    /** Path to the commit that triggered the job.
      */
    def commitPath: SelectionBuilder[CiJob, Option[String]] = _root_.caliban.client.SelectionBuilder.Field("commitPath", OptionOf(Scalar()))

    /** Coverage level of the job.
      */
    def coverage: SelectionBuilder[CiJob, Option[Double]] = _root_.caliban.client.SelectionBuilder.Field("coverage", OptionOf(Scalar()))

    /** When the job was created.
      */
    def createdAt: SelectionBuilder[CiJob, Time] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())

    /** Whether the job was created by a tag.
      */
    def createdByTag: SelectionBuilder[CiJob, Boolean] = _root_.caliban.client.SelectionBuilder.Field("createdByTag", Scalar())

    /** Detailed status of the job.
      */
    def detailedStatus[A](innerSelection: SelectionBuilder[DetailedStatus, A]): SelectionBuilder[CiJob, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("detailedStatus", OptionOf(Obj(innerSelection)))

    /** Duration of the job in seconds.
      */
    def duration: SelectionBuilder[CiJob, Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("duration", OptionOf(Scalar()))

    /** When a job has finished running.
      */
    def finishedAt: SelectionBuilder[CiJob, Option[Time]] = _root_.caliban.client.SelectionBuilder.Field("finishedAt", OptionOf(Scalar()))

    /** ID of the job.
      */
    def id: SelectionBuilder[CiJob, Option[JobID]] = _root_.caliban.client.SelectionBuilder.Field("id", OptionOf(Scalar()))

    /** Whether the job has a manual action.
      */
    def manualJob: SelectionBuilder[CiJob, Option[Boolean]] = _root_.caliban.client.SelectionBuilder.Field("manualJob", OptionOf(Scalar()))

    /** Name of the job.
      */
    def name: SelectionBuilder[CiJob, Option[String]] = _root_.caliban.client.SelectionBuilder.Field("name", OptionOf(Scalar()))

    /** References to builds that must complete before the jobs run.
      */
    def needs[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[CiBuildNeedConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[CiJob, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "needs",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** Pipeline the job belongs to.
      */
    def pipeline[A](innerSelection: SelectionBuilder[Pipeline, A]): SelectionBuilder[CiJob, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("pipeline", OptionOf(Obj(innerSelection)))

    /** Indicates the job can be played.
      */
    def playable: SelectionBuilder[CiJob, Boolean] = _root_.caliban.client.SelectionBuilder.Field("playable", Scalar())

    /** When the job was enqueued and marked as pending.
      */
    def queuedAt: SelectionBuilder[CiJob, Option[Time]] = _root_.caliban.client.SelectionBuilder.Field("queuedAt", OptionOf(Scalar()))

    /** How long the job was enqueued before starting.
      */
    def queuedDuration: SelectionBuilder[CiJob, Option[Duration]] =
      _root_.caliban.client.SelectionBuilder.Field("queuedDuration", OptionOf(Scalar()))

    /** Ref name of the job.
      */
    def refName: SelectionBuilder[CiJob, Option[String]] = _root_.caliban.client.SelectionBuilder.Field("refName", OptionOf(Scalar()))

    /** Path to the ref.
      */
    def refPath: SelectionBuilder[CiJob, Option[String]] = _root_.caliban.client.SelectionBuilder.Field("refPath", OptionOf(Scalar()))

    /** Indicates the job can be retried.
      */
    def retryable: SelectionBuilder[CiJob, Boolean] = _root_.caliban.client.SelectionBuilder.Field("retryable", Scalar())

    /** Schedule for the build.
      */
    def scheduledAt: SelectionBuilder[CiJob, Option[Time]] = _root_.caliban.client.SelectionBuilder.Field("scheduledAt", OptionOf(Scalar()))

    /** Type of job scheduling. Value is `dag` if the job uses the `needs` keyword, and `stage` otherwise.
      */
    def schedulingType: SelectionBuilder[CiJob, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("schedulingType", OptionOf(Scalar()))

    /** Short SHA1 ID of the commit.
      */
    def shortSha: SelectionBuilder[CiJob, String] = _root_.caliban.client.SelectionBuilder.Field("shortSha", Scalar())

    /** Stage of the job.
      */
    def stage[A](innerSelection: SelectionBuilder[CiStage, A]): SelectionBuilder[CiJob, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("stage", OptionOf(Obj(innerSelection)))

    /** When the job was started.
      */
    def startedAt: SelectionBuilder[CiJob, Option[Time]] = _root_.caliban.client.SelectionBuilder.Field("startedAt", OptionOf(Scalar()))

    /** Status of the job.
      */
    def status: SelectionBuilder[CiJob, Option[CiJobStatus]] = _root_.caliban.client.SelectionBuilder.Field("status", OptionOf(Scalar()))

    /** Indicates the job is stuck.
      */
    def stuck: SelectionBuilder[CiJob, Boolean] = _root_.caliban.client.SelectionBuilder.Field("stuck", Scalar())

    /** Tags for the current job.
      */
    def tags: SelectionBuilder[CiJob, Option[List[String]]] =
      _root_.caliban.client.SelectionBuilder.Field("tags", OptionOf(ListOf(Scalar())))

    /** Whether the job was triggered.
      */
    def triggered: SelectionBuilder[CiJob, Option[Boolean]] = _root_.caliban.client.SelectionBuilder.Field("triggered", OptionOf(Scalar()))

    /** Permissions for the current user on the resource
      */
    def userPermissions[A](innerSelection: SelectionBuilder[JobPermissions, A]): SelectionBuilder[CiJob, A] =
      _root_.caliban.client.SelectionBuilder.Field("userPermissions", Obj(innerSelection))
  }

  type CiJobArtifact

  object CiJobArtifact {

    /** URL for downloading the artifact's file.
      */
    def downloadPath: SelectionBuilder[CiJobArtifact, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("downloadPath", OptionOf(Scalar()))

    /** File type of the artifact.
      */
    def fileType: SelectionBuilder[CiJobArtifact, Option[JobArtifactFileType]] =
      _root_.caliban.client.SelectionBuilder.Field("fileType", OptionOf(Scalar()))
  }

  type CiJobArtifactConnection

  object CiJobArtifactConnection {

    /** A list of edges.
      */
    def edges[A](
      innerSelection: SelectionBuilder[CiJobArtifactEdge, A]
    ): SelectionBuilder[CiJobArtifactConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](innerSelection: SelectionBuilder[CiJobArtifact, A]): SelectionBuilder[CiJobArtifactConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[CiJobArtifactConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  }

  type CiJobArtifactEdge

  object CiJobArtifactEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[CiJobArtifactEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](innerSelection: SelectionBuilder[CiJobArtifact, A]): SelectionBuilder[CiJobArtifactEdge, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
  }

  type CiJobConnection

  object CiJobConnection {

    /** Total count of collection.
      */
    def count: SelectionBuilder[CiJobConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("count", Scalar())

    /** A list of edges.
      */
    def edges[A](innerSelection: SelectionBuilder[CiJobEdge, A]): SelectionBuilder[CiJobConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](innerSelection: SelectionBuilder[CiJob, A]): SelectionBuilder[CiJobConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[CiJobConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  }

  type CiJobEdge

  object CiJobEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[CiJobEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](innerSelection: SelectionBuilder[CiJob, A]): SelectionBuilder[CiJobEdge, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
  }

  type CiJobTokenScopeAddProjectPayload

  object CiJobTokenScopeAddProjectPayload {

    /** The CI job token's scope of access.
      */
    def ciJobTokenScope[A](
      innerSelection: SelectionBuilder[CiJobTokenScopeType, A]
    ): SelectionBuilder[CiJobTokenScopeAddProjectPayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("ciJobTokenScope", OptionOf(Obj(innerSelection)))

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[CiJobTokenScopeAddProjectPayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[CiJobTokenScopeAddProjectPayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))
  }

  type CiJobTokenScopeRemoveProjectPayload

  object CiJobTokenScopeRemoveProjectPayload {

    /** The CI job token's scope of access.
      */
    def ciJobTokenScope[A](
      innerSelection: SelectionBuilder[CiJobTokenScopeType, A]
    ): SelectionBuilder[CiJobTokenScopeRemoveProjectPayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("ciJobTokenScope", OptionOf(Obj(innerSelection)))

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[CiJobTokenScopeRemoveProjectPayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[CiJobTokenScopeRemoveProjectPayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))
  }

  type CiJobTokenScopeType

  object CiJobTokenScopeType {

    /** Allow list of projects that can be accessed by CI Job tokens created by this project.
      */
    def projects[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[ProjectConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[CiJobTokenScopeType, A] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "projects",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

  }

  type CiRunner

  object CiRunner {

    /** Access level of the runner.
      */
    def accessLevel: SelectionBuilder[CiRunner, CiRunnerAccessLevel] = _root_.caliban.client.SelectionBuilder.Field("accessLevel", Scalar())

    /** Indicates the runner is allowed to receive jobs.
      */
    def active: SelectionBuilder[CiRunner, Boolean] = _root_.caliban.client.SelectionBuilder.Field("active", Scalar())

    /** Last contact from the runner.
      */
    def contactedAt: SelectionBuilder[CiRunner, Option[Time]] =
      _root_.caliban.client.SelectionBuilder.Field("contactedAt", OptionOf(Scalar()))

    /** Description of the runner.
      */
    def description: SelectionBuilder[CiRunner, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("description", OptionOf(Scalar()))

    /** ID of the runner.
      */
    def id: SelectionBuilder[CiRunner, CiRunnerID] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())

    /** IP address of the runner.
      */
    def ipAddress: SelectionBuilder[CiRunner, String] = _root_.caliban.client.SelectionBuilder.Field("ipAddress", Scalar())

    /** Number of jobs processed by the runner (limited to 1000, plus one to indicate that more items exist).
      */
    def jobCount: SelectionBuilder[CiRunner, Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("jobCount", OptionOf(Scalar()))

    /** Indicates the runner is locked.
      */
    def locked: SelectionBuilder[CiRunner, Option[Boolean]] = _root_.caliban.client.SelectionBuilder.Field("locked", OptionOf(Scalar()))

    /** Maximum timeout (in seconds) for jobs processed by the runner.
      */
    def maximumTimeout: SelectionBuilder[CiRunner, Option[Int]] =
      _root_.caliban.client.SelectionBuilder.Field("maximumTimeout", OptionOf(Scalar()))

    /** Private projects' "minutes cost factor" associated with the runner (GitLab.com only).
      */
    def privateProjectsMinutesCostFactor: SelectionBuilder[CiRunner, Option[Double]] =
      _root_.caliban.client.SelectionBuilder.Field("privateProjectsMinutesCostFactor", OptionOf(Scalar()))

    /** Number of projects that the runner is associated with.
      */
    def projectCount: SelectionBuilder[CiRunner, Option[Int]] =
      _root_.caliban.client.SelectionBuilder.Field("projectCount", OptionOf(Scalar()))

    /** Public projects' "minutes cost factor" associated with the runner (GitLab.com only).
      */
    def publicProjectsMinutesCostFactor: SelectionBuilder[CiRunner, Option[Double]] =
      _root_.caliban.client.SelectionBuilder.Field("publicProjectsMinutesCostFactor", OptionOf(Scalar()))

    /** Revision of the runner.
      */
    def revision: SelectionBuilder[CiRunner, String] = _root_.caliban.client.SelectionBuilder.Field("revision", Scalar())

    /** Indicates the runner is able to run untagged jobs.
      */
    def runUntagged: SelectionBuilder[CiRunner, Boolean] = _root_.caliban.client.SelectionBuilder.Field("runUntagged", Scalar())

    /** Type of the runner.
      */
    def runnerType: SelectionBuilder[CiRunner, CiRunnerType] = _root_.caliban.client.SelectionBuilder.Field("runnerType", Scalar())

    /** First eight characters of the runner's token used to authenticate new job requests. Used as the runner's unique ID.
      */
    def shortSha: SelectionBuilder[CiRunner, Option[String]] = _root_.caliban.client.SelectionBuilder.Field("shortSha", OptionOf(Scalar()))

    /** Status of the runner.
      */
    def status: SelectionBuilder[CiRunner, CiRunnerStatus] = _root_.caliban.client.SelectionBuilder.Field("status", Scalar())

    /** Tags associated with the runner.
      */
    def tagList: SelectionBuilder[CiRunner, Option[List[String]]] =
      _root_.caliban.client.SelectionBuilder.Field("tagList", OptionOf(ListOf(Scalar())))

    /** Version of the runner.
      */
    def version: SelectionBuilder[CiRunner, String] = _root_.caliban.client.SelectionBuilder.Field("version", Scalar())
  }

  type CiRunnerConnection

  object CiRunnerConnection {

    /** A list of edges.
      */
    def edges[A](innerSelection: SelectionBuilder[CiRunnerEdge, A]): SelectionBuilder[CiRunnerConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](innerSelection: SelectionBuilder[CiRunner, A]): SelectionBuilder[CiRunnerConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[CiRunnerConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  }

  type CiRunnerEdge

  object CiRunnerEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[CiRunnerEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](innerSelection: SelectionBuilder[CiRunner, A]): SelectionBuilder[CiRunnerEdge, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
  }

  type CiStage

  object CiStage {

    /** Detailed status of the stage.
      */
    def detailedStatus[A](innerSelection: SelectionBuilder[DetailedStatus, A]): SelectionBuilder[CiStage, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("detailedStatus", OptionOf(Obj(innerSelection)))

    /** Group of jobs for the stage.
      */
    def groups[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[CiGroupConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[CiStage, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "groups",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** Jobs for the stage.
      */
    def jobs[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[CiJobConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[CiStage, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "jobs",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** Name of the stage.
      */
    def name: SelectionBuilder[CiStage, Option[String]] = _root_.caliban.client.SelectionBuilder.Field("name", OptionOf(Scalar()))

    /** Status of the pipeline stage.
      */
    def status: SelectionBuilder[CiStage, Option[String]] = _root_.caliban.client.SelectionBuilder.Field("status", OptionOf(Scalar()))
  }

  type CiStageConnection

  object CiStageConnection {

    /** A list of edges.
      */
    def edges[A](innerSelection: SelectionBuilder[CiStageEdge, A]): SelectionBuilder[CiStageConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](innerSelection: SelectionBuilder[CiStage, A]): SelectionBuilder[CiStageConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[CiStageConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  }

  type CiStageEdge

  object CiStageEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[CiStageEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](innerSelection: SelectionBuilder[CiStage, A]): SelectionBuilder[CiStageEdge, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
  }

  type CiTemplate

  object CiTemplate {

    /** Contents of the CI template.
      */
    def content: SelectionBuilder[CiTemplate, String] = _root_.caliban.client.SelectionBuilder.Field("content", Scalar())

    /** Name of the CI template.
      */
    def name: SelectionBuilder[CiTemplate, String] = _root_.caliban.client.SelectionBuilder.Field("name", Scalar())
  }

  type ClusterAgent

  object ClusterAgent {

    /** Timestamp the cluster agent was created.
      */
    def createdAt: SelectionBuilder[ClusterAgent, Option[Time]] =
      _root_.caliban.client.SelectionBuilder.Field("createdAt", OptionOf(Scalar()))

    /** User object, containing information about the person who created the agent.
      */
    def createdByUser[A](innerSelection: SelectionBuilder[UserCore, A]): SelectionBuilder[ClusterAgent, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("createdByUser", OptionOf(Obj(innerSelection)))

    /** ID of the cluster agent.
      */
    def id: SelectionBuilder[ClusterAgent, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())

    /** Name of the cluster agent.
      */
    def name: SelectionBuilder[ClusterAgent, Option[String]] = _root_.caliban.client.SelectionBuilder.Field("name", OptionOf(Scalar()))

    /** The project this cluster agent is associated with.
      */
    def project[A](innerSelection: SelectionBuilder[Project, A]): SelectionBuilder[ClusterAgent, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("project", OptionOf(Obj(innerSelection)))

    /** Tokens associated with the cluster agent.
      */
    def tokens[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[ClusterAgentTokenConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[ClusterAgent, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "tokens",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** Timestamp the cluster agent was updated.
      */
    def updatedAt: SelectionBuilder[ClusterAgent, Option[Time]] =
      _root_.caliban.client.SelectionBuilder.Field("updatedAt", OptionOf(Scalar()))

    /** Web path of the cluster agent.
      */
    def webPath: SelectionBuilder[ClusterAgent, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("webPath", OptionOf(Scalar()))
  }

  type ClusterAgentConnection

  object ClusterAgentConnection {

    /** Total count of collection.
      */
    def count: SelectionBuilder[ClusterAgentConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("count", Scalar())

    /** A list of edges.
      */
    def edges[A](innerSelection: SelectionBuilder[ClusterAgentEdge, A]): SelectionBuilder[ClusterAgentConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](innerSelection: SelectionBuilder[ClusterAgent, A]): SelectionBuilder[ClusterAgentConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[ClusterAgentConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  }

  type ClusterAgentDeletePayload

  object ClusterAgentDeletePayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[ClusterAgentDeletePayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[ClusterAgentDeletePayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))
  }

  type ClusterAgentEdge

  object ClusterAgentEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[ClusterAgentEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](innerSelection: SelectionBuilder[ClusterAgent, A]): SelectionBuilder[ClusterAgentEdge, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
  }

  type ClusterAgentToken

  object ClusterAgentToken {

    /** Cluster agent this token is associated with.
      */
    def clusterAgent[A](innerSelection: SelectionBuilder[ClusterAgent, A]): SelectionBuilder[ClusterAgentToken, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("clusterAgent", OptionOf(Obj(innerSelection)))

    /** Timestamp the token was created.
      */
    def createdAt: SelectionBuilder[ClusterAgentToken, Option[Time]] =
      _root_.caliban.client.SelectionBuilder.Field("createdAt", OptionOf(Scalar()))

    /** The user who created the token.
      */
    def createdByUser[A](innerSelection: SelectionBuilder[UserCore, A]): SelectionBuilder[ClusterAgentToken, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("createdByUser", OptionOf(Obj(innerSelection)))

    /** Description of the token.
      */
    def description: SelectionBuilder[ClusterAgentToken, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("description", OptionOf(Scalar()))

    /** Global ID of the token.
      */
    def id: SelectionBuilder[ClusterAgentToken, ClustersAgentTokenID] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())

    /** Timestamp the token was last used.
      */
    def lastUsedAt: SelectionBuilder[ClusterAgentToken, Option[Time]] =
      _root_.caliban.client.SelectionBuilder.Field("lastUsedAt", OptionOf(Scalar()))

    /** Name given to the token.
      */
    def name: SelectionBuilder[ClusterAgentToken, Option[String]] = _root_.caliban.client.SelectionBuilder.Field("name", OptionOf(Scalar()))
  }

  type ClusterAgentTokenConnection

  object ClusterAgentTokenConnection {

    /** Total count of collection.
      */
    def count: SelectionBuilder[ClusterAgentTokenConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("count", Scalar())

    /** A list of edges.
      */
    def edges[A](
      innerSelection: SelectionBuilder[ClusterAgentTokenEdge, A]
    ): SelectionBuilder[ClusterAgentTokenConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](
      innerSelection: SelectionBuilder[ClusterAgentToken, A]
    ): SelectionBuilder[ClusterAgentTokenConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[ClusterAgentTokenConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  }

  type ClusterAgentTokenCreatePayload

  object ClusterAgentTokenCreatePayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[ClusterAgentTokenCreatePayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[ClusterAgentTokenCreatePayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** Token secret value. Make sure you save it - you won't be able to access it again.
      */
    def secret: SelectionBuilder[ClusterAgentTokenCreatePayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("secret", OptionOf(Scalar()))

    /** Token created after mutation.
      */
    def token[A](innerSelection: SelectionBuilder[ClusterAgentToken, A]): SelectionBuilder[ClusterAgentTokenCreatePayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("token", OptionOf(Obj(innerSelection)))
  }

  type ClusterAgentTokenDeletePayload

  object ClusterAgentTokenDeletePayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[ClusterAgentTokenDeletePayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[ClusterAgentTokenDeletePayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))
  }

  type ClusterAgentTokenEdge

  object ClusterAgentTokenEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[ClusterAgentTokenEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](innerSelection: SelectionBuilder[ClusterAgentToken, A]): SelectionBuilder[ClusterAgentTokenEdge, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
  }

  type CodeCoverageActivity

  object CodeCoverageActivity {

    /** Average percentage of the different code coverage results available for the group.
      */
    def averageCoverage: SelectionBuilder[CodeCoverageActivity, Option[Double]] =
      _root_.caliban.client.SelectionBuilder.Field("averageCoverage", OptionOf(Scalar()))

    /** Number of different code coverage results available for the group.
      */
    def coverageCount: SelectionBuilder[CodeCoverageActivity, Option[Int]] =
      _root_.caliban.client.SelectionBuilder.Field("coverageCount", OptionOf(Scalar()))

    /** Date when the code coverage was created.
      */
    def date: SelectionBuilder[CodeCoverageActivity, Date] = _root_.caliban.client.SelectionBuilder.Field("date", Scalar())

    /** Number of projects with code coverage results for the group.
      */
    def projectCount: SelectionBuilder[CodeCoverageActivity, Option[Int]] =
      _root_.caliban.client.SelectionBuilder.Field("projectCount", OptionOf(Scalar()))
  }

  type CodeCoverageActivityConnection

  object CodeCoverageActivityConnection {

    /** A list of edges.
      */
    def edges[A](
      innerSelection: SelectionBuilder[CodeCoverageActivityEdge, A]
    ): SelectionBuilder[CodeCoverageActivityConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](
      innerSelection: SelectionBuilder[CodeCoverageActivity, A]
    ): SelectionBuilder[CodeCoverageActivityConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[CodeCoverageActivityConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  }

  type CodeCoverageActivityEdge

  object CodeCoverageActivityEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[CodeCoverageActivityEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](innerSelection: SelectionBuilder[CodeCoverageActivity, A]): SelectionBuilder[CodeCoverageActivityEdge, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
  }

  type CodeCoverageSummary

  object CodeCoverageSummary {

    /** Average percentage of the different code coverage results available for the project.
      */
    def averageCoverage: SelectionBuilder[CodeCoverageSummary, Option[Double]] =
      _root_.caliban.client.SelectionBuilder.Field("averageCoverage", OptionOf(Scalar()))

    /** Number of different code coverage results available.
      */
    def coverageCount: SelectionBuilder[CodeCoverageSummary, Option[Int]] =
      _root_.caliban.client.SelectionBuilder.Field("coverageCount", OptionOf(Scalar()))

    /** Latest date when the code coverage was created for the project.
      */
    def lastUpdatedOn: SelectionBuilder[CodeCoverageSummary, Option[Date]] =
      _root_.caliban.client.SelectionBuilder.Field("lastUpdatedOn", OptionOf(Scalar()))
  }

  type CodeQualityDegradation

  object CodeQualityDegradation {

    /** A description of the code quality degradation.
      */
    def description: SelectionBuilder[CodeQualityDegradation, String] =
      _root_.caliban.client.SelectionBuilder.Field("description", Scalar())

    /** A unique fingerprint to identify the code quality degradation. For example, an MD5 hash.
      */
    def fingerprint: SelectionBuilder[CodeQualityDegradation, String] =
      _root_.caliban.client.SelectionBuilder.Field("fingerprint", Scalar())

    /** The line on which the code quality degradation occurred.
      */
    def line: SelectionBuilder[CodeQualityDegradation, Int] = _root_.caliban.client.SelectionBuilder.Field("line", Scalar())

    /** The relative path to the file containing the code quality degradation.
      */
    def path: SelectionBuilder[CodeQualityDegradation, String] = _root_.caliban.client.SelectionBuilder.Field("path", Scalar())

    /** Status of the degradation (BLOCKER, CRITICAL, MAJOR, MINOR, INFO).
      */
    def severity: SelectionBuilder[CodeQualityDegradation, CodeQualityDegradationSeverity] =
      _root_.caliban.client.SelectionBuilder.Field("severity", Scalar())
  }

  type CodeQualityDegradationConnection

  object CodeQualityDegradationConnection {

    /** Total count of collection.
      */
    def count: SelectionBuilder[CodeQualityDegradationConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("count", Scalar())

    /** A list of edges.
      */
    def edges[A](
      innerSelection: SelectionBuilder[CodeQualityDegradationEdge, A]
    ): SelectionBuilder[CodeQualityDegradationConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](
      innerSelection: SelectionBuilder[CodeQualityDegradation, A]
    ): SelectionBuilder[CodeQualityDegradationConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[CodeQualityDegradationConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  }

  type CodeQualityDegradationEdge

  object CodeQualityDegradationEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[CodeQualityDegradationEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](innerSelection: SelectionBuilder[CodeQualityDegradation, A]): SelectionBuilder[CodeQualityDegradationEdge, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
  }

  type Commit

  object Commit {

    /** Author of the commit.
      */
    def author[A](innerSelection: SelectionBuilder[UserCore, A]): SelectionBuilder[Commit, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("author", OptionOf(Obj(innerSelection)))

    /** Commit authors gravatar.
      */
    def authorGravatar: SelectionBuilder[Commit, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("authorGravatar", OptionOf(Scalar()))

    /** Commit authors name.
      */
    def authorName: SelectionBuilder[Commit, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("authorName", OptionOf(Scalar()))

    /** Timestamp of when the commit was authored.
      */
    def authoredDate: SelectionBuilder[Commit, Option[Time]] =
      _root_.caliban.client.SelectionBuilder.Field("authoredDate", OptionOf(Scalar()))

    /** Description of the commit message.
      */
    def description: SelectionBuilder[Commit, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("description", OptionOf(Scalar()))

    /** The GitLab Flavored Markdown rendering of `description`
      */
    def descriptionHtml: SelectionBuilder[Commit, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("descriptionHtml", OptionOf(Scalar()))

    /** ID (global ID) of the commit.
      */
    def id: SelectionBuilder[Commit, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())

    /** Raw commit message.
      */
    def message: SelectionBuilder[Commit, Option[String]] = _root_.caliban.client.SelectionBuilder.Field("message", OptionOf(Scalar()))

    /** Pipelines of the commit ordered latest first.
      */
    def pipelines[A](
      status: Option[PipelineStatusEnum] = None,
      ref: Option[String] = None,
      sha: Option[String] = None,
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[PipelineConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[PipelineStatusEnum]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[String]],
      encoder3: ArgEncoder[Option[String]],
      encoder4: ArgEncoder[Option[String]],
      encoder5: ArgEncoder[Option[Int]],
      encoder6: ArgEncoder[Option[Int]]
    ): SelectionBuilder[Commit, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "pipelines",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("status", status, "PipelineStatusEnum")(encoder0),
          Argument("ref", ref, "String")(encoder1),
          Argument("sha", sha, "String")(encoder2),
          Argument("after", after, "String")(encoder3),
          Argument("before", before, "String")(encoder4),
          Argument("first", first, "Int")(encoder5),
          Argument("last", last, "Int")(encoder6)
        )
      )

    /** SHA1 ID of the commit.
      */
    def sha: SelectionBuilder[Commit, String] = _root_.caliban.client.SelectionBuilder.Field("sha", Scalar())

    /** Short SHA1 ID of the commit.
      */
    def shortId: SelectionBuilder[Commit, String] = _root_.caliban.client.SelectionBuilder.Field("shortId", Scalar())

    /** Rendered HTML of the commit signature.
      */
    def signatureHtml: SelectionBuilder[Commit, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("signatureHtml", OptionOf(Scalar()))

    /** Title of the commit message.
      */
    def title: SelectionBuilder[Commit, Option[String]] = _root_.caliban.client.SelectionBuilder.Field("title", OptionOf(Scalar()))

    /** The GitLab Flavored Markdown rendering of `title`
      */
    def titleHtml: SelectionBuilder[Commit, Option[String]] = _root_.caliban.client.SelectionBuilder.Field("titleHtml", OptionOf(Scalar()))

    /** Web path of the commit.
      */
    def webPath: SelectionBuilder[Commit, String] = _root_.caliban.client.SelectionBuilder.Field("webPath", Scalar())

    /** Web URL of the commit.
      */
    def webUrl: SelectionBuilder[Commit, String] = _root_.caliban.client.SelectionBuilder.Field("webUrl", Scalar())
  }

  type CommitConnection

  object CommitConnection {

    /** A list of edges.
      */
    def edges[A](innerSelection: SelectionBuilder[CommitEdge, A]): SelectionBuilder[CommitConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](innerSelection: SelectionBuilder[Commit, A]): SelectionBuilder[CommitConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[CommitConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  }

  type CommitCreatePayload

  object CommitCreatePayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[CommitCreatePayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** The commit after mutation.
      */
    def commit[A](innerSelection: SelectionBuilder[Commit, A]): SelectionBuilder[CommitCreatePayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("commit", OptionOf(Obj(innerSelection)))

    /** ETag path for the commit's pipeline.
      */
    def commitPipelinePath: SelectionBuilder[CommitCreatePayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("commitPipelinePath", OptionOf(Scalar()))

    /** Contents of the commit.
      */
    def content: SelectionBuilder[CommitCreatePayload, Option[List[String]]] =
      _root_.caliban.client.SelectionBuilder.Field("content", OptionOf(ListOf(Scalar())))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[CommitCreatePayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))
  }

  type CommitEdge

  object CommitEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[CommitEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](innerSelection: SelectionBuilder[Commit, A]): SelectionBuilder[CommitEdge, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
  }

  type ComplianceFramework

  object ComplianceFramework {

    /** Hexadecimal representation of compliance framework's label color.
      */
    def color: SelectionBuilder[ComplianceFramework, String] = _root_.caliban.client.SelectionBuilder.Field("color", Scalar())

    /** Description of the compliance framework.
      */
    def description: SelectionBuilder[ComplianceFramework, String] = _root_.caliban.client.SelectionBuilder.Field("description", Scalar())

    /** Compliance framework ID.
      */
    def id: SelectionBuilder[ComplianceFramework, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())

    /** Name of the compliance framework.
      */
    def name: SelectionBuilder[ComplianceFramework, String] = _root_.caliban.client.SelectionBuilder.Field("name", Scalar())

    /** Full path of the compliance pipeline configuration stored in a project repository, such as
      * `.gitlab/.compliance-gitlab-ci.yml@compliance/hipaa` **(ULTIMATE)**.
      */
    def pipelineConfigurationFullPath: SelectionBuilder[ComplianceFramework, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("pipelineConfigurationFullPath", OptionOf(Scalar()))
  }

  type ComplianceFrameworkConnection

  object ComplianceFrameworkConnection {

    /** A list of edges.
      */
    def edges[A](
      innerSelection: SelectionBuilder[ComplianceFrameworkEdge, A]
    ): SelectionBuilder[ComplianceFrameworkConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](
      innerSelection: SelectionBuilder[ComplianceFramework, A]
    ): SelectionBuilder[ComplianceFrameworkConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[ComplianceFrameworkConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  }

  type ComplianceFrameworkEdge

  object ComplianceFrameworkEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[ComplianceFrameworkEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](innerSelection: SelectionBuilder[ComplianceFramework, A]): SelectionBuilder[ComplianceFrameworkEdge, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
  }

  type ComposerMetadata

  object ComposerMetadata {

    /** Data of the Composer JSON file.
      */
    def composerJson[A](innerSelection: SelectionBuilder[PackageComposerJsonType, A]): SelectionBuilder[ComposerMetadata, A] =
      _root_.caliban.client.SelectionBuilder.Field("composerJson", Obj(innerSelection))

    /** Target SHA of the package.
      */
    def targetSha: SelectionBuilder[ComposerMetadata, String] = _root_.caliban.client.SelectionBuilder.Field("targetSha", Scalar())
  }

  type ConanFileMetadata

  object ConanFileMetadata {

    /** Type of the Conan file.
      */
    def conanFileType: SelectionBuilder[ConanFileMetadata, ConanMetadatumFileTypeEnum] =
      _root_.caliban.client.SelectionBuilder.Field("conanFileType", Scalar())

    /** Reference of the Conan package.
      */
    def conanPackageReference: SelectionBuilder[ConanFileMetadata, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("conanPackageReference", OptionOf(Scalar()))

    /** Date of creation.
      */
    def createdAt: SelectionBuilder[ConanFileMetadata, Time] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())

    /** ID of the metadatum.
      */
    def id: SelectionBuilder[ConanFileMetadata, PackagesConanFileMetadatumID] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())

    /** Revision of the package.
      */
    def packageRevision: SelectionBuilder[ConanFileMetadata, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("packageRevision", OptionOf(Scalar()))

    /** Revision of the Conan recipe.
      */
    def recipeRevision: SelectionBuilder[ConanFileMetadata, String] =
      _root_.caliban.client.SelectionBuilder.Field("recipeRevision", Scalar())

    /** Date of most recent update.
      */
    def updatedAt: SelectionBuilder[ConanFileMetadata, Time] = _root_.caliban.client.SelectionBuilder.Field("updatedAt", Scalar())
  }

  type ConanMetadata

  object ConanMetadata {

    /** Date of creation.
      */
    def createdAt: SelectionBuilder[ConanMetadata, Time] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())

    /** ID of the metadatum.
      */
    def id: SelectionBuilder[ConanMetadata, PackagesConanMetadatumID] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())

    /** Channel of the Conan package.
      */
    def packageChannel: SelectionBuilder[ConanMetadata, String] = _root_.caliban.client.SelectionBuilder.Field("packageChannel", Scalar())

    /** Username of the Conan package.
      */
    def packageUsername: SelectionBuilder[ConanMetadata, String] = _root_.caliban.client.SelectionBuilder.Field("packageUsername", Scalar())

    /** Recipe of the Conan package.
      */
    def recipe: SelectionBuilder[ConanMetadata, String] = _root_.caliban.client.SelectionBuilder.Field("recipe", Scalar())

    /** Recipe path of the Conan package.
      */
    def recipePath: SelectionBuilder[ConanMetadata, String] = _root_.caliban.client.SelectionBuilder.Field("recipePath", Scalar())

    /** Date of most recent update.
      */
    def updatedAt: SelectionBuilder[ConanMetadata, Time] = _root_.caliban.client.SelectionBuilder.Field("updatedAt", Scalar())
  }

  type ConfigureSastPayload

  object ConfigureSastPayload {

    /** Branch that has the new/modified `.gitlab-ci.yml` file.
      */
    def branch: SelectionBuilder[ConfigureSastPayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("branch", OptionOf(Scalar()))

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[ConfigureSastPayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[ConfigureSastPayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** Redirect path to use when the response is successful.
      */
    def successPath: SelectionBuilder[ConfigureSastPayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("successPath", OptionOf(Scalar()))
  }

  type ConfigureSecretDetectionPayload

  object ConfigureSecretDetectionPayload {

    /** Branch that has the new/modified `.gitlab-ci.yml` file.
      */
    def branch: SelectionBuilder[ConfigureSecretDetectionPayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("branch", OptionOf(Scalar()))

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[ConfigureSecretDetectionPayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[ConfigureSecretDetectionPayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** Redirect path to use when the response is successful.
      */
    def successPath: SelectionBuilder[ConfigureSecretDetectionPayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("successPath", OptionOf(Scalar()))
  }

  type ContainerExpirationPolicy

  object ContainerExpirationPolicy {

    /** This container expiration policy schedule.
      */
    def cadence: SelectionBuilder[ContainerExpirationPolicy, ContainerExpirationPolicyCadenceEnum] =
      _root_.caliban.client.SelectionBuilder.Field("cadence", Scalar())

    /** Timestamp of when the container expiration policy was created.
      */
    def createdAt: SelectionBuilder[ContainerExpirationPolicy, Time] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())

    /** Indicates whether this container expiration policy is enabled.
      */
    def enabled: SelectionBuilder[ContainerExpirationPolicy, Boolean] = _root_.caliban.client.SelectionBuilder.Field("enabled", Scalar())

    /** Number of tags to retain.
      */
    def keepN: SelectionBuilder[ContainerExpirationPolicy, Option[ContainerExpirationPolicyKeepEnum]] =
      _root_.caliban.client.SelectionBuilder.Field("keepN", OptionOf(Scalar()))

    /** Tags with names matching this regex pattern will expire.
      */
    def nameRegex: SelectionBuilder[ContainerExpirationPolicy, Option[UntrustedRegexp]] =
      _root_.caliban.client.SelectionBuilder.Field("nameRegex", OptionOf(Scalar()))

    /** Tags with names matching this regex pattern will be preserved.
      */
    def nameRegexKeep: SelectionBuilder[ContainerExpirationPolicy, Option[UntrustedRegexp]] =
      _root_.caliban.client.SelectionBuilder.Field("nameRegexKeep", OptionOf(Scalar()))

    /** Next time that this container expiration policy will get executed.
      */
    def nextRunAt: SelectionBuilder[ContainerExpirationPolicy, Option[Time]] =
      _root_.caliban.client.SelectionBuilder.Field("nextRunAt", OptionOf(Scalar()))

    /** Tags older that this will expire.
      */
    def olderThan: SelectionBuilder[ContainerExpirationPolicy, Option[ContainerExpirationPolicyOlderThanEnum]] =
      _root_.caliban.client.SelectionBuilder.Field("olderThan", OptionOf(Scalar()))

    /** Timestamp of when the container expiration policy was updated.
      */
    def updatedAt: SelectionBuilder[ContainerExpirationPolicy, Time] = _root_.caliban.client.SelectionBuilder.Field("updatedAt", Scalar())
  }

  type ContainerRepository

  object ContainerRepository {

    /** Can the current user delete the container repository.
      */
    def canDelete: SelectionBuilder[ContainerRepository, Boolean] = _root_.caliban.client.SelectionBuilder.Field("canDelete", Scalar())

    /** Timestamp when the container repository was created.
      */
    def createdAt: SelectionBuilder[ContainerRepository, Time] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())

    /** The tags cleanup status for the container repository.
      */
    def expirationPolicyCleanupStatus: SelectionBuilder[ContainerRepository, Option[ContainerRepositoryCleanupStatus]] =
      _root_.caliban.client.SelectionBuilder.Field("expirationPolicyCleanupStatus", OptionOf(Scalar()))

    /** Timestamp when the cleanup done by the expiration policy was started on the container repository.
      */
    def expirationPolicyStartedAt: SelectionBuilder[ContainerRepository, Option[Time]] =
      _root_.caliban.client.SelectionBuilder.Field("expirationPolicyStartedAt", OptionOf(Scalar()))

    /** ID of the container repository.
      */
    def id: SelectionBuilder[ContainerRepository, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())

    /** URL of the container repository.
      */
    def location: SelectionBuilder[ContainerRepository, String] = _root_.caliban.client.SelectionBuilder.Field("location", Scalar())

    /** Name of the container repository.
      */
    def name: SelectionBuilder[ContainerRepository, String] = _root_.caliban.client.SelectionBuilder.Field("name", Scalar())

    /** Path of the container repository.
      */
    def path: SelectionBuilder[ContainerRepository, String] = _root_.caliban.client.SelectionBuilder.Field("path", Scalar())

    /** Project of the container registry.
      */
    def project[A](innerSelection: SelectionBuilder[Project, A]): SelectionBuilder[ContainerRepository, A] =
      _root_.caliban.client.SelectionBuilder.Field("project", Obj(innerSelection))

    /** Status of the container repository.
      */
    def status: SelectionBuilder[ContainerRepository, Option[ContainerRepositoryStatus]] =
      _root_.caliban.client.SelectionBuilder.Field("status", OptionOf(Scalar()))

    /** Number of tags associated with this image.
      */
    def tagsCount: SelectionBuilder[ContainerRepository, Int] = _root_.caliban.client.SelectionBuilder.Field("tagsCount", Scalar())

    /** Timestamp when the container repository was updated.
      */
    def updatedAt: SelectionBuilder[ContainerRepository, Time] = _root_.caliban.client.SelectionBuilder.Field("updatedAt", Scalar())
  }

  type ContainerRepositoryConnection

  object ContainerRepositoryConnection {

    /** A list of edges.
      */
    def edges[A](
      innerSelection: SelectionBuilder[ContainerRepositoryEdge, A]
    ): SelectionBuilder[ContainerRepositoryConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](
      innerSelection: SelectionBuilder[ContainerRepository, A]
    ): SelectionBuilder[ContainerRepositoryConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[ContainerRepositoryConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  }

  type ContainerRepositoryDetails

  object ContainerRepositoryDetails {

    /** Can the current user delete the container repository.
      */
    def canDelete: SelectionBuilder[ContainerRepositoryDetails, Boolean] =
      _root_.caliban.client.SelectionBuilder.Field("canDelete", Scalar())

    /** Timestamp when the container repository was created.
      */
    def createdAt: SelectionBuilder[ContainerRepositoryDetails, Time] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())

    /** The tags cleanup status for the container repository.
      */
    def expirationPolicyCleanupStatus: SelectionBuilder[ContainerRepositoryDetails, Option[ContainerRepositoryCleanupStatus]] =
      _root_.caliban.client.SelectionBuilder.Field("expirationPolicyCleanupStatus", OptionOf(Scalar()))

    /** Timestamp when the cleanup done by the expiration policy was started on the container repository.
      */
    def expirationPolicyStartedAt: SelectionBuilder[ContainerRepositoryDetails, Option[Time]] =
      _root_.caliban.client.SelectionBuilder.Field("expirationPolicyStartedAt", OptionOf(Scalar()))

    /** ID of the container repository.
      */
    def id: SelectionBuilder[ContainerRepositoryDetails, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())

    /** URL of the container repository.
      */
    def location: SelectionBuilder[ContainerRepositoryDetails, String] = _root_.caliban.client.SelectionBuilder.Field("location", Scalar())

    /** Name of the container repository.
      */
    def name: SelectionBuilder[ContainerRepositoryDetails, String] = _root_.caliban.client.SelectionBuilder.Field("name", Scalar())

    /** Path of the container repository.
      */
    def path: SelectionBuilder[ContainerRepositoryDetails, String] = _root_.caliban.client.SelectionBuilder.Field("path", Scalar())

    /** Project of the container registry.
      */
    def project[A](innerSelection: SelectionBuilder[Project, A]): SelectionBuilder[ContainerRepositoryDetails, A] =
      _root_.caliban.client.SelectionBuilder.Field("project", Obj(innerSelection))

    /** Status of the container repository.
      */
    def status: SelectionBuilder[ContainerRepositoryDetails, Option[ContainerRepositoryStatus]] =
      _root_.caliban.client.SelectionBuilder.Field("status", OptionOf(Scalar()))

    /** Tags of the container repository.
      */
    def tags[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[ContainerRepositoryTagConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[ContainerRepositoryDetails, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "tags",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** Number of tags associated with this image.
      */
    def tagsCount: SelectionBuilder[ContainerRepositoryDetails, Int] = _root_.caliban.client.SelectionBuilder.Field("tagsCount", Scalar())

    /** Timestamp when the container repository was updated.
      */
    def updatedAt: SelectionBuilder[ContainerRepositoryDetails, Time] = _root_.caliban.client.SelectionBuilder.Field("updatedAt", Scalar())
  }

  type ContainerRepositoryEdge

  object ContainerRepositoryEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[ContainerRepositoryEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](innerSelection: SelectionBuilder[ContainerRepository, A]): SelectionBuilder[ContainerRepositoryEdge, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
  }

  type ContainerRepositoryTag

  object ContainerRepositoryTag {

    /** Can the current user delete this tag.
      */
    def canDelete: SelectionBuilder[ContainerRepositoryTag, Boolean] = _root_.caliban.client.SelectionBuilder.Field("canDelete", Scalar())

    /** Timestamp when the tag was created.
      */
    def createdAt: SelectionBuilder[ContainerRepositoryTag, Option[Time]] =
      _root_.caliban.client.SelectionBuilder.Field("createdAt", OptionOf(Scalar()))

    /** Digest of the tag.
      */
    def digest: SelectionBuilder[ContainerRepositoryTag, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("digest", OptionOf(Scalar()))

    /** URL of the tag.
      */
    def location: SelectionBuilder[ContainerRepositoryTag, String] = _root_.caliban.client.SelectionBuilder.Field("location", Scalar())

    /** Name of the tag.
      */
    def name: SelectionBuilder[ContainerRepositoryTag, String] = _root_.caliban.client.SelectionBuilder.Field("name", Scalar())

    /** Path of the tag.
      */
    def path: SelectionBuilder[ContainerRepositoryTag, String] = _root_.caliban.client.SelectionBuilder.Field("path", Scalar())

    /** Revision of the tag.
      */
    def revision: SelectionBuilder[ContainerRepositoryTag, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("revision", OptionOf(Scalar()))

    /** Short revision of the tag.
      */
    def shortRevision: SelectionBuilder[ContainerRepositoryTag, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("shortRevision", OptionOf(Scalar()))

    /** The size of the tag.
      */
    def totalSize: SelectionBuilder[ContainerRepositoryTag, Option[BigInt]] =
      _root_.caliban.client.SelectionBuilder.Field("totalSize", OptionOf(Scalar()))
  }

  type ContainerRepositoryTagConnection

  object ContainerRepositoryTagConnection {

    /** A list of edges.
      */
    def edges[A](
      innerSelection: SelectionBuilder[ContainerRepositoryTagEdge, A]
    ): SelectionBuilder[ContainerRepositoryTagConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](
      innerSelection: SelectionBuilder[ContainerRepositoryTag, A]
    ): SelectionBuilder[ContainerRepositoryTagConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[ContainerRepositoryTagConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  }

  type ContainerRepositoryTagEdge

  object ContainerRepositoryTagEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[ContainerRepositoryTagEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](innerSelection: SelectionBuilder[ContainerRepositoryTag, A]): SelectionBuilder[ContainerRepositoryTagEdge, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
  }

  type CreateAlertIssuePayload

  object CreateAlertIssuePayload {

    /** The alert after mutation.
      */
    def alert[A](innerSelection: SelectionBuilder[AlertManagementAlert, A]): SelectionBuilder[CreateAlertIssuePayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("alert", OptionOf(Obj(innerSelection)))

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[CreateAlertIssuePayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[CreateAlertIssuePayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** The issue created after mutation.
      */
    def issue[A](innerSelection: SelectionBuilder[Issue, A]): SelectionBuilder[CreateAlertIssuePayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("issue", OptionOf(Obj(innerSelection)))

    /** The to-do item after mutation.
      */
    def todo[A](innerSelection: SelectionBuilder[Todo, A]): SelectionBuilder[CreateAlertIssuePayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("todo", OptionOf(Obj(innerSelection)))
  }

  type CreateAnnotationPayload

  object CreateAnnotationPayload {

    /** The created annotation.
      */
    def annotation[A](
      innerSelection: SelectionBuilder[MetricsDashboardAnnotation, A]
    ): SelectionBuilder[CreateAnnotationPayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("annotation", OptionOf(Obj(innerSelection)))

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[CreateAnnotationPayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[CreateAnnotationPayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))
  }

  type CreateBoardPayload

  object CreateBoardPayload {

    /** The board after mutation.
      */
    def board[A](innerSelection: SelectionBuilder[Board, A]): SelectionBuilder[CreateBoardPayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("board", OptionOf(Obj(innerSelection)))

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[CreateBoardPayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[CreateBoardPayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))
  }

  type CreateBranchPayload

  object CreateBranchPayload {

    /** Branch after mutation.
      */
    def branch[A](innerSelection: SelectionBuilder[Branch, A]): SelectionBuilder[CreateBranchPayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("branch", OptionOf(Obj(innerSelection)))

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[CreateBranchPayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[CreateBranchPayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))
  }

  type CreateClusterAgentPayload

  object CreateClusterAgentPayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[CreateClusterAgentPayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Cluster agent created after mutation.
      */
    def clusterAgent[A](innerSelection: SelectionBuilder[ClusterAgent, A]): SelectionBuilder[CreateClusterAgentPayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("clusterAgent", OptionOf(Obj(innerSelection)))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[CreateClusterAgentPayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))
  }

  type CreateComplianceFrameworkPayload

  object CreateComplianceFrameworkPayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[CreateComplianceFrameworkPayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[CreateComplianceFrameworkPayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** The created compliance framework.
      */
    def framework[A](
      innerSelection: SelectionBuilder[ComplianceFramework, A]
    ): SelectionBuilder[CreateComplianceFrameworkPayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("framework", OptionOf(Obj(innerSelection)))

  }

  type CreateCustomEmojiPayload

  object CreateCustomEmojiPayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[CreateCustomEmojiPayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** The new custom emoji.
      */
    def customEmoji[A](innerSelection: SelectionBuilder[CustomEmoji, A]): SelectionBuilder[CreateCustomEmojiPayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("customEmoji", OptionOf(Obj(innerSelection)))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[CreateCustomEmojiPayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))
  }

  type CreateDiffNotePayload

  object CreateDiffNotePayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[CreateDiffNotePayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[CreateDiffNotePayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** The note after mutation.
      */
    def note[A](innerSelection: SelectionBuilder[Note, A]): SelectionBuilder[CreateDiffNotePayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("note", OptionOf(Obj(innerSelection)))
  }

  type CreateEpicPayload

  object CreateEpicPayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[CreateEpicPayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** The created epic.
      */
    def epic[A](innerSelection: SelectionBuilder[Epic, A]): SelectionBuilder[CreateEpicPayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("epic", OptionOf(Obj(innerSelection)))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[CreateEpicPayload, List[String]] = _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))
  }

  type CreateImageDiffNotePayload

  object CreateImageDiffNotePayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[CreateImageDiffNotePayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[CreateImageDiffNotePayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** The note after mutation.
      */
    def note[A](innerSelection: SelectionBuilder[Note, A]): SelectionBuilder[CreateImageDiffNotePayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("note", OptionOf(Obj(innerSelection)))
  }

  type CreateIssuePayload

  object CreateIssuePayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[CreateIssuePayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[CreateIssuePayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** The issue after mutation.
      */
    def issue[A](innerSelection: SelectionBuilder[Issue, A]): SelectionBuilder[CreateIssuePayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("issue", OptionOf(Obj(innerSelection)))
  }

  type CreateIterationPayload

  object CreateIterationPayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[CreateIterationPayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[CreateIterationPayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** The created iteration.
      */
    def iteration[A](innerSelection: SelectionBuilder[Iteration, A]): SelectionBuilder[CreateIterationPayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("iteration", OptionOf(Obj(innerSelection)))
  }

  type CreateNotePayload

  object CreateNotePayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[CreateNotePayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[CreateNotePayload, List[String]] = _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** The note after mutation.
      */
    def note[A](innerSelection: SelectionBuilder[Note, A]): SelectionBuilder[CreateNotePayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("note", OptionOf(Obj(innerSelection)))
  }

  type CreateRequirementPayload

  object CreateRequirementPayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[CreateRequirementPayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[CreateRequirementPayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** Requirement after mutation.
      */
    def requirement[A](innerSelection: SelectionBuilder[Requirement, A]): SelectionBuilder[CreateRequirementPayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("requirement", OptionOf(Obj(innerSelection)))
  }

  type CreateSnippetPayload

  object CreateSnippetPayload {

    /** The CAPTCHA site key which must be used to render a challenge for the user to solve to obtain a valid captchaResponse value.
      * Included only when an operation was not completed because "NeedsCaptchaResponse" is true. Deprecated in 13.11: Use spam protection
      * with HTTP headers instead.
      */
    @deprecated("Use spam protection with HTTP headers instead. Deprecated in 13.11.", "")
    def captchaSiteKey: SelectionBuilder[CreateSnippetPayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("captchaSiteKey", OptionOf(Scalar()))

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[CreateSnippetPayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[CreateSnippetPayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** Indicates whether the operation was detected as possible spam and not completed. If CAPTCHA is enabled, the request must be
      * resubmitted with a valid CAPTCHA response and spam_log_id included for the operation to be completed. Included only when an
      * operation was not completed because "NeedsCaptchaResponse" is true. Deprecated in 13.11: Use spam protection with HTTP headers
      * instead.
      */
    @deprecated("Use spam protection with HTTP headers instead. Deprecated in 13.11.", "")
    def needsCaptchaResponse: SelectionBuilder[CreateSnippetPayload, Option[Boolean]] =
      _root_.caliban.client.SelectionBuilder.Field("needsCaptchaResponse", OptionOf(Scalar()))

    /** The snippet after mutation.
      */
    def snippet[A](innerSelection: SelectionBuilder[Snippet, A]): SelectionBuilder[CreateSnippetPayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("snippet", OptionOf(Obj(innerSelection)))

    /** Indicates whether the operation was detected as definite spam. There is no option to resubmit the request with a CAPTCHA response.
      * Deprecated in 13.11: Use spam protection with HTTP headers instead.
      */
    @deprecated("Use spam protection with HTTP headers instead. Deprecated in 13.11.", "")
    def spam: SelectionBuilder[CreateSnippetPayload, Option[Boolean]] =
      _root_.caliban.client.SelectionBuilder.Field("spam", OptionOf(Scalar()))

    /** The spam log ID which must be passed along with a valid CAPTCHA response for an operation to be completed. Included only when an
      * operation was not completed because "NeedsCaptchaResponse" is true. Deprecated in 13.11: Use spam protection with HTTP headers
      * instead.
      */
    @deprecated("Use spam protection with HTTP headers instead. Deprecated in 13.11.", "")
    def spamLogId: SelectionBuilder[CreateSnippetPayload, Option[Int]] =
      _root_.caliban.client.SelectionBuilder.Field("spamLogId", OptionOf(Scalar()))

  }

  type CreateTestCasePayload

  object CreateTestCasePayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[CreateTestCasePayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[CreateTestCasePayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** The test case created.
      */
    def testCase[A](innerSelection: SelectionBuilder[Issue, A]): SelectionBuilder[CreateTestCasePayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("testCase", OptionOf(Obj(innerSelection)))
  }

  type CurrentLicense

  object CurrentLicense {

    /** Date when the license was activated.
      */
    def activatedAt: SelectionBuilder[CurrentLicense, Option[Date]] =
      _root_.caliban.client.SelectionBuilder.Field("activatedAt", OptionOf(Scalar()))

    /** Number of billable users on the system.
      */
    def billableUsersCount: SelectionBuilder[CurrentLicense, Option[Int]] =
      _root_.caliban.client.SelectionBuilder.Field("billableUsersCount", OptionOf(Scalar()))

    /** Date, including grace period, when licensed features will be blocked.
      */
    def blockChangesAt: SelectionBuilder[CurrentLicense, Option[Date]] =
      _root_.caliban.client.SelectionBuilder.Field("blockChangesAt", OptionOf(Scalar()))

    /** Company of the licensee.
      */
    def company: SelectionBuilder[CurrentLicense, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("company", OptionOf(Scalar()))

    /** Email of the licensee.
      */
    def email: SelectionBuilder[CurrentLicense, Option[String]] = _root_.caliban.client.SelectionBuilder.Field("email", OptionOf(Scalar()))

    /** Date when the license expires.
      */
    def expiresAt: SelectionBuilder[CurrentLicense, Option[Date]] =
      _root_.caliban.client.SelectionBuilder.Field("expiresAt", OptionOf(Scalar()))

    /** ID of the license.
      */
    def id: SelectionBuilder[CurrentLicense, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())

    /** Date when the license was last synced.
      */
    def lastSync: SelectionBuilder[CurrentLicense, Option[Time]] =
      _root_.caliban.client.SelectionBuilder.Field("lastSync", OptionOf(Scalar()))

    /** Highest number of billable users on the system during the term of the current license.
      */
    def maximumUserCount: SelectionBuilder[CurrentLicense, Option[Int]] =
      _root_.caliban.client.SelectionBuilder.Field("maximumUserCount", OptionOf(Scalar()))

    /** Name of the licensee.
      */
    def name: SelectionBuilder[CurrentLicense, Option[String]] = _root_.caliban.client.SelectionBuilder.Field("name", OptionOf(Scalar()))

    /** Name of the subscription plan.
      */
    def plan: SelectionBuilder[CurrentLicense, String] = _root_.caliban.client.SelectionBuilder.Field("plan", Scalar())

    /** Date when the license started.
      */
    def startsAt: SelectionBuilder[CurrentLicense, Option[Date]] =
      _root_.caliban.client.SelectionBuilder.Field("startsAt", OptionOf(Scalar()))

    /** Type of the license.
      */
    def `type`: SelectionBuilder[CurrentLicense, String] = _root_.caliban.client.SelectionBuilder.Field("type", Scalar())

    /** Number of paid users in the license.
      */
    def usersInLicenseCount: SelectionBuilder[CurrentLicense, Option[Int]] =
      _root_.caliban.client.SelectionBuilder.Field("usersInLicenseCount", OptionOf(Scalar()))

    /** Number of users over the paid users in the license.
      */
    def usersOverLicenseCount: SelectionBuilder[CurrentLicense, Option[Int]] =
      _root_.caliban.client.SelectionBuilder.Field("usersOverLicenseCount", OptionOf(Scalar()))
  }

  type CustomEmoji

  object CustomEmoji {

    /** Whether the emoji is an external link.
      */
    def external: SelectionBuilder[CustomEmoji, Boolean] = _root_.caliban.client.SelectionBuilder.Field("external", Scalar())

    /** The ID of the emoji.
      */
    def id: SelectionBuilder[CustomEmoji, CustomEmojiID] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())

    /** The name of the emoji.
      */
    def name: SelectionBuilder[CustomEmoji, String] = _root_.caliban.client.SelectionBuilder.Field("name", Scalar())

    /** The link to file of the emoji.
      */
    def url: SelectionBuilder[CustomEmoji, String] = _root_.caliban.client.SelectionBuilder.Field("url", Scalar())
  }

  type CustomEmojiConnection

  object CustomEmojiConnection {

    /** A list of edges.
      */
    def edges[A](innerSelection: SelectionBuilder[CustomEmojiEdge, A]): SelectionBuilder[CustomEmojiConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](innerSelection: SelectionBuilder[CustomEmoji, A]): SelectionBuilder[CustomEmojiConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[CustomEmojiConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  }

  type CustomEmojiEdge

  object CustomEmojiEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[CustomEmojiEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](innerSelection: SelectionBuilder[CustomEmoji, A]): SelectionBuilder[CustomEmojiEdge, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
  }

  type DastOnDemandScanCreatePayload

  object DastOnDemandScanCreatePayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[DastOnDemandScanCreatePayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[DastOnDemandScanCreatePayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** URL of the pipeline that was created.
      */
    def pipelineUrl: SelectionBuilder[DastOnDemandScanCreatePayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("pipelineUrl", OptionOf(Scalar()))
  }

  type DastProfile

  object DastProfile {

    /** The associated branch.
      */
    def branch[A](innerSelection: SelectionBuilder[DastProfileBranch, A]): SelectionBuilder[DastProfile, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("branch", OptionOf(Obj(innerSelection)))

    /** The associated scanner profile.
      */
    def dastScannerProfile[A](innerSelection: SelectionBuilder[DastScannerProfile, A]): SelectionBuilder[DastProfile, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("dastScannerProfile", OptionOf(Obj(innerSelection)))

    /** The associated site profile.
      */
    def dastSiteProfile[A](innerSelection: SelectionBuilder[DastSiteProfile, A]): SelectionBuilder[DastProfile, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("dastSiteProfile", OptionOf(Obj(innerSelection)))

    /** The description of the scan.
      */
    def description: SelectionBuilder[DastProfile, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("description", OptionOf(Scalar()))

    /** Relative web path to the edit page of a profile.
      */
    def editPath: SelectionBuilder[DastProfile, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("editPath", OptionOf(Scalar()))

    /** ID of the profile.
      */
    def id: SelectionBuilder[DastProfile, DastProfileID] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())

    /** The name of the profile.
      */
    def name: SelectionBuilder[DastProfile, Option[String]] = _root_.caliban.client.SelectionBuilder.Field("name", OptionOf(Scalar()))
  }

  type DastProfileBranch

  object DastProfileBranch {

    /** Indicates whether or not the branch exists.
      */
    def exists: SelectionBuilder[DastProfileBranch, Option[Boolean]] =
      _root_.caliban.client.SelectionBuilder.Field("exists", OptionOf(Scalar()))

    /** The name of the branch.
      */
    def name: SelectionBuilder[DastProfileBranch, Option[String]] = _root_.caliban.client.SelectionBuilder.Field("name", OptionOf(Scalar()))
  }

  type DastProfileConnection

  object DastProfileConnection {

    /** A list of edges.
      */
    def edges[A](innerSelection: SelectionBuilder[DastProfileEdge, A]): SelectionBuilder[DastProfileConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](innerSelection: SelectionBuilder[DastProfile, A]): SelectionBuilder[DastProfileConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[DastProfileConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  }

  type DastProfileCreatePayload

  object DastProfileCreatePayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[DastProfileCreatePayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** The created profile.
      */
    def dastProfile[A](innerSelection: SelectionBuilder[DastProfile, A]): SelectionBuilder[DastProfileCreatePayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("dastProfile", OptionOf(Obj(innerSelection)))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[DastProfileCreatePayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** The URL of the pipeline that was created. Requires `runAfterCreate` to be set to `true`.
      */
    def pipelineUrl: SelectionBuilder[DastProfileCreatePayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("pipelineUrl", OptionOf(Scalar()))
  }

  type DastProfileDeletePayload

  object DastProfileDeletePayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[DastProfileDeletePayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[DastProfileDeletePayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))
  }

  type DastProfileEdge

  object DastProfileEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[DastProfileEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](innerSelection: SelectionBuilder[DastProfile, A]): SelectionBuilder[DastProfileEdge, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
  }

  type DastProfileRunPayload

  object DastProfileRunPayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[DastProfileRunPayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[DastProfileRunPayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** URL of the pipeline that was created.
      */
    def pipelineUrl: SelectionBuilder[DastProfileRunPayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("pipelineUrl", OptionOf(Scalar()))
  }

  type DastProfileUpdatePayload

  object DastProfileUpdatePayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[DastProfileUpdatePayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** The updated profile.
      */
    def dastProfile[A](innerSelection: SelectionBuilder[DastProfile, A]): SelectionBuilder[DastProfileUpdatePayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("dastProfile", OptionOf(Obj(innerSelection)))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[DastProfileUpdatePayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** The URL of the pipeline that was created. Requires the input argument `runAfterUpdate` to be set to `true` when calling the
      * mutation, otherwise no pipeline will be created.
      */
    def pipelineUrl: SelectionBuilder[DastProfileUpdatePayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("pipelineUrl", OptionOf(Scalar()))
  }

  type DastScannerProfile

  object DastScannerProfile {

    /** Relative web path to the edit page of a scanner profile.
      */
    def editPath: SelectionBuilder[DastScannerProfile, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("editPath", OptionOf(Scalar()))

    /** ID of the DAST scanner profile.
      */
    def id: SelectionBuilder[DastScannerProfile, DastScannerProfileID] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())

    /** Name of the DAST scanner profile.
      */
    def profileName: SelectionBuilder[DastScannerProfile, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("profileName", OptionOf(Scalar()))

    /** List of security policy names that are referencing given project.
      */
    def referencedInSecurityPolicies: SelectionBuilder[DastScannerProfile, Option[List[String]]] =
      _root_.caliban.client.SelectionBuilder.Field("referencedInSecurityPolicies", OptionOf(ListOf(Scalar())))

    /** Indicates the type of DAST scan that will run. Either a Passive Scan or an Active Scan.
      */
    def scanType: SelectionBuilder[DastScannerProfile, Option[DastScanTypeEnum]] =
      _root_.caliban.client.SelectionBuilder.Field("scanType", OptionOf(Scalar()))

    /** Indicates if debug messages should be included in DAST console output. True to include the debug messages.
      */
    def showDebugMessages: SelectionBuilder[DastScannerProfile, Boolean] =
      _root_.caliban.client.SelectionBuilder.Field("showDebugMessages", Scalar())

    /** The maximum number of minutes allowed for the spider to traverse the site.
      */
    def spiderTimeout: SelectionBuilder[DastScannerProfile, Option[Int]] =
      _root_.caliban.client.SelectionBuilder.Field("spiderTimeout", OptionOf(Scalar()))

    /** The maximum number of seconds allowed for the site under test to respond to a request.
      */
    def targetTimeout: SelectionBuilder[DastScannerProfile, Option[Int]] =
      _root_.caliban.client.SelectionBuilder.Field("targetTimeout", OptionOf(Scalar()))

    /** Indicates if the AJAX spider should be used to crawl the target site. True to run the AJAX spider in addition to the traditional
      * spider, and false to run only the traditional spider.
      */
    def useAjaxSpider: SelectionBuilder[DastScannerProfile, Boolean] =
      _root_.caliban.client.SelectionBuilder.Field("useAjaxSpider", Scalar())
  }

  type DastScannerProfileConnection

  object DastScannerProfileConnection {

    /** A list of edges.
      */
    def edges[A](
      innerSelection: SelectionBuilder[DastScannerProfileEdge, A]
    ): SelectionBuilder[DastScannerProfileConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](
      innerSelection: SelectionBuilder[DastScannerProfile, A]
    ): SelectionBuilder[DastScannerProfileConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[DastScannerProfileConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  }

  type DastScannerProfileCreatePayload

  object DastScannerProfileCreatePayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[DastScannerProfileCreatePayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[DastScannerProfileCreatePayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** ID of the scanner profile.
      */
    def id: SelectionBuilder[DastScannerProfileCreatePayload, Option[DastScannerProfileID]] =
      _root_.caliban.client.SelectionBuilder.Field("id", OptionOf(Scalar()))
  }

  type DastScannerProfileDeletePayload

  object DastScannerProfileDeletePayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[DastScannerProfileDeletePayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[DastScannerProfileDeletePayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))
  }

  type DastScannerProfileEdge

  object DastScannerProfileEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[DastScannerProfileEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](innerSelection: SelectionBuilder[DastScannerProfile, A]): SelectionBuilder[DastScannerProfileEdge, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
  }

  type DastScannerProfileUpdatePayload

  object DastScannerProfileUpdatePayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[DastScannerProfileUpdatePayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[DastScannerProfileUpdatePayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** ID of the scanner profile.
      */
    def id: SelectionBuilder[DastScannerProfileUpdatePayload, Option[DastScannerProfileID]] =
      _root_.caliban.client.SelectionBuilder.Field("id", OptionOf(Scalar()))
  }

  type DastSiteProfile

  object DastSiteProfile {

    /** Target authentication details.
      */
    def auth[A](innerSelection: SelectionBuilder[DastSiteProfileAuth, A]): SelectionBuilder[DastSiteProfile, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("auth", OptionOf(Obj(innerSelection)))

    /** Relative web path to the edit page of a site profile.
      */
    def editPath: SelectionBuilder[DastSiteProfile, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("editPath", OptionOf(Scalar()))

    /** The URLs to skip during an authenticated scan.
      */
    def excludedUrls: SelectionBuilder[DastSiteProfile, Option[List[String]]] =
      _root_.caliban.client.SelectionBuilder.Field("excludedUrls", OptionOf(ListOf(Scalar())))

    /** ID of the site profile.
      */
    def id: SelectionBuilder[DastSiteProfile, DastSiteProfileID] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())

    /** Normalized URL of the target to be scanned.
      */
    def normalizedTargetUrl: SelectionBuilder[DastSiteProfile, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("normalizedTargetUrl", OptionOf(Scalar()))

    /** The name of the site profile.
      */
    def profileName: SelectionBuilder[DastSiteProfile, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("profileName", OptionOf(Scalar()))

    /** List of security policy names that are referencing given project.
      */
    def referencedInSecurityPolicies: SelectionBuilder[DastSiteProfile, Option[List[String]]] =
      _root_.caliban.client.SelectionBuilder.Field("referencedInSecurityPolicies", OptionOf(ListOf(Scalar())))

    /** Comma-separated list of request header names and values to be added to every request made by DAST.
      */
    def requestHeaders: SelectionBuilder[DastSiteProfile, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("requestHeaders", OptionOf(Scalar()))

    /** The type of target to be scanned.
      */
    def targetType: SelectionBuilder[DastSiteProfile, Option[DastTargetTypeEnum]] =
      _root_.caliban.client.SelectionBuilder.Field("targetType", OptionOf(Scalar()))

    /** The URL of the target to be scanned.
      */
    def targetUrl: SelectionBuilder[DastSiteProfile, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("targetUrl", OptionOf(Scalar()))

    /** Permissions for the current user on the resource
      */
    def userPermissions[A](innerSelection: SelectionBuilder[DastSiteProfilePermissions, A]): SelectionBuilder[DastSiteProfile, A] =
      _root_.caliban.client.SelectionBuilder.Field("userPermissions", Obj(innerSelection))

    /** The current validation status of the site profile.
      */
    def validationStatus: SelectionBuilder[DastSiteProfile, Option[DastSiteProfileValidationStatusEnum]] =
      _root_.caliban.client.SelectionBuilder.Field("validationStatus", OptionOf(Scalar()))
  }

  type DastSiteProfileAuth

  object DastSiteProfileAuth {

    /** Indicates whether authentication is enabled.
      */
    def enabled: SelectionBuilder[DastSiteProfileAuth, Option[Boolean]] =
      _root_.caliban.client.SelectionBuilder.Field("enabled", OptionOf(Scalar()))

    /** Redacted password to authenticate with on the target website.
      */
    def password: SelectionBuilder[DastSiteProfileAuth, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("password", OptionOf(Scalar()))

    /** The name of password field at the sign-in HTML form.
      */
    def passwordField: SelectionBuilder[DastSiteProfileAuth, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("passwordField", OptionOf(Scalar()))

    /** The URL of the page containing the sign-in HTML form on the target website.
      */
    def url: SelectionBuilder[DastSiteProfileAuth, Option[String]] = _root_.caliban.client.SelectionBuilder.Field("url", OptionOf(Scalar()))

    /** The username to authenticate with on the target website.
      */
    def username: SelectionBuilder[DastSiteProfileAuth, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("username", OptionOf(Scalar()))

    /** The name of username field at the sign-in HTML form.
      */
    def usernameField: SelectionBuilder[DastSiteProfileAuth, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("usernameField", OptionOf(Scalar()))
  }

  type DastSiteProfileConnection

  object DastSiteProfileConnection {

    /** A list of edges.
      */
    def edges[A](
      innerSelection: SelectionBuilder[DastSiteProfileEdge, A]
    ): SelectionBuilder[DastSiteProfileConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](
      innerSelection: SelectionBuilder[DastSiteProfile, A]
    ): SelectionBuilder[DastSiteProfileConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[DastSiteProfileConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  }

  type DastSiteProfileCreatePayload

  object DastSiteProfileCreatePayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[DastSiteProfileCreatePayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[DastSiteProfileCreatePayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** ID of the site profile.
      */
    def id: SelectionBuilder[DastSiteProfileCreatePayload, Option[DastSiteProfileID]] =
      _root_.caliban.client.SelectionBuilder.Field("id", OptionOf(Scalar()))
  }

  type DastSiteProfileDeletePayload

  object DastSiteProfileDeletePayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[DastSiteProfileDeletePayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[DastSiteProfileDeletePayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))
  }

  type DastSiteProfileEdge

  object DastSiteProfileEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[DastSiteProfileEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](innerSelection: SelectionBuilder[DastSiteProfile, A]): SelectionBuilder[DastSiteProfileEdge, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
  }

  type DastSiteProfilePermissions

  object DastSiteProfilePermissions {

    /** Indicates the user can perform `create_on_demand_dast_scan` on this resource
      */
    def createOnDemandDastScan: SelectionBuilder[DastSiteProfilePermissions, Boolean] =
      _root_.caliban.client.SelectionBuilder.Field("createOnDemandDastScan", Scalar())
  }

  type DastSiteProfileUpdatePayload

  object DastSiteProfileUpdatePayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[DastSiteProfileUpdatePayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[DastSiteProfileUpdatePayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** ID of the site profile.
      */
    def id: SelectionBuilder[DastSiteProfileUpdatePayload, Option[DastSiteProfileID]] =
      _root_.caliban.client.SelectionBuilder.Field("id", OptionOf(Scalar()))
  }

  type DastSiteTokenCreatePayload

  object DastSiteTokenCreatePayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[DastSiteTokenCreatePayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[DastSiteTokenCreatePayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** ID of the site token.
      */
    def id: SelectionBuilder[DastSiteTokenCreatePayload, Option[DastSiteTokenID]] =
      _root_.caliban.client.SelectionBuilder.Field("id", OptionOf(Scalar()))

    /** The current validation status of the target.
      */
    def status: SelectionBuilder[DastSiteTokenCreatePayload, Option[DastSiteProfileValidationStatusEnum]] =
      _root_.caliban.client.SelectionBuilder.Field("status", OptionOf(Scalar()))

    /** Token string.
      */
    def token: SelectionBuilder[DastSiteTokenCreatePayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("token", OptionOf(Scalar()))
  }

  type DastSiteValidation

  object DastSiteValidation {

    /** Global ID of the site validation.
      */
    def id: SelectionBuilder[DastSiteValidation, DastSiteValidationID] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())

    /** Normalized URL of the target to be validated.
      */
    def normalizedTargetUrl: SelectionBuilder[DastSiteValidation, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("normalizedTargetUrl", OptionOf(Scalar()))

    /** Status of the site validation.
      */
    def status: SelectionBuilder[DastSiteValidation, DastSiteProfileValidationStatusEnum] =
      _root_.caliban.client.SelectionBuilder.Field("status", Scalar())
  }

  type DastSiteValidationConnection

  object DastSiteValidationConnection {

    /** A list of edges.
      */
    def edges[A](
      innerSelection: SelectionBuilder[DastSiteValidationEdge, A]
    ): SelectionBuilder[DastSiteValidationConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](
      innerSelection: SelectionBuilder[DastSiteValidation, A]
    ): SelectionBuilder[DastSiteValidationConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[DastSiteValidationConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  }

  type DastSiteValidationCreatePayload

  object DastSiteValidationCreatePayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[DastSiteValidationCreatePayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[DastSiteValidationCreatePayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** ID of the site validation.
      */
    def id: SelectionBuilder[DastSiteValidationCreatePayload, Option[DastSiteValidationID]] =
      _root_.caliban.client.SelectionBuilder.Field("id", OptionOf(Scalar()))

    /** The current validation status.
      */
    def status: SelectionBuilder[DastSiteValidationCreatePayload, Option[DastSiteProfileValidationStatusEnum]] =
      _root_.caliban.client.SelectionBuilder.Field("status", OptionOf(Scalar()))
  }

  type DastSiteValidationEdge

  object DastSiteValidationEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[DastSiteValidationEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](innerSelection: SelectionBuilder[DastSiteValidation, A]): SelectionBuilder[DastSiteValidationEdge, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
  }

  type DastSiteValidationRevokePayload

  object DastSiteValidationRevokePayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[DastSiteValidationRevokePayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[DastSiteValidationRevokePayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))
  }

  type DeleteAnnotationPayload

  object DeleteAnnotationPayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[DeleteAnnotationPayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[DeleteAnnotationPayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))
  }

  type DeleteJobsResponse

  object DeleteJobsResponse {

    /** Whether or not the entire queue was processed in time; if not, retrying the same request is safe.
      */
    def completed: SelectionBuilder[DeleteJobsResponse, Option[Boolean]] =
      _root_.caliban.client.SelectionBuilder.Field("completed", OptionOf(Scalar()))

    /** The number of matching jobs deleted.
      */
    def deletedJobs: SelectionBuilder[DeleteJobsResponse, Option[Int]] =
      _root_.caliban.client.SelectionBuilder.Field("deletedJobs", OptionOf(Scalar()))

    /** The queue size after processing.
      */
    def queueSize: SelectionBuilder[DeleteJobsResponse, Option[Int]] =
      _root_.caliban.client.SelectionBuilder.Field("queueSize", OptionOf(Scalar()))
  }

  type Design

  object Design {

    /** To-do items for the current user.
      */
    def currentUserTodos[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None,
      state: Option[TodoStateEnum] = None
    )(
      innerSelection: SelectionBuilder[TodoConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]],
      encoder4: ArgEncoder[Option[TodoStateEnum]]
    ): SelectionBuilder[Design, A] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "currentUserTodos",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3),
          Argument("state", state, "TodoStateEnum")(encoder4)
        )
      )

    /** The diff refs for this design.
      */
    def diffRefs[A](innerSelection: SelectionBuilder[DiffRefs, A]): SelectionBuilder[Design, A] =
      _root_.caliban.client.SelectionBuilder.Field("diffRefs", Obj(innerSelection))

    /** All discussions on this noteable.
      */
    def discussions[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[DiscussionConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[Design, A] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "discussions",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** How this design was changed in the current version.
      */
    def event: SelectionBuilder[Design, DesignVersionEvent] = _root_.caliban.client.SelectionBuilder.Field("event", Scalar())

    /** The filename of the design.
      */
    def filename: SelectionBuilder[Design, String] = _root_.caliban.client.SelectionBuilder.Field("filename", Scalar())

    /** The full path to the design file.
      */
    def fullPath: SelectionBuilder[Design, String] = _root_.caliban.client.SelectionBuilder.Field("fullPath", Scalar())

    /** The ID of this design.
      */
    def id: SelectionBuilder[Design, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())

    /** The URL of the full-sized image.
      */
    def image: SelectionBuilder[Design, String] = _root_.caliban.client.SelectionBuilder.Field("image", Scalar())

    /** The URL of the design resized to fit within the bounds of 432x230. This will be `null` if the image has not been generated
      */
    def imageV432x230: SelectionBuilder[Design, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("imageV432x230", OptionOf(Scalar()))

    /** The issue the design belongs to.
      */
    def issue[A](innerSelection: SelectionBuilder[Issue, A]): SelectionBuilder[Design, A] =
      _root_.caliban.client.SelectionBuilder.Field("issue", Obj(innerSelection))

    /** All notes on this noteable.
      */
    def notes[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[NoteConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[Design, A] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "notes",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** The total count of user-created notes for this design.
      */
    def notesCount: SelectionBuilder[Design, Int] = _root_.caliban.client.SelectionBuilder.Field("notesCount", Scalar())

    /** The project the design belongs to.
      */
    def project[A](innerSelection: SelectionBuilder[Project, A]): SelectionBuilder[Design, A] =
      _root_.caliban.client.SelectionBuilder.Field("project", Obj(innerSelection))

    /** All versions related to this design ordered newest first.
      */
    def versions[A](
      earlierOrEqualToSha: Option[String] = None,
      earlierOrEqualToId: Option[DesignManagementVersionID] = None,
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[DesignVersionConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[DesignManagementVersionID]],
      encoder2: ArgEncoder[Option[String]],
      encoder3: ArgEncoder[Option[String]],
      encoder4: ArgEncoder[Option[Int]],
      encoder5: ArgEncoder[Option[Int]]
    ): SelectionBuilder[Design, A] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "versions",
        Obj(innerSelection),
        arguments = List(
          Argument("earlierOrEqualToSha", earlierOrEqualToSha, "String")(encoder0),
          Argument("earlierOrEqualToId", earlierOrEqualToId, "DesignManagementVersionID")(encoder1),
          Argument("after", after, "String")(encoder2),
          Argument("before", before, "String")(encoder3),
          Argument("first", first, "Int")(encoder4),
          Argument("last", last, "Int")(encoder5)
        )
      )

  }

  type DesignAtVersion

  object DesignAtVersion {

    /** The underlying design.
      */
    def design[A](innerSelection: SelectionBuilder[Design, A]): SelectionBuilder[DesignAtVersion, A] =
      _root_.caliban.client.SelectionBuilder.Field("design", Obj(innerSelection))

    /** The diff refs for this design.
      */
    def diffRefs[A](innerSelection: SelectionBuilder[DiffRefs, A]): SelectionBuilder[DesignAtVersion, A] =
      _root_.caliban.client.SelectionBuilder.Field("diffRefs", Obj(innerSelection))

    /** How this design was changed in the current version.
      */
    def event: SelectionBuilder[DesignAtVersion, DesignVersionEvent] = _root_.caliban.client.SelectionBuilder.Field("event", Scalar())

    /** The filename of the design.
      */
    def filename: SelectionBuilder[DesignAtVersion, String] = _root_.caliban.client.SelectionBuilder.Field("filename", Scalar())

    /** The full path to the design file.
      */
    def fullPath: SelectionBuilder[DesignAtVersion, String] = _root_.caliban.client.SelectionBuilder.Field("fullPath", Scalar())

    /** The ID of this design.
      */
    def id: SelectionBuilder[DesignAtVersion, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())

    /** The URL of the full-sized image.
      */
    def image: SelectionBuilder[DesignAtVersion, String] = _root_.caliban.client.SelectionBuilder.Field("image", Scalar())

    /** The URL of the design resized to fit within the bounds of 432x230. This will be `null` if the image has not been generated
      */
    def imageV432x230: SelectionBuilder[DesignAtVersion, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("imageV432x230", OptionOf(Scalar()))

    /** The issue the design belongs to.
      */
    def issue[A](innerSelection: SelectionBuilder[Issue, A]): SelectionBuilder[DesignAtVersion, A] =
      _root_.caliban.client.SelectionBuilder.Field("issue", Obj(innerSelection))

    /** The total count of user-created notes for this design.
      */
    def notesCount: SelectionBuilder[DesignAtVersion, Int] = _root_.caliban.client.SelectionBuilder.Field("notesCount", Scalar())

    /** The project the design belongs to.
      */
    def project[A](innerSelection: SelectionBuilder[Project, A]): SelectionBuilder[DesignAtVersion, A] =
      _root_.caliban.client.SelectionBuilder.Field("project", Obj(innerSelection))

    /** The version this design-at-versions is pinned to.
      */
    def version[A](innerSelection: SelectionBuilder[DesignVersion, A]): SelectionBuilder[DesignAtVersion, A] =
      _root_.caliban.client.SelectionBuilder.Field("version", Obj(innerSelection))
  }

  type DesignAtVersionConnection

  object DesignAtVersionConnection {

    /** A list of edges.
      */
    def edges[A](
      innerSelection: SelectionBuilder[DesignAtVersionEdge, A]
    ): SelectionBuilder[DesignAtVersionConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](
      innerSelection: SelectionBuilder[DesignAtVersion, A]
    ): SelectionBuilder[DesignAtVersionConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[DesignAtVersionConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  }

  type DesignAtVersionEdge

  object DesignAtVersionEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[DesignAtVersionEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](innerSelection: SelectionBuilder[DesignAtVersion, A]): SelectionBuilder[DesignAtVersionEdge, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
  }

  type DesignCollection

  object DesignCollection {

    /** Copy state of the design collection.
      */
    def copyState: SelectionBuilder[DesignCollection, Option[DesignCollectionCopyState]] =
      _root_.caliban.client.SelectionBuilder.Field("copyState", OptionOf(Scalar()))

    /** Find a specific design.
      */
    def design[A](
      id: Option[DesignManagementDesignID] = None,
      filename: Option[String] = None
    )(
      innerSelection: SelectionBuilder[Design, A]
    )(
      implicit encoder0: ArgEncoder[Option[DesignManagementDesignID]],
      encoder1: ArgEncoder[Option[String]]
    ): SelectionBuilder[DesignCollection, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "design",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("id", id, "DesignManagementDesignID")(encoder0), Argument("filename", filename, "String")(encoder1))
      )

    /** Find a design as of a version.
      */
    def designAtVersion[A](
      id: DesignManagementDesignAtVersionID
    )(
      innerSelection: SelectionBuilder[DesignAtVersion, A]
    )(
      implicit encoder0: ArgEncoder[DesignManagementDesignAtVersionID]
    ): SelectionBuilder[DesignCollection, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "designAtVersion",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("id", id, "DesignManagementDesignAtVersionID!")(encoder0))
      )

    /** All designs for the design collection.
      */
    def designs[A](
      ids: Option[List[DesignManagementDesignID]] = None,
      filenames: Option[List[String]] = None,
      atVersion: Option[DesignManagementVersionID] = None,
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[DesignConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[List[DesignManagementDesignID]]],
      encoder1: ArgEncoder[Option[List[String]]],
      encoder2: ArgEncoder[Option[DesignManagementVersionID]],
      encoder3: ArgEncoder[Option[String]],
      encoder4: ArgEncoder[Option[String]],
      encoder5: ArgEncoder[Option[Int]],
      encoder6: ArgEncoder[Option[Int]]
    ): SelectionBuilder[DesignCollection, A] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "designs",
        Obj(innerSelection),
        arguments = List(
          Argument("ids", ids, "[DesignManagementDesignID!]")(encoder0),
          Argument("filenames", filenames, "[String!]")(encoder1),
          Argument("atVersion", atVersion, "DesignManagementVersionID")(encoder2),
          Argument("after", after, "String")(encoder3),
          Argument("before", before, "String")(encoder4),
          Argument("first", first, "Int")(encoder5),
          Argument("last", last, "Int")(encoder6)
        )
      )

    /** Issue associated with the design collection.
      */
    def issue[A](innerSelection: SelectionBuilder[Issue, A]): SelectionBuilder[DesignCollection, A] =
      _root_.caliban.client.SelectionBuilder.Field("issue", Obj(innerSelection))

    /** Project associated with the design collection.
      */
    def project[A](innerSelection: SelectionBuilder[Project, A]): SelectionBuilder[DesignCollection, A] =
      _root_.caliban.client.SelectionBuilder.Field("project", Obj(innerSelection))

    /** A specific version.
      */
    def version[A](
      sha: Option[String] = None,
      id: Option[DesignManagementVersionID] = None
    )(
      innerSelection: SelectionBuilder[DesignVersion, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[DesignManagementVersionID]]
    ): SelectionBuilder[DesignCollection, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "version",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("sha", sha, "String")(encoder0), Argument("id", id, "DesignManagementVersionID")(encoder1))
      )

    /** All versions related to all designs, ordered newest first.
      */
    def versions[A](
      earlierOrEqualToSha: Option[String] = None,
      earlierOrEqualToId: Option[DesignManagementVersionID] = None,
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[DesignVersionConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[DesignManagementVersionID]],
      encoder2: ArgEncoder[Option[String]],
      encoder3: ArgEncoder[Option[String]],
      encoder4: ArgEncoder[Option[Int]],
      encoder5: ArgEncoder[Option[Int]]
    ): SelectionBuilder[DesignCollection, A] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "versions",
        Obj(innerSelection),
        arguments = List(
          Argument("earlierOrEqualToSha", earlierOrEqualToSha, "String")(encoder0),
          Argument("earlierOrEqualToId", earlierOrEqualToId, "DesignManagementVersionID")(encoder1),
          Argument("after", after, "String")(encoder2),
          Argument("before", before, "String")(encoder3),
          Argument("first", first, "Int")(encoder4),
          Argument("last", last, "Int")(encoder5)
        )
      )

  }

  type DesignConnection

  object DesignConnection {

    /** A list of edges.
      */
    def edges[A](innerSelection: SelectionBuilder[DesignEdge, A]): SelectionBuilder[DesignConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](innerSelection: SelectionBuilder[Design, A]): SelectionBuilder[DesignConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[DesignConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  }

  type DesignEdge

  object DesignEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[DesignEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](innerSelection: SelectionBuilder[Design, A]): SelectionBuilder[DesignEdge, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
  }

  type DesignManagement

  object DesignManagement {

    /** Find a design as of a version.
      */
    def designAtVersion[A](
      id: DesignManagementDesignAtVersionID
    )(
      innerSelection: SelectionBuilder[DesignAtVersion, A]
    )(
      implicit encoder0: ArgEncoder[DesignManagementDesignAtVersionID]
    ): SelectionBuilder[DesignManagement, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "designAtVersion",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("id", id, "DesignManagementDesignAtVersionID!")(encoder0))
      )

    /** Find a version.
      */
    def version[A](
      id: DesignManagementVersionID
    )(
      innerSelection: SelectionBuilder[DesignVersion, A]
    )(
      implicit encoder0: ArgEncoder[DesignManagementVersionID]
    ): SelectionBuilder[DesignManagement, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field("version", OptionOf(Obj(innerSelection)), arguments = List(Argument("id", id, "DesignManagementVersionID!")(encoder0)))

  }

  type DesignManagementDeletePayload

  object DesignManagementDeletePayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[DesignManagementDeletePayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[DesignManagementDeletePayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** The new version in which the designs are deleted.
      */
    def version[A](innerSelection: SelectionBuilder[DesignVersion, A]): SelectionBuilder[DesignManagementDeletePayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("version", OptionOf(Obj(innerSelection)))
  }

  type DesignManagementMovePayload

  object DesignManagementMovePayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[DesignManagementMovePayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** The current state of the collection.
      */
    def designCollection[A](
      innerSelection: SelectionBuilder[DesignCollection, A]
    ): SelectionBuilder[DesignManagementMovePayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("designCollection", OptionOf(Obj(innerSelection)))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[DesignManagementMovePayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))
  }

  type DesignManagementUploadPayload

  object DesignManagementUploadPayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[DesignManagementUploadPayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** The designs that were uploaded by the mutation.
      */
    def designs[A](innerSelection: SelectionBuilder[Design, A]): SelectionBuilder[DesignManagementUploadPayload, List[A]] =
      _root_.caliban.client.SelectionBuilder.Field("designs", ListOf(Obj(innerSelection)))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[DesignManagementUploadPayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** Any designs that were skipped from the upload due to there being no change to their content since their last version
      */
    def skippedDesigns[A](innerSelection: SelectionBuilder[Design, A]): SelectionBuilder[DesignManagementUploadPayload, List[A]] =
      _root_.caliban.client.SelectionBuilder.Field("skippedDesigns", ListOf(Obj(innerSelection)))
  }

  type DesignVersion

  object DesignVersion {

    /** Author of the version.
      */
    def author[A](innerSelection: SelectionBuilder[UserCore, A]): SelectionBuilder[DesignVersion, A] =
      _root_.caliban.client.SelectionBuilder.Field("author", Obj(innerSelection))

    /** Timestamp of when the version was created.
      */
    def createdAt: SelectionBuilder[DesignVersion, Time] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())

    /** A particular design as of this version, provided it is visible at this version.
      */
    def designAtVersion[A](
      id: Option[DesignManagementDesignAtVersionID] = None,
      designId: Option[DesignManagementDesignID] = None,
      filename: Option[String] = None
    )(
      innerSelection: SelectionBuilder[DesignAtVersion, A]
    )(
      implicit encoder0: ArgEncoder[Option[DesignManagementDesignAtVersionID]],
      encoder1: ArgEncoder[Option[DesignManagementDesignID]],
      encoder2: ArgEncoder[Option[String]]
    ): SelectionBuilder[DesignVersion, A] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "designAtVersion",
        Obj(innerSelection),
        arguments = List(
          Argument("id", id, "DesignManagementDesignAtVersionID")(encoder0),
          Argument("designId", designId, "DesignManagementDesignID")(encoder1),
          Argument("filename", filename, "String")(encoder2)
        )
      )

    /** All designs that were changed in the version.
      */
    def designs[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[DesignConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[DesignVersion, A] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "designs",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** All designs that are visible at this version, as of this version.
      */
    def designsAtVersion[A](
      ids: Option[List[DesignManagementDesignID]] = None,
      filenames: Option[List[String]] = None,
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[DesignAtVersionConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[List[DesignManagementDesignID]]],
      encoder1: ArgEncoder[Option[List[String]]],
      encoder2: ArgEncoder[Option[String]],
      encoder3: ArgEncoder[Option[String]],
      encoder4: ArgEncoder[Option[Int]],
      encoder5: ArgEncoder[Option[Int]]
    ): SelectionBuilder[DesignVersion, A] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "designsAtVersion",
        Obj(innerSelection),
        arguments = List(
          Argument("ids", ids, "[DesignManagementDesignID!]")(encoder0),
          Argument("filenames", filenames, "[String!]")(encoder1),
          Argument("after", after, "String")(encoder2),
          Argument("before", before, "String")(encoder3),
          Argument("first", first, "Int")(encoder4),
          Argument("last", last, "Int")(encoder5)
        )
      )

    /** ID of the design version.
      */
    def id: SelectionBuilder[DesignVersion, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())

    /** SHA of the design version.
      */
    def sha: SelectionBuilder[DesignVersion, String] = _root_.caliban.client.SelectionBuilder.Field("sha", Scalar())
  }

  type DesignVersionConnection

  object DesignVersionConnection {

    /** A list of edges.
      */
    def edges[A](
      innerSelection: SelectionBuilder[DesignVersionEdge, A]
    ): SelectionBuilder[DesignVersionConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](innerSelection: SelectionBuilder[DesignVersion, A]): SelectionBuilder[DesignVersionConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[DesignVersionConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  }

  type DesignVersionEdge

  object DesignVersionEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[DesignVersionEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](innerSelection: SelectionBuilder[DesignVersion, A]): SelectionBuilder[DesignVersionEdge, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
  }

  type DestroyBoardListPayload

  object DestroyBoardListPayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[DestroyBoardListPayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[DestroyBoardListPayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** The list after mutation.
      */
    def list[A](innerSelection: SelectionBuilder[BoardList, A]): SelectionBuilder[DestroyBoardListPayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("list", OptionOf(Obj(innerSelection)))
  }

  type DestroyBoardPayload

  object DestroyBoardPayload {

    /** The board after mutation.
      */
    def board[A](innerSelection: SelectionBuilder[Board, A]): SelectionBuilder[DestroyBoardPayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("board", OptionOf(Obj(innerSelection)))

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[DestroyBoardPayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[DestroyBoardPayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))
  }

  type DestroyComplianceFrameworkPayload

  object DestroyComplianceFrameworkPayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[DestroyComplianceFrameworkPayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[DestroyComplianceFrameworkPayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))
  }

  type DestroyContainerRepositoryPayload

  object DestroyContainerRepositoryPayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[DestroyContainerRepositoryPayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** The container repository policy after scheduling the deletion.
      */
    def containerRepository[A](
      innerSelection: SelectionBuilder[ContainerRepository, A]
    ): SelectionBuilder[DestroyContainerRepositoryPayload, A] =
      _root_.caliban.client.SelectionBuilder.Field("containerRepository", Obj(innerSelection))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[DestroyContainerRepositoryPayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))
  }

  type DestroyContainerRepositoryTagsPayload

  object DestroyContainerRepositoryTagsPayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[DestroyContainerRepositoryTagsPayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Deleted container repository tags.
      */
    def deletedTagNames: SelectionBuilder[DestroyContainerRepositoryTagsPayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("deletedTagNames", ListOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[DestroyContainerRepositoryTagsPayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))
  }

  type DestroyEpicBoardPayload

  object DestroyEpicBoardPayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[DestroyEpicBoardPayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Epic board after mutation.
      */
    def epicBoard[A](innerSelection: SelectionBuilder[EpicBoard, A]): SelectionBuilder[DestroyEpicBoardPayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("epicBoard", OptionOf(Obj(innerSelection)))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[DestroyEpicBoardPayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))
  }

  type DestroyNotePayload

  object DestroyNotePayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[DestroyNotePayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[DestroyNotePayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** The note after mutation.
      */
    def note[A](innerSelection: SelectionBuilder[Note, A]): SelectionBuilder[DestroyNotePayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("note", OptionOf(Obj(innerSelection)))
  }

  type DestroyPackagePayload

  object DestroyPackagePayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[DestroyPackagePayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[DestroyPackagePayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))
  }

  type DestroySnippetPayload

  object DestroySnippetPayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[DestroySnippetPayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[DestroySnippetPayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** The snippet after mutation.
      */
    def snippet[A](innerSelection: SelectionBuilder[Snippet, A]): SelectionBuilder[DestroySnippetPayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("snippet", OptionOf(Obj(innerSelection)))
  }

  type DetailedStatus

  object DetailedStatus {

    /** Action information for the status. This includes method, button title, icon, path, and title.
      */
    def action[A](innerSelection: SelectionBuilder[StatusAction, A]): SelectionBuilder[DetailedStatus, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("action", OptionOf(Obj(innerSelection)))

    /** Path of the details for the status.
      */
    def detailsPath: SelectionBuilder[DetailedStatus, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("detailsPath", OptionOf(Scalar()))

    /** Favicon of the status.
      */
    def favicon: SelectionBuilder[DetailedStatus, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("favicon", OptionOf(Scalar()))

    /** Group of the status.
      */
    def group: SelectionBuilder[DetailedStatus, Option[String]] = _root_.caliban.client.SelectionBuilder.Field("group", OptionOf(Scalar()))

    /** Indicates if the status has further details.
      */
    def hasDetails: SelectionBuilder[DetailedStatus, Option[Boolean]] =
      _root_.caliban.client.SelectionBuilder.Field("hasDetails", OptionOf(Scalar()))

    /** Icon of the status.
      */
    def icon: SelectionBuilder[DetailedStatus, Option[String]] = _root_.caliban.client.SelectionBuilder.Field("icon", OptionOf(Scalar()))

    /** Label of the status.
      */
    def label: SelectionBuilder[DetailedStatus, Option[String]] = _root_.caliban.client.SelectionBuilder.Field("label", OptionOf(Scalar()))

    /** Text of the status.
      */
    def text: SelectionBuilder[DetailedStatus, Option[String]] = _root_.caliban.client.SelectionBuilder.Field("text", OptionOf(Scalar()))

    /** Tooltip associated with the status.
      */
    def tooltip: SelectionBuilder[DetailedStatus, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("tooltip", OptionOf(Scalar()))
  }

  type DevopsAdoptionEnabledNamespace

  object DevopsAdoptionEnabledNamespace {

    /** Namespace where data should be displayed.
      */
    def displayNamespace[A](innerSelection: SelectionBuilder[Namespace, A]): SelectionBuilder[DevopsAdoptionEnabledNamespace, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("displayNamespace", OptionOf(Obj(innerSelection)))

    /** ID of the enabled namespace.
      */
    def id: SelectionBuilder[DevopsAdoptionEnabledNamespace, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())

    /** Metrics snapshot for previous month for the enabled namespace.
      */
    def latestSnapshot[A](
      innerSelection: SelectionBuilder[DevopsAdoptionSnapshot, A]
    ): SelectionBuilder[DevopsAdoptionEnabledNamespace, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("latestSnapshot", OptionOf(Obj(innerSelection)))

    /** Namespace which should be calculated.
      */
    def namespace[A](innerSelection: SelectionBuilder[Namespace, A]): SelectionBuilder[DevopsAdoptionEnabledNamespace, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("namespace", OptionOf(Obj(innerSelection)))

    /** Data snapshots of the namespace.
      */
    def snapshots[A](
      endTimeBefore: Option[Time] = None,
      endTimeAfter: Option[Time] = None,
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[DevopsAdoptionSnapshotConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[Time]],
      encoder1: ArgEncoder[Option[Time]],
      encoder2: ArgEncoder[Option[String]],
      encoder3: ArgEncoder[Option[String]],
      encoder4: ArgEncoder[Option[Int]],
      encoder5: ArgEncoder[Option[Int]]
    ): SelectionBuilder[DevopsAdoptionEnabledNamespace, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "snapshots",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("endTimeBefore", endTimeBefore, "Time")(encoder0),
          Argument("endTimeAfter", endTimeAfter, "Time")(encoder1),
          Argument("after", after, "String")(encoder2),
          Argument("before", before, "String")(encoder3),
          Argument("first", first, "Int")(encoder4),
          Argument("last", last, "Int")(encoder5)
        )
      )

  }

  type DevopsAdoptionEnabledNamespaceConnection

  object DevopsAdoptionEnabledNamespaceConnection {

    /** A list of edges.
      */
    def edges[A](
      innerSelection: SelectionBuilder[DevopsAdoptionEnabledNamespaceEdge, A]
    ): SelectionBuilder[DevopsAdoptionEnabledNamespaceConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](
      innerSelection: SelectionBuilder[DevopsAdoptionEnabledNamespace, A]
    ): SelectionBuilder[DevopsAdoptionEnabledNamespaceConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[DevopsAdoptionEnabledNamespaceConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  }

  type DevopsAdoptionEnabledNamespaceEdge

  object DevopsAdoptionEnabledNamespaceEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[DevopsAdoptionEnabledNamespaceEdge, String] =
      _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](
      innerSelection: SelectionBuilder[DevopsAdoptionEnabledNamespace, A]
    ): SelectionBuilder[DevopsAdoptionEnabledNamespaceEdge, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))

  }

  type DevopsAdoptionSnapshot

  object DevopsAdoptionSnapshot {

    /** Total number of projects with existing CODEOWNERS file.
      */
    def codeOwnersUsedCount: SelectionBuilder[DevopsAdoptionSnapshot, Option[Int]] =
      _root_.caliban.client.SelectionBuilder.Field("codeOwnersUsedCount", OptionOf(Scalar()))

    /** Total number of projects with enabled coverage fuzzing.
      */
    def coverageFuzzingEnabledCount: SelectionBuilder[DevopsAdoptionSnapshot, Option[Int]] =
      _root_.caliban.client.SelectionBuilder.Field("coverageFuzzingEnabledCount", OptionOf(Scalar()))

    /** Total number of projects with enabled DAST.
      */
    def dastEnabledCount: SelectionBuilder[DevopsAdoptionSnapshot, Option[Int]] =
      _root_.caliban.client.SelectionBuilder.Field("dastEnabledCount", OptionOf(Scalar()))

    /** Total number of projects with enabled dependency scanning.
      */
    def dependencyScanningEnabledCount: SelectionBuilder[DevopsAdoptionSnapshot, Option[Int]] =
      _root_.caliban.client.SelectionBuilder.Field("dependencyScanningEnabledCount", OptionOf(Scalar()))

    /** At least one deployment succeeded.
      */
    def deploySucceeded: SelectionBuilder[DevopsAdoptionSnapshot, Boolean] =
      _root_.caliban.client.SelectionBuilder.Field("deploySucceeded", Scalar())

    /** The end time for the snapshot where the data points were collected.
      */
    def endTime: SelectionBuilder[DevopsAdoptionSnapshot, Time] = _root_.caliban.client.SelectionBuilder.Field("endTime", Scalar())

    /** At least one issue was opened.
      */
    def issueOpened: SelectionBuilder[DevopsAdoptionSnapshot, Boolean] =
      _root_.caliban.client.SelectionBuilder.Field("issueOpened", Scalar())

    /** At least one merge request was approved.
      */
    def mergeRequestApproved: SelectionBuilder[DevopsAdoptionSnapshot, Boolean] =
      _root_.caliban.client.SelectionBuilder.Field("mergeRequestApproved", Scalar())

    /** At least one merge request was opened.
      */
    def mergeRequestOpened: SelectionBuilder[DevopsAdoptionSnapshot, Boolean] =
      _root_.caliban.client.SelectionBuilder.Field("mergeRequestOpened", Scalar())

    /** At least one pipeline succeeded.
      */
    def pipelineSucceeded: SelectionBuilder[DevopsAdoptionSnapshot, Boolean] =
      _root_.caliban.client.SelectionBuilder.Field("pipelineSucceeded", Scalar())

    /** The time the snapshot was recorded.
      */
    def recordedAt: SelectionBuilder[DevopsAdoptionSnapshot, Time] = _root_.caliban.client.SelectionBuilder.Field("recordedAt", Scalar())

    /** At least one runner was used.
      */
    def runnerConfigured: SelectionBuilder[DevopsAdoptionSnapshot, Boolean] =
      _root_.caliban.client.SelectionBuilder.Field("runnerConfigured", Scalar())

    /** Total number of projects with enabled SAST.
      */
    def sastEnabledCount: SelectionBuilder[DevopsAdoptionSnapshot, Option[Int]] =
      _root_.caliban.client.SelectionBuilder.Field("sastEnabledCount", OptionOf(Scalar()))

    /** At least one security scan succeeded.
      */
    def securityScanSucceeded: SelectionBuilder[DevopsAdoptionSnapshot, Boolean] =
      _root_.caliban.client.SelectionBuilder.Field("securityScanSucceeded", Scalar())

    /** The start time for the snapshot where the data points were collected.
      */
    def startTime: SelectionBuilder[DevopsAdoptionSnapshot, Time] = _root_.caliban.client.SelectionBuilder.Field("startTime", Scalar())

    /** Total number of projects.
      */
    def totalProjectsCount: SelectionBuilder[DevopsAdoptionSnapshot, Option[Int]] =
      _root_.caliban.client.SelectionBuilder.Field("totalProjectsCount", OptionOf(Scalar()))
  }

  type DevopsAdoptionSnapshotConnection

  object DevopsAdoptionSnapshotConnection {

    /** A list of edges.
      */
    def edges[A](
      innerSelection: SelectionBuilder[DevopsAdoptionSnapshotEdge, A]
    ): SelectionBuilder[DevopsAdoptionSnapshotConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](
      innerSelection: SelectionBuilder[DevopsAdoptionSnapshot, A]
    ): SelectionBuilder[DevopsAdoptionSnapshotConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[DevopsAdoptionSnapshotConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  }

  type DevopsAdoptionSnapshotEdge

  object DevopsAdoptionSnapshotEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[DevopsAdoptionSnapshotEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](innerSelection: SelectionBuilder[DevopsAdoptionSnapshot, A]): SelectionBuilder[DevopsAdoptionSnapshotEdge, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
  }

  type DiffPosition

  object DiffPosition {

    /** Information about the branch, HEAD, and base at the time of commenting.
      */
    def diffRefs[A](innerSelection: SelectionBuilder[DiffRefs, A]): SelectionBuilder[DiffPosition, A] =
      _root_.caliban.client.SelectionBuilder.Field("diffRefs", Obj(innerSelection))

    /** Path of the file that was changed.
      */
    def filePath: SelectionBuilder[DiffPosition, String] = _root_.caliban.client.SelectionBuilder.Field("filePath", Scalar())

    /** Total height of the image.
      */
    def height: SelectionBuilder[DiffPosition, Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("height", OptionOf(Scalar()))

    /** Line on HEAD SHA that was changed.
      */
    def newLine: SelectionBuilder[DiffPosition, Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("newLine", OptionOf(Scalar()))

    /** Path of the file on the HEAD SHA.
      */
    def newPath: SelectionBuilder[DiffPosition, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("newPath", OptionOf(Scalar()))

    /** Line on start SHA that was changed.
      */
    def oldLine: SelectionBuilder[DiffPosition, Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("oldLine", OptionOf(Scalar()))

    /** Path of the file on the start SHA.
      */
    def oldPath: SelectionBuilder[DiffPosition, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("oldPath", OptionOf(Scalar()))

    /** Type of file the position refers to.
      */
    def positionType: SelectionBuilder[DiffPosition, DiffPositionType] =
      _root_.caliban.client.SelectionBuilder.Field("positionType", Scalar())

    /** Total width of the image.
      */
    def width: SelectionBuilder[DiffPosition, Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("width", OptionOf(Scalar()))

    /** X position of the note.
      */
    def x: SelectionBuilder[DiffPosition, Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("x", OptionOf(Scalar()))

    /** Y position of the note.
      */
    def y: SelectionBuilder[DiffPosition, Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("y", OptionOf(Scalar()))
  }

  type DiffRefs

  object DiffRefs {

    /** Merge base of the branch the comment was made on.
      */
    def baseSha: SelectionBuilder[DiffRefs, Option[String]] = _root_.caliban.client.SelectionBuilder.Field("baseSha", OptionOf(Scalar()))

    /** SHA of the HEAD at the time the comment was made.
      */
    def headSha: SelectionBuilder[DiffRefs, String] = _root_.caliban.client.SelectionBuilder.Field("headSha", Scalar())

    /** SHA of the branch being compared against.
      */
    def startSha: SelectionBuilder[DiffRefs, String] = _root_.caliban.client.SelectionBuilder.Field("startSha", Scalar())
  }

  type DiffStats

  object DiffStats {

    /** Number of lines added to this file.
      */
    def additions: SelectionBuilder[DiffStats, Int] = _root_.caliban.client.SelectionBuilder.Field("additions", Scalar())

    /** Number of lines deleted from this file.
      */
    def deletions: SelectionBuilder[DiffStats, Int] = _root_.caliban.client.SelectionBuilder.Field("deletions", Scalar())

    /** File path, relative to repository root.
      */
    def path: SelectionBuilder[DiffStats, String] = _root_.caliban.client.SelectionBuilder.Field("path", Scalar())
  }

  type DiffStatsSummary

  object DiffStatsSummary {

    /** Number of lines added.
      */
    def additions: SelectionBuilder[DiffStatsSummary, Int] = _root_.caliban.client.SelectionBuilder.Field("additions", Scalar())

    /** Number of lines changed.
      */
    def changes: SelectionBuilder[DiffStatsSummary, Int] = _root_.caliban.client.SelectionBuilder.Field("changes", Scalar())

    /** Number of lines deleted.
      */
    def deletions: SelectionBuilder[DiffStatsSummary, Int] = _root_.caliban.client.SelectionBuilder.Field("deletions", Scalar())

    /** Number of files changed.
      */
    def fileCount: SelectionBuilder[DiffStatsSummary, Int] = _root_.caliban.client.SelectionBuilder.Field("fileCount", Scalar())
  }

  type DisableDevopsAdoptionNamespacePayload

  object DisableDevopsAdoptionNamespacePayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[DisableDevopsAdoptionNamespacePayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[DisableDevopsAdoptionNamespacePayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))
  }

  type Discussion

  object Discussion {

    /** Timestamp of the discussion's creation.
      */
    def createdAt: SelectionBuilder[Discussion, Time] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())

    /** ID of this discussion.
      */
    def id: SelectionBuilder[Discussion, DiscussionID] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())

    /** Object which the discussion belongs to.
      */
    def noteable[A](
      onDesign: SelectionBuilder[Design, A],
      onIssue: SelectionBuilder[Issue, A],
      onMergeRequest: SelectionBuilder[MergeRequest, A]
    ): SelectionBuilder[Discussion, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field("noteable", OptionOf(ChoiceOf(Map("Design" -> Obj(onDesign), "Issue" -> Obj(onIssue), "MergeRequest" -> Obj(onMergeRequest)))))

    /** All notes in the discussion.
      */
    def notes[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[NoteConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[Discussion, A] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "notes",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** ID used to reply to this discussion.
      */
    def replyId: SelectionBuilder[Discussion, DiscussionID] = _root_.caliban.client.SelectionBuilder.Field("replyId", Scalar())

    /** Indicates if the object can be resolved.
      */
    def resolvable: SelectionBuilder[Discussion, Boolean] = _root_.caliban.client.SelectionBuilder.Field("resolvable", Scalar())

    /** Indicates if the object is resolved.
      */
    def resolved: SelectionBuilder[Discussion, Boolean] = _root_.caliban.client.SelectionBuilder.Field("resolved", Scalar())

    /** Timestamp of when the object was resolved.
      */
    def resolvedAt: SelectionBuilder[Discussion, Option[Time]] =
      _root_.caliban.client.SelectionBuilder.Field("resolvedAt", OptionOf(Scalar()))

    /** User who resolved the object.
      */
    def resolvedBy[A](innerSelection: SelectionBuilder[UserCore, A]): SelectionBuilder[Discussion, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("resolvedBy", OptionOf(Obj(innerSelection)))
  }

  type DiscussionConnection

  object DiscussionConnection {

    /** A list of edges.
      */
    def edges[A](innerSelection: SelectionBuilder[DiscussionEdge, A]): SelectionBuilder[DiscussionConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](innerSelection: SelectionBuilder[Discussion, A]): SelectionBuilder[DiscussionConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[DiscussionConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  }

  type DiscussionEdge

  object DiscussionEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[DiscussionEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](innerSelection: SelectionBuilder[Discussion, A]): SelectionBuilder[DiscussionEdge, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
  }

  type DiscussionToggleResolvePayload

  object DiscussionToggleResolvePayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[DiscussionToggleResolvePayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** The discussion after mutation.
      */
    def discussion[A](innerSelection: SelectionBuilder[Discussion, A]): SelectionBuilder[DiscussionToggleResolvePayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("discussion", OptionOf(Obj(innerSelection)))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[DiscussionToggleResolvePayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))
  }

  type Dora

  object Dora {

    /** DORA metrics for the current group or project.
      */
    def metrics[A](
      metric: DoraMetricType,
      startDate: Option[Date] = None,
      endDate: Option[Date] = None,
      interval: Option[DoraMetricBucketingInterval] = None,
      environmentTier: Option[DeploymentTier] = None
    )(
      innerSelection: SelectionBuilder[DoraMetric, A]
    )(
      implicit encoder0: ArgEncoder[DoraMetricType],
      encoder1: ArgEncoder[Option[Date]],
      encoder2: ArgEncoder[Option[Date]],
      encoder3: ArgEncoder[Option[DoraMetricBucketingInterval]],
      encoder4: ArgEncoder[Option[DeploymentTier]]
    ): SelectionBuilder[Dora, Option[List[A]]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "metrics",
        OptionOf(ListOf(Obj(innerSelection))),
        arguments = List(
          Argument("metric", metric, "DoraMetricType!")(encoder0),
          Argument("startDate", startDate, "Date")(encoder1),
          Argument("endDate", endDate, "Date")(encoder2),
          Argument("interval", interval, "DoraMetricBucketingInterval")(encoder3),
          Argument("environmentTier", environmentTier, "DeploymentTier")(encoder4)
        )
      )

  }

  type DoraMetric

  object DoraMetric {

    /** Date of the data point.
      */
    def date: SelectionBuilder[DoraMetric, Option[String]] = _root_.caliban.client.SelectionBuilder.Field("date", OptionOf(Scalar()))

    /** Value of the data point.
      */
    def value: SelectionBuilder[DoraMetric, Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("value", OptionOf(Scalar()))
  }

  type EchoCreatePayload

  object EchoCreatePayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[EchoCreatePayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Messages returned to the user.
      */
    def echoes: SelectionBuilder[EchoCreatePayload, Option[List[String]]] =
      _root_.caliban.client.SelectionBuilder.Field("echoes", OptionOf(ListOf(Scalar())))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[EchoCreatePayload, List[String]] = _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))
  }

  type EnableDevopsAdoptionNamespacePayload

  object EnableDevopsAdoptionNamespacePayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[EnableDevopsAdoptionNamespacePayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Enabled namespace after mutation.
      */
    def enabledNamespace[A](
      innerSelection: SelectionBuilder[DevopsAdoptionEnabledNamespace, A]
    ): SelectionBuilder[EnableDevopsAdoptionNamespacePayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("enabledNamespace", OptionOf(Obj(innerSelection)))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[EnableDevopsAdoptionNamespacePayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))
  }

  type Environment

  object Environment {

    /** ID of the environment.
      */
    def id: SelectionBuilder[Environment, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())

    /** The most severe open alert for the environment. If multiple alerts have equal severity, the most recent is returned.
      */
    def latestOpenedMostSevereAlert[A](
      innerSelection: SelectionBuilder[AlertManagementAlert, A]
    ): SelectionBuilder[Environment, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("latestOpenedMostSevereAlert", OptionOf(Obj(innerSelection)))

    /** Metrics dashboard schema for the environment.
      */
    def metricsDashboard[A](
      path: String
    )(
      innerSelection: SelectionBuilder[MetricsDashboard, A]
    )(
      implicit encoder0: ArgEncoder[String]
    ): SelectionBuilder[Environment, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field("metricsDashboard", OptionOf(Obj(innerSelection)), arguments = List(Argument("path", path, "String!")(encoder0)))

    /** Human-readable name of the environment.
      */
    def name: SelectionBuilder[Environment, String] = _root_.caliban.client.SelectionBuilder.Field("name", Scalar())

    /** The path to the environment.
      */
    def path: SelectionBuilder[Environment, String] = _root_.caliban.client.SelectionBuilder.Field("path", Scalar())

    /** State of the environment, for example: available/stopped.
      */
    def state: SelectionBuilder[Environment, String] = _root_.caliban.client.SelectionBuilder.Field("state", Scalar())
  }

  type EnvironmentConnection

  object EnvironmentConnection {

    /** A list of edges.
      */
    def edges[A](innerSelection: SelectionBuilder[EnvironmentEdge, A]): SelectionBuilder[EnvironmentConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](innerSelection: SelectionBuilder[Environment, A]): SelectionBuilder[EnvironmentConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[EnvironmentConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  }

  type EnvironmentEdge

  object EnvironmentEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[EnvironmentEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](innerSelection: SelectionBuilder[Environment, A]): SelectionBuilder[EnvironmentEdge, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
  }

  type EnvironmentsCanaryIngressUpdatePayload

  object EnvironmentsCanaryIngressUpdatePayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[EnvironmentsCanaryIngressUpdatePayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[EnvironmentsCanaryIngressUpdatePayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))
  }

  type Epic

  object Epic {

    /** Ancestors (parents) of the epic.
      */
    def ancestors[A](
      timeframe: Option[Timeframe] = None,
      iid: Option[String] = None,
      iids: Option[List[String]] = None,
      state: Option[EpicState] = None,
      search: Option[String] = None,
      in: Option[List[IssuableSearchableField]] = None,
      sort: Option[EpicSort] = None,
      authorUsername: Option[String] = None,
      labelName: Option[List[String]] = None,
      milestoneTitle: Option[String] = None,
      iidStartsWith: Option[String] = None,
      includeAncestorGroups: Option[Boolean] = None,
      includeDescendantGroups: Option[Boolean] = None,
      confidential: Option[Boolean] = None,
      myReactionEmoji: Option[String] = None,
      not: Option[NegatedEpicFilterInput] = None,
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[EpicConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[Timeframe]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[List[String]]],
      encoder3: ArgEncoder[Option[EpicState]],
      encoder4: ArgEncoder[Option[String]],
      encoder5: ArgEncoder[Option[List[IssuableSearchableField]]],
      encoder6: ArgEncoder[Option[EpicSort]],
      encoder7: ArgEncoder[Option[String]],
      encoder8: ArgEncoder[Option[List[String]]],
      encoder9: ArgEncoder[Option[String]],
      encoder10: ArgEncoder[Option[String]],
      encoder11: ArgEncoder[Option[Boolean]],
      encoder12: ArgEncoder[Option[Boolean]],
      encoder13: ArgEncoder[Option[Boolean]],
      encoder14: ArgEncoder[Option[String]],
      encoder15: ArgEncoder[Option[NegatedEpicFilterInput]],
      encoder16: ArgEncoder[Option[String]],
      encoder17: ArgEncoder[Option[String]],
      encoder18: ArgEncoder[Option[Int]],
      encoder19: ArgEncoder[Option[Int]]
    ): SelectionBuilder[Epic, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "ancestors",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("timeframe", timeframe, "Timeframe")(encoder0),
          Argument("iid", iid, "ID")(encoder1),
          Argument("iids", iids, "[ID!]")(encoder2),
          Argument("state", state, "EpicState")(encoder3),
          Argument("search", search, "String")(encoder4),
          Argument("in", in, "[IssuableSearchableField!]")(encoder5),
          Argument("sort", sort, "EpicSort")(encoder6),
          Argument("authorUsername", authorUsername, "String")(encoder7),
          Argument("labelName", labelName, "[String!]")(encoder8),
          Argument("milestoneTitle", milestoneTitle, "String")(encoder9),
          Argument("iidStartsWith", iidStartsWith, "String")(encoder10),
          Argument("includeAncestorGroups", includeAncestorGroups, "Boolean")(encoder11),
          Argument("includeDescendantGroups", includeDescendantGroups, "Boolean")(encoder12),
          Argument("confidential", confidential, "Boolean")(encoder13),
          Argument("myReactionEmoji", myReactionEmoji, "String")(encoder14),
          Argument("not", not, "NegatedEpicFilterInput")(encoder15),
          Argument("after", after, "String")(encoder16),
          Argument("before", before, "String")(encoder17),
          Argument("first", first, "Int")(encoder18),
          Argument("last", last, "Int")(encoder19)
        )
      )

    /** Author of the epic.
      */
    def author[A](innerSelection: SelectionBuilder[UserCore, A]): SelectionBuilder[Epic, A] =
      _root_.caliban.client.SelectionBuilder.Field("author", Obj(innerSelection))

    /** A list of award emojis associated with the epic.
      */
    def awardEmoji[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[AwardEmojiConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[Epic, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "awardEmoji",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** Children (sub-epics) of the epic.
      */
    def children[A](
      timeframe: Option[Timeframe] = None,
      iid: Option[String] = None,
      iids: Option[List[String]] = None,
      state: Option[EpicState] = None,
      search: Option[String] = None,
      in: Option[List[IssuableSearchableField]] = None,
      sort: Option[EpicSort] = None,
      authorUsername: Option[String] = None,
      labelName: Option[List[String]] = None,
      milestoneTitle: Option[String] = None,
      iidStartsWith: Option[String] = None,
      includeAncestorGroups: Option[Boolean] = None,
      includeDescendantGroups: Option[Boolean] = None,
      confidential: Option[Boolean] = None,
      myReactionEmoji: Option[String] = None,
      not: Option[NegatedEpicFilterInput] = None,
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[EpicConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[Timeframe]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[List[String]]],
      encoder3: ArgEncoder[Option[EpicState]],
      encoder4: ArgEncoder[Option[String]],
      encoder5: ArgEncoder[Option[List[IssuableSearchableField]]],
      encoder6: ArgEncoder[Option[EpicSort]],
      encoder7: ArgEncoder[Option[String]],
      encoder8: ArgEncoder[Option[List[String]]],
      encoder9: ArgEncoder[Option[String]],
      encoder10: ArgEncoder[Option[String]],
      encoder11: ArgEncoder[Option[Boolean]],
      encoder12: ArgEncoder[Option[Boolean]],
      encoder13: ArgEncoder[Option[Boolean]],
      encoder14: ArgEncoder[Option[String]],
      encoder15: ArgEncoder[Option[NegatedEpicFilterInput]],
      encoder16: ArgEncoder[Option[String]],
      encoder17: ArgEncoder[Option[String]],
      encoder18: ArgEncoder[Option[Int]],
      encoder19: ArgEncoder[Option[Int]]
    ): SelectionBuilder[Epic, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "children",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("timeframe", timeframe, "Timeframe")(encoder0),
          Argument("iid", iid, "ID")(encoder1),
          Argument("iids", iids, "[ID!]")(encoder2),
          Argument("state", state, "EpicState")(encoder3),
          Argument("search", search, "String")(encoder4),
          Argument("in", in, "[IssuableSearchableField!]")(encoder5),
          Argument("sort", sort, "EpicSort")(encoder6),
          Argument("authorUsername", authorUsername, "String")(encoder7),
          Argument("labelName", labelName, "[String!]")(encoder8),
          Argument("milestoneTitle", milestoneTitle, "String")(encoder9),
          Argument("iidStartsWith", iidStartsWith, "String")(encoder10),
          Argument("includeAncestorGroups", includeAncestorGroups, "Boolean")(encoder11),
          Argument("includeDescendantGroups", includeDescendantGroups, "Boolean")(encoder12),
          Argument("confidential", confidential, "Boolean")(encoder13),
          Argument("myReactionEmoji", myReactionEmoji, "String")(encoder14),
          Argument("not", not, "NegatedEpicFilterInput")(encoder15),
          Argument("after", after, "String")(encoder16),
          Argument("before", before, "String")(encoder17),
          Argument("first", first, "Int")(encoder18),
          Argument("last", last, "Int")(encoder19)
        )
      )

    /** Timestamp of when the epic was closed.
      */
    def closedAt: SelectionBuilder[Epic, Option[Time]] = _root_.caliban.client.SelectionBuilder.Field("closedAt", OptionOf(Scalar()))

    /** Indicates if the epic is confidential.
      */
    def confidential: SelectionBuilder[Epic, Option[Boolean]] =
      _root_.caliban.client.SelectionBuilder.Field("confidential", OptionOf(Scalar()))

    /** Timestamp of when the epic was created.
      */
    def createdAt: SelectionBuilder[Epic, Option[Time]] = _root_.caliban.client.SelectionBuilder.Field("createdAt", OptionOf(Scalar()))

    /** To-do items for the current user.
      */
    def currentUserTodos[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None,
      state: Option[TodoStateEnum] = None
    )(
      innerSelection: SelectionBuilder[TodoConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]],
      encoder4: ArgEncoder[Option[TodoStateEnum]]
    ): SelectionBuilder[Epic, A] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "currentUserTodos",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3),
          Argument("state", state, "TodoStateEnum")(encoder4)
        )
      )

    /** Number of open and closed descendant epics and issues.
      */
    def descendantCounts[A](innerSelection: SelectionBuilder[EpicDescendantCount, A]): SelectionBuilder[Epic, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("descendantCounts", OptionOf(Obj(innerSelection)))

    /** Total weight of open and closed issues in the epic and its descendants.
      */
    def descendantWeightSum[A](innerSelection: SelectionBuilder[EpicDescendantWeights, A]): SelectionBuilder[Epic, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("descendantWeightSum", OptionOf(Obj(innerSelection)))

    /** Description of the epic.
      */
    def description: SelectionBuilder[Epic, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("description", OptionOf(Scalar()))

    /** The GitLab Flavored Markdown rendering of `description`
      */
    def descriptionHtml: SelectionBuilder[Epic, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("descriptionHtml", OptionOf(Scalar()))

    /** All discussions on this noteable.
      */
    def discussions[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[DiscussionConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[Epic, A] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "discussions",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** Number of downvotes the epic has received.
      */
    def downvotes: SelectionBuilder[Epic, Int] = _root_.caliban.client.SelectionBuilder.Field("downvotes", Scalar())

    /** Due date of the epic.
      */
    def dueDate: SelectionBuilder[Epic, Option[Time]] = _root_.caliban.client.SelectionBuilder.Field("dueDate", OptionOf(Scalar()))

    /** Fixed due date of the epic.
      */
    def dueDateFixed: SelectionBuilder[Epic, Option[Time]] =
      _root_.caliban.client.SelectionBuilder.Field("dueDateFixed", OptionOf(Scalar()))

    /** Inherited due date of the epic from milestones.
      */
    def dueDateFromMilestones: SelectionBuilder[Epic, Option[Time]] =
      _root_.caliban.client.SelectionBuilder.Field("dueDateFromMilestones", OptionOf(Scalar()))

    /** Indicates if the due date has been manually set.
      */
    def dueDateIsFixed: SelectionBuilder[Epic, Option[Boolean]] =
      _root_.caliban.client.SelectionBuilder.Field("dueDateIsFixed", OptionOf(Scalar()))

    /** A list of events associated with the object.
      */
    def events[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[EventConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[Epic, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "events",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** Group to which the epic belongs.
      */
    def group[A](innerSelection: SelectionBuilder[Group, A]): SelectionBuilder[Epic, A] =
      _root_.caliban.client.SelectionBuilder.Field("group", Obj(innerSelection))

    /** Indicates if the epic has children.
      */
    def hasChildren: SelectionBuilder[Epic, Boolean] = _root_.caliban.client.SelectionBuilder.Field("hasChildren", Scalar())

    /** Indicates if the epic has direct issues.
      */
    def hasIssues: SelectionBuilder[Epic, Boolean] = _root_.caliban.client.SelectionBuilder.Field("hasIssues", Scalar())

    /** Indicates if the epic has a parent epic.
      */
    def hasParent: SelectionBuilder[Epic, Boolean] = _root_.caliban.client.SelectionBuilder.Field("hasParent", Scalar())

    /** Current health status of the epic.
      */
    def healthStatus[A](innerSelection: SelectionBuilder[EpicHealthStatus, A]): SelectionBuilder[Epic, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("healthStatus", OptionOf(Obj(innerSelection)))

    /** ID of the epic.
      */
    def id: SelectionBuilder[Epic, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())

    /** Internal ID of the epic.
      */
    def iid: SelectionBuilder[Epic, String] = _root_.caliban.client.SelectionBuilder.Field("iid", Scalar())

    /** A list of issues associated with the epic.
      */
    def issues[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[EpicIssueConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[Epic, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "issues",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** Labels assigned to the epic.
      */
    def labels[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[LabelConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[Epic, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "labels",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** All notes on this noteable.
      */
    def notes[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[NoteConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[Epic, A] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "notes",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** Parent epic of the epic.
      */
    def parent[A](innerSelection: SelectionBuilder[Epic, A]): SelectionBuilder[Epic, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("parent", OptionOf(Obj(innerSelection)))

    /** List of participants for the epic.
      */
    def participants[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[UserCoreConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[Epic, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "participants",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** Internal reference of the epic. Returned in shortened format by default.
      */
    def reference(full: Option[Boolean] = None)(implicit encoder0: ArgEncoder[Option[Boolean]]): SelectionBuilder[Epic, String] =
      _root_.caliban.client.SelectionBuilder.Field("reference", Scalar(), arguments = List(Argument("full", full, "Boolean")(encoder0)))

    /** URI path of the epic-issue relationship.
      */
    def relationPath: SelectionBuilder[Epic, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("relationPath", OptionOf(Scalar()))

    /** The relative position of the epic in the epic tree.
      */
    def relativePosition: SelectionBuilder[Epic, Option[Int]] =
      _root_.caliban.client.SelectionBuilder.Field("relativePosition", OptionOf(Scalar()))

    /** Start date of the epic.
      */
    def startDate: SelectionBuilder[Epic, Option[Time]] = _root_.caliban.client.SelectionBuilder.Field("startDate", OptionOf(Scalar()))

    /** Fixed start date of the epic.
      */
    def startDateFixed: SelectionBuilder[Epic, Option[Time]] =
      _root_.caliban.client.SelectionBuilder.Field("startDateFixed", OptionOf(Scalar()))

    /** Inherited start date of the epic from milestones.
      */
    def startDateFromMilestones: SelectionBuilder[Epic, Option[Time]] =
      _root_.caliban.client.SelectionBuilder.Field("startDateFromMilestones", OptionOf(Scalar()))

    /** Indicates if the start date has been manually set.
      */
    def startDateIsFixed: SelectionBuilder[Epic, Option[Boolean]] =
      _root_.caliban.client.SelectionBuilder.Field("startDateIsFixed", OptionOf(Scalar()))

    /** State of the epic.
      */
    def state: SelectionBuilder[Epic, EpicState] = _root_.caliban.client.SelectionBuilder.Field("state", Scalar())

    /** Indicates the currently logged in user is subscribed to the epic.
      */
    def subscribed: SelectionBuilder[Epic, Boolean] = _root_.caliban.client.SelectionBuilder.Field("subscribed", Scalar())

    /** Title of the epic.
      */
    def title: SelectionBuilder[Epic, Option[String]] = _root_.caliban.client.SelectionBuilder.Field("title", OptionOf(Scalar()))

    /** The GitLab Flavored Markdown rendering of `title`
      */
    def titleHtml: SelectionBuilder[Epic, Option[String]] = _root_.caliban.client.SelectionBuilder.Field("titleHtml", OptionOf(Scalar()))

    /** Timestamp of when the epic was updated.
      */
    def updatedAt: SelectionBuilder[Epic, Option[Time]] = _root_.caliban.client.SelectionBuilder.Field("updatedAt", OptionOf(Scalar()))

    /** Number of upvotes the epic has received.
      */
    def upvotes: SelectionBuilder[Epic, Int] = _root_.caliban.client.SelectionBuilder.Field("upvotes", Scalar())

    /** Number of user discussions in the epic.
      */
    def userDiscussionsCount: SelectionBuilder[Epic, Int] = _root_.caliban.client.SelectionBuilder.Field("userDiscussionsCount", Scalar())

    /** Number of user notes of the epic.
      */
    def userNotesCount: SelectionBuilder[Epic, Int] = _root_.caliban.client.SelectionBuilder.Field("userNotesCount", Scalar())

    /** Permissions for the current user on the resource
      */
    def userPermissions[A](innerSelection: SelectionBuilder[EpicPermissions, A]): SelectionBuilder[Epic, A] =
      _root_.caliban.client.SelectionBuilder.Field("userPermissions", Obj(innerSelection))

    /** Web path of the epic.
      */
    def webPath: SelectionBuilder[Epic, String] = _root_.caliban.client.SelectionBuilder.Field("webPath", Scalar())

    /** Web URL of the epic.
      */
    def webUrl: SelectionBuilder[Epic, String] = _root_.caliban.client.SelectionBuilder.Field("webUrl", Scalar())
  }

  type EpicAddIssuePayload

  object EpicAddIssuePayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[EpicAddIssuePayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** The epic after mutation.
      */
    def epic[A](innerSelection: SelectionBuilder[Epic, A]): SelectionBuilder[EpicAddIssuePayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("epic", OptionOf(Obj(innerSelection)))

    /** The epic-issue relation.
      */
    def epicIssue[A](innerSelection: SelectionBuilder[EpicIssue, A]): SelectionBuilder[EpicAddIssuePayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("epicIssue", OptionOf(Obj(innerSelection)))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[EpicAddIssuePayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))
  }

  type EpicBoard

  object EpicBoard {

    /** Whether or not backlog list is hidden.
      */
    def hideBacklogList: SelectionBuilder[EpicBoard, Option[Boolean]] =
      _root_.caliban.client.SelectionBuilder.Field("hideBacklogList", OptionOf(Scalar()))

    /** Whether or not closed list is hidden.
      */
    def hideClosedList: SelectionBuilder[EpicBoard, Option[Boolean]] =
      _root_.caliban.client.SelectionBuilder.Field("hideClosedList", OptionOf(Scalar()))

    /** Global ID of the epic board.
      */
    def id: SelectionBuilder[EpicBoard, BoardsEpicBoardID] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())

    /** Labels of the board.
      */
    def labels[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[LabelConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[EpicBoard, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "labels",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** Epic board lists.
      */
    def lists[A](
      id: Option[BoardsEpicListID] = None,
      epicFilters: Option[EpicFilters] = None,
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[EpicListConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[BoardsEpicListID]],
      encoder1: ArgEncoder[Option[EpicFilters]],
      encoder2: ArgEncoder[Option[String]],
      encoder3: ArgEncoder[Option[String]],
      encoder4: ArgEncoder[Option[Int]],
      encoder5: ArgEncoder[Option[Int]]
    ): SelectionBuilder[EpicBoard, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "lists",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("id", id, "BoardsEpicListID")(encoder0),
          Argument("epicFilters", epicFilters, "EpicFilters")(encoder1),
          Argument("after", after, "String")(encoder2),
          Argument("before", before, "String")(encoder3),
          Argument("first", first, "Int")(encoder4),
          Argument("last", last, "Int")(encoder5)
        )
      )

    /** Name of the epic board.
      */
    def name: SelectionBuilder[EpicBoard, Option[String]] = _root_.caliban.client.SelectionBuilder.Field("name", OptionOf(Scalar()))

    /** Web path of the epic board.
      */
    def webPath: SelectionBuilder[EpicBoard, String] = _root_.caliban.client.SelectionBuilder.Field("webPath", Scalar())

    /** Web URL of the epic board.
      */
    def webUrl: SelectionBuilder[EpicBoard, String] = _root_.caliban.client.SelectionBuilder.Field("webUrl", Scalar())
  }

  type EpicBoardConnection

  object EpicBoardConnection {

    /** A list of edges.
      */
    def edges[A](innerSelection: SelectionBuilder[EpicBoardEdge, A]): SelectionBuilder[EpicBoardConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](innerSelection: SelectionBuilder[EpicBoard, A]): SelectionBuilder[EpicBoardConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[EpicBoardConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  }

  type EpicBoardCreatePayload

  object EpicBoardCreatePayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[EpicBoardCreatePayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** The created epic board.
      */
    def epicBoard[A](innerSelection: SelectionBuilder[EpicBoard, A]): SelectionBuilder[EpicBoardCreatePayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("epicBoard", OptionOf(Obj(innerSelection)))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[EpicBoardCreatePayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))
  }

  type EpicBoardEdge

  object EpicBoardEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[EpicBoardEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](innerSelection: SelectionBuilder[EpicBoard, A]): SelectionBuilder[EpicBoardEdge, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
  }

  type EpicBoardListCreatePayload

  object EpicBoardListCreatePayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[EpicBoardListCreatePayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[EpicBoardListCreatePayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** Epic list in the epic board.
      */
    def list[A](innerSelection: SelectionBuilder[EpicList, A]): SelectionBuilder[EpicBoardListCreatePayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("list", OptionOf(Obj(innerSelection)))
  }

  type EpicBoardListDestroyPayload

  object EpicBoardListDestroyPayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[EpicBoardListDestroyPayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[EpicBoardListDestroyPayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** The epic board list. `null` if the board was destroyed successfully.
      */
    def list[A](innerSelection: SelectionBuilder[EpicList, A]): SelectionBuilder[EpicBoardListDestroyPayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("list", OptionOf(Obj(innerSelection)))
  }

  type EpicBoardUpdatePayload

  object EpicBoardUpdatePayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[EpicBoardUpdatePayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** The updated epic board.
      */
    def epicBoard[A](innerSelection: SelectionBuilder[EpicBoard, A]): SelectionBuilder[EpicBoardUpdatePayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("epicBoard", OptionOf(Obj(innerSelection)))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[EpicBoardUpdatePayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))
  }

  type EpicConnection

  object EpicConnection {

    /** A list of edges.
      */
    def edges[A](innerSelection: SelectionBuilder[EpicEdge, A]): SelectionBuilder[EpicConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](innerSelection: SelectionBuilder[Epic, A]): SelectionBuilder[EpicConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[EpicConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  }

  type EpicDescendantCount

  object EpicDescendantCount {

    /** Number of closed child epics.
      */
    def closedEpics: SelectionBuilder[EpicDescendantCount, Option[Int]] =
      _root_.caliban.client.SelectionBuilder.Field("closedEpics", OptionOf(Scalar()))

    /** Number of closed epic issues.
      */
    def closedIssues: SelectionBuilder[EpicDescendantCount, Option[Int]] =
      _root_.caliban.client.SelectionBuilder.Field("closedIssues", OptionOf(Scalar()))

    /** Number of opened child epics.
      */
    def openedEpics: SelectionBuilder[EpicDescendantCount, Option[Int]] =
      _root_.caliban.client.SelectionBuilder.Field("openedEpics", OptionOf(Scalar()))

    /** Number of opened epic issues.
      */
    def openedIssues: SelectionBuilder[EpicDescendantCount, Option[Int]] =
      _root_.caliban.client.SelectionBuilder.Field("openedIssues", OptionOf(Scalar()))
  }

  type EpicDescendantWeights

  object EpicDescendantWeights {

    /** Total weight of completed (closed) issues in this epic, including epic descendants.
      */
    def closedIssues: SelectionBuilder[EpicDescendantWeights, Option[Int]] =
      _root_.caliban.client.SelectionBuilder.Field("closedIssues", OptionOf(Scalar()))

    /** Total weight of opened issues in this epic, including epic descendants.
      */
    def openedIssues: SelectionBuilder[EpicDescendantWeights, Option[Int]] =
      _root_.caliban.client.SelectionBuilder.Field("openedIssues", OptionOf(Scalar()))
  }

  type EpicEdge

  object EpicEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[EpicEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](innerSelection: SelectionBuilder[Epic, A]): SelectionBuilder[EpicEdge, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
  }

  type EpicHealthStatus

  object EpicHealthStatus {

    /** Number of issues at risk.
      */
    def issuesAtRisk: SelectionBuilder[EpicHealthStatus, Option[Int]] =
      _root_.caliban.client.SelectionBuilder.Field("issuesAtRisk", OptionOf(Scalar()))

    /** Number of issues that need attention.
      */
    def issuesNeedingAttention: SelectionBuilder[EpicHealthStatus, Option[Int]] =
      _root_.caliban.client.SelectionBuilder.Field("issuesNeedingAttention", OptionOf(Scalar()))

    /** Number of issues on track.
      */
    def issuesOnTrack: SelectionBuilder[EpicHealthStatus, Option[Int]] =
      _root_.caliban.client.SelectionBuilder.Field("issuesOnTrack", OptionOf(Scalar()))
  }

  type EpicIssue

  object EpicIssue {

    /** Alert associated to this issue.
      */
    def alertManagementAlert[A](innerSelection: SelectionBuilder[AlertManagementAlert, A]): SelectionBuilder[EpicIssue, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("alertManagementAlert", OptionOf(Obj(innerSelection)))

    /** Assignees of the issue.
      */
    def assignees[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[UserCoreConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[EpicIssue, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "assignees",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** User that created the issue.
      */
    def author[A](innerSelection: SelectionBuilder[UserCore, A]): SelectionBuilder[EpicIssue, A] =
      _root_.caliban.client.SelectionBuilder.Field("author", Obj(innerSelection))

    /** Indicates the issue is blocked.
      */
    def blocked: SelectionBuilder[EpicIssue, Boolean] = _root_.caliban.client.SelectionBuilder.Field("blocked", Scalar())

    /** Count of issues blocking this issue.
      */
    def blockedByCount: SelectionBuilder[EpicIssue, Option[Int]] =
      _root_.caliban.client.SelectionBuilder.Field("blockedByCount", OptionOf(Scalar()))

    /** Issues blocking this issue.
      */
    def blockedByIssues[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[IssueConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[EpicIssue, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "blockedByIssues",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** Timestamp of when the issue was closed.
      */
    def closedAt: SelectionBuilder[EpicIssue, Option[Time]] = _root_.caliban.client.SelectionBuilder.Field("closedAt", OptionOf(Scalar()))

    /** Indicates the issue is confidential.
      */
    def confidential: SelectionBuilder[EpicIssue, Boolean] = _root_.caliban.client.SelectionBuilder.Field("confidential", Scalar())

    /** User specific email address for the issue.
      */
    def createNoteEmail: SelectionBuilder[EpicIssue, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("createNoteEmail", OptionOf(Scalar()))

    /** Timestamp of when the issue was created.
      */
    def createdAt: SelectionBuilder[EpicIssue, Time] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())

    /** To-do items for the current user.
      */
    def currentUserTodos[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None,
      state: Option[TodoStateEnum] = None
    )(
      innerSelection: SelectionBuilder[TodoConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]],
      encoder4: ArgEncoder[Option[TodoStateEnum]]
    ): SelectionBuilder[EpicIssue, A] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "currentUserTodos",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3),
          Argument("state", state, "TodoStateEnum")(encoder4)
        )
      )

    /** Description of the issue.
      */
    def description: SelectionBuilder[EpicIssue, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("description", OptionOf(Scalar()))

    /** The GitLab Flavored Markdown rendering of `description`
      */
    def descriptionHtml: SelectionBuilder[EpicIssue, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("descriptionHtml", OptionOf(Scalar()))

    /** Collection of design images associated with this issue.
      */
    def designCollection[A](innerSelection: SelectionBuilder[DesignCollection, A]): SelectionBuilder[EpicIssue, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("designCollection", OptionOf(Obj(innerSelection)))

    /** Indicates discussion is locked on the issue.
      */
    def discussionLocked: SelectionBuilder[EpicIssue, Boolean] = _root_.caliban.client.SelectionBuilder.Field("discussionLocked", Scalar())

    /** All discussions on this noteable.
      */
    def discussions[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[DiscussionConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[EpicIssue, A] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "discussions",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** Number of downvotes the issue has received.
      */
    def downvotes: SelectionBuilder[EpicIssue, Int] = _root_.caliban.client.SelectionBuilder.Field("downvotes", Scalar())

    /** Due date of the issue.
      */
    def dueDate: SelectionBuilder[EpicIssue, Option[Time]] = _root_.caliban.client.SelectionBuilder.Field("dueDate", OptionOf(Scalar()))

    /** Indicates if a project has email notifications disabled: `true` if email notifications are disabled.
      */
    def emailsDisabled: SelectionBuilder[EpicIssue, Boolean] = _root_.caliban.client.SelectionBuilder.Field("emailsDisabled", Scalar())

    /** Epic to which this issue belongs.
      */
    def epic[A](innerSelection: SelectionBuilder[Epic, A]): SelectionBuilder[EpicIssue, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("epic", OptionOf(Obj(innerSelection)))

    /** ID of the epic-issue relation.
      */
    def epicIssueId: SelectionBuilder[EpicIssue, String] = _root_.caliban.client.SelectionBuilder.Field("epicIssueId", Scalar())

    /** Current health status.
      */
    def healthStatus: SelectionBuilder[EpicIssue, Option[HealthStatus]] =
      _root_.caliban.client.SelectionBuilder.Field("healthStatus", OptionOf(Scalar()))

    /** Human-readable time estimate of the issue.
      */
    def humanTimeEstimate: SelectionBuilder[EpicIssue, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("humanTimeEstimate", OptionOf(Scalar()))

    /** Human-readable total time reported as spent on the issue.
      */
    def humanTotalTimeSpent: SelectionBuilder[EpicIssue, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("humanTotalTimeSpent", OptionOf(Scalar()))

    /** Global ID of the epic-issue relation.
      */
    def id: SelectionBuilder[EpicIssue, Option[String]] = _root_.caliban.client.SelectionBuilder.Field("id", OptionOf(Scalar()))

    /** Internal ID of the issue.
      */
    def iid: SelectionBuilder[EpicIssue, String] = _root_.caliban.client.SelectionBuilder.Field("iid", Scalar())

    /** Iteration of the issue.
      */
    def iteration[A](innerSelection: SelectionBuilder[Iteration, A]): SelectionBuilder[EpicIssue, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("iteration", OptionOf(Obj(innerSelection)))

    /** Labels of the issue.
      */
    def labels[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[LabelConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[EpicIssue, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "labels",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** Metric images associated to the issue.
      */
    def metricImages[A](innerSelection: SelectionBuilder[MetricImage, A]): SelectionBuilder[EpicIssue, Option[List[A]]] =
      _root_.caliban.client.SelectionBuilder.Field("metricImages", OptionOf(ListOf(Obj(innerSelection))))

    /** Milestone of the issue.
      */
    def milestone[A](innerSelection: SelectionBuilder[Milestone, A]): SelectionBuilder[EpicIssue, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("milestone", OptionOf(Obj(innerSelection)))

    /** Indicates if issue got moved from other project.
      */
    def moved: SelectionBuilder[EpicIssue, Option[Boolean]] = _root_.caliban.client.SelectionBuilder.Field("moved", OptionOf(Scalar()))

    /** Updated Issue after it got moved to another project.
      */
    def movedTo[A](innerSelection: SelectionBuilder[Issue, A]): SelectionBuilder[EpicIssue, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("movedTo", OptionOf(Obj(innerSelection)))

    /** All notes on this noteable.
      */
    def notes[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[NoteConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[EpicIssue, A] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "notes",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** List of participants in the issue.
      */
    def participants[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[UserCoreConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[EpicIssue, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "participants",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** ID of the issue project.
      */
    def projectId: SelectionBuilder[EpicIssue, Int] = _root_.caliban.client.SelectionBuilder.Field("projectId", Scalar())

    /** Internal reference of the issue. Returned in shortened format by default.
      */
    def reference(full: Option[Boolean] = None)(implicit encoder0: ArgEncoder[Option[Boolean]]): SelectionBuilder[EpicIssue, String] =
      _root_.caliban.client.SelectionBuilder.Field("reference", Scalar(), arguments = List(Argument("full", full, "Boolean")(encoder0)))

    /** URI path of the epic-issue relation.
      */
    def relationPath: SelectionBuilder[EpicIssue, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("relationPath", OptionOf(Scalar()))

    /** Relative position of the issue (used for positioning in epic tree and issue boards).
      */
    def relativePosition: SelectionBuilder[EpicIssue, Option[Int]] =
      _root_.caliban.client.SelectionBuilder.Field("relativePosition", OptionOf(Scalar()))

    /** Severity level of the incident.
      */
    def severity: SelectionBuilder[EpicIssue, Option[IssuableSeverity]] =
      _root_.caliban.client.SelectionBuilder.Field("severity", OptionOf(Scalar()))

    /** Timestamp of when the issue SLA expires.
      */
    def slaDueAt: SelectionBuilder[EpicIssue, Option[Time]] = _root_.caliban.client.SelectionBuilder.Field("slaDueAt", OptionOf(Scalar()))

    /** State of the issue.
      */
    def state: SelectionBuilder[EpicIssue, IssueState] = _root_.caliban.client.SelectionBuilder.Field("state", Scalar())

    /** Indicates whether an issue is published to the status page.
      */
    def statusPagePublishedIncident: SelectionBuilder[EpicIssue, Option[Boolean]] =
      _root_.caliban.client.SelectionBuilder.Field("statusPagePublishedIncident", OptionOf(Scalar()))

    /** Indicates the currently logged in user is subscribed to the issue.
      */
    def subscribed: SelectionBuilder[EpicIssue, Boolean] = _root_.caliban.client.SelectionBuilder.Field("subscribed", Scalar())

    /** Task completion status of the issue.
      */
    def taskCompletionStatus[A](innerSelection: SelectionBuilder[TaskCompletionStatus, A]): SelectionBuilder[EpicIssue, A] =
      _root_.caliban.client.SelectionBuilder.Field("taskCompletionStatus", Obj(innerSelection))

    /** Time estimate of the issue.
      */
    def timeEstimate: SelectionBuilder[EpicIssue, Int] = _root_.caliban.client.SelectionBuilder.Field("timeEstimate", Scalar())

    /** Timelogs on the issue.
      */
    def timelogs[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[TimelogConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[EpicIssue, A] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "timelogs",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** Title of the issue.
      */
    def title: SelectionBuilder[EpicIssue, String] = _root_.caliban.client.SelectionBuilder.Field("title", Scalar())

    /** The GitLab Flavored Markdown rendering of `title`
      */
    def titleHtml: SelectionBuilder[EpicIssue, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("titleHtml", OptionOf(Scalar()))

    /** Total time reported as spent on the issue.
      */
    def totalTimeSpent: SelectionBuilder[EpicIssue, Int] = _root_.caliban.client.SelectionBuilder.Field("totalTimeSpent", Scalar())

    /** Type of the issue.
      */
    def `type`: SelectionBuilder[EpicIssue, Option[IssueType]] = _root_.caliban.client.SelectionBuilder.Field("type", OptionOf(Scalar()))

    /** Timestamp of when the issue was last updated.
      */
    def updatedAt: SelectionBuilder[EpicIssue, Time] = _root_.caliban.client.SelectionBuilder.Field("updatedAt", Scalar())

    /** User that last updated the issue.
      */
    def updatedBy[A](innerSelection: SelectionBuilder[UserCore, A]): SelectionBuilder[EpicIssue, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("updatedBy", OptionOf(Obj(innerSelection)))

    /** Number of upvotes the issue has received.
      */
    def upvotes: SelectionBuilder[EpicIssue, Int] = _root_.caliban.client.SelectionBuilder.Field("upvotes", Scalar())

    /** Number of user discussions in the issue.
      */
    def userDiscussionsCount: SelectionBuilder[EpicIssue, Int] =
      _root_.caliban.client.SelectionBuilder.Field("userDiscussionsCount", Scalar())

    /** Number of user notes of the issue.
      */
    def userNotesCount: SelectionBuilder[EpicIssue, Int] = _root_.caliban.client.SelectionBuilder.Field("userNotesCount", Scalar())

    /** Permissions for the current user on the resource
      */
    def userPermissions[A](innerSelection: SelectionBuilder[IssuePermissions, A]): SelectionBuilder[EpicIssue, A] =
      _root_.caliban.client.SelectionBuilder.Field("userPermissions", Obj(innerSelection))

    /** Web path of the issue.
      */
    def webPath: SelectionBuilder[EpicIssue, String] = _root_.caliban.client.SelectionBuilder.Field("webPath", Scalar())

    /** Web URL of the issue.
      */
    def webUrl: SelectionBuilder[EpicIssue, String] = _root_.caliban.client.SelectionBuilder.Field("webUrl", Scalar())

    /** Weight of the issue.
      */
    def weight: SelectionBuilder[EpicIssue, Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("weight", OptionOf(Scalar()))
  }

  type EpicIssueConnection

  object EpicIssueConnection {

    /** Total count of collection.
      */
    def count: SelectionBuilder[EpicIssueConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("count", Scalar())

    /** A list of edges.
      */
    def edges[A](innerSelection: SelectionBuilder[EpicIssueEdge, A]): SelectionBuilder[EpicIssueConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](innerSelection: SelectionBuilder[EpicIssue, A]): SelectionBuilder[EpicIssueConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[EpicIssueConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))

    /** Total weight of issues collection.
      */
    def weight: SelectionBuilder[EpicIssueConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("weight", Scalar())
  }

  type EpicIssueEdge

  object EpicIssueEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[EpicIssueEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](innerSelection: SelectionBuilder[EpicIssue, A]): SelectionBuilder[EpicIssueEdge, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
  }

  type EpicList

  object EpicList {

    /** Indicates if this list is collapsed for this user.
      */
    def collapsed: SelectionBuilder[EpicList, Option[Boolean]] =
      _root_.caliban.client.SelectionBuilder.Field("collapsed", OptionOf(Scalar()))

    /** List epics.
      */
    def epics[A](
      filters: Option[EpicFilters] = None,
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[EpicConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[EpicFilters]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[String]],
      encoder3: ArgEncoder[Option[Int]],
      encoder4: ArgEncoder[Option[Int]]
    ): SelectionBuilder[EpicList, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "epics",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("filters", filters, "EpicFilters")(encoder0),
          Argument("after", after, "String")(encoder1),
          Argument("before", before, "String")(encoder2),
          Argument("first", first, "Int")(encoder3),
          Argument("last", last, "Int")(encoder4)
        )
      )

    /** Count of epics in the list.
      */
    def epicsCount: SelectionBuilder[EpicList, Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("epicsCount", OptionOf(Scalar()))

    /** Global ID of the board list.
      */
    def id: SelectionBuilder[EpicList, BoardsEpicListID] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())

    /** Label of the list.
      */
    def label[A](innerSelection: SelectionBuilder[Label, A]): SelectionBuilder[EpicList, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("label", OptionOf(Obj(innerSelection)))

    /** Type of the list.
      */
    def listType: SelectionBuilder[EpicList, String] = _root_.caliban.client.SelectionBuilder.Field("listType", Scalar())

    /** Position of the list within the board.
      */
    def position: SelectionBuilder[EpicList, Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("position", OptionOf(Scalar()))

    /** Title of the list.
      */
    def title: SelectionBuilder[EpicList, String] = _root_.caliban.client.SelectionBuilder.Field("title", Scalar())
  }

  type EpicListConnection

  object EpicListConnection {

    /** A list of edges.
      */
    def edges[A](innerSelection: SelectionBuilder[EpicListEdge, A]): SelectionBuilder[EpicListConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](innerSelection: SelectionBuilder[EpicList, A]): SelectionBuilder[EpicListConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[EpicListConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  }

  type EpicListEdge

  object EpicListEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[EpicListEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](innerSelection: SelectionBuilder[EpicList, A]): SelectionBuilder[EpicListEdge, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
  }

  type EpicMoveListPayload

  object EpicMoveListPayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[EpicMoveListPayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** The epic after mutation.
      */
    def epic[A](innerSelection: SelectionBuilder[Epic, A]): SelectionBuilder[EpicMoveListPayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("epic", OptionOf(Obj(innerSelection)))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[EpicMoveListPayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))
  }

  type EpicPermissions

  object EpicPermissions {

    /** Indicates the user can perform `admin_epic` on this resource
      */
    def adminEpic: SelectionBuilder[EpicPermissions, Boolean] = _root_.caliban.client.SelectionBuilder.Field("adminEpic", Scalar())

    /** Indicates the user can perform `award_emoji` on this resource
      */
    def awardEmoji: SelectionBuilder[EpicPermissions, Boolean] = _root_.caliban.client.SelectionBuilder.Field("awardEmoji", Scalar())

    /** Indicates the user can perform `create_epic` on this resource
      */
    def createEpic: SelectionBuilder[EpicPermissions, Boolean] = _root_.caliban.client.SelectionBuilder.Field("createEpic", Scalar())

    /** Indicates the user can perform `create_note` on this resource
      */
    def createNote: SelectionBuilder[EpicPermissions, Boolean] = _root_.caliban.client.SelectionBuilder.Field("createNote", Scalar())

    /** Indicates the user can perform `destroy_epic` on this resource
      */
    def destroyEpic: SelectionBuilder[EpicPermissions, Boolean] = _root_.caliban.client.SelectionBuilder.Field("destroyEpic", Scalar())

    /** Indicates the user can perform `read_epic` on this resource
      */
    def readEpic: SelectionBuilder[EpicPermissions, Boolean] = _root_.caliban.client.SelectionBuilder.Field("readEpic", Scalar())

    /** Indicates the user can perform `read_epic_iid` on this resource
      */
    def readEpicIid: SelectionBuilder[EpicPermissions, Boolean] = _root_.caliban.client.SelectionBuilder.Field("readEpicIid", Scalar())

    /** Indicates the user can perform `update_epic` on this resource
      */
    def updateEpic: SelectionBuilder[EpicPermissions, Boolean] = _root_.caliban.client.SelectionBuilder.Field("updateEpic", Scalar())
  }

  type EpicSetSubscriptionPayload

  object EpicSetSubscriptionPayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[EpicSetSubscriptionPayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** The epic after mutation.
      */
    def epic[A](innerSelection: SelectionBuilder[Epic, A]): SelectionBuilder[EpicSetSubscriptionPayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("epic", OptionOf(Obj(innerSelection)))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[EpicSetSubscriptionPayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))
  }

  type EpicTreeReorderPayload

  object EpicTreeReorderPayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[EpicTreeReorderPayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[EpicTreeReorderPayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))
  }

  type EscalationPolicyCreatePayload

  object EscalationPolicyCreatePayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[EscalationPolicyCreatePayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[EscalationPolicyCreatePayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** The escalation policy.
      */
    def escalationPolicy[A](
      innerSelection: SelectionBuilder[EscalationPolicyType, A]
    ): SelectionBuilder[EscalationPolicyCreatePayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("escalationPolicy", OptionOf(Obj(innerSelection)))

  }

  type EscalationPolicyDestroyPayload

  object EscalationPolicyDestroyPayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[EscalationPolicyDestroyPayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[EscalationPolicyDestroyPayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** The escalation policy.
      */
    def escalationPolicy[A](
      innerSelection: SelectionBuilder[EscalationPolicyType, A]
    ): SelectionBuilder[EscalationPolicyDestroyPayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("escalationPolicy", OptionOf(Obj(innerSelection)))

  }

  type EscalationPolicyType

  object EscalationPolicyType {

    /** The description of the escalation policy.
      */
    def description: SelectionBuilder[EscalationPolicyType, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("description", OptionOf(Scalar()))

    /** ID of the escalation policy.
      */
    def id: SelectionBuilder[EscalationPolicyType, Option[IncidentManagementEscalationPolicyID]] =
      _root_.caliban.client.SelectionBuilder.Field("id", OptionOf(Scalar()))

    /** The name of the escalation policy.
      */
    def name: SelectionBuilder[EscalationPolicyType, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("name", OptionOf(Scalar()))

    /** Steps of the escalation policy.
      */
    def rules[A](innerSelection: SelectionBuilder[EscalationRuleType, A]): SelectionBuilder[EscalationPolicyType, Option[List[A]]] =
      _root_.caliban.client.SelectionBuilder.Field("rules", OptionOf(ListOf(Obj(innerSelection))))
  }

  type EscalationPolicyTypeConnection

  object EscalationPolicyTypeConnection {

    /** A list of edges.
      */
    def edges[A](
      innerSelection: SelectionBuilder[EscalationPolicyTypeEdge, A]
    ): SelectionBuilder[EscalationPolicyTypeConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](
      innerSelection: SelectionBuilder[EscalationPolicyType, A]
    ): SelectionBuilder[EscalationPolicyTypeConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[EscalationPolicyTypeConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  }

  type EscalationPolicyTypeEdge

  object EscalationPolicyTypeEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[EscalationPolicyTypeEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](innerSelection: SelectionBuilder[EscalationPolicyType, A]): SelectionBuilder[EscalationPolicyTypeEdge, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
  }

  type EscalationPolicyUpdatePayload

  object EscalationPolicyUpdatePayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[EscalationPolicyUpdatePayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[EscalationPolicyUpdatePayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** The escalation policy.
      */
    def escalationPolicy[A](
      innerSelection: SelectionBuilder[EscalationPolicyType, A]
    ): SelectionBuilder[EscalationPolicyUpdatePayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("escalationPolicy", OptionOf(Obj(innerSelection)))

  }

  type EscalationRuleType

  object EscalationRuleType {

    /** The time in seconds before the rule is activated.
      */
    def elapsedTimeSeconds: SelectionBuilder[EscalationRuleType, Option[Int]] =
      _root_.caliban.client.SelectionBuilder.Field("elapsedTimeSeconds", OptionOf(Scalar()))

    /** ID of the escalation policy.
      */
    def id: SelectionBuilder[EscalationRuleType, Option[IncidentManagementEscalationRuleID]] =
      _root_.caliban.client.SelectionBuilder.Field("id", OptionOf(Scalar()))

    /** The on-call schedule to notify.
      */
    def oncallSchedule[A](
      innerSelection: SelectionBuilder[IncidentManagementOncallSchedule, A]
    ): SelectionBuilder[EscalationRuleType, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("oncallSchedule", OptionOf(Obj(innerSelection)))

    /** The status required to prevent the rule from activating.
      */
    def status: SelectionBuilder[EscalationRuleType, Option[EscalationRuleStatus]] =
      _root_.caliban.client.SelectionBuilder.Field("status", OptionOf(Scalar()))
  }

  type Event

  object Event {

    /** Action of the event.
      */
    def action: SelectionBuilder[Event, EventAction] = _root_.caliban.client.SelectionBuilder.Field("action", Scalar())

    /** Author of this event.
      */
    def author[A](innerSelection: SelectionBuilder[UserCore, A]): SelectionBuilder[Event, A] =
      _root_.caliban.client.SelectionBuilder.Field("author", Obj(innerSelection))

    /** When this event was created.
      */
    def createdAt: SelectionBuilder[Event, Time] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())

    /** ID of the event.
      */
    def id: SelectionBuilder[Event, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())

    /** When this event was updated.
      */
    def updatedAt: SelectionBuilder[Event, Time] = _root_.caliban.client.SelectionBuilder.Field("updatedAt", Scalar())
  }

  type EventConnection

  object EventConnection {

    /** A list of edges.
      */
    def edges[A](innerSelection: SelectionBuilder[EventEdge, A]): SelectionBuilder[EventConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](innerSelection: SelectionBuilder[Event, A]): SelectionBuilder[EventConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[EventConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  }

  type EventEdge

  object EventEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[EventEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](innerSelection: SelectionBuilder[Event, A]): SelectionBuilder[EventEdge, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
  }

  type ExportRequirementsPayload

  object ExportRequirementsPayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[ExportRequirementsPayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[ExportRequirementsPayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))
  }

  type ExternalIssue

  object ExternalIssue {

    /** Timestamp of when the issue was created.
      */
    def createdAt: SelectionBuilder[ExternalIssue, Option[Time]] =
      _root_.caliban.client.SelectionBuilder.Field("createdAt", OptionOf(Scalar()))

    /** Type of external tracker.
      */
    def externalTracker: SelectionBuilder[ExternalIssue, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("externalTracker", OptionOf(Scalar()))

    /** Relative reference of the issue in the external tracker.
      */
    def relativeReference: SelectionBuilder[ExternalIssue, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("relativeReference", OptionOf(Scalar()))

    /** Status of the issue in the external tracker.
      */
    def status: SelectionBuilder[ExternalIssue, Option[String]] = _root_.caliban.client.SelectionBuilder.Field("status", OptionOf(Scalar()))

    /** Title of the issue in the external tracker.
      */
    def title: SelectionBuilder[ExternalIssue, Option[String]] = _root_.caliban.client.SelectionBuilder.Field("title", OptionOf(Scalar()))

    /** Timestamp of when the issue was updated.
      */
    def updatedAt: SelectionBuilder[ExternalIssue, Option[Time]] =
      _root_.caliban.client.SelectionBuilder.Field("updatedAt", OptionOf(Scalar()))

    /** URL to the issue in the external tracker.
      */
    def webUrl: SelectionBuilder[ExternalIssue, Option[String]] = _root_.caliban.client.SelectionBuilder.Field("webUrl", OptionOf(Scalar()))
  }

  type GeoNode

  object GeoNode {

    /** The maximum concurrency of container repository sync for this secondary node.
      */
    def containerRepositoriesMaxCapacity: SelectionBuilder[GeoNode, Option[Int]] =
      _root_.caliban.client.SelectionBuilder.Field("containerRepositoriesMaxCapacity", OptionOf(Scalar()))

    /** Indicates whether this Geo node is enabled.
      */
    def enabled: SelectionBuilder[GeoNode, Option[Boolean]] = _root_.caliban.client.SelectionBuilder.Field("enabled", OptionOf(Scalar()))

    /** The maximum concurrency of LFS/attachment backfill for this secondary node.
      */
    def filesMaxCapacity: SelectionBuilder[GeoNode, Option[Int]] =
      _root_.caliban.client.SelectionBuilder.Field("filesMaxCapacity", OptionOf(Scalar()))

    /** Find group wiki repository registries on this Geo node.
      */
    def groupWikiRepositoryRegistries[A](
      ids: Option[List[String]] = None,
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[GroupWikiRepositoryRegistryConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[List[String]]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[String]],
      encoder3: ArgEncoder[Option[Int]],
      encoder4: ArgEncoder[Option[Int]]
    ): SelectionBuilder[GeoNode, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "groupWikiRepositoryRegistries",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("ids", ids, "[ID!]")(encoder0),
          Argument("after", after, "String")(encoder1),
          Argument("before", before, "String")(encoder2),
          Argument("first", first, "Int")(encoder3),
          Argument("last", last, "Int")(encoder4)
        )
      )

    /** ID of this GeoNode.
      */
    def id: SelectionBuilder[GeoNode, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())

    /** The URL defined on the primary node that secondary nodes should use to contact it.
      */
    def internalUrl: SelectionBuilder[GeoNode, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("internalUrl", OptionOf(Scalar()))

    /** Find LFS object registries on this Geo node.
      */
    def lfsObjectRegistries[A](
      ids: Option[List[String]] = None,
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[LfsObjectRegistryConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[List[String]]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[String]],
      encoder3: ArgEncoder[Option[Int]],
      encoder4: ArgEncoder[Option[Int]]
    ): SelectionBuilder[GeoNode, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "lfsObjectRegistries",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("ids", ids, "[ID!]")(encoder0),
          Argument("after", after, "String")(encoder1),
          Argument("before", before, "String")(encoder2),
          Argument("first", first, "Int")(encoder3),
          Argument("last", last, "Int")(encoder4)
        )
      )

    /** Find merge request diff registries on this Geo node.
      */
    def mergeRequestDiffRegistries[A](
      ids: Option[List[String]] = None,
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[MergeRequestDiffRegistryConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[List[String]]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[String]],
      encoder3: ArgEncoder[Option[Int]],
      encoder4: ArgEncoder[Option[Int]]
    ): SelectionBuilder[GeoNode, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "mergeRequestDiffRegistries",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("ids", ids, "[ID!]")(encoder0),
          Argument("after", after, "String")(encoder1),
          Argument("before", before, "String")(encoder2),
          Argument("first", first, "Int")(encoder3),
          Argument("last", last, "Int")(encoder4)
        )
      )

    /** The interval (in days) in which the repository verification is valid. Once expired, it will be reverified.
      */
    def minimumReverificationInterval: SelectionBuilder[GeoNode, Option[Int]] =
      _root_.caliban.client.SelectionBuilder.Field("minimumReverificationInterval", OptionOf(Scalar()))

    /** The unique identifier for this Geo node.
      */
    def name: SelectionBuilder[GeoNode, Option[String]] = _root_.caliban.client.SelectionBuilder.Field("name", OptionOf(Scalar()))

    /** Package file registries of the GeoNode.
      */
    def packageFileRegistries[A](
      ids: Option[List[String]] = None,
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[PackageFileRegistryConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[List[String]]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[String]],
      encoder3: ArgEncoder[Option[Int]],
      encoder4: ArgEncoder[Option[Int]]
    ): SelectionBuilder[GeoNode, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "packageFileRegistries",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("ids", ids, "[ID!]")(encoder0),
          Argument("after", after, "String")(encoder1),
          Argument("before", before, "String")(encoder2),
          Argument("first", first, "Int")(encoder3),
          Argument("last", last, "Int")(encoder4)
        )
      )

    /** Find pipeline artifact registries on this Geo node.
      */
    def pipelineArtifactRegistries[A](
      ids: Option[List[String]] = None,
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[PipelineArtifactRegistryConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[List[String]]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[String]],
      encoder3: ArgEncoder[Option[Int]],
      encoder4: ArgEncoder[Option[Int]]
    ): SelectionBuilder[GeoNode, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "pipelineArtifactRegistries",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("ids", ids, "[ID!]")(encoder0),
          Argument("after", after, "String")(encoder1),
          Argument("before", before, "String")(encoder2),
          Argument("first", first, "Int")(encoder3),
          Argument("last", last, "Int")(encoder4)
        )
      )

    /** Indicates whether this Geo node is the primary.
      */
    def primary: SelectionBuilder[GeoNode, Option[Boolean]] = _root_.caliban.client.SelectionBuilder.Field("primary", OptionOf(Scalar()))

    /** The maximum concurrency of repository backfill for this secondary node.
      */
    def reposMaxCapacity: SelectionBuilder[GeoNode, Option[Int]] =
      _root_.caliban.client.SelectionBuilder.Field("reposMaxCapacity", OptionOf(Scalar()))

    /** The namespaces that should be synced, if `selective_sync_type` == `namespaces`.
      */
    def selectiveSyncNamespaces[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[NamespaceConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[GeoNode, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "selectiveSyncNamespaces",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** The repository storages whose projects should be synced, if `selective_sync_type` == `shards`.
      */
    def selectiveSyncShards: SelectionBuilder[GeoNode, Option[List[String]]] =
      _root_.caliban.client.SelectionBuilder.Field("selectiveSyncShards", OptionOf(ListOf(Scalar())))

    /** Indicates if syncing is limited to only specific groups, or shards.
      */
    def selectiveSyncType: SelectionBuilder[GeoNode, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("selectiveSyncType", OptionOf(Scalar()))

    /** Find snippet repository registries on this Geo node.
      */
    def snippetRepositoryRegistries[A](
      ids: Option[List[String]] = None,
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[SnippetRepositoryRegistryConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[List[String]]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[String]],
      encoder3: ArgEncoder[Option[Int]],
      encoder4: ArgEncoder[Option[Int]]
    ): SelectionBuilder[GeoNode, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "snippetRepositoryRegistries",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("ids", ids, "[ID!]")(encoder0),
          Argument("after", after, "String")(encoder1),
          Argument("before", before, "String")(encoder2),
          Argument("first", first, "Int")(encoder3),
          Argument("last", last, "Int")(encoder4)
        )
      )

    /** Indicates if this secondary node will replicate blobs in Object Storage.
      */
    def syncObjectStorage: SelectionBuilder[GeoNode, Option[Boolean]] =
      _root_.caliban.client.SelectionBuilder.Field("syncObjectStorage", OptionOf(Scalar()))

    /** Find terraform state version registries on this Geo node.
      */
    def terraformStateVersionRegistries[A](
      ids: Option[List[String]] = None,
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[TerraformStateVersionRegistryConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[List[String]]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[String]],
      encoder3: ArgEncoder[Option[Int]],
      encoder4: ArgEncoder[Option[Int]]
    ): SelectionBuilder[GeoNode, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "terraformStateVersionRegistries",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("ids", ids, "[ID!]")(encoder0),
          Argument("after", after, "String")(encoder1),
          Argument("before", before, "String")(encoder2),
          Argument("first", first, "Int")(encoder3),
          Argument("last", last, "Int")(encoder4)
        )
      )

    /** The user-facing URL for this Geo node.
      */
    def url: SelectionBuilder[GeoNode, Option[String]] = _root_.caliban.client.SelectionBuilder.Field("url", OptionOf(Scalar()))

    /** The maximum concurrency of repository verification for this secondary node.
      */
    def verificationMaxCapacity: SelectionBuilder[GeoNode, Option[Int]] =
      _root_.caliban.client.SelectionBuilder.Field("verificationMaxCapacity", OptionOf(Scalar()))
  }

  type GitlabSubscriptionActivatePayload

  object GitlabSubscriptionActivatePayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[GitlabSubscriptionActivatePayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[GitlabSubscriptionActivatePayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** The current license.
      */
    def license[A](innerSelection: SelectionBuilder[CurrentLicense, A]): SelectionBuilder[GitlabSubscriptionActivatePayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("license", OptionOf(Obj(innerSelection)))
  }

  type GrafanaIntegration

  object GrafanaIntegration {

    /** Timestamp of the issue's creation.
      */
    def createdAt: SelectionBuilder[GrafanaIntegration, Time] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())

    /** Indicates whether Grafana integration is enabled.
      */
    def enabled: SelectionBuilder[GrafanaIntegration, Boolean] = _root_.caliban.client.SelectionBuilder.Field("enabled", Scalar())

    /** URL for the Grafana host for the Grafana integration.
      */
    def grafanaUrl: SelectionBuilder[GrafanaIntegration, String] = _root_.caliban.client.SelectionBuilder.Field("grafanaUrl", Scalar())

    /** Internal ID of the Grafana integration.
      */
    def id: SelectionBuilder[GrafanaIntegration, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())

    /** Timestamp of the issue's last activity.
      */
    def updatedAt: SelectionBuilder[GrafanaIntegration, Time] = _root_.caliban.client.SelectionBuilder.Field("updatedAt", Scalar())
  }

  type Group

  object Group {

    /** Size limit for repositories in the namespace in bytes.
      */
    def actualRepositorySizeLimit: SelectionBuilder[Group, Option[Double]] =
      _root_.caliban.client.SelectionBuilder.Field("actualRepositorySizeLimit", OptionOf(Scalar()))

    /** Additional storage purchased for the root namespace in bytes.
      */
    def additionalPurchasedStorageSize: SelectionBuilder[Group, Option[Double]] =
      _root_.caliban.client.SelectionBuilder.Field("additionalPurchasedStorageSize", OptionOf(Scalar()))

    /** Indicates whether Auto DevOps is enabled for all projects within this group.
      */
    def autoDevopsEnabled: SelectionBuilder[Group, Option[Boolean]] =
      _root_.caliban.client.SelectionBuilder.Field("autoDevopsEnabled", OptionOf(Scalar()))

    /** Avatar URL of the group.
      */
    def avatarUrl: SelectionBuilder[Group, Option[String]] = _root_.caliban.client.SelectionBuilder.Field("avatarUrl", OptionOf(Scalar()))

    /** The number of billable users in the group.
      */
    def billableMembersCount: SelectionBuilder[Group, Option[Int]] =
      _root_.caliban.client.SelectionBuilder.Field("billableMembersCount", OptionOf(Scalar()))

    /** A single board of the group.
      */
    def board[A](
      id: BoardID
    )(
      innerSelection: SelectionBuilder[Board, A]
    )(
      implicit encoder0: ArgEncoder[BoardID]
    ): SelectionBuilder[Group, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field("board", OptionOf(Obj(innerSelection)), arguments = List(Argument("id", id, "BoardID!")(encoder0)))

    /** Boards of the group.
      */
    def boards[A](
      id: Option[BoardID] = None,
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[BoardConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[BoardID]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[String]],
      encoder3: ArgEncoder[Option[Int]],
      encoder4: ArgEncoder[Option[Int]]
    ): SelectionBuilder[Group, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "boards",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("id", id, "BoardID")(encoder0),
          Argument("after", after, "String")(encoder1),
          Argument("before", before, "String")(encoder2),
          Argument("first", first, "Int")(encoder3),
          Argument("last", last, "Int")(encoder4)
        )
      )

    /** Represents the code coverage activity for this group.
      */
    def codeCoverageActivities[A](
      startDate: Date,
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[CodeCoverageActivityConnection, A]
    )(
      implicit encoder0: ArgEncoder[Date],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[String]],
      encoder3: ArgEncoder[Option[Int]],
      encoder4: ArgEncoder[Option[Int]]
    ): SelectionBuilder[Group, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "codeCoverageActivities",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("startDate", startDate, "Date!")(encoder0),
          Argument("after", after, "String")(encoder1),
          Argument("before", before, "String")(encoder2),
          Argument("first", first, "Int")(encoder3),
          Argument("last", last, "Int")(encoder4)
        )
      )

    /** Compliance frameworks available to projects in this namespace.
      */
    def complianceFrameworks[A](
      id: Option[ComplianceManagementFrameworkID] = None,
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[ComplianceFrameworkConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[ComplianceManagementFrameworkID]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[String]],
      encoder3: ArgEncoder[Option[Int]],
      encoder4: ArgEncoder[Option[Int]]
    ): SelectionBuilder[Group, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "complianceFrameworks",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("id", id, "ComplianceManagementFrameworkID")(encoder0),
          Argument("after", after, "String")(encoder1),
          Argument("before", before, "String")(encoder2),
          Argument("first", first, "Int")(encoder3),
          Argument("last", last, "Int")(encoder4)
        )
      )

    /** Container repositories of the group.
      */
    def containerRepositories[A](
      name: Option[String] = None,
      sort: Option[ContainerRepositorySort] = None,
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[ContainerRepositoryConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[ContainerRepositorySort]],
      encoder2: ArgEncoder[Option[String]],
      encoder3: ArgEncoder[Option[String]],
      encoder4: ArgEncoder[Option[Int]],
      encoder5: ArgEncoder[Option[Int]]
    ): SelectionBuilder[Group, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "containerRepositories",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("name", name, "String")(encoder0),
          Argument("sort", sort, "ContainerRepositorySort")(encoder1),
          Argument("after", after, "String")(encoder2),
          Argument("before", before, "String")(encoder3),
          Argument("first", first, "Int")(encoder4),
          Argument("last", last, "Int")(encoder5)
        )
      )

    /** Number of container repositories in the group.
      */
    def containerRepositoriesCount: SelectionBuilder[Group, Int] =
      _root_.caliban.client.SelectionBuilder.Field("containerRepositoriesCount", Scalar())

    /** Includes at least one project where the repository size exceeds the limit.
      */
    def containsLockedProjects: SelectionBuilder[Group, Boolean] =
      _root_.caliban.client.SelectionBuilder.Field("containsLockedProjects", Scalar())

    /** Custom emoji within this namespace. Available only when feature flag `custom_emoji` is enabled.
      */
    def customEmoji[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[CustomEmojiConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[Group, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "customEmoji",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** Description of the namespace.
      */
    def description: SelectionBuilder[Group, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("description", OptionOf(Scalar()))

    /** The GitLab Flavored Markdown rendering of `description`
      */
    def descriptionHtml: SelectionBuilder[Group, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("descriptionHtml", OptionOf(Scalar()))

    /** The group's DORA metrics.
      */
    def dora[A](innerSelection: SelectionBuilder[Dora, A]): SelectionBuilder[Group, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("dora", OptionOf(Obj(innerSelection)))

    /** Indicates if a group has email notifications disabled.
      */
    def emailsDisabled: SelectionBuilder[Group, Option[Boolean]] =
      _root_.caliban.client.SelectionBuilder.Field("emailsDisabled", OptionOf(Scalar()))

    /** Find a single epic.
      */
    def epic[A](
      timeframe: Option[Timeframe] = None,
      iid: Option[String] = None,
      iids: Option[List[String]] = None,
      state: Option[EpicState] = None,
      search: Option[String] = None,
      in: Option[List[IssuableSearchableField]] = None,
      sort: Option[EpicSort] = None,
      authorUsername: Option[String] = None,
      labelName: Option[List[String]] = None,
      milestoneTitle: Option[String] = None,
      iidStartsWith: Option[String] = None,
      includeAncestorGroups: Option[Boolean] = None,
      includeDescendantGroups: Option[Boolean] = None,
      confidential: Option[Boolean] = None,
      myReactionEmoji: Option[String] = None,
      not: Option[NegatedEpicFilterInput] = None
    )(
      innerSelection: SelectionBuilder[Epic, A]
    )(
      implicit encoder0: ArgEncoder[Option[Timeframe]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[List[String]]],
      encoder3: ArgEncoder[Option[EpicState]],
      encoder4: ArgEncoder[Option[String]],
      encoder5: ArgEncoder[Option[List[IssuableSearchableField]]],
      encoder6: ArgEncoder[Option[EpicSort]],
      encoder7: ArgEncoder[Option[String]],
      encoder8: ArgEncoder[Option[List[String]]],
      encoder9: ArgEncoder[Option[String]],
      encoder10: ArgEncoder[Option[String]],
      encoder11: ArgEncoder[Option[Boolean]],
      encoder12: ArgEncoder[Option[Boolean]],
      encoder13: ArgEncoder[Option[Boolean]],
      encoder14: ArgEncoder[Option[String]],
      encoder15: ArgEncoder[Option[NegatedEpicFilterInput]]
    ): SelectionBuilder[Group, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "epic",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("timeframe", timeframe, "Timeframe")(encoder0),
          Argument("iid", iid, "ID")(encoder1),
          Argument("iids", iids, "[ID!]")(encoder2),
          Argument("state", state, "EpicState")(encoder3),
          Argument("search", search, "String")(encoder4),
          Argument("in", in, "[IssuableSearchableField!]")(encoder5),
          Argument("sort", sort, "EpicSort")(encoder6),
          Argument("authorUsername", authorUsername, "String")(encoder7),
          Argument("labelName", labelName, "[String!]")(encoder8),
          Argument("milestoneTitle", milestoneTitle, "String")(encoder9),
          Argument("iidStartsWith", iidStartsWith, "String")(encoder10),
          Argument("includeAncestorGroups", includeAncestorGroups, "Boolean")(encoder11),
          Argument("includeDescendantGroups", includeDescendantGroups, "Boolean")(encoder12),
          Argument("confidential", confidential, "Boolean")(encoder13),
          Argument("myReactionEmoji", myReactionEmoji, "String")(encoder14),
          Argument("not", not, "NegatedEpicFilterInput")(encoder15)
        )
      )

    /** Find a single epic board.
      */
    def epicBoard[A](
      id: BoardsEpicBoardID
    )(
      innerSelection: SelectionBuilder[EpicBoard, A]
    )(
      implicit encoder0: ArgEncoder[BoardsEpicBoardID]
    ): SelectionBuilder[Group, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field("epicBoard", OptionOf(Obj(innerSelection)), arguments = List(Argument("id", id, "BoardsEpicBoardID!")(encoder0)))

    /** Find epic boards.
      */
    def epicBoards[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[EpicBoardConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[Group, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "epicBoards",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** Find epics.
      */
    def epics[A](
      timeframe: Option[Timeframe] = None,
      iid: Option[String] = None,
      iids: Option[List[String]] = None,
      state: Option[EpicState] = None,
      search: Option[String] = None,
      in: Option[List[IssuableSearchableField]] = None,
      sort: Option[EpicSort] = None,
      authorUsername: Option[String] = None,
      labelName: Option[List[String]] = None,
      milestoneTitle: Option[String] = None,
      iidStartsWith: Option[String] = None,
      includeAncestorGroups: Option[Boolean] = None,
      includeDescendantGroups: Option[Boolean] = None,
      confidential: Option[Boolean] = None,
      myReactionEmoji: Option[String] = None,
      not: Option[NegatedEpicFilterInput] = None,
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[EpicConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[Timeframe]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[List[String]]],
      encoder3: ArgEncoder[Option[EpicState]],
      encoder4: ArgEncoder[Option[String]],
      encoder5: ArgEncoder[Option[List[IssuableSearchableField]]],
      encoder6: ArgEncoder[Option[EpicSort]],
      encoder7: ArgEncoder[Option[String]],
      encoder8: ArgEncoder[Option[List[String]]],
      encoder9: ArgEncoder[Option[String]],
      encoder10: ArgEncoder[Option[String]],
      encoder11: ArgEncoder[Option[Boolean]],
      encoder12: ArgEncoder[Option[Boolean]],
      encoder13: ArgEncoder[Option[Boolean]],
      encoder14: ArgEncoder[Option[String]],
      encoder15: ArgEncoder[Option[NegatedEpicFilterInput]],
      encoder16: ArgEncoder[Option[String]],
      encoder17: ArgEncoder[Option[String]],
      encoder18: ArgEncoder[Option[Int]],
      encoder19: ArgEncoder[Option[Int]]
    ): SelectionBuilder[Group, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "epics",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("timeframe", timeframe, "Timeframe")(encoder0),
          Argument("iid", iid, "ID")(encoder1),
          Argument("iids", iids, "[ID!]")(encoder2),
          Argument("state", state, "EpicState")(encoder3),
          Argument("search", search, "String")(encoder4),
          Argument("in", in, "[IssuableSearchableField!]")(encoder5),
          Argument("sort", sort, "EpicSort")(encoder6),
          Argument("authorUsername", authorUsername, "String")(encoder7),
          Argument("labelName", labelName, "[String!]")(encoder8),
          Argument("milestoneTitle", milestoneTitle, "String")(encoder9),
          Argument("iidStartsWith", iidStartsWith, "String")(encoder10),
          Argument("includeAncestorGroups", includeAncestorGroups, "Boolean")(encoder11),
          Argument("includeDescendantGroups", includeDescendantGroups, "Boolean")(encoder12),
          Argument("confidential", confidential, "Boolean")(encoder13),
          Argument("myReactionEmoji", myReactionEmoji, "String")(encoder14),
          Argument("not", not, "NegatedEpicFilterInput")(encoder15),
          Argument("after", after, "String")(encoder16),
          Argument("before", before, "String")(encoder17),
          Argument("first", first, "Int")(encoder18),
          Argument("last", last, "Int")(encoder19)
        )
      )

    /** Indicates if Epics are enabled for namespace
      */
    def epicsEnabled: SelectionBuilder[Group, Option[Boolean]] =
      _root_.caliban.client.SelectionBuilder.Field("epicsEnabled", OptionOf(Scalar()))

    /** Full name of the namespace.
      */
    def fullName: SelectionBuilder[Group, String] = _root_.caliban.client.SelectionBuilder.Field("fullName", Scalar())

    /** Full path of the namespace.
      */
    def fullPath: SelectionBuilder[Group, String] = _root_.caliban.client.SelectionBuilder.Field("fullPath", Scalar())

    /** A membership of a user within this group.
      */
    def groupMembers[A](
      search: Option[String] = None,
      relations: Option[List[GroupMemberRelation]] = None,
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[GroupMemberConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[List[GroupMemberRelation]]],
      encoder2: ArgEncoder[Option[String]],
      encoder3: ArgEncoder[Option[String]],
      encoder4: ArgEncoder[Option[Int]],
      encoder5: ArgEncoder[Option[Int]]
    ): SelectionBuilder[Group, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "groupMembers",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("search", search, "String")(encoder0),
          Argument("relations", relations, "[GroupMemberRelation!]")(encoder1),
          Argument("after", after, "String")(encoder2),
          Argument("before", before, "String")(encoder3),
          Argument("first", first, "Int")(encoder4),
          Argument("last", last, "Int")(encoder5)
        )
      )

    /** ID of the namespace.
      */
    def id: SelectionBuilder[Group, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())

    /** Status of the temporary storage increase.
      */
    def isTemporaryStorageIncreaseEnabled: SelectionBuilder[Group, Boolean] =
      _root_.caliban.client.SelectionBuilder.Field("isTemporaryStorageIncreaseEnabled", Scalar())

    /** Issues for projects in this group.
      */
    def issues[A](
      iid: Option[String] = None,
      iids: Option[List[String]] = None,
      labelName: Option[List[Option[String]]] = None,
      milestoneTitle: Option[List[Option[String]]] = None,
      authorUsername: Option[String] = None,
      assigneeUsernames: Option[List[String]] = None,
      assigneeId: Option[String] = None,
      createdBefore: Option[Time] = None,
      createdAfter: Option[Time] = None,
      updatedBefore: Option[Time] = None,
      updatedAfter: Option[Time] = None,
      closedBefore: Option[Time] = None,
      closedAfter: Option[Time] = None,
      search: Option[String] = None,
      types: Option[List[IssueType]] = None,
      not: Option[NegatedIssueFilterInput] = None,
      state: Option[IssuableState] = None,
      sort: Option[IssueSort] = None,
      iterationId: Option[List[Option[String]]] = None,
      iterationWildcardId: Option[IterationWildcardId] = None,
      epicId: Option[String] = None,
      weight: Option[String] = None,
      includeSubgroups: Option[Boolean] = None,
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[IssueConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[List[String]]],
      encoder2: ArgEncoder[Option[List[Option[String]]]],
      encoder3: ArgEncoder[Option[List[Option[String]]]],
      encoder4: ArgEncoder[Option[String]],
      encoder5: ArgEncoder[Option[List[String]]],
      encoder6: ArgEncoder[Option[String]],
      encoder7: ArgEncoder[Option[Time]],
      encoder8: ArgEncoder[Option[Time]],
      encoder9: ArgEncoder[Option[Time]],
      encoder10: ArgEncoder[Option[Time]],
      encoder11: ArgEncoder[Option[Time]],
      encoder12: ArgEncoder[Option[Time]],
      encoder13: ArgEncoder[Option[String]],
      encoder14: ArgEncoder[Option[List[IssueType]]],
      encoder15: ArgEncoder[Option[NegatedIssueFilterInput]],
      encoder16: ArgEncoder[Option[IssuableState]],
      encoder17: ArgEncoder[Option[IssueSort]],
      encoder18: ArgEncoder[Option[List[Option[String]]]],
      encoder19: ArgEncoder[Option[IterationWildcardId]],
      encoder20: ArgEncoder[Option[String]],
      encoder21: ArgEncoder[Option[String]],
      encoder22: ArgEncoder[Option[Boolean]],
      encoder23: ArgEncoder[Option[String]],
      encoder24: ArgEncoder[Option[String]],
      encoder25: ArgEncoder[Option[Int]],
      encoder26: ArgEncoder[Option[Int]]
    ): SelectionBuilder[Group, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "issues",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("iid", iid, "String")(encoder0),
          Argument("iids", iids, "[String!]")(encoder1),
          Argument("labelName", labelName, "[String]")(encoder2),
          Argument("milestoneTitle", milestoneTitle, "[String]")(encoder3),
          Argument("authorUsername", authorUsername, "String")(encoder4),
          Argument("assigneeUsernames", assigneeUsernames, "[String!]")(encoder5),
          Argument("assigneeId", assigneeId, "String")(encoder6),
          Argument("createdBefore", createdBefore, "Time")(encoder7),
          Argument("createdAfter", createdAfter, "Time")(encoder8),
          Argument("updatedBefore", updatedBefore, "Time")(encoder9),
          Argument("updatedAfter", updatedAfter, "Time")(encoder10),
          Argument("closedBefore", closedBefore, "Time")(encoder11),
          Argument("closedAfter", closedAfter, "Time")(encoder12),
          Argument("search", search, "String")(encoder13),
          Argument("types", types, "[IssueType!]")(encoder14),
          Argument("not", not, "NegatedIssueFilterInput")(encoder15),
          Argument("state", state, "IssuableState")(encoder16),
          Argument("sort", sort, "IssueSort")(encoder17),
          Argument("iterationId", iterationId, "[ID]")(encoder18),
          Argument("iterationWildcardId", iterationWildcardId, "IterationWildcardId")(encoder19),
          Argument("epicId", epicId, "String")(encoder20),
          Argument("weight", weight, "String")(encoder21),
          Argument("includeSubgroups", includeSubgroups, "Boolean")(encoder22),
          Argument("after", after, "String")(encoder23),
          Argument("before", before, "String")(encoder24),
          Argument("first", first, "Int")(encoder25),
          Argument("last", last, "Int")(encoder26)
        )
      )

    /** Find iteration cadences.
      */
    def iterationCadences[A](
      id: Option[IterationsCadenceID] = None,
      title: Option[String] = None,
      durationInWeeks: Option[Int] = None,
      automatic: Option[Boolean] = None,
      active: Option[Boolean] = None,
      includeAncestorGroups: Option[Boolean] = None,
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[IterationCadenceConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[IterationsCadenceID]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Boolean]],
      encoder4: ArgEncoder[Option[Boolean]],
      encoder5: ArgEncoder[Option[Boolean]],
      encoder6: ArgEncoder[Option[String]],
      encoder7: ArgEncoder[Option[String]],
      encoder8: ArgEncoder[Option[Int]],
      encoder9: ArgEncoder[Option[Int]]
    ): SelectionBuilder[Group, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "iterationCadences",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("id", id, "IterationsCadenceID")(encoder0),
          Argument("title", title, "String")(encoder1),
          Argument("durationInWeeks", durationInWeeks, "Int")(encoder2),
          Argument("automatic", automatic, "Boolean")(encoder3),
          Argument("active", active, "Boolean")(encoder4),
          Argument("includeAncestorGroups", includeAncestorGroups, "Boolean")(encoder5),
          Argument("after", after, "String")(encoder6),
          Argument("before", before, "String")(encoder7),
          Argument("first", first, "Int")(encoder8),
          Argument("last", last, "Int")(encoder9)
        )
      )

    /** Find iterations.
      */
    def iterations[A](
      timeframe: Option[Timeframe] = None,
      state: Option[IterationState] = None,
      title: Option[String] = None,
      id: Option[String] = None,
      iid: Option[String] = None,
      includeAncestors: Option[Boolean] = None,
      iterationCadenceIds: Option[List[IterationsCadenceID]] = None,
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[IterationConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[Timeframe]],
      encoder1: ArgEncoder[Option[IterationState]],
      encoder2: ArgEncoder[Option[String]],
      encoder3: ArgEncoder[Option[String]],
      encoder4: ArgEncoder[Option[String]],
      encoder5: ArgEncoder[Option[Boolean]],
      encoder6: ArgEncoder[Option[List[IterationsCadenceID]]],
      encoder7: ArgEncoder[Option[String]],
      encoder8: ArgEncoder[Option[String]],
      encoder9: ArgEncoder[Option[Int]],
      encoder10: ArgEncoder[Option[Int]]
    ): SelectionBuilder[Group, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "iterations",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("timeframe", timeframe, "Timeframe")(encoder0),
          Argument("state", state, "IterationState")(encoder1),
          Argument("title", title, "String")(encoder2),
          Argument("id", id, "ID")(encoder3),
          Argument("iid", iid, "ID")(encoder4),
          Argument("includeAncestors", includeAncestors, "Boolean")(encoder5),
          Argument("iterationCadenceIds", iterationCadenceIds, "[IterationsCadenceID!]")(encoder6),
          Argument("after", after, "String")(encoder7),
          Argument("before", before, "String")(encoder8),
          Argument("first", first, "Int")(encoder9),
          Argument("last", last, "Int")(encoder10)
        )
      )

    /** A label available on this group.
      */
    def label[A](
      title: String
    )(
      innerSelection: SelectionBuilder[Label, A]
    )(
      implicit encoder0: ArgEncoder[String]
    ): SelectionBuilder[Group, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field("label", OptionOf(Obj(innerSelection)), arguments = List(Argument("title", title, "String!")(encoder0)))

    /** Labels available on this group.
      */
    def labels[A](
      searchTerm: Option[String] = None,
      includeAncestorGroups: Option[Boolean] = None,
      includeDescendantGroups: Option[Boolean] = None,
      onlyGroupLabels: Option[Boolean] = None,
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[LabelConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[Boolean]],
      encoder2: ArgEncoder[Option[Boolean]],
      encoder3: ArgEncoder[Option[Boolean]],
      encoder4: ArgEncoder[Option[String]],
      encoder5: ArgEncoder[Option[String]],
      encoder6: ArgEncoder[Option[Int]],
      encoder7: ArgEncoder[Option[Int]]
    ): SelectionBuilder[Group, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "labels",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("searchTerm", searchTerm, "String")(encoder0),
          Argument("includeAncestorGroups", includeAncestorGroups, "Boolean")(encoder1),
          Argument("includeDescendantGroups", includeDescendantGroups, "Boolean")(encoder2),
          Argument("onlyGroupLabels", onlyGroupLabels, "Boolean")(encoder3),
          Argument("after", after, "String")(encoder4),
          Argument("before", before, "String")(encoder5),
          Argument("first", first, "Int")(encoder6),
          Argument("last", last, "Int")(encoder7)
        )
      )

    /** Indicates if Large File Storage (LFS) is enabled for namespace.
      */
    def lfsEnabled: SelectionBuilder[Group, Option[Boolean]] =
      _root_.caliban.client.SelectionBuilder.Field("lfsEnabled", OptionOf(Scalar()))

    /** Indicates if a group is disabled from getting mentioned.
      */
    def mentionsDisabled: SelectionBuilder[Group, Option[Boolean]] =
      _root_.caliban.client.SelectionBuilder.Field("mentionsDisabled", OptionOf(Scalar()))

    /** Merge requests for projects in this group.
      */
    def mergeRequests[A](
      iids: Option[List[String]] = None,
      sourceBranches: Option[List[String]] = None,
      targetBranches: Option[List[String]] = None,
      state: Option[MergeRequestState] = None,
      labels: Option[List[String]] = None,
      mergedAfter: Option[Time] = None,
      mergedBefore: Option[Time] = None,
      milestoneTitle: Option[String] = None,
      sort: Option[MergeRequestSort] = None,
      not: Option[MergeRequestsResolverNegatedParams] = None,
      includeSubgroups: Option[Boolean] = None,
      assigneeUsername: Option[String] = None,
      authorUsername: Option[String] = None,
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[MergeRequestConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[List[String]]],
      encoder1: ArgEncoder[Option[List[String]]],
      encoder2: ArgEncoder[Option[List[String]]],
      encoder3: ArgEncoder[Option[MergeRequestState]],
      encoder4: ArgEncoder[Option[List[String]]],
      encoder5: ArgEncoder[Option[Time]],
      encoder6: ArgEncoder[Option[Time]],
      encoder7: ArgEncoder[Option[String]],
      encoder8: ArgEncoder[Option[MergeRequestSort]],
      encoder9: ArgEncoder[Option[MergeRequestsResolverNegatedParams]],
      encoder10: ArgEncoder[Option[Boolean]],
      encoder11: ArgEncoder[Option[String]],
      encoder12: ArgEncoder[Option[String]],
      encoder13: ArgEncoder[Option[String]],
      encoder14: ArgEncoder[Option[String]],
      encoder15: ArgEncoder[Option[Int]],
      encoder16: ArgEncoder[Option[Int]]
    ): SelectionBuilder[Group, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "mergeRequests",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("iids", iids, "[String!]")(encoder0),
          Argument("sourceBranches", sourceBranches, "[String!]")(encoder1),
          Argument("targetBranches", targetBranches, "[String!]")(encoder2),
          Argument("state", state, "MergeRequestState")(encoder3),
          Argument("labels", labels, "[String!]")(encoder4),
          Argument("mergedAfter", mergedAfter, "Time")(encoder5),
          Argument("mergedBefore", mergedBefore, "Time")(encoder6),
          Argument("milestoneTitle", milestoneTitle, "String")(encoder7),
          Argument("sort", sort, "MergeRequestSort")(encoder8),
          Argument("not", not, "MergeRequestsResolverNegatedParams")(encoder9),
          Argument("includeSubgroups", includeSubgroups, "Boolean")(encoder10),
          Argument("assigneeUsername", assigneeUsername, "String")(encoder11),
          Argument("authorUsername", authorUsername, "String")(encoder12),
          Argument("after", after, "String")(encoder13),
          Argument("before", before, "String")(encoder14),
          Argument("first", first, "Int")(encoder15),
          Argument("last", last, "Int")(encoder16)
        )
      )

    /** Milestones of the group.
      */
    def milestones[A](
      timeframe: Option[Timeframe] = None,
      ids: Option[List[String]] = None,
      state: Option[MilestoneStateEnum] = None,
      title: Option[String] = None,
      searchTitle: Option[String] = None,
      containingDate: Option[Time] = None,
      sort: Option[MilestoneSort] = None,
      includeDescendants: Option[Boolean] = None,
      includeAncestors: Option[Boolean] = None,
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[MilestoneConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[Timeframe]],
      encoder1: ArgEncoder[Option[List[String]]],
      encoder2: ArgEncoder[Option[MilestoneStateEnum]],
      encoder3: ArgEncoder[Option[String]],
      encoder4: ArgEncoder[Option[String]],
      encoder5: ArgEncoder[Option[Time]],
      encoder6: ArgEncoder[Option[MilestoneSort]],
      encoder7: ArgEncoder[Option[Boolean]],
      encoder8: ArgEncoder[Option[Boolean]],
      encoder9: ArgEncoder[Option[String]],
      encoder10: ArgEncoder[Option[String]],
      encoder11: ArgEncoder[Option[Int]],
      encoder12: ArgEncoder[Option[Int]]
    ): SelectionBuilder[Group, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "milestones",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("timeframe", timeframe, "Timeframe")(encoder0),
          Argument("ids", ids, "[ID!]")(encoder1),
          Argument("state", state, "MilestoneStateEnum")(encoder2),
          Argument("title", title, "String")(encoder3),
          Argument("searchTitle", searchTitle, "String")(encoder4),
          Argument("containingDate", containingDate, "Time")(encoder5),
          Argument("sort", sort, "MilestoneSort")(encoder6),
          Argument("includeDescendants", includeDescendants, "Boolean")(encoder7),
          Argument("includeAncestors", includeAncestors, "Boolean")(encoder8),
          Argument("after", after, "String")(encoder9),
          Argument("before", before, "String")(encoder10),
          Argument("first", first, "Int")(encoder11),
          Argument("last", last, "Int")(encoder12)
        )
      )

    /** Name of the namespace.
      */
    def name: SelectionBuilder[Group, String] = _root_.caliban.client.SelectionBuilder.Field("name", Scalar())

    /** The package settings for the namespace.
      */
    def packageSettings[A](innerSelection: SelectionBuilder[PackageSettings, A]): SelectionBuilder[Group, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("packageSettings", OptionOf(Obj(innerSelection)))

    /** Packages of the group.
      */
    def packages[A](
      sort: Option[PackageGroupSort] = None,
      packageName: Option[String] = None,
      packageType: Option[PackageTypeEnum] = None,
      status: Option[PackageStatus] = None,
      includeVersionless: Option[Boolean] = None,
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[PackageConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[PackageGroupSort]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[PackageTypeEnum]],
      encoder3: ArgEncoder[Option[PackageStatus]],
      encoder4: ArgEncoder[Option[Boolean]],
      encoder5: ArgEncoder[Option[String]],
      encoder6: ArgEncoder[Option[String]],
      encoder7: ArgEncoder[Option[Int]],
      encoder8: ArgEncoder[Option[Int]]
    ): SelectionBuilder[Group, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "packages",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("sort", sort, "PackageGroupSort")(encoder0),
          Argument("packageName", packageName, "String")(encoder1),
          Argument("packageType", packageType, "PackageTypeEnum")(encoder2),
          Argument("status", status, "PackageStatus")(encoder3),
          Argument("includeVersionless", includeVersionless, "Boolean")(encoder4),
          Argument("after", after, "String")(encoder5),
          Argument("before", before, "String")(encoder6),
          Argument("first", first, "Int")(encoder7),
          Argument("last", last, "Int")(encoder8)
        )
      )

    /** Parent group.
      */
    def parent[A](innerSelection: SelectionBuilder[Group, A]): SelectionBuilder[Group, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("parent", OptionOf(Obj(innerSelection)))

    /** Path of the namespace.
      */
    def path: SelectionBuilder[Group, String] = _root_.caliban.client.SelectionBuilder.Field("path", Scalar())

    /** The permission level required to create projects in the group.
      */
    def projectCreationLevel: SelectionBuilder[Group, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("projectCreationLevel", OptionOf(Scalar()))

    /** Projects within this namespace.
      */
    def projects[A](
      includeSubgroups: Option[Boolean] = None,
      search: Option[String] = None,
      sort: Option[NamespaceProjectSort] = None,
      ids: Option[List[String]] = None,
      hasCodeCoverage: Option[Boolean] = None,
      hasVulnerabilities: Option[Boolean] = None,
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[ProjectConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[Boolean]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[NamespaceProjectSort]],
      encoder3: ArgEncoder[Option[List[String]]],
      encoder4: ArgEncoder[Option[Boolean]],
      encoder5: ArgEncoder[Option[Boolean]],
      encoder6: ArgEncoder[Option[String]],
      encoder7: ArgEncoder[Option[String]],
      encoder8: ArgEncoder[Option[Int]],
      encoder9: ArgEncoder[Option[Int]]
    ): SelectionBuilder[Group, A] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "projects",
        Obj(innerSelection),
        arguments = List(
          Argument("includeSubgroups", includeSubgroups, "Boolean")(encoder0),
          Argument("search", search, "String")(encoder1),
          Argument("sort", sort, "NamespaceProjectSort")(encoder2),
          Argument("ids", ids, "[ID!]")(encoder3),
          Argument("hasCodeCoverage", hasCodeCoverage, "Boolean")(encoder4),
          Argument("hasVulnerabilities", hasVulnerabilities, "Boolean")(encoder5),
          Argument("after", after, "String")(encoder6),
          Argument("before", before, "String")(encoder7),
          Argument("first", first, "Int")(encoder8),
          Argument("last", last, "Int")(encoder9)
        )
      )

    /** Number of projects in the root namespace where the repository size exceeds the limit.
      */
    def repositorySizeExcessProjectCount: SelectionBuilder[Group, Int] =
      _root_.caliban.client.SelectionBuilder.Field("repositorySizeExcessProjectCount", Scalar())

    /** Indicates if users can request access to namespace.
      */
    def requestAccessEnabled: SelectionBuilder[Group, Option[Boolean]] =
      _root_.caliban.client.SelectionBuilder.Field("requestAccessEnabled", OptionOf(Scalar()))

    /** Indicates if all users in this group are required to set up two-factor authentication.
      */
    def requireTwoFactorAuthentication: SelectionBuilder[Group, Option[Boolean]] =
      _root_.caliban.client.SelectionBuilder.Field("requireTwoFactorAuthentication", OptionOf(Scalar()))

    /** Aggregated storage statistics of the namespace. Only available for root namespaces.
      */
    def rootStorageStatistics[A](innerSelection: SelectionBuilder[RootStorageStatistics, A]): SelectionBuilder[Group, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("rootStorageStatistics", OptionOf(Obj(innerSelection)))

    /** Indicates if sharing a project with another group within this group is prevented.
      */
    def shareWithGroupLock: SelectionBuilder[Group, Option[Boolean]] =
      _root_.caliban.client.SelectionBuilder.Field("shareWithGroupLock", OptionOf(Scalar()))

    /** Group statistics.
      */
    def stats[A](innerSelection: SelectionBuilder[GroupStats, A]): SelectionBuilder[Group, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("stats", OptionOf(Obj(innerSelection)))

    /** Total storage limit of the root namespace in bytes.
      */
    def storageSizeLimit: SelectionBuilder[Group, Option[Double]] =
      _root_.caliban.client.SelectionBuilder.Field("storageSizeLimit", OptionOf(Scalar()))

    /** The permission level required to create subgroups within the group.
      */
    def subgroupCreationLevel: SelectionBuilder[Group, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("subgroupCreationLevel", OptionOf(Scalar()))

    /** Date until the temporary storage increase is active.
      */
    def temporaryStorageIncreaseEndsOn: SelectionBuilder[Group, Option[Time]] =
      _root_.caliban.client.SelectionBuilder.Field("temporaryStorageIncreaseEndsOn", OptionOf(Scalar()))

    /** Time logged on issues and merge requests in the group and its subgroups.
      */
    def timelogs[A](
      startDate: Option[Time] = None,
      endDate: Option[Time] = None,
      startTime: Option[Time] = None,
      endTime: Option[Time] = None,
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[TimelogConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[Time]],
      encoder1: ArgEncoder[Option[Time]],
      encoder2: ArgEncoder[Option[Time]],
      encoder3: ArgEncoder[Option[Time]],
      encoder4: ArgEncoder[Option[String]],
      encoder5: ArgEncoder[Option[String]],
      encoder6: ArgEncoder[Option[Int]],
      encoder7: ArgEncoder[Option[Int]]
    ): SelectionBuilder[Group, A] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "timelogs",
        Obj(innerSelection),
        arguments = List(
          Argument("startDate", startDate, "Time")(encoder0),
          Argument("endDate", endDate, "Time")(encoder1),
          Argument("startTime", startTime, "Time")(encoder2),
          Argument("endTime", endTime, "Time")(encoder3),
          Argument("after", after, "String")(encoder4),
          Argument("before", before, "String")(encoder5),
          Argument("first", first, "Int")(encoder6),
          Argument("last", last, "Int")(encoder7)
        )
      )

    /** Total repository size of all projects in the root namespace in bytes.
      */
    def totalRepositorySize: SelectionBuilder[Group, Option[Double]] =
      _root_.caliban.client.SelectionBuilder.Field("totalRepositorySize", OptionOf(Scalar()))

    /** Total excess repository size of all projects in the root namespace in bytes.
      */
    def totalRepositorySizeExcess: SelectionBuilder[Group, Option[Double]] =
      _root_.caliban.client.SelectionBuilder.Field("totalRepositorySizeExcess", OptionOf(Scalar()))

    /** Time before two-factor authentication is enforced.
      */
    def twoFactorGracePeriod: SelectionBuilder[Group, Option[Int]] =
      _root_.caliban.client.SelectionBuilder.Field("twoFactorGracePeriod", OptionOf(Scalar()))

    /** Permissions for the current user on the resource
      */
    def userPermissions[A](innerSelection: SelectionBuilder[GroupPermissions, A]): SelectionBuilder[Group, A] =
      _root_.caliban.client.SelectionBuilder.Field("userPermissions", Obj(innerSelection))

    /** Visibility of the namespace.
      */
    def visibility: SelectionBuilder[Group, Option[String]] = _root_.caliban.client.SelectionBuilder.Field("visibility", OptionOf(Scalar()))

    /** Vulnerabilities reported on the projects in the group and its subgroups.
      */
    def vulnerabilities[A](
      projectId: Option[List[String]] = None,
      reportType: Option[List[VulnerabilityReportType]] = None,
      severity: Option[List[VulnerabilitySeverity]] = None,
      state: Option[List[VulnerabilityState]] = None,
      scanner: Option[List[String]] = None,
      scannerId: Option[List[VulnerabilitiesScannerID]] = None,
      sort: Option[VulnerabilitySort] = None,
      hasResolution: Option[Boolean] = None,
      hasIssues: Option[Boolean] = None,
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[VulnerabilityConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[List[String]]],
      encoder1: ArgEncoder[Option[List[VulnerabilityReportType]]],
      encoder2: ArgEncoder[Option[List[VulnerabilitySeverity]]],
      encoder3: ArgEncoder[Option[List[VulnerabilityState]]],
      encoder4: ArgEncoder[Option[List[String]]],
      encoder5: ArgEncoder[Option[List[VulnerabilitiesScannerID]]],
      encoder6: ArgEncoder[Option[VulnerabilitySort]],
      encoder7: ArgEncoder[Option[Boolean]],
      encoder8: ArgEncoder[Option[Boolean]],
      encoder9: ArgEncoder[Option[String]],
      encoder10: ArgEncoder[Option[String]],
      encoder11: ArgEncoder[Option[Int]],
      encoder12: ArgEncoder[Option[Int]]
    ): SelectionBuilder[Group, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "vulnerabilities",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("projectId", projectId, "[ID!]")(encoder0),
          Argument("reportType", reportType, "[VulnerabilityReportType!]")(encoder1),
          Argument("severity", severity, "[VulnerabilitySeverity!]")(encoder2),
          Argument("state", state, "[VulnerabilityState!]")(encoder3),
          Argument("scanner", scanner, "[String!]")(encoder4),
          Argument("scannerId", scannerId, "[VulnerabilitiesScannerID!]")(encoder5),
          Argument("sort", sort, "VulnerabilitySort")(encoder6),
          Argument("hasResolution", hasResolution, "Boolean")(encoder7),
          Argument("hasIssues", hasIssues, "Boolean")(encoder8),
          Argument("after", after, "String")(encoder9),
          Argument("before", before, "String")(encoder10),
          Argument("first", first, "Int")(encoder11),
          Argument("last", last, "Int")(encoder12)
        )
      )

    /** Number of vulnerabilities per day for the projects in the group and its subgroups.
      */
    def vulnerabilitiesCountByDay[A](
      startDate: ISO8601Date,
      endDate: ISO8601Date,
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[VulnerabilitiesCountByDayConnection, A]
    )(
      implicit encoder0: ArgEncoder[ISO8601Date],
      encoder1: ArgEncoder[ISO8601Date],
      encoder2: ArgEncoder[Option[String]],
      encoder3: ArgEncoder[Option[String]],
      encoder4: ArgEncoder[Option[Int]],
      encoder5: ArgEncoder[Option[Int]]
    ): SelectionBuilder[Group, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "vulnerabilitiesCountByDay",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("startDate", startDate, "ISO8601Date!")(encoder0),
          Argument("endDate", endDate, "ISO8601Date!")(encoder1),
          Argument("after", after, "String")(encoder2),
          Argument("before", before, "String")(encoder3),
          Argument("first", first, "Int")(encoder4),
          Argument("last", last, "Int")(encoder5)
        )
      )

    /** Represents vulnerable project counts for each grade.
      */
    def vulnerabilityGrades[A](
      includeSubgroups: Option[Boolean] = None
    )(
      innerSelection: SelectionBuilder[VulnerableProjectsByGrade, A]
    )(
      implicit encoder0: ArgEncoder[Option[Boolean]]
    ): SelectionBuilder[Group, List[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "vulnerabilityGrades",
        ListOf(Obj(innerSelection)),
        arguments = List(Argument("includeSubgroups", includeSubgroups, "Boolean")(encoder0))
      )

    /** Vulnerability scanners reported on the project vulnerabilities of the group and its subgroups.
      */
    def vulnerabilityScanners[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[VulnerabilityScannerConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[Group, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "vulnerabilityScanners",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** Counts for each vulnerability severity in the group and its subgroups.
      */
    def vulnerabilitySeveritiesCount[A](
      projectId: Option[List[String]] = None,
      reportType: Option[List[VulnerabilityReportType]] = None,
      severity: Option[List[VulnerabilitySeverity]] = None,
      state: Option[List[VulnerabilityState]] = None,
      scanner: Option[List[String]] = None,
      scannerId: Option[List[VulnerabilitiesScannerID]] = None,
      hasIssues: Option[Boolean] = None,
      hasResolution: Option[Boolean] = None
    )(
      innerSelection: SelectionBuilder[VulnerabilitySeveritiesCount, A]
    )(
      implicit encoder0: ArgEncoder[Option[List[String]]],
      encoder1: ArgEncoder[Option[List[VulnerabilityReportType]]],
      encoder2: ArgEncoder[Option[List[VulnerabilitySeverity]]],
      encoder3: ArgEncoder[Option[List[VulnerabilityState]]],
      encoder4: ArgEncoder[Option[List[String]]],
      encoder5: ArgEncoder[Option[List[VulnerabilitiesScannerID]]],
      encoder6: ArgEncoder[Option[Boolean]],
      encoder7: ArgEncoder[Option[Boolean]]
    ): SelectionBuilder[Group, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "vulnerabilitySeveritiesCount",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("projectId", projectId, "[ID!]")(encoder0),
          Argument("reportType", reportType, "[VulnerabilityReportType!]")(encoder1),
          Argument("severity", severity, "[VulnerabilitySeverity!]")(encoder2),
          Argument("state", state, "[VulnerabilityState!]")(encoder3),
          Argument("scanner", scanner, "[String!]")(encoder4),
          Argument("scannerId", scannerId, "[VulnerabilitiesScannerID!]")(encoder5),
          Argument("hasIssues", hasIssues, "Boolean")(encoder6),
          Argument("hasResolution", hasResolution, "Boolean")(encoder7)
        )
      )

    /** Web URL of the group.
      */
    def webUrl: SelectionBuilder[Group, String] = _root_.caliban.client.SelectionBuilder.Field("webUrl", Scalar())
  }

  type GroupMember

  object GroupMember {

    /** GitLab::Access level.
      */
    def accessLevel[A](innerSelection: SelectionBuilder[AccessLevel, A]): SelectionBuilder[GroupMember, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("accessLevel", OptionOf(Obj(innerSelection)))

    /** Date and time the membership was created.
      */
    def createdAt: SelectionBuilder[GroupMember, Option[Time]] =
      _root_.caliban.client.SelectionBuilder.Field("createdAt", OptionOf(Scalar()))

    /** User that authorized membership.
      */
    def createdBy[A](innerSelection: SelectionBuilder[UserCore, A]): SelectionBuilder[GroupMember, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("createdBy", OptionOf(Obj(innerSelection)))

    /** Date and time the membership expires.
      */
    def expiresAt: SelectionBuilder[GroupMember, Option[Time]] =
      _root_.caliban.client.SelectionBuilder.Field("expiresAt", OptionOf(Scalar()))

    /** Group that a User is a member of.
      */
    def group[A](innerSelection: SelectionBuilder[Group, A]): SelectionBuilder[GroupMember, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("group", OptionOf(Obj(innerSelection)))

    /** ID of the member.
      */
    def id: SelectionBuilder[GroupMember, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())

    /** Date and time the membership was last updated.
      */
    def updatedAt: SelectionBuilder[GroupMember, Option[Time]] =
      _root_.caliban.client.SelectionBuilder.Field("updatedAt", OptionOf(Scalar()))

    /** User that is associated with the member object.
      */
    def user[A](innerSelection: SelectionBuilder[UserCore, A]): SelectionBuilder[GroupMember, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("user", OptionOf(Obj(innerSelection)))

    /** Permissions for the current user on the resource
      */
    def userPermissions[A](innerSelection: SelectionBuilder[GroupPermissions, A]): SelectionBuilder[GroupMember, A] =
      _root_.caliban.client.SelectionBuilder.Field("userPermissions", Obj(innerSelection))
  }

  type GroupMemberConnection

  object GroupMemberConnection {

    /** A list of edges.
      */
    def edges[A](innerSelection: SelectionBuilder[GroupMemberEdge, A]): SelectionBuilder[GroupMemberConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](innerSelection: SelectionBuilder[GroupMember, A]): SelectionBuilder[GroupMemberConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[GroupMemberConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  }

  type GroupMemberEdge

  object GroupMemberEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[GroupMemberEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](innerSelection: SelectionBuilder[GroupMember, A]): SelectionBuilder[GroupMemberEdge, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
  }

  type GroupPermissions

  object GroupPermissions {

    /** Indicates the user can perform `read_group` on this resource
      */
    def readGroup: SelectionBuilder[GroupPermissions, Boolean] = _root_.caliban.client.SelectionBuilder.Field("readGroup", Scalar())
  }

  type GroupReleaseStats

  object GroupReleaseStats {

    /** Total number of releases in all descendant projects of the group.
      */
    def releasesCount: SelectionBuilder[GroupReleaseStats, Option[Int]] =
      _root_.caliban.client.SelectionBuilder.Field("releasesCount", OptionOf(Scalar()))

    /** Percentage of the group's descendant projects that have at least one release.
      */
    def releasesPercentage: SelectionBuilder[GroupReleaseStats, Option[Int]] =
      _root_.caliban.client.SelectionBuilder.Field("releasesPercentage", OptionOf(Scalar()))
  }

  type GroupStats

  object GroupStats {

    /** Statistics related to releases within the group.
      */
    def releaseStats[A](innerSelection: SelectionBuilder[GroupReleaseStats, A]): SelectionBuilder[GroupStats, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("releaseStats", OptionOf(Obj(innerSelection)))
  }

  type GroupWikiRepositoryRegistry

  object GroupWikiRepositoryRegistry {

    /** Timestamp when the GroupWikiRepositoryRegistry was created
      */
    def createdAt: SelectionBuilder[GroupWikiRepositoryRegistry, Option[Time]] =
      _root_.caliban.client.SelectionBuilder.Field("createdAt", OptionOf(Scalar()))

    /** ID of the Group Wiki Repository.
      */
    def groupWikiRepositoryId: SelectionBuilder[GroupWikiRepositoryRegistry, String] =
      _root_.caliban.client.SelectionBuilder.Field("groupWikiRepositoryId", Scalar())

    /** ID of the GroupWikiRepositoryRegistry
      */
    def id: SelectionBuilder[GroupWikiRepositoryRegistry, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())

    /** Error message during sync of the GroupWikiRepositoryRegistry
      */
    def lastSyncFailure: SelectionBuilder[GroupWikiRepositoryRegistry, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("lastSyncFailure", OptionOf(Scalar()))

    /** Timestamp of the most recent successful sync of the GroupWikiRepositoryRegistry
      */
    def lastSyncedAt: SelectionBuilder[GroupWikiRepositoryRegistry, Option[Time]] =
      _root_.caliban.client.SelectionBuilder.Field("lastSyncedAt", OptionOf(Scalar()))

    /** Timestamp after which the GroupWikiRepositoryRegistry should be resynced
      */
    def retryAt: SelectionBuilder[GroupWikiRepositoryRegistry, Option[Time]] =
      _root_.caliban.client.SelectionBuilder.Field("retryAt", OptionOf(Scalar()))

    /** Number of consecutive failed sync attempts of the GroupWikiRepositoryRegistry
      */
    def retryCount: SelectionBuilder[GroupWikiRepositoryRegistry, Option[Int]] =
      _root_.caliban.client.SelectionBuilder.Field("retryCount", OptionOf(Scalar()))

    /** Sync state of the GroupWikiRepositoryRegistry
      */
    def state: SelectionBuilder[GroupWikiRepositoryRegistry, Option[RegistryState]] =
      _root_.caliban.client.SelectionBuilder.Field("state", OptionOf(Scalar()))
  }

  type GroupWikiRepositoryRegistryConnection

  object GroupWikiRepositoryRegistryConnection {

    /** A list of edges.
      */
    def edges[A](
      innerSelection: SelectionBuilder[GroupWikiRepositoryRegistryEdge, A]
    ): SelectionBuilder[GroupWikiRepositoryRegistryConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](
      innerSelection: SelectionBuilder[GroupWikiRepositoryRegistry, A]
    ): SelectionBuilder[GroupWikiRepositoryRegistryConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[GroupWikiRepositoryRegistryConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  }

  type GroupWikiRepositoryRegistryEdge

  object GroupWikiRepositoryRegistryEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[GroupWikiRepositoryRegistryEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](
      innerSelection: SelectionBuilder[GroupWikiRepositoryRegistry, A]
    ): SelectionBuilder[GroupWikiRepositoryRegistryEdge, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))

  }

  type HttpIntegrationCreatePayload

  object HttpIntegrationCreatePayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[HttpIntegrationCreatePayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[HttpIntegrationCreatePayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** The HTTP integration.
      */
    def integration[A](
      innerSelection: SelectionBuilder[AlertManagementHttpIntegration, A]
    ): SelectionBuilder[HttpIntegrationCreatePayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("integration", OptionOf(Obj(innerSelection)))

  }

  type HttpIntegrationDestroyPayload

  object HttpIntegrationDestroyPayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[HttpIntegrationDestroyPayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[HttpIntegrationDestroyPayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** The HTTP integration.
      */
    def integration[A](
      innerSelection: SelectionBuilder[AlertManagementHttpIntegration, A]
    ): SelectionBuilder[HttpIntegrationDestroyPayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("integration", OptionOf(Obj(innerSelection)))

  }

  type HttpIntegrationResetTokenPayload

  object HttpIntegrationResetTokenPayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[HttpIntegrationResetTokenPayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[HttpIntegrationResetTokenPayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** The HTTP integration.
      */
    def integration[A](
      innerSelection: SelectionBuilder[AlertManagementHttpIntegration, A]
    ): SelectionBuilder[HttpIntegrationResetTokenPayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("integration", OptionOf(Obj(innerSelection)))

  }

  type HttpIntegrationUpdatePayload

  object HttpIntegrationUpdatePayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[HttpIntegrationUpdatePayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[HttpIntegrationUpdatePayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** The HTTP integration.
      */
    def integration[A](
      innerSelection: SelectionBuilder[AlertManagementHttpIntegration, A]
    ): SelectionBuilder[HttpIntegrationUpdatePayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("integration", OptionOf(Obj(innerSelection)))

  }

  type IncidentManagementOncallRotation

  object IncidentManagementOncallRotation {

    /** Active period for the on-call rotation.
      */
    def activePeriod[A](
      innerSelection: SelectionBuilder[OncallRotationActivePeriodType, A]
    ): SelectionBuilder[IncidentManagementOncallRotation, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("activePeriod", OptionOf(Obj(innerSelection)))

    /** End date and time of the on-call rotation.
      */
    def endsAt: SelectionBuilder[IncidentManagementOncallRotation, Option[Time]] =
      _root_.caliban.client.SelectionBuilder.Field("endsAt", OptionOf(Scalar()))

    /** ID of the on-call rotation.
      */
    def id: SelectionBuilder[IncidentManagementOncallRotation, IncidentManagementOncallRotationID] =
      _root_.caliban.client.SelectionBuilder.Field("id", Scalar())

    /** Length of the on-call schedule, in the units specified by lengthUnit.
      */
    def length: SelectionBuilder[IncidentManagementOncallRotation, Option[Int]] =
      _root_.caliban.client.SelectionBuilder.Field("length", OptionOf(Scalar()))

    /** Unit of the on-call rotation length.
      */
    def lengthUnit: SelectionBuilder[IncidentManagementOncallRotation, Option[OncallRotationUnitEnum]] =
      _root_.caliban.client.SelectionBuilder.Field("lengthUnit", OptionOf(Scalar()))

    /** Name of the on-call rotation.
      */
    def name: SelectionBuilder[IncidentManagementOncallRotation, String] = _root_.caliban.client.SelectionBuilder.Field("name", Scalar())

    /** Participants of the on-call rotation.
      */
    def participants[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[OncallParticipantTypeConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[IncidentManagementOncallRotation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "participants",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** Blocks of time for which a participant is on-call within a given time frame. Time frame cannot exceed one month.
      */
    def shifts[A](
      startTime: Time,
      endTime: Time,
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[IncidentManagementOncallShiftConnection, A]
    )(
      implicit encoder0: ArgEncoder[Time],
      encoder1: ArgEncoder[Time],
      encoder2: ArgEncoder[Option[String]],
      encoder3: ArgEncoder[Option[String]],
      encoder4: ArgEncoder[Option[Int]],
      encoder5: ArgEncoder[Option[Int]]
    ): SelectionBuilder[IncidentManagementOncallRotation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "shifts",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("startTime", startTime, "Time!")(encoder0),
          Argument("endTime", endTime, "Time!")(encoder1),
          Argument("after", after, "String")(encoder2),
          Argument("before", before, "String")(encoder3),
          Argument("first", first, "Int")(encoder4),
          Argument("last", last, "Int")(encoder5)
        )
      )

    /** Start date of the on-call rotation.
      */
    def startsAt: SelectionBuilder[IncidentManagementOncallRotation, Option[Time]] =
      _root_.caliban.client.SelectionBuilder.Field("startsAt", OptionOf(Scalar()))
  }

  type IncidentManagementOncallRotationConnection

  object IncidentManagementOncallRotationConnection {

    /** A list of edges.
      */
    def edges[A](
      innerSelection: SelectionBuilder[IncidentManagementOncallRotationEdge, A]
    ): SelectionBuilder[IncidentManagementOncallRotationConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](
      innerSelection: SelectionBuilder[IncidentManagementOncallRotation, A]
    ): SelectionBuilder[IncidentManagementOncallRotationConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[IncidentManagementOncallRotationConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  }

  type IncidentManagementOncallRotationEdge

  object IncidentManagementOncallRotationEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[IncidentManagementOncallRotationEdge, String] =
      _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](
      innerSelection: SelectionBuilder[IncidentManagementOncallRotation, A]
    ): SelectionBuilder[IncidentManagementOncallRotationEdge, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))

  }

  type IncidentManagementOncallSchedule

  object IncidentManagementOncallSchedule {

    /** Description of the on-call schedule.
      */
    def description: SelectionBuilder[IncidentManagementOncallSchedule, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("description", OptionOf(Scalar()))

    /** Internal ID of the on-call schedule.
      */
    def iid: SelectionBuilder[IncidentManagementOncallSchedule, String] = _root_.caliban.client.SelectionBuilder.Field("iid", Scalar())

    /** Name of the on-call schedule.
      */
    def name: SelectionBuilder[IncidentManagementOncallSchedule, String] = _root_.caliban.client.SelectionBuilder.Field("name", Scalar())

    /** On-call rotation for the on-call schedule.
      */
    def rotation[A](
      id: IncidentManagementOncallRotationID
    )(
      innerSelection: SelectionBuilder[IncidentManagementOncallRotation, A]
    )(
      implicit encoder0: ArgEncoder[IncidentManagementOncallRotationID]
    ): SelectionBuilder[IncidentManagementOncallSchedule, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "rotation",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("id", id, "IncidentManagementOncallRotationID!")(encoder0))
      )

    /** On-call rotations for the on-call schedule.
      */
    def rotations[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[IncidentManagementOncallRotationConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[IncidentManagementOncallSchedule, A] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "rotations",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** Time zone of the on-call schedule.
      */
    def timezone: SelectionBuilder[IncidentManagementOncallSchedule, String] =
      _root_.caliban.client.SelectionBuilder.Field("timezone", Scalar())
  }

  type IncidentManagementOncallScheduleConnection

  object IncidentManagementOncallScheduleConnection {

    /** A list of edges.
      */
    def edges[A](
      innerSelection: SelectionBuilder[IncidentManagementOncallScheduleEdge, A]
    ): SelectionBuilder[IncidentManagementOncallScheduleConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](
      innerSelection: SelectionBuilder[IncidentManagementOncallSchedule, A]
    ): SelectionBuilder[IncidentManagementOncallScheduleConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[IncidentManagementOncallScheduleConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  }

  type IncidentManagementOncallScheduleEdge

  object IncidentManagementOncallScheduleEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[IncidentManagementOncallScheduleEdge, String] =
      _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](
      innerSelection: SelectionBuilder[IncidentManagementOncallSchedule, A]
    ): SelectionBuilder[IncidentManagementOncallScheduleEdge, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))

  }

  type IncidentManagementOncallShift

  object IncidentManagementOncallShift {

    /** End time of the on-call shift.
      */
    def endsAt: SelectionBuilder[IncidentManagementOncallShift, Option[Time]] =
      _root_.caliban.client.SelectionBuilder.Field("endsAt", OptionOf(Scalar()))

    /** Participant assigned to the on-call shift.
      */
    def participant[A](
      innerSelection: SelectionBuilder[OncallParticipantType, A]
    ): SelectionBuilder[IncidentManagementOncallShift, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("participant", OptionOf(Obj(innerSelection)))

    /** Start time of the on-call shift.
      */
    def startsAt: SelectionBuilder[IncidentManagementOncallShift, Option[Time]] =
      _root_.caliban.client.SelectionBuilder.Field("startsAt", OptionOf(Scalar()))
  }

  type IncidentManagementOncallShiftConnection

  object IncidentManagementOncallShiftConnection {

    /** A list of edges.
      */
    def edges[A](
      innerSelection: SelectionBuilder[IncidentManagementOncallShiftEdge, A]
    ): SelectionBuilder[IncidentManagementOncallShiftConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](
      innerSelection: SelectionBuilder[IncidentManagementOncallShift, A]
    ): SelectionBuilder[IncidentManagementOncallShiftConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[IncidentManagementOncallShiftConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  }

  type IncidentManagementOncallShiftEdge

  object IncidentManagementOncallShiftEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[IncidentManagementOncallShiftEdge, String] =
      _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](
      innerSelection: SelectionBuilder[IncidentManagementOncallShift, A]
    ): SelectionBuilder[IncidentManagementOncallShiftEdge, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))

  }

  type InstanceSecurityDashboard

  object InstanceSecurityDashboard {

    /** Projects selected in Instance Security Dashboard.
      */
    def projects[A](
      search: Option[String] = None,
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[ProjectConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[String]],
      encoder3: ArgEncoder[Option[Int]],
      encoder4: ArgEncoder[Option[Int]]
    ): SelectionBuilder[InstanceSecurityDashboard, A] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "projects",
        Obj(innerSelection),
        arguments = List(
          Argument("search", search, "String")(encoder0),
          Argument("after", after, "String")(encoder1),
          Argument("before", before, "String")(encoder2),
          Argument("first", first, "Int")(encoder3),
          Argument("last", last, "Int")(encoder4)
        )
      )

    /** Represents vulnerable project counts for each grade.
      */
    def vulnerabilityGrades[A](
      innerSelection: SelectionBuilder[VulnerableProjectsByGrade, A]
    ): SelectionBuilder[InstanceSecurityDashboard, List[A]] =
      _root_.caliban.client.SelectionBuilder.Field("vulnerabilityGrades", ListOf(Obj(innerSelection)))

    /** Vulnerability scanners reported on the vulnerabilities from projects selected in Instance Security Dashboard.
      */
    def vulnerabilityScanners[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[VulnerabilityScannerConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[InstanceSecurityDashboard, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "vulnerabilityScanners",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** Counts for each vulnerability severity from projects selected in Instance Security Dashboard.
      */
    def vulnerabilitySeveritiesCount[A](
      projectId: Option[List[String]] = None,
      reportType: Option[List[VulnerabilityReportType]] = None,
      severity: Option[List[VulnerabilitySeverity]] = None,
      state: Option[List[VulnerabilityState]] = None,
      scanner: Option[List[String]] = None,
      scannerId: Option[List[VulnerabilitiesScannerID]] = None,
      hasIssues: Option[Boolean] = None,
      hasResolution: Option[Boolean] = None
    )(
      innerSelection: SelectionBuilder[VulnerabilitySeveritiesCount, A]
    )(
      implicit encoder0: ArgEncoder[Option[List[String]]],
      encoder1: ArgEncoder[Option[List[VulnerabilityReportType]]],
      encoder2: ArgEncoder[Option[List[VulnerabilitySeverity]]],
      encoder3: ArgEncoder[Option[List[VulnerabilityState]]],
      encoder4: ArgEncoder[Option[List[String]]],
      encoder5: ArgEncoder[Option[List[VulnerabilitiesScannerID]]],
      encoder6: ArgEncoder[Option[Boolean]],
      encoder7: ArgEncoder[Option[Boolean]]
    ): SelectionBuilder[InstanceSecurityDashboard, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "vulnerabilitySeveritiesCount",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("projectId", projectId, "[ID!]")(encoder0),
          Argument("reportType", reportType, "[VulnerabilityReportType!]")(encoder1),
          Argument("severity", severity, "[VulnerabilitySeverity!]")(encoder2),
          Argument("state", state, "[VulnerabilityState!]")(encoder3),
          Argument("scanner", scanner, "[String!]")(encoder4),
          Argument("scannerId", scannerId, "[VulnerabilitiesScannerID!]")(encoder5),
          Argument("hasIssues", hasIssues, "Boolean")(encoder6),
          Argument("hasResolution", hasResolution, "Boolean")(encoder7)
        )
      )

  }

  type Issue

  object Issue {

    /** Alert associated to this issue.
      */
    def alertManagementAlert[A](innerSelection: SelectionBuilder[AlertManagementAlert, A]): SelectionBuilder[Issue, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("alertManagementAlert", OptionOf(Obj(innerSelection)))

    /** Assignees of the issue.
      */
    def assignees[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[UserCoreConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[Issue, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "assignees",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** User that created the issue.
      */
    def author[A](innerSelection: SelectionBuilder[UserCore, A]): SelectionBuilder[Issue, A] =
      _root_.caliban.client.SelectionBuilder.Field("author", Obj(innerSelection))

    /** Indicates the issue is blocked.
      */
    def blocked: SelectionBuilder[Issue, Boolean] = _root_.caliban.client.SelectionBuilder.Field("blocked", Scalar())

    /** Count of issues blocking this issue.
      */
    def blockedByCount: SelectionBuilder[Issue, Option[Int]] =
      _root_.caliban.client.SelectionBuilder.Field("blockedByCount", OptionOf(Scalar()))

    /** Issues blocking this issue.
      */
    def blockedByIssues[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[IssueConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[Issue, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "blockedByIssues",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** Timestamp of when the issue was closed.
      */
    def closedAt: SelectionBuilder[Issue, Option[Time]] = _root_.caliban.client.SelectionBuilder.Field("closedAt", OptionOf(Scalar()))

    /** Indicates the issue is confidential.
      */
    def confidential: SelectionBuilder[Issue, Boolean] = _root_.caliban.client.SelectionBuilder.Field("confidential", Scalar())

    /** User specific email address for the issue.
      */
    def createNoteEmail: SelectionBuilder[Issue, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("createNoteEmail", OptionOf(Scalar()))

    /** Timestamp of when the issue was created.
      */
    def createdAt: SelectionBuilder[Issue, Time] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())

    /** To-do items for the current user.
      */
    def currentUserTodos[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None,
      state: Option[TodoStateEnum] = None
    )(
      innerSelection: SelectionBuilder[TodoConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]],
      encoder4: ArgEncoder[Option[TodoStateEnum]]
    ): SelectionBuilder[Issue, A] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "currentUserTodos",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3),
          Argument("state", state, "TodoStateEnum")(encoder4)
        )
      )

    /** Description of the issue.
      */
    def description: SelectionBuilder[Issue, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("description", OptionOf(Scalar()))

    /** The GitLab Flavored Markdown rendering of `description`
      */
    def descriptionHtml: SelectionBuilder[Issue, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("descriptionHtml", OptionOf(Scalar()))

    /** Collection of design images associated with this issue.
      */
    def designCollection[A](innerSelection: SelectionBuilder[DesignCollection, A]): SelectionBuilder[Issue, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("designCollection", OptionOf(Obj(innerSelection)))

    /** Indicates discussion is locked on the issue.
      */
    def discussionLocked: SelectionBuilder[Issue, Boolean] = _root_.caliban.client.SelectionBuilder.Field("discussionLocked", Scalar())

    /** All discussions on this noteable.
      */
    def discussions[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[DiscussionConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[Issue, A] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "discussions",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** Number of downvotes the issue has received.
      */
    def downvotes: SelectionBuilder[Issue, Int] = _root_.caliban.client.SelectionBuilder.Field("downvotes", Scalar())

    /** Due date of the issue.
      */
    def dueDate: SelectionBuilder[Issue, Option[Time]] = _root_.caliban.client.SelectionBuilder.Field("dueDate", OptionOf(Scalar()))

    /** Indicates if a project has email notifications disabled: `true` if email notifications are disabled.
      */
    def emailsDisabled: SelectionBuilder[Issue, Boolean] = _root_.caliban.client.SelectionBuilder.Field("emailsDisabled", Scalar())

    /** Epic to which this issue belongs.
      */
    def epic[A](innerSelection: SelectionBuilder[Epic, A]): SelectionBuilder[Issue, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("epic", OptionOf(Obj(innerSelection)))

    /** Current health status.
      */
    def healthStatus: SelectionBuilder[Issue, Option[HealthStatus]] =
      _root_.caliban.client.SelectionBuilder.Field("healthStatus", OptionOf(Scalar()))

    /** Human-readable time estimate of the issue.
      */
    def humanTimeEstimate: SelectionBuilder[Issue, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("humanTimeEstimate", OptionOf(Scalar()))

    /** Human-readable total time reported as spent on the issue.
      */
    def humanTotalTimeSpent: SelectionBuilder[Issue, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("humanTotalTimeSpent", OptionOf(Scalar()))

    /** ID of the issue.
      */
    def id: SelectionBuilder[Issue, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())

    /** Internal ID of the issue.
      */
    def iid: SelectionBuilder[Issue, String] = _root_.caliban.client.SelectionBuilder.Field("iid", Scalar())

    /** Iteration of the issue.
      */
    def iteration[A](innerSelection: SelectionBuilder[Iteration, A]): SelectionBuilder[Issue, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("iteration", OptionOf(Obj(innerSelection)))

    /** Labels of the issue.
      */
    def labels[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[LabelConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[Issue, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "labels",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** Metric images associated to the issue.
      */
    def metricImages[A](innerSelection: SelectionBuilder[MetricImage, A]): SelectionBuilder[Issue, Option[List[A]]] =
      _root_.caliban.client.SelectionBuilder.Field("metricImages", OptionOf(ListOf(Obj(innerSelection))))

    /** Milestone of the issue.
      */
    def milestone[A](innerSelection: SelectionBuilder[Milestone, A]): SelectionBuilder[Issue, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("milestone", OptionOf(Obj(innerSelection)))

    /** Indicates if issue got moved from other project.
      */
    def moved: SelectionBuilder[Issue, Option[Boolean]] = _root_.caliban.client.SelectionBuilder.Field("moved", OptionOf(Scalar()))

    /** Updated Issue after it got moved to another project.
      */
    def movedTo[A](innerSelection: SelectionBuilder[Issue, A]): SelectionBuilder[Issue, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("movedTo", OptionOf(Obj(innerSelection)))

    /** All notes on this noteable.
      */
    def notes[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[NoteConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[Issue, A] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "notes",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** List of participants in the issue.
      */
    def participants[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[UserCoreConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[Issue, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "participants",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** ID of the issue project.
      */
    def projectId: SelectionBuilder[Issue, Int] = _root_.caliban.client.SelectionBuilder.Field("projectId", Scalar())

    /** Internal reference of the issue. Returned in shortened format by default.
      */
    def reference(full: Option[Boolean] = None)(implicit encoder0: ArgEncoder[Option[Boolean]]): SelectionBuilder[Issue, String] =
      _root_.caliban.client.SelectionBuilder.Field("reference", Scalar(), arguments = List(Argument("full", full, "Boolean")(encoder0)))

    /** Relative position of the issue (used for positioning in epic tree and issue boards).
      */
    def relativePosition: SelectionBuilder[Issue, Option[Int]] =
      _root_.caliban.client.SelectionBuilder.Field("relativePosition", OptionOf(Scalar()))

    /** Severity level of the incident.
      */
    def severity: SelectionBuilder[Issue, Option[IssuableSeverity]] =
      _root_.caliban.client.SelectionBuilder.Field("severity", OptionOf(Scalar()))

    /** Timestamp of when the issue SLA expires.
      */
    def slaDueAt: SelectionBuilder[Issue, Option[Time]] = _root_.caliban.client.SelectionBuilder.Field("slaDueAt", OptionOf(Scalar()))

    /** State of the issue.
      */
    def state: SelectionBuilder[Issue, IssueState] = _root_.caliban.client.SelectionBuilder.Field("state", Scalar())

    /** Indicates whether an issue is published to the status page.
      */
    def statusPagePublishedIncident: SelectionBuilder[Issue, Option[Boolean]] =
      _root_.caliban.client.SelectionBuilder.Field("statusPagePublishedIncident", OptionOf(Scalar()))

    /** Indicates the currently logged in user is subscribed to the issue.
      */
    def subscribed: SelectionBuilder[Issue, Boolean] = _root_.caliban.client.SelectionBuilder.Field("subscribed", Scalar())

    /** Task completion status of the issue.
      */
    def taskCompletionStatus[A](innerSelection: SelectionBuilder[TaskCompletionStatus, A]): SelectionBuilder[Issue, A] =
      _root_.caliban.client.SelectionBuilder.Field("taskCompletionStatus", Obj(innerSelection))

    /** Time estimate of the issue.
      */
    def timeEstimate: SelectionBuilder[Issue, Int] = _root_.caliban.client.SelectionBuilder.Field("timeEstimate", Scalar())

    /** Timelogs on the issue.
      */
    def timelogs[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[TimelogConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[Issue, A] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "timelogs",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** Title of the issue.
      */
    def title: SelectionBuilder[Issue, String] = _root_.caliban.client.SelectionBuilder.Field("title", Scalar())

    /** The GitLab Flavored Markdown rendering of `title`
      */
    def titleHtml: SelectionBuilder[Issue, Option[String]] = _root_.caliban.client.SelectionBuilder.Field("titleHtml", OptionOf(Scalar()))

    /** Total time reported as spent on the issue.
      */
    def totalTimeSpent: SelectionBuilder[Issue, Int] = _root_.caliban.client.SelectionBuilder.Field("totalTimeSpent", Scalar())

    /** Type of the issue.
      */
    def `type`: SelectionBuilder[Issue, Option[IssueType]] = _root_.caliban.client.SelectionBuilder.Field("type", OptionOf(Scalar()))

    /** Timestamp of when the issue was last updated.
      */
    def updatedAt: SelectionBuilder[Issue, Time] = _root_.caliban.client.SelectionBuilder.Field("updatedAt", Scalar())

    /** User that last updated the issue.
      */
    def updatedBy[A](innerSelection: SelectionBuilder[UserCore, A]): SelectionBuilder[Issue, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("updatedBy", OptionOf(Obj(innerSelection)))

    /** Number of upvotes the issue has received.
      */
    def upvotes: SelectionBuilder[Issue, Int] = _root_.caliban.client.SelectionBuilder.Field("upvotes", Scalar())

    /** Number of user discussions in the issue.
      */
    def userDiscussionsCount: SelectionBuilder[Issue, Int] = _root_.caliban.client.SelectionBuilder.Field("userDiscussionsCount", Scalar())

    /** Number of user notes of the issue.
      */
    def userNotesCount: SelectionBuilder[Issue, Int] = _root_.caliban.client.SelectionBuilder.Field("userNotesCount", Scalar())

    /** Permissions for the current user on the resource
      */
    def userPermissions[A](innerSelection: SelectionBuilder[IssuePermissions, A]): SelectionBuilder[Issue, A] =
      _root_.caliban.client.SelectionBuilder.Field("userPermissions", Obj(innerSelection))

    /** Web path of the issue.
      */
    def webPath: SelectionBuilder[Issue, String] = _root_.caliban.client.SelectionBuilder.Field("webPath", Scalar())

    /** Web URL of the issue.
      */
    def webUrl: SelectionBuilder[Issue, String] = _root_.caliban.client.SelectionBuilder.Field("webUrl", Scalar())

    /** Weight of the issue.
      */
    def weight: SelectionBuilder[Issue, Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("weight", OptionOf(Scalar()))
  }

  type IssueConnection

  object IssueConnection {

    /** Total count of collection.
      */
    def count: SelectionBuilder[IssueConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("count", Scalar())

    /** A list of edges.
      */
    def edges[A](innerSelection: SelectionBuilder[IssueEdge, A]): SelectionBuilder[IssueConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](innerSelection: SelectionBuilder[Issue, A]): SelectionBuilder[IssueConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[IssueConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))

    /** Total weight of issues collection.
      */
    def weight: SelectionBuilder[IssueConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("weight", Scalar())
  }

  type IssueEdge

  object IssueEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[IssueEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](innerSelection: SelectionBuilder[Issue, A]): SelectionBuilder[IssueEdge, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
  }

  type IssueMoveListPayload

  object IssueMoveListPayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[IssueMoveListPayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[IssueMoveListPayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** The issue after mutation.
      */
    def issue[A](innerSelection: SelectionBuilder[Issue, A]): SelectionBuilder[IssueMoveListPayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("issue", OptionOf(Obj(innerSelection)))
  }

  type IssueMovePayload

  object IssueMovePayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[IssueMovePayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[IssueMovePayload, List[String]] = _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** The issue after mutation.
      */
    def issue[A](innerSelection: SelectionBuilder[Issue, A]): SelectionBuilder[IssueMovePayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("issue", OptionOf(Obj(innerSelection)))
  }

  type IssuePermissions

  object IssuePermissions {

    /** Indicates the user can perform `admin_issue` on this resource
      */
    def adminIssue: SelectionBuilder[IssuePermissions, Boolean] = _root_.caliban.client.SelectionBuilder.Field("adminIssue", Scalar())

    /** Indicates the user can perform `create_design` on this resource
      */
    def createDesign: SelectionBuilder[IssuePermissions, Boolean] = _root_.caliban.client.SelectionBuilder.Field("createDesign", Scalar())

    /** Indicates the user can perform `create_note` on this resource
      */
    def createNote: SelectionBuilder[IssuePermissions, Boolean] = _root_.caliban.client.SelectionBuilder.Field("createNote", Scalar())

    /** Indicates the user can perform `destroy_design` on this resource
      */
    def destroyDesign: SelectionBuilder[IssuePermissions, Boolean] = _root_.caliban.client.SelectionBuilder.Field("destroyDesign", Scalar())

    /** Indicates the user can perform `read_design` on this resource
      */
    def readDesign: SelectionBuilder[IssuePermissions, Boolean] = _root_.caliban.client.SelectionBuilder.Field("readDesign", Scalar())

    /** Indicates the user can perform `read_issue` on this resource
      */
    def readIssue: SelectionBuilder[IssuePermissions, Boolean] = _root_.caliban.client.SelectionBuilder.Field("readIssue", Scalar())

    /** Indicates the user can perform `reopen_issue` on this resource
      */
    def reopenIssue: SelectionBuilder[IssuePermissions, Boolean] = _root_.caliban.client.SelectionBuilder.Field("reopenIssue", Scalar())

    /** Indicates the user can perform `update_issue` on this resource
      */
    def updateIssue: SelectionBuilder[IssuePermissions, Boolean] = _root_.caliban.client.SelectionBuilder.Field("updateIssue", Scalar())
  }

  type IssueSetAssigneesPayload

  object IssueSetAssigneesPayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[IssueSetAssigneesPayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[IssueSetAssigneesPayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** The issue after mutation.
      */
    def issue[A](innerSelection: SelectionBuilder[Issue, A]): SelectionBuilder[IssueSetAssigneesPayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("issue", OptionOf(Obj(innerSelection)))
  }

  type IssueSetConfidentialPayload

  object IssueSetConfidentialPayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[IssueSetConfidentialPayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[IssueSetConfidentialPayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** The issue after mutation.
      */
    def issue[A](innerSelection: SelectionBuilder[Issue, A]): SelectionBuilder[IssueSetConfidentialPayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("issue", OptionOf(Obj(innerSelection)))
  }

  type IssueSetDueDatePayload

  object IssueSetDueDatePayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[IssueSetDueDatePayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[IssueSetDueDatePayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** The issue after mutation.
      */
    def issue[A](innerSelection: SelectionBuilder[Issue, A]): SelectionBuilder[IssueSetDueDatePayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("issue", OptionOf(Obj(innerSelection)))
  }

  type IssueSetEpicPayload

  object IssueSetEpicPayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[IssueSetEpicPayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[IssueSetEpicPayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** The issue after mutation.
      */
    def issue[A](innerSelection: SelectionBuilder[Issue, A]): SelectionBuilder[IssueSetEpicPayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("issue", OptionOf(Obj(innerSelection)))
  }

  type IssueSetIterationPayload

  object IssueSetIterationPayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[IssueSetIterationPayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[IssueSetIterationPayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** The issue after mutation.
      */
    def issue[A](innerSelection: SelectionBuilder[Issue, A]): SelectionBuilder[IssueSetIterationPayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("issue", OptionOf(Obj(innerSelection)))
  }

  type IssueSetLockedPayload

  object IssueSetLockedPayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[IssueSetLockedPayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[IssueSetLockedPayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** The issue after mutation.
      */
    def issue[A](innerSelection: SelectionBuilder[Issue, A]): SelectionBuilder[IssueSetLockedPayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("issue", OptionOf(Obj(innerSelection)))
  }

  type IssueSetSeverityPayload

  object IssueSetSeverityPayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[IssueSetSeverityPayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[IssueSetSeverityPayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** The issue after mutation.
      */
    def issue[A](innerSelection: SelectionBuilder[Issue, A]): SelectionBuilder[IssueSetSeverityPayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("issue", OptionOf(Obj(innerSelection)))
  }

  type IssueSetSubscriptionPayload

  object IssueSetSubscriptionPayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[IssueSetSubscriptionPayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[IssueSetSubscriptionPayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** The issue after mutation.
      */
    def issue[A](innerSelection: SelectionBuilder[Issue, A]): SelectionBuilder[IssueSetSubscriptionPayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("issue", OptionOf(Obj(innerSelection)))
  }

  type IssueSetWeightPayload

  object IssueSetWeightPayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[IssueSetWeightPayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[IssueSetWeightPayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** The issue after mutation.
      */
    def issue[A](innerSelection: SelectionBuilder[Issue, A]): SelectionBuilder[IssueSetWeightPayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("issue", OptionOf(Obj(innerSelection)))
  }

  type IssueStatusCountsType

  object IssueStatusCountsType {

    /** Number of issues with status ALL for the project
      */
    def all: SelectionBuilder[IssueStatusCountsType, Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("all", OptionOf(Scalar()))

    /** Number of issues with status CLOSED for the project
      */
    def closed: SelectionBuilder[IssueStatusCountsType, Option[Int]] =
      _root_.caliban.client.SelectionBuilder.Field("closed", OptionOf(Scalar()))

    /** Number of issues with status OPENED for the project
      */
    def opened: SelectionBuilder[IssueStatusCountsType, Option[Int]] =
      _root_.caliban.client.SelectionBuilder.Field("opened", OptionOf(Scalar()))
  }

  type Iteration

  object Iteration {

    /** Timestamp of iteration creation.
      */
    def createdAt: SelectionBuilder[Iteration, Time] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())

    /** Description of the iteration.
      */
    def description: SelectionBuilder[Iteration, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("description", OptionOf(Scalar()))

    /** The GitLab Flavored Markdown rendering of `description`
      */
    def descriptionHtml: SelectionBuilder[Iteration, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("descriptionHtml", OptionOf(Scalar()))

    /** Timestamp of the iteration due date.
      */
    def dueDate: SelectionBuilder[Iteration, Option[Time]] = _root_.caliban.client.SelectionBuilder.Field("dueDate", OptionOf(Scalar()))

    /** ID of the iteration.
      */
    def id: SelectionBuilder[Iteration, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())

    /** Internal ID of the iteration.
      */
    def iid: SelectionBuilder[Iteration, String] = _root_.caliban.client.SelectionBuilder.Field("iid", Scalar())

    /** Cadence of the iteration.
      */
    def iterationCadence[A](innerSelection: SelectionBuilder[IterationCadence, A]): SelectionBuilder[Iteration, A] =
      _root_.caliban.client.SelectionBuilder.Field("iterationCadence", Obj(innerSelection))

    /** Historically accurate report about the timebox.
      */
    def report[A](innerSelection: SelectionBuilder[TimeboxReport, A]): SelectionBuilder[Iteration, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("report", OptionOf(Obj(innerSelection)))

    /** Web path of the iteration, scoped to the query parent. Only valid for Project parents. Returns null in other contexts.
      */
    def scopedPath: SelectionBuilder[Iteration, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("scopedPath", OptionOf(Scalar()))

    /** Web URL of the iteration, scoped to the query parent. Only valid for Project parents. Returns null in other contexts.
      */
    def scopedUrl: SelectionBuilder[Iteration, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("scopedUrl", OptionOf(Scalar()))

    /** Timestamp of the iteration start date.
      */
    def startDate: SelectionBuilder[Iteration, Option[Time]] = _root_.caliban.client.SelectionBuilder.Field("startDate", OptionOf(Scalar()))

    /** State of the iteration.
      */
    def state: SelectionBuilder[Iteration, IterationState] = _root_.caliban.client.SelectionBuilder.Field("state", Scalar())

    /** Title of the iteration.
      */
    def title: SelectionBuilder[Iteration, String] = _root_.caliban.client.SelectionBuilder.Field("title", Scalar())

    /** Timestamp of last iteration update.
      */
    def updatedAt: SelectionBuilder[Iteration, Time] = _root_.caliban.client.SelectionBuilder.Field("updatedAt", Scalar())

    /** Web path of the iteration.
      */
    def webPath: SelectionBuilder[Iteration, String] = _root_.caliban.client.SelectionBuilder.Field("webPath", Scalar())

    /** Web URL of the iteration.
      */
    def webUrl: SelectionBuilder[Iteration, String] = _root_.caliban.client.SelectionBuilder.Field("webUrl", Scalar())
  }

  type IterationCadence

  object IterationCadence {

    /** Whether the iteration cadence is active.
      */
    def active: SelectionBuilder[IterationCadence, Option[Boolean]] =
      _root_.caliban.client.SelectionBuilder.Field("active", OptionOf(Scalar()))

    /** Whether the iteration cadence should automatically generate future iterations.
      */
    def automatic: SelectionBuilder[IterationCadence, Option[Boolean]] =
      _root_.caliban.client.SelectionBuilder.Field("automatic", OptionOf(Scalar()))

    /** Description of the iteration cadence. Maximum length is 5000 characters.
      */
    def description: SelectionBuilder[IterationCadence, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("description", OptionOf(Scalar()))

    /** Duration in weeks of the iterations within this cadence.
      */
    def durationInWeeks: SelectionBuilder[IterationCadence, Option[Int]] =
      _root_.caliban.client.SelectionBuilder.Field("durationInWeeks", OptionOf(Scalar()))

    /** Global ID of the iteration cadence.
      */
    def id: SelectionBuilder[IterationCadence, IterationsCadenceID] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())

    /** Future iterations to be created when iteration cadence is set to automatic.
      */
    def iterationsInAdvance: SelectionBuilder[IterationCadence, Option[Int]] =
      _root_.caliban.client.SelectionBuilder.Field("iterationsInAdvance", OptionOf(Scalar()))

    /** Whether the iteration cadence should roll over issues to the next iteration or not.
      */
    def rollOver: SelectionBuilder[IterationCadence, Boolean] = _root_.caliban.client.SelectionBuilder.Field("rollOver", Scalar())

    /** Timestamp of the iteration cadence start date.
      */
    def startDate: SelectionBuilder[IterationCadence, Option[Time]] =
      _root_.caliban.client.SelectionBuilder.Field("startDate", OptionOf(Scalar()))

    /** Title of the iteration cadence.
      */
    def title: SelectionBuilder[IterationCadence, String] = _root_.caliban.client.SelectionBuilder.Field("title", Scalar())
  }

  type IterationCadenceConnection

  object IterationCadenceConnection {

    /** A list of edges.
      */
    def edges[A](
      innerSelection: SelectionBuilder[IterationCadenceEdge, A]
    ): SelectionBuilder[IterationCadenceConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](
      innerSelection: SelectionBuilder[IterationCadence, A]
    ): SelectionBuilder[IterationCadenceConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[IterationCadenceConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  }

  type IterationCadenceCreatePayload

  object IterationCadenceCreatePayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[IterationCadenceCreatePayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[IterationCadenceCreatePayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** The created iteration cadence.
      */
    def iterationCadence[A](
      innerSelection: SelectionBuilder[IterationCadence, A]
    ): SelectionBuilder[IterationCadenceCreatePayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("iterationCadence", OptionOf(Obj(innerSelection)))

  }

  type IterationCadenceDestroyPayload

  object IterationCadenceDestroyPayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[IterationCadenceDestroyPayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[IterationCadenceDestroyPayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** Group the iteration cadence belongs to.
      */
    def group[A](innerSelection: SelectionBuilder[Group, A]): SelectionBuilder[IterationCadenceDestroyPayload, A] =
      _root_.caliban.client.SelectionBuilder.Field("group", Obj(innerSelection))
  }

  type IterationCadenceEdge

  object IterationCadenceEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[IterationCadenceEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](innerSelection: SelectionBuilder[IterationCadence, A]): SelectionBuilder[IterationCadenceEdge, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
  }

  type IterationCadenceUpdatePayload

  object IterationCadenceUpdatePayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[IterationCadenceUpdatePayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[IterationCadenceUpdatePayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** The updated iteration cadence.
      */
    def iterationCadence[A](
      innerSelection: SelectionBuilder[IterationCadence, A]
    ): SelectionBuilder[IterationCadenceUpdatePayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("iterationCadence", OptionOf(Obj(innerSelection)))

  }

  type IterationConnection

  object IterationConnection {

    /** A list of edges.
      */
    def edges[A](innerSelection: SelectionBuilder[IterationEdge, A]): SelectionBuilder[IterationConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](innerSelection: SelectionBuilder[Iteration, A]): SelectionBuilder[IterationConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[IterationConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  }

  type IterationDeletePayload

  object IterationDeletePayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[IterationDeletePayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[IterationDeletePayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** Group the iteration belongs to.
      */
    def group[A](innerSelection: SelectionBuilder[Group, A]): SelectionBuilder[IterationDeletePayload, A] =
      _root_.caliban.client.SelectionBuilder.Field("group", Obj(innerSelection))
  }

  type IterationEdge

  object IterationEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[IterationEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](innerSelection: SelectionBuilder[Iteration, A]): SelectionBuilder[IterationEdge, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
  }

  type JiraImport

  object JiraImport {

    /** Timestamp of when the Jira import was created.
      */
    def createdAt: SelectionBuilder[JiraImport, Option[Time]] =
      _root_.caliban.client.SelectionBuilder.Field("createdAt", OptionOf(Scalar()))

    /** Count of issues that failed to import.
      */
    def failedToImportCount: SelectionBuilder[JiraImport, Int] =
      _root_.caliban.client.SelectionBuilder.Field("failedToImportCount", Scalar())

    /** Count of issues that were successfully imported.
      */
    def importedIssuesCount: SelectionBuilder[JiraImport, Int] =
      _root_.caliban.client.SelectionBuilder.Field("importedIssuesCount", Scalar())

    /** Project key for the imported Jira project.
      */
    def jiraProjectKey: SelectionBuilder[JiraImport, String] = _root_.caliban.client.SelectionBuilder.Field("jiraProjectKey", Scalar())

    /** Timestamp of when the Jira import was scheduled.
      */
    def scheduledAt: SelectionBuilder[JiraImport, Option[Time]] =
      _root_.caliban.client.SelectionBuilder.Field("scheduledAt", OptionOf(Scalar()))

    /** User that started the Jira import.
      */
    def scheduledBy[A](innerSelection: SelectionBuilder[UserCore, A]): SelectionBuilder[JiraImport, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("scheduledBy", OptionOf(Obj(innerSelection)))

    /** Total count of issues that were attempted to import.
      */
    def totalIssueCount: SelectionBuilder[JiraImport, Int] = _root_.caliban.client.SelectionBuilder.Field("totalIssueCount", Scalar())
  }

  type JiraImportConnection

  object JiraImportConnection {

    /** A list of edges.
      */
    def edges[A](innerSelection: SelectionBuilder[JiraImportEdge, A]): SelectionBuilder[JiraImportConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](innerSelection: SelectionBuilder[JiraImport, A]): SelectionBuilder[JiraImportConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[JiraImportConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  }

  type JiraImportEdge

  object JiraImportEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[JiraImportEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](innerSelection: SelectionBuilder[JiraImport, A]): SelectionBuilder[JiraImportEdge, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
  }

  type JiraImportStartPayload

  object JiraImportStartPayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[JiraImportStartPayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[JiraImportStartPayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** The Jira import data after mutation.
      */
    def jiraImport[A](innerSelection: SelectionBuilder[JiraImport, A]): SelectionBuilder[JiraImportStartPayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("jiraImport", OptionOf(Obj(innerSelection)))
  }

  type JiraImportUsersPayload

  object JiraImportUsersPayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[JiraImportUsersPayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[JiraImportUsersPayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** Users returned from Jira, matched by email and name if possible.
      */
    def jiraUsers[A](innerSelection: SelectionBuilder[JiraUser, A]): SelectionBuilder[JiraImportUsersPayload, Option[List[A]]] =
      _root_.caliban.client.SelectionBuilder.Field("jiraUsers", OptionOf(ListOf(Obj(innerSelection))))
  }

  type JiraProject

  object JiraProject {

    /** Key of the Jira project.
      */
    def key: SelectionBuilder[JiraProject, String] = _root_.caliban.client.SelectionBuilder.Field("key", Scalar())

    /** Name of the Jira project.
      */
    def name: SelectionBuilder[JiraProject, Option[String]] = _root_.caliban.client.SelectionBuilder.Field("name", OptionOf(Scalar()))

    /** ID of the Jira project.
      */
    def projectId: SelectionBuilder[JiraProject, Int] = _root_.caliban.client.SelectionBuilder.Field("projectId", Scalar())
  }

  type JiraProjectConnection

  object JiraProjectConnection {

    /** A list of edges.
      */
    def edges[A](innerSelection: SelectionBuilder[JiraProjectEdge, A]): SelectionBuilder[JiraProjectConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](innerSelection: SelectionBuilder[JiraProject, A]): SelectionBuilder[JiraProjectConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[JiraProjectConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  }

  type JiraProjectEdge

  object JiraProjectEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[JiraProjectEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](innerSelection: SelectionBuilder[JiraProject, A]): SelectionBuilder[JiraProjectEdge, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
  }

  type JiraService

  object JiraService {

    /** Indicates if the service is active.
      */
    def active: SelectionBuilder[JiraService, Option[Boolean]] = _root_.caliban.client.SelectionBuilder.Field("active", OptionOf(Scalar()))

    /** List of all Jira projects fetched through Jira REST API.
      */
    def projects[A](
      name: Option[String] = None,
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[JiraProjectConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[String]],
      encoder3: ArgEncoder[Option[Int]],
      encoder4: ArgEncoder[Option[Int]]
    ): SelectionBuilder[JiraService, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "projects",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("name", name, "String")(encoder0),
          Argument("after", after, "String")(encoder1),
          Argument("before", before, "String")(encoder2),
          Argument("first", first, "Int")(encoder3),
          Argument("last", last, "Int")(encoder4)
        )
      )

    /** Class name of the service.
      */
    def `type`: SelectionBuilder[JiraService, Option[String]] = _root_.caliban.client.SelectionBuilder.Field("type", OptionOf(Scalar()))
  }

  type JiraUser

  object JiraUser {

    /** ID of the matched GitLab user.
      */
    def gitlabId: SelectionBuilder[JiraUser, Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("gitlabId", OptionOf(Scalar()))

    /** Name of the matched GitLab user.
      */
    def gitlabName: SelectionBuilder[JiraUser, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("gitlabName", OptionOf(Scalar()))

    /** Username of the matched GitLab user.
      */
    def gitlabUsername: SelectionBuilder[JiraUser, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("gitlabUsername", OptionOf(Scalar()))

    /** Account ID of the Jira user.
      */
    def jiraAccountId: SelectionBuilder[JiraUser, String] = _root_.caliban.client.SelectionBuilder.Field("jiraAccountId", Scalar())

    /** Display name of the Jira user.
      */
    def jiraDisplayName: SelectionBuilder[JiraUser, String] = _root_.caliban.client.SelectionBuilder.Field("jiraDisplayName", Scalar())

    /** Email of the Jira user, returned only for users with public emails.
      */
    def jiraEmail: SelectionBuilder[JiraUser, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("jiraEmail", OptionOf(Scalar()))
  }

  type JobPermissions

  object JobPermissions {

    /** Indicates the user can perform `read_build` on this resource
      */
    def readBuild: SelectionBuilder[JobPermissions, Boolean] = _root_.caliban.client.SelectionBuilder.Field("readBuild", Scalar())

    /** Indicates the user can perform `read_job_artifacts` on this resource
      */
    def readJobArtifacts: SelectionBuilder[JobPermissions, Boolean] =
      _root_.caliban.client.SelectionBuilder.Field("readJobArtifacts", Scalar())

    /** Indicates the user can perform `update_build` on this resource
      */
    def updateBuild: SelectionBuilder[JobPermissions, Boolean] = _root_.caliban.client.SelectionBuilder.Field("updateBuild", Scalar())
  }

  type JobPlayPayload

  object JobPlayPayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[JobPlayPayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[JobPlayPayload, List[String]] = _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** The job after the mutation.
      */
    def job[A](innerSelection: SelectionBuilder[CiJob, A]): SelectionBuilder[JobPlayPayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("job", OptionOf(Obj(innerSelection)))
  }

  type JobRetryPayload

  object JobRetryPayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[JobRetryPayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[JobRetryPayload, List[String]] = _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** The job after the mutation.
      */
    def job[A](innerSelection: SelectionBuilder[CiJob, A]): SelectionBuilder[JobRetryPayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("job", OptionOf(Obj(innerSelection)))
  }

  type Kas

  object Kas {

    /** Indicates whether the Kubernetes Agent Server is enabled.
      */
    def enabled: SelectionBuilder[Kas, Boolean] = _root_.caliban.client.SelectionBuilder.Field("enabled", Scalar())

    /** The URL used by the Agents to communicate with KAS.
      */
    def externalUrl: SelectionBuilder[Kas, Option[String]] = _root_.caliban.client.SelectionBuilder.Field("externalUrl", OptionOf(Scalar()))

    /** KAS version.
      */
    def version: SelectionBuilder[Kas, Option[String]] = _root_.caliban.client.SelectionBuilder.Field("version", OptionOf(Scalar()))
  }

  type Label

  object Label {

    /** Background color of the label.
      */
    def color: SelectionBuilder[Label, String] = _root_.caliban.client.SelectionBuilder.Field("color", Scalar())

    /** When this label was created.
      */
    def createdAt: SelectionBuilder[Label, Time] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())

    /** Description of the label (Markdown rendered as HTML for caching).
      */
    def description: SelectionBuilder[Label, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("description", OptionOf(Scalar()))

    /** The GitLab Flavored Markdown rendering of `description`
      */
    def descriptionHtml: SelectionBuilder[Label, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("descriptionHtml", OptionOf(Scalar()))

    /** Label ID.
      */
    def id: SelectionBuilder[Label, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())

    /** Text color of the label.
      */
    def textColor: SelectionBuilder[Label, String] = _root_.caliban.client.SelectionBuilder.Field("textColor", Scalar())

    /** Content of the label.
      */
    def title: SelectionBuilder[Label, String] = _root_.caliban.client.SelectionBuilder.Field("title", Scalar())

    /** When this label was last updated.
      */
    def updatedAt: SelectionBuilder[Label, Time] = _root_.caliban.client.SelectionBuilder.Field("updatedAt", Scalar())
  }

  type LabelConnection

  object LabelConnection {

    /** Total count of collection.
      */
    def count: SelectionBuilder[LabelConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("count", Scalar())

    /** A list of edges.
      */
    def edges[A](innerSelection: SelectionBuilder[LabelEdge, A]): SelectionBuilder[LabelConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](innerSelection: SelectionBuilder[Label, A]): SelectionBuilder[LabelConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[LabelConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  }

  type LabelCreatePayload

  object LabelCreatePayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[LabelCreatePayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[LabelCreatePayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** The label after mutation.
      */
    def label[A](innerSelection: SelectionBuilder[Label, A]): SelectionBuilder[LabelCreatePayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("label", OptionOf(Obj(innerSelection)))
  }

  type LabelEdge

  object LabelEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[LabelEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](innerSelection: SelectionBuilder[Label, A]): SelectionBuilder[LabelEdge, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
  }

  type LfsObjectRegistry

  object LfsObjectRegistry {

    /** Timestamp when the LfsObjectRegistry was created
      */
    def createdAt: SelectionBuilder[LfsObjectRegistry, Option[Time]] =
      _root_.caliban.client.SelectionBuilder.Field("createdAt", OptionOf(Scalar()))

    /** ID of the LfsObjectRegistry
      */
    def id: SelectionBuilder[LfsObjectRegistry, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())

    /** Error message during sync of the LfsObjectRegistry
      */
    def lastSyncFailure: SelectionBuilder[LfsObjectRegistry, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("lastSyncFailure", OptionOf(Scalar()))

    /** Timestamp of the most recent successful sync of the LfsObjectRegistry
      */
    def lastSyncedAt: SelectionBuilder[LfsObjectRegistry, Option[Time]] =
      _root_.caliban.client.SelectionBuilder.Field("lastSyncedAt", OptionOf(Scalar()))

    /** ID of the LFS object.
      */
    def lfsObjectId: SelectionBuilder[LfsObjectRegistry, String] = _root_.caliban.client.SelectionBuilder.Field("lfsObjectId", Scalar())

    /** Timestamp after which the LfsObjectRegistry should be resynced
      */
    def retryAt: SelectionBuilder[LfsObjectRegistry, Option[Time]] =
      _root_.caliban.client.SelectionBuilder.Field("retryAt", OptionOf(Scalar()))

    /** Number of consecutive failed sync attempts of the LfsObjectRegistry
      */
    def retryCount: SelectionBuilder[LfsObjectRegistry, Option[Int]] =
      _root_.caliban.client.SelectionBuilder.Field("retryCount", OptionOf(Scalar()))

    /** Sync state of the LfsObjectRegistry
      */
    def state: SelectionBuilder[LfsObjectRegistry, Option[RegistryState]] =
      _root_.caliban.client.SelectionBuilder.Field("state", OptionOf(Scalar()))
  }

  type LfsObjectRegistryConnection

  object LfsObjectRegistryConnection {

    /** A list of edges.
      */
    def edges[A](
      innerSelection: SelectionBuilder[LfsObjectRegistryEdge, A]
    ): SelectionBuilder[LfsObjectRegistryConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](
      innerSelection: SelectionBuilder[LfsObjectRegistry, A]
    ): SelectionBuilder[LfsObjectRegistryConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[LfsObjectRegistryConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  }

  type LfsObjectRegistryEdge

  object LfsObjectRegistryEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[LfsObjectRegistryEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](innerSelection: SelectionBuilder[LfsObjectRegistry, A]): SelectionBuilder[LfsObjectRegistryEdge, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
  }

  type LicenseHistoryEntry

  object LicenseHistoryEntry {

    /** Date when the license was activated.
      */
    def activatedAt: SelectionBuilder[LicenseHistoryEntry, Option[Date]] =
      _root_.caliban.client.SelectionBuilder.Field("activatedAt", OptionOf(Scalar()))

    /** Date, including grace period, when licensed features will be blocked.
      */
    def blockChangesAt: SelectionBuilder[LicenseHistoryEntry, Option[Date]] =
      _root_.caliban.client.SelectionBuilder.Field("blockChangesAt", OptionOf(Scalar()))

    /** Company of the licensee.
      */
    def company: SelectionBuilder[LicenseHistoryEntry, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("company", OptionOf(Scalar()))

    /** Email of the licensee.
      */
    def email: SelectionBuilder[LicenseHistoryEntry, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("email", OptionOf(Scalar()))

    /** Date when the license expires.
      */
    def expiresAt: SelectionBuilder[LicenseHistoryEntry, Option[Date]] =
      _root_.caliban.client.SelectionBuilder.Field("expiresAt", OptionOf(Scalar()))

    /** ID of the license.
      */
    def id: SelectionBuilder[LicenseHistoryEntry, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())

    /** Name of the licensee.
      */
    def name: SelectionBuilder[LicenseHistoryEntry, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("name", OptionOf(Scalar()))

    /** Name of the subscription plan.
      */
    def plan: SelectionBuilder[LicenseHistoryEntry, String] = _root_.caliban.client.SelectionBuilder.Field("plan", Scalar())

    /** Date when the license started.
      */
    def startsAt: SelectionBuilder[LicenseHistoryEntry, Option[Date]] =
      _root_.caliban.client.SelectionBuilder.Field("startsAt", OptionOf(Scalar()))

    /** Type of the license.
      */
    def `type`: SelectionBuilder[LicenseHistoryEntry, String] = _root_.caliban.client.SelectionBuilder.Field("type", Scalar())

    /** Number of paid users in the license.
      */
    def usersInLicenseCount: SelectionBuilder[LicenseHistoryEntry, Option[Int]] =
      _root_.caliban.client.SelectionBuilder.Field("usersInLicenseCount", OptionOf(Scalar()))
  }

  type LicenseHistoryEntryConnection

  object LicenseHistoryEntryConnection {

    /** A list of edges.
      */
    def edges[A](
      innerSelection: SelectionBuilder[LicenseHistoryEntryEdge, A]
    ): SelectionBuilder[LicenseHistoryEntryConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](
      innerSelection: SelectionBuilder[LicenseHistoryEntry, A]
    ): SelectionBuilder[LicenseHistoryEntryConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[LicenseHistoryEntryConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  }

  type LicenseHistoryEntryEdge

  object LicenseHistoryEntryEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[LicenseHistoryEntryEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](innerSelection: SelectionBuilder[LicenseHistoryEntry, A]): SelectionBuilder[LicenseHistoryEntryEdge, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
  }

  type MarkAsSpamSnippetPayload

  object MarkAsSpamSnippetPayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[MarkAsSpamSnippetPayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[MarkAsSpamSnippetPayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** The snippet after mutation.
      */
    def snippet[A](innerSelection: SelectionBuilder[Snippet, A]): SelectionBuilder[MarkAsSpamSnippetPayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("snippet", OptionOf(Obj(innerSelection)))
  }

  type MavenMetadata

  object MavenMetadata {

    /** App group of the Maven package.
      */
    def appGroup: SelectionBuilder[MavenMetadata, String] = _root_.caliban.client.SelectionBuilder.Field("appGroup", Scalar())

    /** App name of the Maven package.
      */
    def appName: SelectionBuilder[MavenMetadata, String] = _root_.caliban.client.SelectionBuilder.Field("appName", Scalar())

    /** App version of the Maven package.
      */
    def appVersion: SelectionBuilder[MavenMetadata, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("appVersion", OptionOf(Scalar()))

    /** Date of creation.
      */
    def createdAt: SelectionBuilder[MavenMetadata, Time] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())

    /** ID of the metadatum.
      */
    def id: SelectionBuilder[MavenMetadata, PackagesMavenMetadatumID] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())

    /** Path of the Maven package.
      */
    def path: SelectionBuilder[MavenMetadata, String] = _root_.caliban.client.SelectionBuilder.Field("path", Scalar())

    /** Date of most recent update.
      */
    def updatedAt: SelectionBuilder[MavenMetadata, Time] = _root_.caliban.client.SelectionBuilder.Field("updatedAt", Scalar())
  }

  type MemberInterfaceConnection

  object MemberInterfaceConnection {

    /** A list of edges.
      */
    def edges[A](
      innerSelection: SelectionBuilder[MemberInterfaceEdge, A]
    ): SelectionBuilder[MemberInterfaceConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](
      onProjectMember: Option[SelectionBuilder[ProjectMember, A]] = None,
      onGroupMember: Option[SelectionBuilder[GroupMember, A]] = None
    ): SelectionBuilder[MemberInterfaceConnection, Option[List[Option[A]]]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "nodes",
        OptionOf(ListOf(OptionOf(ChoiceOf(Map("ProjectMember" -> onProjectMember, "GroupMember" -> onGroupMember).collect {
          case (k, Some(v)) => k -> Obj(v)
        }))))
      )

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[MemberInterfaceConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  }

  type MemberInterfaceEdge

  object MemberInterfaceEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[MemberInterfaceEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](
      onProjectMember: Option[SelectionBuilder[ProjectMember, A]] = None,
      onGroupMember: Option[SelectionBuilder[GroupMember, A]] = None
    ): SelectionBuilder[MemberInterfaceEdge, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "node",
        OptionOf(ChoiceOf(Map("ProjectMember" -> onProjectMember, "GroupMember" -> onGroupMember).collect { case (k, Some(v)) =>
          k -> Obj(v)
        }))
      )

  }

  type MergeRequest

  object MergeRequest {

    /** Indicates if members of the target project can push to the fork.
      */
    def allowCollaboration: SelectionBuilder[MergeRequest, Option[Boolean]] =
      _root_.caliban.client.SelectionBuilder.Field("allowCollaboration", OptionOf(Scalar()))

    /** Number of approvals left.
      */
    def approvalsLeft: SelectionBuilder[MergeRequest, Option[Int]] =
      _root_.caliban.client.SelectionBuilder.Field("approvalsLeft", OptionOf(Scalar()))

    /** Number of approvals required.
      */
    def approvalsRequired: SelectionBuilder[MergeRequest, Option[Int]] =
      _root_.caliban.client.SelectionBuilder.Field("approvalsRequired", OptionOf(Scalar()))

    /** Indicates if the merge request has all the required approvals. Returns true if no required approvals are configured.
      */
    def approved: SelectionBuilder[MergeRequest, Boolean] = _root_.caliban.client.SelectionBuilder.Field("approved", Scalar())

    /** Users who approved the merge request.
      */
    def approvedBy[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[UserCoreConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[MergeRequest, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "approvedBy",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** Assignees of the merge request.
      */
    def assignees[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[MergeRequestAssigneeConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[MergeRequest, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "assignees",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** User who created this merge request.
      */
    def author[A](innerSelection: SelectionBuilder[UserCore, A]): SelectionBuilder[MergeRequest, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("author", OptionOf(Obj(innerSelection)))

    /** Indicates if auto merge is enabled for the merge request.
      */
    def autoMergeEnabled: SelectionBuilder[MergeRequest, Boolean] =
      _root_.caliban.client.SelectionBuilder.Field("autoMergeEnabled", Scalar())

    /** Selected auto merge strategy.
      */
    def autoMergeStrategy: SelectionBuilder[MergeRequest, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("autoMergeStrategy", OptionOf(Scalar()))

    /** Array of available auto merge strategies.
      */
    def availableAutoMergeStrategies: SelectionBuilder[MergeRequest, Option[List[String]]] =
      _root_.caliban.client.SelectionBuilder.Field("availableAutoMergeStrategies", OptionOf(ListOf(Scalar())))

    /** Number of commits in the merge request.
      */
    def commitCount: SelectionBuilder[MergeRequest, Option[Int]] =
      _root_.caliban.client.SelectionBuilder.Field("commitCount", OptionOf(Scalar()))

    /** Merge request commits excluding merge commits.
      */
    def commitsWithoutMergeCommits[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[CommitConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[MergeRequest, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "commitsWithoutMergeCommits",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** Indicates if the merge request has conflicts.
      */
    def conflicts: SelectionBuilder[MergeRequest, Boolean] = _root_.caliban.client.SelectionBuilder.Field("conflicts", Scalar())

    /** Timestamp of when the merge request was created.
      */
    def createdAt: SelectionBuilder[MergeRequest, Time] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())

    /** To-do items for the current user.
      */
    def currentUserTodos[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None,
      state: Option[TodoStateEnum] = None
    )(
      innerSelection: SelectionBuilder[TodoConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]],
      encoder4: ArgEncoder[Option[TodoStateEnum]]
    ): SelectionBuilder[MergeRequest, A] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "currentUserTodos",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3),
          Argument("state", state, "TodoStateEnum")(encoder4)
        )
      )

    /** Default merge commit message of the merge request.
      */
    def defaultMergeCommitMessage: SelectionBuilder[MergeRequest, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("defaultMergeCommitMessage", OptionOf(Scalar()))

    /** Default merge commit message of the merge request with description.
      */
    def defaultMergeCommitMessageWithDescription: SelectionBuilder[MergeRequest, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("defaultMergeCommitMessageWithDescription", OptionOf(Scalar()))

    /** Default squash commit message of the merge request.
      */
    def defaultSquashCommitMessage: SelectionBuilder[MergeRequest, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("defaultSquashCommitMessage", OptionOf(Scalar()))

    /** Description of the merge request (Markdown rendered as HTML for caching).
      */
    def description: SelectionBuilder[MergeRequest, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("description", OptionOf(Scalar()))

    /** The GitLab Flavored Markdown rendering of `description`
      */
    def descriptionHtml: SelectionBuilder[MergeRequest, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("descriptionHtml", OptionOf(Scalar()))

    /** Diff head SHA of the merge request.
      */
    def diffHeadSha: SelectionBuilder[MergeRequest, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("diffHeadSha", OptionOf(Scalar()))

    /** References of the base SHA, the head SHA, and the start SHA for this merge request.
      */
    def diffRefs[A](innerSelection: SelectionBuilder[DiffRefs, A]): SelectionBuilder[MergeRequest, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("diffRefs", OptionOf(Obj(innerSelection)))

    /** Details about which files were changed in this merge request.
      */
    def diffStats[A](
      path: Option[String] = None
    )(
      innerSelection: SelectionBuilder[DiffStats, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]]
    ): SelectionBuilder[MergeRequest, Option[List[A]]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field("diffStats", OptionOf(ListOf(Obj(innerSelection))), arguments = List(Argument("path", path, "String")(encoder0)))

    /** Summary of which files were changed in this merge request.
      */
    def diffStatsSummary[A](innerSelection: SelectionBuilder[DiffStatsSummary, A]): SelectionBuilder[MergeRequest, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("diffStatsSummary", OptionOf(Obj(innerSelection)))

    /** Indicates if comments on the merge request are locked to members only.
      */
    def discussionLocked: SelectionBuilder[MergeRequest, Boolean] =
      _root_.caliban.client.SelectionBuilder.Field("discussionLocked", Scalar())

    /** All discussions on this noteable.
      */
    def discussions[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[DiscussionConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[MergeRequest, A] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "discussions",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** Indicates if the source branch is behind the target branch.
      */
    def divergedFromTargetBranch: SelectionBuilder[MergeRequest, Boolean] =
      _root_.caliban.client.SelectionBuilder.Field("divergedFromTargetBranch", Scalar())

    /** Number of downvotes for the merge request.
      */
    def downvotes: SelectionBuilder[MergeRequest, Int] = _root_.caliban.client.SelectionBuilder.Field("downvotes", Scalar())

    /** Indicates if the merge request is a draft.
      */
    def draft: SelectionBuilder[MergeRequest, Boolean] = _root_.caliban.client.SelectionBuilder.Field("draft", Scalar())

    /** Indicates if the project settings will lead to source branch deletion after merge.
      */
    def forceRemoveSourceBranch: SelectionBuilder[MergeRequest, Option[Boolean]] =
      _root_.caliban.client.SelectionBuilder.Field("forceRemoveSourceBranch", OptionOf(Scalar()))

    /** Indicates if the merge request has CI.
      */
    def hasCi: SelectionBuilder[MergeRequest, Boolean] = _root_.caliban.client.SelectionBuilder.Field("hasCi", Scalar())

    /** Indicates if the source branch has any security reports.
      */
    def hasSecurityReports: SelectionBuilder[MergeRequest, Boolean] =
      _root_.caliban.client.SelectionBuilder.Field("hasSecurityReports", Scalar())

    /** The pipeline running on the branch HEAD of the merge request.
      */
    def headPipeline[A](innerSelection: SelectionBuilder[Pipeline, A]): SelectionBuilder[MergeRequest, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("headPipeline", OptionOf(Obj(innerSelection)))

    /** Human-readable time estimate of the merge request.
      */
    def humanTimeEstimate: SelectionBuilder[MergeRequest, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("humanTimeEstimate", OptionOf(Scalar()))

    /** Human-readable total time reported as spent on the merge request.
      */
    def humanTotalTimeSpent: SelectionBuilder[MergeRequest, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("humanTotalTimeSpent", OptionOf(Scalar()))

    /** ID of the merge request.
      */
    def id: SelectionBuilder[MergeRequest, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())

    /** Internal ID of the merge request.
      */
    def iid: SelectionBuilder[MergeRequest, String] = _root_.caliban.client.SelectionBuilder.Field("iid", Scalar())

    /** Commit SHA of the merge request if merge is in progress.
      */
    def inProgressMergeCommitSha: SelectionBuilder[MergeRequest, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("inProgressMergeCommitSha", OptionOf(Scalar()))

    /** Labels of the merge request.
      */
    def labels[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[LabelConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[MergeRequest, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "labels",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** SHA of the merge request commit (set once merged).
      */
    def mergeCommitSha: SelectionBuilder[MergeRequest, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("mergeCommitSha", OptionOf(Scalar()))

    /** Error message due to a merge error.
      */
    def mergeError: SelectionBuilder[MergeRequest, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("mergeError", OptionOf(Scalar()))

    /** Indicates if a merge is currently occurring.
      */
    def mergeOngoing: SelectionBuilder[MergeRequest, Boolean] = _root_.caliban.client.SelectionBuilder.Field("mergeOngoing", Scalar())

    /** Status of the merge request. Deprecated in 14.0: This was renamed.
      */
    @deprecated("This was renamed. Please use `MergeRequest.mergeStatusEnum`. Deprecated in 14.0.", "")
    def mergeStatus: SelectionBuilder[MergeRequest, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("mergeStatus", OptionOf(Scalar()))

    /** Merge status of the merge request.
      */
    def mergeStatusEnum: SelectionBuilder[MergeRequest, Option[MergeStatus]] =
      _root_.caliban.client.SelectionBuilder.Field("mergeStatusEnum", OptionOf(Scalar()))

    /** Number of merge requests in the merge train.
      */
    def mergeTrainsCount: SelectionBuilder[MergeRequest, Option[Int]] =
      _root_.caliban.client.SelectionBuilder.Field("mergeTrainsCount", OptionOf(Scalar()))

    /** User who merged this merge request.
      */
    def mergeUser[A](innerSelection: SelectionBuilder[UserCore, A]): SelectionBuilder[MergeRequest, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("mergeUser", OptionOf(Obj(innerSelection)))

    /** Indicates if the merge has been set to be merged when its pipeline succeeds (MWPS).
      */
    def mergeWhenPipelineSucceeds: SelectionBuilder[MergeRequest, Option[Boolean]] =
      _root_.caliban.client.SelectionBuilder.Field("mergeWhenPipelineSucceeds", OptionOf(Scalar()))

    /** Indicates if the merge request is mergeable.
      */
    def mergeable: SelectionBuilder[MergeRequest, Boolean] = _root_.caliban.client.SelectionBuilder.Field("mergeable", Scalar())

    /** Indicates if all discussions in the merge request have been resolved, allowing the merge request to be merged.
      */
    def mergeableDiscussionsState: SelectionBuilder[MergeRequest, Option[Boolean]] =
      _root_.caliban.client.SelectionBuilder.Field("mergeableDiscussionsState", OptionOf(Scalar()))

    /** Timestamp of when the merge request was merged, null if not merged.
      */
    def mergedAt: SelectionBuilder[MergeRequest, Option[Time]] =
      _root_.caliban.client.SelectionBuilder.Field("mergedAt", OptionOf(Scalar()))

    /** The milestone of the merge request.
      */
    def milestone[A](innerSelection: SelectionBuilder[Milestone, A]): SelectionBuilder[MergeRequest, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("milestone", OptionOf(Obj(innerSelection)))

    /** All notes on this noteable.
      */
    def notes[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[NoteConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[MergeRequest, A] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "notes",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** Participants in the merge request. This includes the author, assignees, reviewers, and users mentioned in notes.
      */
    def participants[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[UserCoreConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[MergeRequest, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "participants",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** Pipelines for the merge request. Note: for performance reasons, no more than the most recent 500 pipelines will be returned.
      */
    def pipelines[A](
      status: Option[PipelineStatusEnum] = None,
      ref: Option[String] = None,
      sha: Option[String] = None,
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[PipelineConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[PipelineStatusEnum]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[String]],
      encoder3: ArgEncoder[Option[String]],
      encoder4: ArgEncoder[Option[String]],
      encoder5: ArgEncoder[Option[Int]],
      encoder6: ArgEncoder[Option[Int]]
    ): SelectionBuilder[MergeRequest, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "pipelines",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("status", status, "PipelineStatusEnum")(encoder0),
          Argument("ref", ref, "String")(encoder1),
          Argument("sha", sha, "String")(encoder2),
          Argument("after", after, "String")(encoder3),
          Argument("before", before, "String")(encoder4),
          Argument("first", first, "Int")(encoder5),
          Argument("last", last, "Int")(encoder6)
        )
      )

    /** Alias for target_project.
      */
    def project[A](innerSelection: SelectionBuilder[Project, A]): SelectionBuilder[MergeRequest, A] =
      _root_.caliban.client.SelectionBuilder.Field("project", Obj(innerSelection))

    /** ID of the merge request project.
      */
    def projectId: SelectionBuilder[MergeRequest, Int] = _root_.caliban.client.SelectionBuilder.Field("projectId", Scalar())

    /** Rebase commit SHA of the merge request.
      */
    def rebaseCommitSha: SelectionBuilder[MergeRequest, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("rebaseCommitSha", OptionOf(Scalar()))

    /** Indicates if there is a rebase currently in progress for the merge request.
      */
    def rebaseInProgress: SelectionBuilder[MergeRequest, Boolean] =
      _root_.caliban.client.SelectionBuilder.Field("rebaseInProgress", Scalar())

    /** Internal reference of the merge request. Returned in shortened format by default.
      */
    def reference(full: Option[Boolean] = None)(implicit encoder0: ArgEncoder[Option[Boolean]]): SelectionBuilder[MergeRequest, String] =
      _root_.caliban.client.SelectionBuilder.Field("reference", Scalar(), arguments = List(Argument("full", full, "Boolean")(encoder0)))

    /** Users from whom a review has been requested.
      */
    def reviewers[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[MergeRequestReviewerConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[MergeRequest, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "reviewers",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** Indicates if the merge request is created by @GitLab-Security-Bot.
      */
    def securityAutoFix: SelectionBuilder[MergeRequest, Option[Boolean]] =
      _root_.caliban.client.SelectionBuilder.Field("securityAutoFix", OptionOf(Scalar()))

    /** Indicates if the target branch security reports are out of date.
      */
    def securityReportsUpToDateOnTargetBranch: SelectionBuilder[MergeRequest, Boolean] =
      _root_.caliban.client.SelectionBuilder.Field("securityReportsUpToDateOnTargetBranch", Scalar())

    /** Indicates if the merge request will be rebased.
      */
    def shouldBeRebased: SelectionBuilder[MergeRequest, Boolean] = _root_.caliban.client.SelectionBuilder.Field("shouldBeRebased", Scalar())

    /** Indicates if the source branch of the merge request will be deleted after merge.
      */
    def shouldRemoveSourceBranch: SelectionBuilder[MergeRequest, Option[Boolean]] =
      _root_.caliban.client.SelectionBuilder.Field("shouldRemoveSourceBranch", OptionOf(Scalar()))

    /** Source branch of the merge request.
      */
    def sourceBranch: SelectionBuilder[MergeRequest, String] = _root_.caliban.client.SelectionBuilder.Field("sourceBranch", Scalar())

    /** Indicates if the source branch of the merge request exists.
      */
    def sourceBranchExists: SelectionBuilder[MergeRequest, Boolean] =
      _root_.caliban.client.SelectionBuilder.Field("sourceBranchExists", Scalar())

    /** Indicates if the source branch is protected.
      */
    def sourceBranchProtected: SelectionBuilder[MergeRequest, Boolean] =
      _root_.caliban.client.SelectionBuilder.Field("sourceBranchProtected", Scalar())

    /** Source project of the merge request.
      */
    def sourceProject[A](innerSelection: SelectionBuilder[Project, A]): SelectionBuilder[MergeRequest, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("sourceProject", OptionOf(Obj(innerSelection)))

    /** ID of the merge request source project.
      */
    def sourceProjectId: SelectionBuilder[MergeRequest, Option[Int]] =
      _root_.caliban.client.SelectionBuilder.Field("sourceProjectId", OptionOf(Scalar()))

    /** Indicates if squash on merge is enabled.
      */
    def squash: SelectionBuilder[MergeRequest, Boolean] = _root_.caliban.client.SelectionBuilder.Field("squash", Scalar())

    /** Indicates if squash on merge is enabled.
      */
    def squashOnMerge: SelectionBuilder[MergeRequest, Boolean] = _root_.caliban.client.SelectionBuilder.Field("squashOnMerge", Scalar())

    /** State of the merge request.
      */
    def state: SelectionBuilder[MergeRequest, MergeRequestState] = _root_.caliban.client.SelectionBuilder.Field("state", Scalar())

    /** Indicates if the currently logged in user is subscribed to this merge request.
      */
    def subscribed: SelectionBuilder[MergeRequest, Boolean] = _root_.caliban.client.SelectionBuilder.Field("subscribed", Scalar())

    /** Target branch of the merge request.
      */
    def targetBranch: SelectionBuilder[MergeRequest, String] = _root_.caliban.client.SelectionBuilder.Field("targetBranch", Scalar())

    /** Indicates if the target branch of the merge request exists.
      */
    def targetBranchExists: SelectionBuilder[MergeRequest, Boolean] =
      _root_.caliban.client.SelectionBuilder.Field("targetBranchExists", Scalar())

    /** Target project of the merge request.
      */
    def targetProject[A](innerSelection: SelectionBuilder[Project, A]): SelectionBuilder[MergeRequest, A] =
      _root_.caliban.client.SelectionBuilder.Field("targetProject", Obj(innerSelection))

    /** ID of the merge request target project.
      */
    def targetProjectId: SelectionBuilder[MergeRequest, Int] = _root_.caliban.client.SelectionBuilder.Field("targetProjectId", Scalar())

    /** Completion status of tasks
      */
    def taskCompletionStatus[A](innerSelection: SelectionBuilder[TaskCompletionStatus, A]): SelectionBuilder[MergeRequest, A] =
      _root_.caliban.client.SelectionBuilder.Field("taskCompletionStatus", Obj(innerSelection))

    /** Time estimate of the merge request.
      */
    def timeEstimate: SelectionBuilder[MergeRequest, Int] = _root_.caliban.client.SelectionBuilder.Field("timeEstimate", Scalar())

    /** Timelogs on the merge request.
      */
    def timelogs[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[TimelogConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[MergeRequest, A] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "timelogs",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** Title of the merge request.
      */
    def title: SelectionBuilder[MergeRequest, String] = _root_.caliban.client.SelectionBuilder.Field("title", Scalar())

    /** The GitLab Flavored Markdown rendering of `title`
      */
    def titleHtml: SelectionBuilder[MergeRequest, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("titleHtml", OptionOf(Scalar()))

    /** Total time reported as spent on the merge request.
      */
    def totalTimeSpent: SelectionBuilder[MergeRequest, Int] = _root_.caliban.client.SelectionBuilder.Field("totalTimeSpent", Scalar())

    /** Timestamp of when the merge request was last updated.
      */
    def updatedAt: SelectionBuilder[MergeRequest, Time] = _root_.caliban.client.SelectionBuilder.Field("updatedAt", Scalar())

    /** Number of upvotes for the merge request.
      */
    def upvotes: SelectionBuilder[MergeRequest, Int] = _root_.caliban.client.SelectionBuilder.Field("upvotes", Scalar())

    /** Number of user discussions in the merge request.
      */
    def userDiscussionsCount: SelectionBuilder[MergeRequest, Option[Int]] =
      _root_.caliban.client.SelectionBuilder.Field("userDiscussionsCount", OptionOf(Scalar()))

    /** User notes count of the merge request.
      */
    def userNotesCount: SelectionBuilder[MergeRequest, Option[Int]] =
      _root_.caliban.client.SelectionBuilder.Field("userNotesCount", OptionOf(Scalar()))

    /** Permissions for the current user on the resource
      */
    def userPermissions[A](innerSelection: SelectionBuilder[MergeRequestPermissions, A]): SelectionBuilder[MergeRequest, A] =
      _root_.caliban.client.SelectionBuilder.Field("userPermissions", Obj(innerSelection))

    /** Web URL of the merge request.
      */
    def webUrl: SelectionBuilder[MergeRequest, Option[String]] = _root_.caliban.client.SelectionBuilder.Field("webUrl", OptionOf(Scalar()))

    /** Indicates if the merge request is a draft. Deprecated in 13.12: Use `draft`.
      */
    @deprecated("Use `draft`. Deprecated in 13.12.", "")
    def workInProgress: SelectionBuilder[MergeRequest, Boolean] = _root_.caliban.client.SelectionBuilder.Field("workInProgress", Scalar())
  }

  type MergeRequestAcceptPayload

  object MergeRequestAcceptPayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[MergeRequestAcceptPayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[MergeRequestAcceptPayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** The merge request after mutation.
      */
    def mergeRequest[A](innerSelection: SelectionBuilder[MergeRequest, A]): SelectionBuilder[MergeRequestAcceptPayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("mergeRequest", OptionOf(Obj(innerSelection)))
  }

  type MergeRequestAssignee

  object MergeRequestAssignee {

    /** Merge requests assigned to the user.
      */
    def assignedMergeRequests[A](
      iids: Option[List[String]] = None,
      sourceBranches: Option[List[String]] = None,
      targetBranches: Option[List[String]] = None,
      state: Option[MergeRequestState] = None,
      labels: Option[List[String]] = None,
      mergedAfter: Option[Time] = None,
      mergedBefore: Option[Time] = None,
      milestoneTitle: Option[String] = None,
      sort: Option[MergeRequestSort] = None,
      not: Option[MergeRequestsResolverNegatedParams] = None,
      projectPath: Option[String] = None,
      projectId: Option[ProjectID] = None,
      authorUsername: Option[String] = None,
      reviewerUsername: Option[String] = None,
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[MergeRequestConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[List[String]]],
      encoder1: ArgEncoder[Option[List[String]]],
      encoder2: ArgEncoder[Option[List[String]]],
      encoder3: ArgEncoder[Option[MergeRequestState]],
      encoder4: ArgEncoder[Option[List[String]]],
      encoder5: ArgEncoder[Option[Time]],
      encoder6: ArgEncoder[Option[Time]],
      encoder7: ArgEncoder[Option[String]],
      encoder8: ArgEncoder[Option[MergeRequestSort]],
      encoder9: ArgEncoder[Option[MergeRequestsResolverNegatedParams]],
      encoder10: ArgEncoder[Option[String]],
      encoder11: ArgEncoder[Option[ProjectID]],
      encoder12: ArgEncoder[Option[String]],
      encoder13: ArgEncoder[Option[String]],
      encoder14: ArgEncoder[Option[String]],
      encoder15: ArgEncoder[Option[String]],
      encoder16: ArgEncoder[Option[Int]],
      encoder17: ArgEncoder[Option[Int]]
    ): SelectionBuilder[MergeRequestAssignee, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "assignedMergeRequests",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("iids", iids, "[String!]")(encoder0),
          Argument("sourceBranches", sourceBranches, "[String!]")(encoder1),
          Argument("targetBranches", targetBranches, "[String!]")(encoder2),
          Argument("state", state, "MergeRequestState")(encoder3),
          Argument("labels", labels, "[String!]")(encoder4),
          Argument("mergedAfter", mergedAfter, "Time")(encoder5),
          Argument("mergedBefore", mergedBefore, "Time")(encoder6),
          Argument("milestoneTitle", milestoneTitle, "String")(encoder7),
          Argument("sort", sort, "MergeRequestSort")(encoder8),
          Argument("not", not, "MergeRequestsResolverNegatedParams")(encoder9),
          Argument("projectPath", projectPath, "String")(encoder10),
          Argument("projectId", projectId, "ProjectID")(encoder11),
          Argument("authorUsername", authorUsername, "String")(encoder12),
          Argument("reviewerUsername", reviewerUsername, "String")(encoder13),
          Argument("after", after, "String")(encoder14),
          Argument("before", before, "String")(encoder15),
          Argument("first", first, "Int")(encoder16),
          Argument("last", last, "Int")(encoder17)
        )
      )

    /** Merge requests authored by the user.
      */
    def authoredMergeRequests[A](
      iids: Option[List[String]] = None,
      sourceBranches: Option[List[String]] = None,
      targetBranches: Option[List[String]] = None,
      state: Option[MergeRequestState] = None,
      labels: Option[List[String]] = None,
      mergedAfter: Option[Time] = None,
      mergedBefore: Option[Time] = None,
      milestoneTitle: Option[String] = None,
      sort: Option[MergeRequestSort] = None,
      not: Option[MergeRequestsResolverNegatedParams] = None,
      projectPath: Option[String] = None,
      projectId: Option[ProjectID] = None,
      assigneeUsername: Option[String] = None,
      reviewerUsername: Option[String] = None,
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[MergeRequestConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[List[String]]],
      encoder1: ArgEncoder[Option[List[String]]],
      encoder2: ArgEncoder[Option[List[String]]],
      encoder3: ArgEncoder[Option[MergeRequestState]],
      encoder4: ArgEncoder[Option[List[String]]],
      encoder5: ArgEncoder[Option[Time]],
      encoder6: ArgEncoder[Option[Time]],
      encoder7: ArgEncoder[Option[String]],
      encoder8: ArgEncoder[Option[MergeRequestSort]],
      encoder9: ArgEncoder[Option[MergeRequestsResolverNegatedParams]],
      encoder10: ArgEncoder[Option[String]],
      encoder11: ArgEncoder[Option[ProjectID]],
      encoder12: ArgEncoder[Option[String]],
      encoder13: ArgEncoder[Option[String]],
      encoder14: ArgEncoder[Option[String]],
      encoder15: ArgEncoder[Option[String]],
      encoder16: ArgEncoder[Option[Int]],
      encoder17: ArgEncoder[Option[Int]]
    ): SelectionBuilder[MergeRequestAssignee, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "authoredMergeRequests",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("iids", iids, "[String!]")(encoder0),
          Argument("sourceBranches", sourceBranches, "[String!]")(encoder1),
          Argument("targetBranches", targetBranches, "[String!]")(encoder2),
          Argument("state", state, "MergeRequestState")(encoder3),
          Argument("labels", labels, "[String!]")(encoder4),
          Argument("mergedAfter", mergedAfter, "Time")(encoder5),
          Argument("mergedBefore", mergedBefore, "Time")(encoder6),
          Argument("milestoneTitle", milestoneTitle, "String")(encoder7),
          Argument("sort", sort, "MergeRequestSort")(encoder8),
          Argument("not", not, "MergeRequestsResolverNegatedParams")(encoder9),
          Argument("projectPath", projectPath, "String")(encoder10),
          Argument("projectId", projectId, "ProjectID")(encoder11),
          Argument("assigneeUsername", assigneeUsername, "String")(encoder12),
          Argument("reviewerUsername", reviewerUsername, "String")(encoder13),
          Argument("after", after, "String")(encoder14),
          Argument("before", before, "String")(encoder15),
          Argument("first", first, "Int")(encoder16),
          Argument("last", last, "Int")(encoder17)
        )
      )

    /** URL of the user's avatar.
      */
    def avatarUrl: SelectionBuilder[MergeRequestAssignee, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("avatarUrl", OptionOf(Scalar()))

    /** Indicates if the user is a bot.
      */
    def bot: SelectionBuilder[MergeRequestAssignee, Boolean] = _root_.caliban.client.SelectionBuilder.Field("bot", Scalar())

    /** User callouts that belong to the user.
      */
    def callouts[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[UserCalloutConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[MergeRequestAssignee, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "callouts",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** User email. Deprecated in 13.7: This was renamed.
      */
    @deprecated("This was renamed. Please use `User.publicEmail`. Deprecated in 13.7.", "")
    def email: SelectionBuilder[MergeRequestAssignee, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("email", OptionOf(Scalar()))

    /** Group count for the user.
      */
    def groupCount: SelectionBuilder[MergeRequestAssignee, Option[Int]] =
      _root_.caliban.client.SelectionBuilder.Field("groupCount", OptionOf(Scalar()))

    /** Group memberships of the user.
      */
    def groupMemberships[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[GroupMemberConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[MergeRequestAssignee, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "groupMemberships",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** ID of the user.
      */
    def id: SelectionBuilder[MergeRequestAssignee, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())

    /** The location of the user.
      */
    def location: SelectionBuilder[MergeRequestAssignee, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("location", OptionOf(Scalar()))

    /** Details of this user's interactions with the merge request.
      */
    def mergeRequestInteraction[A](
      innerSelection: SelectionBuilder[UserMergeRequestInteraction, A]
    ): SelectionBuilder[MergeRequestAssignee, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("mergeRequestInteraction", OptionOf(Obj(innerSelection)))

    /** Human-readable name of the user.
      */
    def name: SelectionBuilder[MergeRequestAssignee, String] = _root_.caliban.client.SelectionBuilder.Field("name", Scalar())

    /** Project memberships of the user.
      */
    def projectMemberships[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[ProjectMemberConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[MergeRequestAssignee, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "projectMemberships",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** User's public email.
      */
    def publicEmail: SelectionBuilder[MergeRequestAssignee, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("publicEmail", OptionOf(Scalar()))

    /** Merge requests assigned to the user for review.
      */
    def reviewRequestedMergeRequests[A](
      iids: Option[List[String]] = None,
      sourceBranches: Option[List[String]] = None,
      targetBranches: Option[List[String]] = None,
      state: Option[MergeRequestState] = None,
      labels: Option[List[String]] = None,
      mergedAfter: Option[Time] = None,
      mergedBefore: Option[Time] = None,
      milestoneTitle: Option[String] = None,
      sort: Option[MergeRequestSort] = None,
      not: Option[MergeRequestsResolverNegatedParams] = None,
      projectPath: Option[String] = None,
      projectId: Option[ProjectID] = None,
      authorUsername: Option[String] = None,
      assigneeUsername: Option[String] = None,
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[MergeRequestConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[List[String]]],
      encoder1: ArgEncoder[Option[List[String]]],
      encoder2: ArgEncoder[Option[List[String]]],
      encoder3: ArgEncoder[Option[MergeRequestState]],
      encoder4: ArgEncoder[Option[List[String]]],
      encoder5: ArgEncoder[Option[Time]],
      encoder6: ArgEncoder[Option[Time]],
      encoder7: ArgEncoder[Option[String]],
      encoder8: ArgEncoder[Option[MergeRequestSort]],
      encoder9: ArgEncoder[Option[MergeRequestsResolverNegatedParams]],
      encoder10: ArgEncoder[Option[String]],
      encoder11: ArgEncoder[Option[ProjectID]],
      encoder12: ArgEncoder[Option[String]],
      encoder13: ArgEncoder[Option[String]],
      encoder14: ArgEncoder[Option[String]],
      encoder15: ArgEncoder[Option[String]],
      encoder16: ArgEncoder[Option[Int]],
      encoder17: ArgEncoder[Option[Int]]
    ): SelectionBuilder[MergeRequestAssignee, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "reviewRequestedMergeRequests",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("iids", iids, "[String!]")(encoder0),
          Argument("sourceBranches", sourceBranches, "[String!]")(encoder1),
          Argument("targetBranches", targetBranches, "[String!]")(encoder2),
          Argument("state", state, "MergeRequestState")(encoder3),
          Argument("labels", labels, "[String!]")(encoder4),
          Argument("mergedAfter", mergedAfter, "Time")(encoder5),
          Argument("mergedBefore", mergedBefore, "Time")(encoder6),
          Argument("milestoneTitle", milestoneTitle, "String")(encoder7),
          Argument("sort", sort, "MergeRequestSort")(encoder8),
          Argument("not", not, "MergeRequestsResolverNegatedParams")(encoder9),
          Argument("projectPath", projectPath, "String")(encoder10),
          Argument("projectId", projectId, "ProjectID")(encoder11),
          Argument("authorUsername", authorUsername, "String")(encoder12),
          Argument("assigneeUsername", assigneeUsername, "String")(encoder13),
          Argument("after", after, "String")(encoder14),
          Argument("before", before, "String")(encoder15),
          Argument("first", first, "Int")(encoder16),
          Argument("last", last, "Int")(encoder17)
        )
      )

    /** Snippets authored by the user.
      */
    def snippets[A](
      ids: Option[List[SnippetID]] = None,
      visibility: Option[VisibilityScopesEnum] = None,
      `type`: Option[TypeEnum] = None,
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[SnippetConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[List[SnippetID]]],
      encoder1: ArgEncoder[Option[VisibilityScopesEnum]],
      encoder2: ArgEncoder[Option[TypeEnum]],
      encoder3: ArgEncoder[Option[String]],
      encoder4: ArgEncoder[Option[String]],
      encoder5: ArgEncoder[Option[Int]],
      encoder6: ArgEncoder[Option[Int]]
    ): SelectionBuilder[MergeRequestAssignee, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "snippets",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("ids", ids, "[SnippetID!]")(encoder0),
          Argument("visibility", visibility, "VisibilityScopesEnum")(encoder1),
          Argument("type", `type`, "TypeEnum")(encoder2),
          Argument("after", after, "String")(encoder3),
          Argument("before", before, "String")(encoder4),
          Argument("first", first, "Int")(encoder5),
          Argument("last", last, "Int")(encoder6)
        )
      )

    /** Projects starred by the user.
      */
    def starredProjects[A](
      search: Option[String] = None,
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[ProjectConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[String]],
      encoder3: ArgEncoder[Option[Int]],
      encoder4: ArgEncoder[Option[Int]]
    ): SelectionBuilder[MergeRequestAssignee, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "starredProjects",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("search", search, "String")(encoder0),
          Argument("after", after, "String")(encoder1),
          Argument("before", before, "String")(encoder2),
          Argument("first", first, "Int")(encoder3),
          Argument("last", last, "Int")(encoder4)
        )
      )

    /** State of the user.
      */
    def state: SelectionBuilder[MergeRequestAssignee, UserState] = _root_.caliban.client.SelectionBuilder.Field("state", Scalar())

    /** User status.
      */
    def status[A](innerSelection: SelectionBuilder[UserStatus, A]): SelectionBuilder[MergeRequestAssignee, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("status", OptionOf(Obj(innerSelection)))

    /** To-do items of the user.
      */
    def todos[A](
      action: Option[List[TodoActionEnum]] = None,
      authorId: Option[List[String]] = None,
      projectId: Option[List[String]] = None,
      groupId: Option[List[String]] = None,
      state: Option[List[TodoStateEnum]] = None,
      `type`: Option[List[TodoTargetEnum]] = None,
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[TodoConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[List[TodoActionEnum]]],
      encoder1: ArgEncoder[Option[List[String]]],
      encoder2: ArgEncoder[Option[List[String]]],
      encoder3: ArgEncoder[Option[List[String]]],
      encoder4: ArgEncoder[Option[List[TodoStateEnum]]],
      encoder5: ArgEncoder[Option[List[TodoTargetEnum]]],
      encoder6: ArgEncoder[Option[String]],
      encoder7: ArgEncoder[Option[String]],
      encoder8: ArgEncoder[Option[Int]],
      encoder9: ArgEncoder[Option[Int]]
    ): SelectionBuilder[MergeRequestAssignee, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "todos",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("action", action, "[TodoActionEnum!]")(encoder0),
          Argument("authorId", authorId, "[ID!]")(encoder1),
          Argument("projectId", projectId, "[ID!]")(encoder2),
          Argument("groupId", groupId, "[ID!]")(encoder3),
          Argument("state", state, "[TodoStateEnum!]")(encoder4),
          Argument("type", `type`, "[TodoTargetEnum!]")(encoder5),
          Argument("after", after, "String")(encoder6),
          Argument("before", before, "String")(encoder7),
          Argument("first", first, "Int")(encoder8),
          Argument("last", last, "Int")(encoder9)
        )
      )

    /** Permissions for the current user on the resource.
      */
    def userPermissions[A](innerSelection: SelectionBuilder[UserPermissions, A]): SelectionBuilder[MergeRequestAssignee, A] =
      _root_.caliban.client.SelectionBuilder.Field("userPermissions", Obj(innerSelection))

    /** Username of the user. Unique within this instance of GitLab.
      */
    def username: SelectionBuilder[MergeRequestAssignee, String] = _root_.caliban.client.SelectionBuilder.Field("username", Scalar())

    /** Web path of the user.
      */
    def webPath: SelectionBuilder[MergeRequestAssignee, String] = _root_.caliban.client.SelectionBuilder.Field("webPath", Scalar())

    /** Web URL of the user.
      */
    def webUrl: SelectionBuilder[MergeRequestAssignee, String] = _root_.caliban.client.SelectionBuilder.Field("webUrl", Scalar())
  }

  type MergeRequestAssigneeConnection

  object MergeRequestAssigneeConnection {

    /** A list of edges.
      */
    def edges[A](
      innerSelection: SelectionBuilder[MergeRequestAssigneeEdge, A]
    ): SelectionBuilder[MergeRequestAssigneeConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](
      innerSelection: SelectionBuilder[MergeRequestAssignee, A]
    ): SelectionBuilder[MergeRequestAssigneeConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[MergeRequestAssigneeConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  }

  type MergeRequestAssigneeEdge

  object MergeRequestAssigneeEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[MergeRequestAssigneeEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](innerSelection: SelectionBuilder[MergeRequestAssignee, A]): SelectionBuilder[MergeRequestAssigneeEdge, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
  }

  type MergeRequestConnection

  object MergeRequestConnection {

    /** Total count of collection.
      */
    def count: SelectionBuilder[MergeRequestConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("count", Scalar())

    /** A list of edges.
      */
    def edges[A](innerSelection: SelectionBuilder[MergeRequestEdge, A]): SelectionBuilder[MergeRequestConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](innerSelection: SelectionBuilder[MergeRequest, A]): SelectionBuilder[MergeRequestConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[MergeRequestConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))

    /** Total sum of time to merge, in seconds, for the collection of merge requests.
      */
    def totalTimeToMerge: SelectionBuilder[MergeRequestConnection, Option[Double]] =
      _root_.caliban.client.SelectionBuilder.Field("totalTimeToMerge", OptionOf(Scalar()))
  }

  type MergeRequestCreatePayload

  object MergeRequestCreatePayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[MergeRequestCreatePayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[MergeRequestCreatePayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** The merge request after mutation.
      */
    def mergeRequest[A](innerSelection: SelectionBuilder[MergeRequest, A]): SelectionBuilder[MergeRequestCreatePayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("mergeRequest", OptionOf(Obj(innerSelection)))
  }

  type MergeRequestDiffRegistry

  object MergeRequestDiffRegistry {

    /** Timestamp when the MergeRequestDiffRegistry was created
      */
    def createdAt: SelectionBuilder[MergeRequestDiffRegistry, Option[Time]] =
      _root_.caliban.client.SelectionBuilder.Field("createdAt", OptionOf(Scalar()))

    /** ID of the MergeRequestDiffRegistry
      */
    def id: SelectionBuilder[MergeRequestDiffRegistry, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())

    /** Error message during sync of the MergeRequestDiffRegistry
      */
    def lastSyncFailure: SelectionBuilder[MergeRequestDiffRegistry, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("lastSyncFailure", OptionOf(Scalar()))

    /** Timestamp of the most recent successful sync of the MergeRequestDiffRegistry
      */
    def lastSyncedAt: SelectionBuilder[MergeRequestDiffRegistry, Option[Time]] =
      _root_.caliban.client.SelectionBuilder.Field("lastSyncedAt", OptionOf(Scalar()))

    /** ID of the Merge Request diff.
      */
    def mergeRequestDiffId: SelectionBuilder[MergeRequestDiffRegistry, String] =
      _root_.caliban.client.SelectionBuilder.Field("mergeRequestDiffId", Scalar())

    /** Timestamp after which the MergeRequestDiffRegistry should be resynced
      */
    def retryAt: SelectionBuilder[MergeRequestDiffRegistry, Option[Time]] =
      _root_.caliban.client.SelectionBuilder.Field("retryAt", OptionOf(Scalar()))

    /** Number of consecutive failed sync attempts of the MergeRequestDiffRegistry
      */
    def retryCount: SelectionBuilder[MergeRequestDiffRegistry, Option[Int]] =
      _root_.caliban.client.SelectionBuilder.Field("retryCount", OptionOf(Scalar()))

    /** Sync state of the MergeRequestDiffRegistry
      */
    def state: SelectionBuilder[MergeRequestDiffRegistry, Option[RegistryState]] =
      _root_.caliban.client.SelectionBuilder.Field("state", OptionOf(Scalar()))
  }

  type MergeRequestDiffRegistryConnection

  object MergeRequestDiffRegistryConnection {

    /** A list of edges.
      */
    def edges[A](
      innerSelection: SelectionBuilder[MergeRequestDiffRegistryEdge, A]
    ): SelectionBuilder[MergeRequestDiffRegistryConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](
      innerSelection: SelectionBuilder[MergeRequestDiffRegistry, A]
    ): SelectionBuilder[MergeRequestDiffRegistryConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[MergeRequestDiffRegistryConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  }

  type MergeRequestDiffRegistryEdge

  object MergeRequestDiffRegistryEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[MergeRequestDiffRegistryEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](innerSelection: SelectionBuilder[MergeRequestDiffRegistry, A]): SelectionBuilder[MergeRequestDiffRegistryEdge, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
  }

  type MergeRequestEdge

  object MergeRequestEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[MergeRequestEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](innerSelection: SelectionBuilder[MergeRequest, A]): SelectionBuilder[MergeRequestEdge, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
  }

  type MergeRequestPermissions

  object MergeRequestPermissions {

    /** Indicates the user can perform `admin_merge_request` on this resource
      */
    def adminMergeRequest: SelectionBuilder[MergeRequestPermissions, Boolean] =
      _root_.caliban.client.SelectionBuilder.Field("adminMergeRequest", Scalar())

    /** Indicates the user can perform `can_merge` on this resource
      */
    def canMerge: SelectionBuilder[MergeRequestPermissions, Boolean] = _root_.caliban.client.SelectionBuilder.Field("canMerge", Scalar())

    /** Indicates the user can perform `cherry_pick_on_current_merge_request` on this resource
      */
    def cherryPickOnCurrentMergeRequest: SelectionBuilder[MergeRequestPermissions, Boolean] =
      _root_.caliban.client.SelectionBuilder.Field("cherryPickOnCurrentMergeRequest", Scalar())

    /** Indicates the user can perform `create_note` on this resource
      */
    def createNote: SelectionBuilder[MergeRequestPermissions, Boolean] =
      _root_.caliban.client.SelectionBuilder.Field("createNote", Scalar())

    /** Indicates the user can perform `push_to_source_branch` on this resource
      */
    def pushToSourceBranch: SelectionBuilder[MergeRequestPermissions, Boolean] =
      _root_.caliban.client.SelectionBuilder.Field("pushToSourceBranch", Scalar())

    /** Indicates the user can perform `read_merge_request` on this resource
      */
    def readMergeRequest: SelectionBuilder[MergeRequestPermissions, Boolean] =
      _root_.caliban.client.SelectionBuilder.Field("readMergeRequest", Scalar())

    /** Indicates the user can perform `remove_source_branch` on this resource
      */
    def removeSourceBranch: SelectionBuilder[MergeRequestPermissions, Boolean] =
      _root_.caliban.client.SelectionBuilder.Field("removeSourceBranch", Scalar())

    /** Indicates the user can perform `revert_on_current_merge_request` on this resource
      */
    def revertOnCurrentMergeRequest: SelectionBuilder[MergeRequestPermissions, Boolean] =
      _root_.caliban.client.SelectionBuilder.Field("revertOnCurrentMergeRequest", Scalar())

    /** Indicates the user can perform `update_merge_request` on this resource
      */
    def updateMergeRequest: SelectionBuilder[MergeRequestPermissions, Boolean] =
      _root_.caliban.client.SelectionBuilder.Field("updateMergeRequest", Scalar())
  }

  type MergeRequestReviewer

  object MergeRequestReviewer {

    /** Merge requests assigned to the user.
      */
    def assignedMergeRequests[A](
      iids: Option[List[String]] = None,
      sourceBranches: Option[List[String]] = None,
      targetBranches: Option[List[String]] = None,
      state: Option[MergeRequestState] = None,
      labels: Option[List[String]] = None,
      mergedAfter: Option[Time] = None,
      mergedBefore: Option[Time] = None,
      milestoneTitle: Option[String] = None,
      sort: Option[MergeRequestSort] = None,
      not: Option[MergeRequestsResolverNegatedParams] = None,
      projectPath: Option[String] = None,
      projectId: Option[ProjectID] = None,
      authorUsername: Option[String] = None,
      reviewerUsername: Option[String] = None,
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[MergeRequestConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[List[String]]],
      encoder1: ArgEncoder[Option[List[String]]],
      encoder2: ArgEncoder[Option[List[String]]],
      encoder3: ArgEncoder[Option[MergeRequestState]],
      encoder4: ArgEncoder[Option[List[String]]],
      encoder5: ArgEncoder[Option[Time]],
      encoder6: ArgEncoder[Option[Time]],
      encoder7: ArgEncoder[Option[String]],
      encoder8: ArgEncoder[Option[MergeRequestSort]],
      encoder9: ArgEncoder[Option[MergeRequestsResolverNegatedParams]],
      encoder10: ArgEncoder[Option[String]],
      encoder11: ArgEncoder[Option[ProjectID]],
      encoder12: ArgEncoder[Option[String]],
      encoder13: ArgEncoder[Option[String]],
      encoder14: ArgEncoder[Option[String]],
      encoder15: ArgEncoder[Option[String]],
      encoder16: ArgEncoder[Option[Int]],
      encoder17: ArgEncoder[Option[Int]]
    ): SelectionBuilder[MergeRequestReviewer, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "assignedMergeRequests",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("iids", iids, "[String!]")(encoder0),
          Argument("sourceBranches", sourceBranches, "[String!]")(encoder1),
          Argument("targetBranches", targetBranches, "[String!]")(encoder2),
          Argument("state", state, "MergeRequestState")(encoder3),
          Argument("labels", labels, "[String!]")(encoder4),
          Argument("mergedAfter", mergedAfter, "Time")(encoder5),
          Argument("mergedBefore", mergedBefore, "Time")(encoder6),
          Argument("milestoneTitle", milestoneTitle, "String")(encoder7),
          Argument("sort", sort, "MergeRequestSort")(encoder8),
          Argument("not", not, "MergeRequestsResolverNegatedParams")(encoder9),
          Argument("projectPath", projectPath, "String")(encoder10),
          Argument("projectId", projectId, "ProjectID")(encoder11),
          Argument("authorUsername", authorUsername, "String")(encoder12),
          Argument("reviewerUsername", reviewerUsername, "String")(encoder13),
          Argument("after", after, "String")(encoder14),
          Argument("before", before, "String")(encoder15),
          Argument("first", first, "Int")(encoder16),
          Argument("last", last, "Int")(encoder17)
        )
      )

    /** Merge requests authored by the user.
      */
    def authoredMergeRequests[A](
      iids: Option[List[String]] = None,
      sourceBranches: Option[List[String]] = None,
      targetBranches: Option[List[String]] = None,
      state: Option[MergeRequestState] = None,
      labels: Option[List[String]] = None,
      mergedAfter: Option[Time] = None,
      mergedBefore: Option[Time] = None,
      milestoneTitle: Option[String] = None,
      sort: Option[MergeRequestSort] = None,
      not: Option[MergeRequestsResolverNegatedParams] = None,
      projectPath: Option[String] = None,
      projectId: Option[ProjectID] = None,
      assigneeUsername: Option[String] = None,
      reviewerUsername: Option[String] = None,
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[MergeRequestConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[List[String]]],
      encoder1: ArgEncoder[Option[List[String]]],
      encoder2: ArgEncoder[Option[List[String]]],
      encoder3: ArgEncoder[Option[MergeRequestState]],
      encoder4: ArgEncoder[Option[List[String]]],
      encoder5: ArgEncoder[Option[Time]],
      encoder6: ArgEncoder[Option[Time]],
      encoder7: ArgEncoder[Option[String]],
      encoder8: ArgEncoder[Option[MergeRequestSort]],
      encoder9: ArgEncoder[Option[MergeRequestsResolverNegatedParams]],
      encoder10: ArgEncoder[Option[String]],
      encoder11: ArgEncoder[Option[ProjectID]],
      encoder12: ArgEncoder[Option[String]],
      encoder13: ArgEncoder[Option[String]],
      encoder14: ArgEncoder[Option[String]],
      encoder15: ArgEncoder[Option[String]],
      encoder16: ArgEncoder[Option[Int]],
      encoder17: ArgEncoder[Option[Int]]
    ): SelectionBuilder[MergeRequestReviewer, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "authoredMergeRequests",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("iids", iids, "[String!]")(encoder0),
          Argument("sourceBranches", sourceBranches, "[String!]")(encoder1),
          Argument("targetBranches", targetBranches, "[String!]")(encoder2),
          Argument("state", state, "MergeRequestState")(encoder3),
          Argument("labels", labels, "[String!]")(encoder4),
          Argument("mergedAfter", mergedAfter, "Time")(encoder5),
          Argument("mergedBefore", mergedBefore, "Time")(encoder6),
          Argument("milestoneTitle", milestoneTitle, "String")(encoder7),
          Argument("sort", sort, "MergeRequestSort")(encoder8),
          Argument("not", not, "MergeRequestsResolverNegatedParams")(encoder9),
          Argument("projectPath", projectPath, "String")(encoder10),
          Argument("projectId", projectId, "ProjectID")(encoder11),
          Argument("assigneeUsername", assigneeUsername, "String")(encoder12),
          Argument("reviewerUsername", reviewerUsername, "String")(encoder13),
          Argument("after", after, "String")(encoder14),
          Argument("before", before, "String")(encoder15),
          Argument("first", first, "Int")(encoder16),
          Argument("last", last, "Int")(encoder17)
        )
      )

    /** URL of the user's avatar.
      */
    def avatarUrl: SelectionBuilder[MergeRequestReviewer, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("avatarUrl", OptionOf(Scalar()))

    /** Indicates if the user is a bot.
      */
    def bot: SelectionBuilder[MergeRequestReviewer, Boolean] = _root_.caliban.client.SelectionBuilder.Field("bot", Scalar())

    /** User callouts that belong to the user.
      */
    def callouts[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[UserCalloutConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[MergeRequestReviewer, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "callouts",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** User email. Deprecated in 13.7: This was renamed.
      */
    @deprecated("This was renamed. Please use `User.publicEmail`. Deprecated in 13.7.", "")
    def email: SelectionBuilder[MergeRequestReviewer, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("email", OptionOf(Scalar()))

    /** Group count for the user.
      */
    def groupCount: SelectionBuilder[MergeRequestReviewer, Option[Int]] =
      _root_.caliban.client.SelectionBuilder.Field("groupCount", OptionOf(Scalar()))

    /** Group memberships of the user.
      */
    def groupMemberships[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[GroupMemberConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[MergeRequestReviewer, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "groupMemberships",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** ID of the user.
      */
    def id: SelectionBuilder[MergeRequestReviewer, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())

    /** The location of the user.
      */
    def location: SelectionBuilder[MergeRequestReviewer, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("location", OptionOf(Scalar()))

    /** Details of this user's interactions with the merge request.
      */
    def mergeRequestInteraction[A](
      innerSelection: SelectionBuilder[UserMergeRequestInteraction, A]
    ): SelectionBuilder[MergeRequestReviewer, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("mergeRequestInteraction", OptionOf(Obj(innerSelection)))

    /** Human-readable name of the user.
      */
    def name: SelectionBuilder[MergeRequestReviewer, String] = _root_.caliban.client.SelectionBuilder.Field("name", Scalar())

    /** Project memberships of the user.
      */
    def projectMemberships[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[ProjectMemberConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[MergeRequestReviewer, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "projectMemberships",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** User's public email.
      */
    def publicEmail: SelectionBuilder[MergeRequestReviewer, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("publicEmail", OptionOf(Scalar()))

    /** Merge requests assigned to the user for review.
      */
    def reviewRequestedMergeRequests[A](
      iids: Option[List[String]] = None,
      sourceBranches: Option[List[String]] = None,
      targetBranches: Option[List[String]] = None,
      state: Option[MergeRequestState] = None,
      labels: Option[List[String]] = None,
      mergedAfter: Option[Time] = None,
      mergedBefore: Option[Time] = None,
      milestoneTitle: Option[String] = None,
      sort: Option[MergeRequestSort] = None,
      not: Option[MergeRequestsResolverNegatedParams] = None,
      projectPath: Option[String] = None,
      projectId: Option[ProjectID] = None,
      authorUsername: Option[String] = None,
      assigneeUsername: Option[String] = None,
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[MergeRequestConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[List[String]]],
      encoder1: ArgEncoder[Option[List[String]]],
      encoder2: ArgEncoder[Option[List[String]]],
      encoder3: ArgEncoder[Option[MergeRequestState]],
      encoder4: ArgEncoder[Option[List[String]]],
      encoder5: ArgEncoder[Option[Time]],
      encoder6: ArgEncoder[Option[Time]],
      encoder7: ArgEncoder[Option[String]],
      encoder8: ArgEncoder[Option[MergeRequestSort]],
      encoder9: ArgEncoder[Option[MergeRequestsResolverNegatedParams]],
      encoder10: ArgEncoder[Option[String]],
      encoder11: ArgEncoder[Option[ProjectID]],
      encoder12: ArgEncoder[Option[String]],
      encoder13: ArgEncoder[Option[String]],
      encoder14: ArgEncoder[Option[String]],
      encoder15: ArgEncoder[Option[String]],
      encoder16: ArgEncoder[Option[Int]],
      encoder17: ArgEncoder[Option[Int]]
    ): SelectionBuilder[MergeRequestReviewer, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "reviewRequestedMergeRequests",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("iids", iids, "[String!]")(encoder0),
          Argument("sourceBranches", sourceBranches, "[String!]")(encoder1),
          Argument("targetBranches", targetBranches, "[String!]")(encoder2),
          Argument("state", state, "MergeRequestState")(encoder3),
          Argument("labels", labels, "[String!]")(encoder4),
          Argument("mergedAfter", mergedAfter, "Time")(encoder5),
          Argument("mergedBefore", mergedBefore, "Time")(encoder6),
          Argument("milestoneTitle", milestoneTitle, "String")(encoder7),
          Argument("sort", sort, "MergeRequestSort")(encoder8),
          Argument("not", not, "MergeRequestsResolverNegatedParams")(encoder9),
          Argument("projectPath", projectPath, "String")(encoder10),
          Argument("projectId", projectId, "ProjectID")(encoder11),
          Argument("authorUsername", authorUsername, "String")(encoder12),
          Argument("assigneeUsername", assigneeUsername, "String")(encoder13),
          Argument("after", after, "String")(encoder14),
          Argument("before", before, "String")(encoder15),
          Argument("first", first, "Int")(encoder16),
          Argument("last", last, "Int")(encoder17)
        )
      )

    /** Snippets authored by the user.
      */
    def snippets[A](
      ids: Option[List[SnippetID]] = None,
      visibility: Option[VisibilityScopesEnum] = None,
      `type`: Option[TypeEnum] = None,
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[SnippetConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[List[SnippetID]]],
      encoder1: ArgEncoder[Option[VisibilityScopesEnum]],
      encoder2: ArgEncoder[Option[TypeEnum]],
      encoder3: ArgEncoder[Option[String]],
      encoder4: ArgEncoder[Option[String]],
      encoder5: ArgEncoder[Option[Int]],
      encoder6: ArgEncoder[Option[Int]]
    ): SelectionBuilder[MergeRequestReviewer, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "snippets",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("ids", ids, "[SnippetID!]")(encoder0),
          Argument("visibility", visibility, "VisibilityScopesEnum")(encoder1),
          Argument("type", `type`, "TypeEnum")(encoder2),
          Argument("after", after, "String")(encoder3),
          Argument("before", before, "String")(encoder4),
          Argument("first", first, "Int")(encoder5),
          Argument("last", last, "Int")(encoder6)
        )
      )

    /** Projects starred by the user.
      */
    def starredProjects[A](
      search: Option[String] = None,
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[ProjectConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[String]],
      encoder3: ArgEncoder[Option[Int]],
      encoder4: ArgEncoder[Option[Int]]
    ): SelectionBuilder[MergeRequestReviewer, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "starredProjects",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("search", search, "String")(encoder0),
          Argument("after", after, "String")(encoder1),
          Argument("before", before, "String")(encoder2),
          Argument("first", first, "Int")(encoder3),
          Argument("last", last, "Int")(encoder4)
        )
      )

    /** State of the user.
      */
    def state: SelectionBuilder[MergeRequestReviewer, UserState] = _root_.caliban.client.SelectionBuilder.Field("state", Scalar())

    /** User status.
      */
    def status[A](innerSelection: SelectionBuilder[UserStatus, A]): SelectionBuilder[MergeRequestReviewer, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("status", OptionOf(Obj(innerSelection)))

    /** To-do items of the user.
      */
    def todos[A](
      action: Option[List[TodoActionEnum]] = None,
      authorId: Option[List[String]] = None,
      projectId: Option[List[String]] = None,
      groupId: Option[List[String]] = None,
      state: Option[List[TodoStateEnum]] = None,
      `type`: Option[List[TodoTargetEnum]] = None,
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[TodoConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[List[TodoActionEnum]]],
      encoder1: ArgEncoder[Option[List[String]]],
      encoder2: ArgEncoder[Option[List[String]]],
      encoder3: ArgEncoder[Option[List[String]]],
      encoder4: ArgEncoder[Option[List[TodoStateEnum]]],
      encoder5: ArgEncoder[Option[List[TodoTargetEnum]]],
      encoder6: ArgEncoder[Option[String]],
      encoder7: ArgEncoder[Option[String]],
      encoder8: ArgEncoder[Option[Int]],
      encoder9: ArgEncoder[Option[Int]]
    ): SelectionBuilder[MergeRequestReviewer, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "todos",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("action", action, "[TodoActionEnum!]")(encoder0),
          Argument("authorId", authorId, "[ID!]")(encoder1),
          Argument("projectId", projectId, "[ID!]")(encoder2),
          Argument("groupId", groupId, "[ID!]")(encoder3),
          Argument("state", state, "[TodoStateEnum!]")(encoder4),
          Argument("type", `type`, "[TodoTargetEnum!]")(encoder5),
          Argument("after", after, "String")(encoder6),
          Argument("before", before, "String")(encoder7),
          Argument("first", first, "Int")(encoder8),
          Argument("last", last, "Int")(encoder9)
        )
      )

    /** Permissions for the current user on the resource.
      */
    def userPermissions[A](innerSelection: SelectionBuilder[UserPermissions, A]): SelectionBuilder[MergeRequestReviewer, A] =
      _root_.caliban.client.SelectionBuilder.Field("userPermissions", Obj(innerSelection))

    /** Username of the user. Unique within this instance of GitLab.
      */
    def username: SelectionBuilder[MergeRequestReviewer, String] = _root_.caliban.client.SelectionBuilder.Field("username", Scalar())

    /** Web path of the user.
      */
    def webPath: SelectionBuilder[MergeRequestReviewer, String] = _root_.caliban.client.SelectionBuilder.Field("webPath", Scalar())

    /** Web URL of the user.
      */
    def webUrl: SelectionBuilder[MergeRequestReviewer, String] = _root_.caliban.client.SelectionBuilder.Field("webUrl", Scalar())
  }

  type MergeRequestReviewerConnection

  object MergeRequestReviewerConnection {

    /** A list of edges.
      */
    def edges[A](
      innerSelection: SelectionBuilder[MergeRequestReviewerEdge, A]
    ): SelectionBuilder[MergeRequestReviewerConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](
      innerSelection: SelectionBuilder[MergeRequestReviewer, A]
    ): SelectionBuilder[MergeRequestReviewerConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[MergeRequestReviewerConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  }

  type MergeRequestReviewerEdge

  object MergeRequestReviewerEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[MergeRequestReviewerEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](innerSelection: SelectionBuilder[MergeRequestReviewer, A]): SelectionBuilder[MergeRequestReviewerEdge, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
  }

  type MergeRequestReviewerRereviewPayload

  object MergeRequestReviewerRereviewPayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[MergeRequestReviewerRereviewPayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[MergeRequestReviewerRereviewPayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** The merge request after mutation.
      */
    def mergeRequest[A](
      innerSelection: SelectionBuilder[MergeRequest, A]
    ): SelectionBuilder[MergeRequestReviewerRereviewPayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("mergeRequest", OptionOf(Obj(innerSelection)))

  }

  type MergeRequestSetAssigneesPayload

  object MergeRequestSetAssigneesPayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[MergeRequestSetAssigneesPayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[MergeRequestSetAssigneesPayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** The merge request after mutation.
      */
    def mergeRequest[A](innerSelection: SelectionBuilder[MergeRequest, A]): SelectionBuilder[MergeRequestSetAssigneesPayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("mergeRequest", OptionOf(Obj(innerSelection)))
  }

  type MergeRequestSetDraftPayload

  object MergeRequestSetDraftPayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[MergeRequestSetDraftPayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[MergeRequestSetDraftPayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** The merge request after mutation.
      */
    def mergeRequest[A](innerSelection: SelectionBuilder[MergeRequest, A]): SelectionBuilder[MergeRequestSetDraftPayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("mergeRequest", OptionOf(Obj(innerSelection)))
  }

  type MergeRequestSetLabelsPayload

  object MergeRequestSetLabelsPayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[MergeRequestSetLabelsPayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[MergeRequestSetLabelsPayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** The merge request after mutation.
      */
    def mergeRequest[A](innerSelection: SelectionBuilder[MergeRequest, A]): SelectionBuilder[MergeRequestSetLabelsPayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("mergeRequest", OptionOf(Obj(innerSelection)))
  }

  type MergeRequestSetLockedPayload

  object MergeRequestSetLockedPayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[MergeRequestSetLockedPayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[MergeRequestSetLockedPayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** The merge request after mutation.
      */
    def mergeRequest[A](innerSelection: SelectionBuilder[MergeRequest, A]): SelectionBuilder[MergeRequestSetLockedPayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("mergeRequest", OptionOf(Obj(innerSelection)))
  }

  type MergeRequestSetMilestonePayload

  object MergeRequestSetMilestonePayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[MergeRequestSetMilestonePayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[MergeRequestSetMilestonePayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** The merge request after mutation.
      */
    def mergeRequest[A](innerSelection: SelectionBuilder[MergeRequest, A]): SelectionBuilder[MergeRequestSetMilestonePayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("mergeRequest", OptionOf(Obj(innerSelection)))
  }

  type MergeRequestSetSubscriptionPayload

  object MergeRequestSetSubscriptionPayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[MergeRequestSetSubscriptionPayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[MergeRequestSetSubscriptionPayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** The merge request after mutation.
      */
    def mergeRequest[A](
      innerSelection: SelectionBuilder[MergeRequest, A]
    ): SelectionBuilder[MergeRequestSetSubscriptionPayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("mergeRequest", OptionOf(Obj(innerSelection)))

  }

  type MergeRequestSetWipPayload

  object MergeRequestSetWipPayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[MergeRequestSetWipPayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[MergeRequestSetWipPayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** The merge request after mutation.
      */
    def mergeRequest[A](innerSelection: SelectionBuilder[MergeRequest, A]): SelectionBuilder[MergeRequestSetWipPayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("mergeRequest", OptionOf(Obj(innerSelection)))
  }

  type MergeRequestUpdatePayload

  object MergeRequestUpdatePayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[MergeRequestUpdatePayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[MergeRequestUpdatePayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** The merge request after mutation.
      */
    def mergeRequest[A](innerSelection: SelectionBuilder[MergeRequest, A]): SelectionBuilder[MergeRequestUpdatePayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("mergeRequest", OptionOf(Obj(innerSelection)))
  }

  type Metadata

  object Metadata {

    /** Metadata about KAS.
      */
    def kas[A](innerSelection: SelectionBuilder[Kas, A]): SelectionBuilder[Metadata, A] =
      _root_.caliban.client.SelectionBuilder.Field("kas", Obj(innerSelection))

    /** Revision.
      */
    def revision: SelectionBuilder[Metadata, String] = _root_.caliban.client.SelectionBuilder.Field("revision", Scalar())

    /** Version.
      */
    def version: SelectionBuilder[Metadata, String] = _root_.caliban.client.SelectionBuilder.Field("version", Scalar())
  }

  type MetricImage

  object MetricImage {

    /** File name of the metric image.
      */
    def fileName: SelectionBuilder[MetricImage, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("fileName", OptionOf(Scalar()))

    /** File path of the metric image.
      */
    def filePath: SelectionBuilder[MetricImage, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("filePath", OptionOf(Scalar()))

    /** ID of the metric upload.
      */
    def id: SelectionBuilder[MetricImage, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())

    /** Internal ID of the metric upload.
      */
    def iid: SelectionBuilder[MetricImage, String] = _root_.caliban.client.SelectionBuilder.Field("iid", Scalar())

    /** URL of the metric source.
      */
    def url: SelectionBuilder[MetricImage, String] = _root_.caliban.client.SelectionBuilder.Field("url", Scalar())
  }

  type MetricsDashboard

  object MetricsDashboard {

    /** Annotations added to the dashboard.
      */
    def annotations[A](
      from: Time,
      to: Option[Time] = None,
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[MetricsDashboardAnnotationConnection, A]
    )(
      implicit encoder0: ArgEncoder[Time],
      encoder1: ArgEncoder[Option[Time]],
      encoder2: ArgEncoder[Option[String]],
      encoder3: ArgEncoder[Option[String]],
      encoder4: ArgEncoder[Option[Int]],
      encoder5: ArgEncoder[Option[Int]]
    ): SelectionBuilder[MetricsDashboard, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "annotations",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("from", from, "Time!")(encoder0),
          Argument("to", to, "Time")(encoder1),
          Argument("after", after, "String")(encoder2),
          Argument("before", before, "String")(encoder3),
          Argument("first", first, "Int")(encoder4),
          Argument("last", last, "Int")(encoder5)
        )
      )

    /** Path to a file with the dashboard definition.
      */
    def path: SelectionBuilder[MetricsDashboard, Option[String]] = _root_.caliban.client.SelectionBuilder.Field("path", OptionOf(Scalar()))

    /** Dashboard schema validation warnings.
      */
    def schemaValidationWarnings: SelectionBuilder[MetricsDashboard, Option[List[String]]] =
      _root_.caliban.client.SelectionBuilder.Field("schemaValidationWarnings", OptionOf(ListOf(Scalar())))
  }

  type MetricsDashboardAnnotation

  object MetricsDashboardAnnotation {

    /** Description of the annotation.
      */
    def description: SelectionBuilder[MetricsDashboardAnnotation, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("description", OptionOf(Scalar()))

    /** Timestamp marking end of annotated time span.
      */
    def endingAt: SelectionBuilder[MetricsDashboardAnnotation, Option[Time]] =
      _root_.caliban.client.SelectionBuilder.Field("endingAt", OptionOf(Scalar()))

    /** ID of the annotation.
      */
    def id: SelectionBuilder[MetricsDashboardAnnotation, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())

    /** ID of a dashboard panel to which the annotation should be scoped.
      */
    def panelId: SelectionBuilder[MetricsDashboardAnnotation, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("panelId", OptionOf(Scalar()))

    /** Timestamp marking start of annotated time span.
      */
    def startingAt: SelectionBuilder[MetricsDashboardAnnotation, Option[Time]] =
      _root_.caliban.client.SelectionBuilder.Field("startingAt", OptionOf(Scalar()))
  }

  type MetricsDashboardAnnotationConnection

  object MetricsDashboardAnnotationConnection {

    /** A list of edges.
      */
    def edges[A](
      innerSelection: SelectionBuilder[MetricsDashboardAnnotationEdge, A]
    ): SelectionBuilder[MetricsDashboardAnnotationConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](
      innerSelection: SelectionBuilder[MetricsDashboardAnnotation, A]
    ): SelectionBuilder[MetricsDashboardAnnotationConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[MetricsDashboardAnnotationConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  }

  type MetricsDashboardAnnotationEdge

  object MetricsDashboardAnnotationEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[MetricsDashboardAnnotationEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](
      innerSelection: SelectionBuilder[MetricsDashboardAnnotation, A]
    ): SelectionBuilder[MetricsDashboardAnnotationEdge, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))

  }

  type Milestone

  object Milestone {

    /** Timestamp of milestone creation.
      */
    def createdAt: SelectionBuilder[Milestone, Time] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())

    /** Description of the milestone.
      */
    def description: SelectionBuilder[Milestone, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("description", OptionOf(Scalar()))

    /** Timestamp of the milestone due date.
      */
    def dueDate: SelectionBuilder[Milestone, Option[Time]] = _root_.caliban.client.SelectionBuilder.Field("dueDate", OptionOf(Scalar()))

    /** Expired state of the milestone (a milestone is expired when the due date is past the current date). Defaults to `false` when due
      * date has not been set.
      */
    def expired: SelectionBuilder[Milestone, Boolean] = _root_.caliban.client.SelectionBuilder.Field("expired", Scalar())

    /** Indicates if milestone is at group level.
      */
    def groupMilestone: SelectionBuilder[Milestone, Boolean] = _root_.caliban.client.SelectionBuilder.Field("groupMilestone", Scalar())

    /** ID of the milestone.
      */
    def id: SelectionBuilder[Milestone, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())

    /** Internal ID of the milestone.
      */
    def iid: SelectionBuilder[Milestone, String] = _root_.caliban.client.SelectionBuilder.Field("iid", Scalar())

    /** Indicates if milestone is at project level.
      */
    def projectMilestone: SelectionBuilder[Milestone, Boolean] = _root_.caliban.client.SelectionBuilder.Field("projectMilestone", Scalar())

    /** Historically accurate report about the timebox.
      */
    def report[A](innerSelection: SelectionBuilder[TimeboxReport, A]): SelectionBuilder[Milestone, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("report", OptionOf(Obj(innerSelection)))

    /** Timestamp of the milestone start date.
      */
    def startDate: SelectionBuilder[Milestone, Option[Time]] = _root_.caliban.client.SelectionBuilder.Field("startDate", OptionOf(Scalar()))

    /** State of the milestone.
      */
    def state: SelectionBuilder[Milestone, MilestoneStateEnum] = _root_.caliban.client.SelectionBuilder.Field("state", Scalar())

    /** Milestone statistics.
      */
    def stats[A](innerSelection: SelectionBuilder[MilestoneStats, A]): SelectionBuilder[Milestone, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("stats", OptionOf(Obj(innerSelection)))

    /** Indicates if milestone is at subgroup level.
      */
    def subgroupMilestone: SelectionBuilder[Milestone, Boolean] =
      _root_.caliban.client.SelectionBuilder.Field("subgroupMilestone", Scalar())

    /** Title of the milestone.
      */
    def title: SelectionBuilder[Milestone, String] = _root_.caliban.client.SelectionBuilder.Field("title", Scalar())

    /** Timestamp of last milestone update.
      */
    def updatedAt: SelectionBuilder[Milestone, Time] = _root_.caliban.client.SelectionBuilder.Field("updatedAt", Scalar())

    /** Web path of the milestone.
      */
    def webPath: SelectionBuilder[Milestone, String] = _root_.caliban.client.SelectionBuilder.Field("webPath", Scalar())
  }

  type MilestoneConnection

  object MilestoneConnection {

    /** A list of edges.
      */
    def edges[A](innerSelection: SelectionBuilder[MilestoneEdge, A]): SelectionBuilder[MilestoneConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](innerSelection: SelectionBuilder[Milestone, A]): SelectionBuilder[MilestoneConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[MilestoneConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  }

  type MilestoneEdge

  object MilestoneEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[MilestoneEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](innerSelection: SelectionBuilder[Milestone, A]): SelectionBuilder[MilestoneEdge, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
  }

  type MilestoneStats

  object MilestoneStats {

    /** Number of closed issues associated with the milestone.
      */
    def closedIssuesCount: SelectionBuilder[MilestoneStats, Option[Int]] =
      _root_.caliban.client.SelectionBuilder.Field("closedIssuesCount", OptionOf(Scalar()))

    /** Total number of issues associated with the milestone.
      */
    def totalIssuesCount: SelectionBuilder[MilestoneStats, Option[Int]] =
      _root_.caliban.client.SelectionBuilder.Field("totalIssuesCount", OptionOf(Scalar()))
  }

  type Namespace

  object Namespace {

    /** Size limit for repositories in the namespace in bytes.
      */
    def actualRepositorySizeLimit: SelectionBuilder[Namespace, Option[Double]] =
      _root_.caliban.client.SelectionBuilder.Field("actualRepositorySizeLimit", OptionOf(Scalar()))

    /** Additional storage purchased for the root namespace in bytes.
      */
    def additionalPurchasedStorageSize: SelectionBuilder[Namespace, Option[Double]] =
      _root_.caliban.client.SelectionBuilder.Field("additionalPurchasedStorageSize", OptionOf(Scalar()))

    /** Compliance frameworks available to projects in this namespace.
      */
    def complianceFrameworks[A](
      id: Option[ComplianceManagementFrameworkID] = None,
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[ComplianceFrameworkConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[ComplianceManagementFrameworkID]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[String]],
      encoder3: ArgEncoder[Option[Int]],
      encoder4: ArgEncoder[Option[Int]]
    ): SelectionBuilder[Namespace, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "complianceFrameworks",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("id", id, "ComplianceManagementFrameworkID")(encoder0),
          Argument("after", after, "String")(encoder1),
          Argument("before", before, "String")(encoder2),
          Argument("first", first, "Int")(encoder3),
          Argument("last", last, "Int")(encoder4)
        )
      )

    /** Includes at least one project where the repository size exceeds the limit.
      */
    def containsLockedProjects: SelectionBuilder[Namespace, Boolean] =
      _root_.caliban.client.SelectionBuilder.Field("containsLockedProjects", Scalar())

    /** Description of the namespace.
      */
    def description: SelectionBuilder[Namespace, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("description", OptionOf(Scalar()))

    /** The GitLab Flavored Markdown rendering of `description`
      */
    def descriptionHtml: SelectionBuilder[Namespace, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("descriptionHtml", OptionOf(Scalar()))

    /** Full name of the namespace.
      */
    def fullName: SelectionBuilder[Namespace, String] = _root_.caliban.client.SelectionBuilder.Field("fullName", Scalar())

    /** Full path of the namespace.
      */
    def fullPath: SelectionBuilder[Namespace, String] = _root_.caliban.client.SelectionBuilder.Field("fullPath", Scalar())

    /** ID of the namespace.
      */
    def id: SelectionBuilder[Namespace, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())

    /** Status of the temporary storage increase.
      */
    def isTemporaryStorageIncreaseEnabled: SelectionBuilder[Namespace, Boolean] =
      _root_.caliban.client.SelectionBuilder.Field("isTemporaryStorageIncreaseEnabled", Scalar())

    /** Indicates if Large File Storage (LFS) is enabled for namespace.
      */
    def lfsEnabled: SelectionBuilder[Namespace, Option[Boolean]] =
      _root_.caliban.client.SelectionBuilder.Field("lfsEnabled", OptionOf(Scalar()))

    /** Name of the namespace.
      */
    def name: SelectionBuilder[Namespace, String] = _root_.caliban.client.SelectionBuilder.Field("name", Scalar())

    /** The package settings for the namespace.
      */
    def packageSettings[A](innerSelection: SelectionBuilder[PackageSettings, A]): SelectionBuilder[Namespace, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("packageSettings", OptionOf(Obj(innerSelection)))

    /** Path of the namespace.
      */
    def path: SelectionBuilder[Namespace, String] = _root_.caliban.client.SelectionBuilder.Field("path", Scalar())

    /** Projects within this namespace.
      */
    def projects[A](
      includeSubgroups: Option[Boolean] = None,
      search: Option[String] = None,
      sort: Option[NamespaceProjectSort] = None,
      ids: Option[List[String]] = None,
      hasCodeCoverage: Option[Boolean] = None,
      hasVulnerabilities: Option[Boolean] = None,
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[ProjectConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[Boolean]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[NamespaceProjectSort]],
      encoder3: ArgEncoder[Option[List[String]]],
      encoder4: ArgEncoder[Option[Boolean]],
      encoder5: ArgEncoder[Option[Boolean]],
      encoder6: ArgEncoder[Option[String]],
      encoder7: ArgEncoder[Option[String]],
      encoder8: ArgEncoder[Option[Int]],
      encoder9: ArgEncoder[Option[Int]]
    ): SelectionBuilder[Namespace, A] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "projects",
        Obj(innerSelection),
        arguments = List(
          Argument("includeSubgroups", includeSubgroups, "Boolean")(encoder0),
          Argument("search", search, "String")(encoder1),
          Argument("sort", sort, "NamespaceProjectSort")(encoder2),
          Argument("ids", ids, "[ID!]")(encoder3),
          Argument("hasCodeCoverage", hasCodeCoverage, "Boolean")(encoder4),
          Argument("hasVulnerabilities", hasVulnerabilities, "Boolean")(encoder5),
          Argument("after", after, "String")(encoder6),
          Argument("before", before, "String")(encoder7),
          Argument("first", first, "Int")(encoder8),
          Argument("last", last, "Int")(encoder9)
        )
      )

    /** Number of projects in the root namespace where the repository size exceeds the limit.
      */
    def repositorySizeExcessProjectCount: SelectionBuilder[Namespace, Int] =
      _root_.caliban.client.SelectionBuilder.Field("repositorySizeExcessProjectCount", Scalar())

    /** Indicates if users can request access to namespace.
      */
    def requestAccessEnabled: SelectionBuilder[Namespace, Option[Boolean]] =
      _root_.caliban.client.SelectionBuilder.Field("requestAccessEnabled", OptionOf(Scalar()))

    /** Aggregated storage statistics of the namespace. Only available for root namespaces.
      */
    def rootStorageStatistics[A](innerSelection: SelectionBuilder[RootStorageStatistics, A]): SelectionBuilder[Namespace, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("rootStorageStatistics", OptionOf(Obj(innerSelection)))

    /** Total storage limit of the root namespace in bytes.
      */
    def storageSizeLimit: SelectionBuilder[Namespace, Option[Double]] =
      _root_.caliban.client.SelectionBuilder.Field("storageSizeLimit", OptionOf(Scalar()))

    /** Date until the temporary storage increase is active.
      */
    def temporaryStorageIncreaseEndsOn: SelectionBuilder[Namespace, Option[Time]] =
      _root_.caliban.client.SelectionBuilder.Field("temporaryStorageIncreaseEndsOn", OptionOf(Scalar()))

    /** Total repository size of all projects in the root namespace in bytes.
      */
    def totalRepositorySize: SelectionBuilder[Namespace, Option[Double]] =
      _root_.caliban.client.SelectionBuilder.Field("totalRepositorySize", OptionOf(Scalar()))

    /** Total excess repository size of all projects in the root namespace in bytes.
      */
    def totalRepositorySizeExcess: SelectionBuilder[Namespace, Option[Double]] =
      _root_.caliban.client.SelectionBuilder.Field("totalRepositorySizeExcess", OptionOf(Scalar()))

    /** Visibility of the namespace.
      */
    def visibility: SelectionBuilder[Namespace, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("visibility", OptionOf(Scalar()))
  }

  type NamespaceConnection

  object NamespaceConnection {

    /** A list of edges.
      */
    def edges[A](innerSelection: SelectionBuilder[NamespaceEdge, A]): SelectionBuilder[NamespaceConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](innerSelection: SelectionBuilder[Namespace, A]): SelectionBuilder[NamespaceConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[NamespaceConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  }

  type NamespaceEdge

  object NamespaceEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[NamespaceEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](innerSelection: SelectionBuilder[Namespace, A]): SelectionBuilder[NamespaceEdge, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
  }

  type NamespaceIncreaseStorageTemporarilyPayload

  object NamespaceIncreaseStorageTemporarilyPayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[NamespaceIncreaseStorageTemporarilyPayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[NamespaceIncreaseStorageTemporarilyPayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** The namespace after mutation.
      */
    def namespace[A](
      innerSelection: SelectionBuilder[Namespace, A]
    ): SelectionBuilder[NamespaceIncreaseStorageTemporarilyPayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("namespace", OptionOf(Obj(innerSelection)))

  }

  type NetworkPolicy

  object NetworkPolicy {

    /** Indicates whether this policy is enabled.
      */
    def enabled: SelectionBuilder[NetworkPolicy, Boolean] = _root_.caliban.client.SelectionBuilder.Field("enabled", Scalar())

    /** Environments where this policy is applied.
      */
    def environments[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[EnvironmentConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[NetworkPolicy, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "environments",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** Indicates whether this policy is created from AutoDevops.
      */
    def fromAutoDevops: SelectionBuilder[NetworkPolicy, Boolean] = _root_.caliban.client.SelectionBuilder.Field("fromAutoDevops", Scalar())

    /** Name of the policy.
      */
    def name: SelectionBuilder[NetworkPolicy, String] = _root_.caliban.client.SelectionBuilder.Field("name", Scalar())

    /** Namespace of the policy.
      */
    def namespace: SelectionBuilder[NetworkPolicy, String] = _root_.caliban.client.SelectionBuilder.Field("namespace", Scalar())

    /** Timestamp of when the policy YAML was last updated.
      */
    def updatedAt: SelectionBuilder[NetworkPolicy, Time] = _root_.caliban.client.SelectionBuilder.Field("updatedAt", Scalar())

    /** YAML definition of the policy.
      */
    def yaml: SelectionBuilder[NetworkPolicy, String] = _root_.caliban.client.SelectionBuilder.Field("yaml", Scalar())
  }

  type NetworkPolicyConnection

  object NetworkPolicyConnection {

    /** A list of edges.
      */
    def edges[A](
      innerSelection: SelectionBuilder[NetworkPolicyEdge, A]
    ): SelectionBuilder[NetworkPolicyConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](innerSelection: SelectionBuilder[NetworkPolicy, A]): SelectionBuilder[NetworkPolicyConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[NetworkPolicyConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  }

  type NetworkPolicyEdge

  object NetworkPolicyEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[NetworkPolicyEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](innerSelection: SelectionBuilder[NetworkPolicy, A]): SelectionBuilder[NetworkPolicyEdge, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
  }

  type Note

  object Note {

    /** User who wrote this note.
      */
    def author[A](innerSelection: SelectionBuilder[UserCore, A]): SelectionBuilder[Note, A] =
      _root_.caliban.client.SelectionBuilder.Field("author", Obj(innerSelection))

    /** Content of the note.
      */
    def body: SelectionBuilder[Note, String] = _root_.caliban.client.SelectionBuilder.Field("body", Scalar())

    /** The GitLab Flavored Markdown rendering of `note`
      */
    def bodyHtml: SelectionBuilder[Note, Option[String]] = _root_.caliban.client.SelectionBuilder.Field("bodyHtml", OptionOf(Scalar()))

    /** Indicates if this note is confidential.
      */
    def confidential: SelectionBuilder[Note, Option[Boolean]] =
      _root_.caliban.client.SelectionBuilder.Field("confidential", OptionOf(Scalar()))

    /** Timestamp of the note creation.
      */
    def createdAt: SelectionBuilder[Note, Time] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())

    /** The discussion this note is a part of.
      */
    def discussion[A](innerSelection: SelectionBuilder[Discussion, A]): SelectionBuilder[Note, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("discussion", OptionOf(Obj(innerSelection)))

    /** ID of the note.
      */
    def id: SelectionBuilder[Note, NoteID] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())

    /** The position of this note on a diff.
      */
    def position[A](innerSelection: SelectionBuilder[DiffPosition, A]): SelectionBuilder[Note, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("position", OptionOf(Obj(innerSelection)))

    /** Project associated with the note.
      */
    def project[A](innerSelection: SelectionBuilder[Project, A]): SelectionBuilder[Note, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("project", OptionOf(Obj(innerSelection)))

    /** Indicates if the object can be resolved.
      */
    def resolvable: SelectionBuilder[Note, Boolean] = _root_.caliban.client.SelectionBuilder.Field("resolvable", Scalar())

    /** Indicates if the object is resolved.
      */
    def resolved: SelectionBuilder[Note, Boolean] = _root_.caliban.client.SelectionBuilder.Field("resolved", Scalar())

    /** Timestamp of when the object was resolved.
      */
    def resolvedAt: SelectionBuilder[Note, Option[Time]] = _root_.caliban.client.SelectionBuilder.Field("resolvedAt", OptionOf(Scalar()))

    /** User who resolved the object.
      */
    def resolvedBy[A](innerSelection: SelectionBuilder[UserCore, A]): SelectionBuilder[Note, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("resolvedBy", OptionOf(Obj(innerSelection)))

    /** Indicates whether this note was created by the system or by a user.
      */
    def system: SelectionBuilder[Note, Boolean] = _root_.caliban.client.SelectionBuilder.Field("system", Scalar())

    /** Name of the icon corresponding to a system note.
      */
    def systemNoteIconName: SelectionBuilder[Note, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("systemNoteIconName", OptionOf(Scalar()))

    /** Timestamp of the note's last activity.
      */
    def updatedAt: SelectionBuilder[Note, Time] = _root_.caliban.client.SelectionBuilder.Field("updatedAt", Scalar())

    /** URL to view this Note in the Web UI.
      */
    def url: SelectionBuilder[Note, Option[String]] = _root_.caliban.client.SelectionBuilder.Field("url", OptionOf(Scalar()))

    /** Permissions for the current user on the resource
      */
    def userPermissions[A](innerSelection: SelectionBuilder[NotePermissions, A]): SelectionBuilder[Note, A] =
      _root_.caliban.client.SelectionBuilder.Field("userPermissions", Obj(innerSelection))
  }

  type NoteConnection

  object NoteConnection {

    /** A list of edges.
      */
    def edges[A](innerSelection: SelectionBuilder[NoteEdge, A]): SelectionBuilder[NoteConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](innerSelection: SelectionBuilder[Note, A]): SelectionBuilder[NoteConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[NoteConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  }

  type NoteEdge

  object NoteEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[NoteEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](innerSelection: SelectionBuilder[Note, A]): SelectionBuilder[NoteEdge, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
  }

  type NotePermissions

  object NotePermissions {

    /** Indicates the user can perform `admin_note` on this resource
      */
    def adminNote: SelectionBuilder[NotePermissions, Boolean] = _root_.caliban.client.SelectionBuilder.Field("adminNote", Scalar())

    /** Indicates the user can perform `award_emoji` on this resource
      */
    def awardEmoji: SelectionBuilder[NotePermissions, Boolean] = _root_.caliban.client.SelectionBuilder.Field("awardEmoji", Scalar())

    /** Indicates the user can perform `create_note` on this resource
      */
    def createNote: SelectionBuilder[NotePermissions, Boolean] = _root_.caliban.client.SelectionBuilder.Field("createNote", Scalar())

    /** Indicates the user can perform `read_note` on this resource
      */
    def readNote: SelectionBuilder[NotePermissions, Boolean] = _root_.caliban.client.SelectionBuilder.Field("readNote", Scalar())

    /** Indicates the user can perform `reposition_note` on this resource
      */
    def repositionNote: SelectionBuilder[NotePermissions, Boolean] =
      _root_.caliban.client.SelectionBuilder.Field("repositionNote", Scalar())

    /** Indicates the user can perform `resolve_note` on this resource
      */
    def resolveNote: SelectionBuilder[NotePermissions, Boolean] = _root_.caliban.client.SelectionBuilder.Field("resolveNote", Scalar())
  }

  type NugetMetadata

  object NugetMetadata {

    /** Icon URL of the Nuget package.
      */
    def iconUrl: SelectionBuilder[NugetMetadata, String] = _root_.caliban.client.SelectionBuilder.Field("iconUrl", Scalar())

    /** ID of the metadatum.
      */
    def id: SelectionBuilder[NugetMetadata, PackagesNugetMetadatumID] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())

    /** License URL of the Nuget package.
      */
    def licenseUrl: SelectionBuilder[NugetMetadata, String] = _root_.caliban.client.SelectionBuilder.Field("licenseUrl", Scalar())

    /** Project URL of the Nuget package.
      */
    def projectUrl: SelectionBuilder[NugetMetadata, String] = _root_.caliban.client.SelectionBuilder.Field("projectUrl", Scalar())
  }

  type OncallParticipantType

  object OncallParticipantType {

    /** The color palette to assign to the on-call user. For example "blue".
      */
    def colorPalette: SelectionBuilder[OncallParticipantType, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("colorPalette", OptionOf(Scalar()))

    /** The color weight to assign to for the on-call user, for example "500". Max 4 chars. For easy identification of the user.
      */
    def colorWeight: SelectionBuilder[OncallParticipantType, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("colorWeight", OptionOf(Scalar()))

    /** ID of the on-call participant.
      */
    def id: SelectionBuilder[OncallParticipantType, IncidentManagementOncallParticipantID] =
      _root_.caliban.client.SelectionBuilder.Field("id", Scalar())

    /** The user who is participating.
      */
    def user[A](innerSelection: SelectionBuilder[UserCore, A]): SelectionBuilder[OncallParticipantType, A] =
      _root_.caliban.client.SelectionBuilder.Field("user", Obj(innerSelection))
  }

  type OncallParticipantTypeConnection

  object OncallParticipantTypeConnection {

    /** A list of edges.
      */
    def edges[A](
      innerSelection: SelectionBuilder[OncallParticipantTypeEdge, A]
    ): SelectionBuilder[OncallParticipantTypeConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](
      innerSelection: SelectionBuilder[OncallParticipantType, A]
    ): SelectionBuilder[OncallParticipantTypeConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[OncallParticipantTypeConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  }

  type OncallParticipantTypeEdge

  object OncallParticipantTypeEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[OncallParticipantTypeEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](innerSelection: SelectionBuilder[OncallParticipantType, A]): SelectionBuilder[OncallParticipantTypeEdge, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
  }

  type OncallRotationActivePeriodType

  object OncallRotationActivePeriodType {

    /** The end of the rotation active period.
      */
    def endTime: SelectionBuilder[OncallRotationActivePeriodType, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("endTime", OptionOf(Scalar()))

    /** The start of the rotation active period.
      */
    def startTime: SelectionBuilder[OncallRotationActivePeriodType, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("startTime", OptionOf(Scalar()))
  }

  type OncallRotationCreatePayload

  object OncallRotationCreatePayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[OncallRotationCreatePayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[OncallRotationCreatePayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** The on-call rotation.
      */
    def oncallRotation[A](
      innerSelection: SelectionBuilder[IncidentManagementOncallRotation, A]
    ): SelectionBuilder[OncallRotationCreatePayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("oncallRotation", OptionOf(Obj(innerSelection)))

  }

  type OncallRotationDestroyPayload

  object OncallRotationDestroyPayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[OncallRotationDestroyPayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[OncallRotationDestroyPayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** The on-call rotation.
      */
    def oncallRotation[A](
      innerSelection: SelectionBuilder[IncidentManagementOncallRotation, A]
    ): SelectionBuilder[OncallRotationDestroyPayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("oncallRotation", OptionOf(Obj(innerSelection)))

  }

  type OncallRotationUpdatePayload

  object OncallRotationUpdatePayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[OncallRotationUpdatePayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[OncallRotationUpdatePayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** The on-call rotation.
      */
    def oncallRotation[A](
      innerSelection: SelectionBuilder[IncidentManagementOncallRotation, A]
    ): SelectionBuilder[OncallRotationUpdatePayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("oncallRotation", OptionOf(Obj(innerSelection)))

  }

  type OncallScheduleCreatePayload

  object OncallScheduleCreatePayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[OncallScheduleCreatePayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[OncallScheduleCreatePayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** The on-call schedule.
      */
    def oncallSchedule[A](
      innerSelection: SelectionBuilder[IncidentManagementOncallSchedule, A]
    ): SelectionBuilder[OncallScheduleCreatePayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("oncallSchedule", OptionOf(Obj(innerSelection)))

  }

  type OncallScheduleDestroyPayload

  object OncallScheduleDestroyPayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[OncallScheduleDestroyPayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[OncallScheduleDestroyPayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** The on-call schedule.
      */
    def oncallSchedule[A](
      innerSelection: SelectionBuilder[IncidentManagementOncallSchedule, A]
    ): SelectionBuilder[OncallScheduleDestroyPayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("oncallSchedule", OptionOf(Obj(innerSelection)))

  }

  type OncallScheduleUpdatePayload

  object OncallScheduleUpdatePayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[OncallScheduleUpdatePayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[OncallScheduleUpdatePayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** The on-call schedule.
      */
    def oncallSchedule[A](
      innerSelection: SelectionBuilder[IncidentManagementOncallSchedule, A]
    ): SelectionBuilder[OncallScheduleUpdatePayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("oncallSchedule", OptionOf(Obj(innerSelection)))

  }

  type Package

  object Package {

    /** Date of creation.
      */
    def createdAt: SelectionBuilder[Package, Time] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())

    /** ID of the package.
      */
    def id: SelectionBuilder[Package, PackagesPackageID] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())

    /** Package metadata.
      */
    def metadata[A](
      onComposerMetadata: SelectionBuilder[ComposerMetadata, A],
      onConanMetadata: SelectionBuilder[ConanMetadata, A],
      onMavenMetadata: SelectionBuilder[MavenMetadata, A],
      onNugetMetadata: SelectionBuilder[NugetMetadata, A],
      onPypiMetadata: SelectionBuilder[PypiMetadata, A]
    ): SelectionBuilder[Package, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "metadata",
        OptionOf(
          ChoiceOf(
            Map(
              "ComposerMetadata" -> Obj(onComposerMetadata),
              "ConanMetadata" -> Obj(onConanMetadata),
              "MavenMetadata" -> Obj(onMavenMetadata),
              "NugetMetadata" -> Obj(onNugetMetadata),
              "PypiMetadata" -> Obj(onPypiMetadata)
            )
          )
        )
      )

    /** Name of the package.
      */
    def name: SelectionBuilder[Package, String] = _root_.caliban.client.SelectionBuilder.Field("name", Scalar())

    /** Package type.
      */
    def packageType: SelectionBuilder[Package, PackageTypeEnum] = _root_.caliban.client.SelectionBuilder.Field("packageType", Scalar())

    /** Pipelines that built the package.
      */
    def pipelines[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[PipelineConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[Package, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "pipelines",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** Project where the package is stored.
      */
    def project[A](innerSelection: SelectionBuilder[Project, A]): SelectionBuilder[Package, A] =
      _root_.caliban.client.SelectionBuilder.Field("project", Obj(innerSelection))

    /** Package status.
      */
    def status: SelectionBuilder[Package, PackageStatus] = _root_.caliban.client.SelectionBuilder.Field("status", Scalar())

    /** Package tags.
      */
    def tags[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[PackageTagConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[Package, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "tags",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** Date of most recent update.
      */
    def updatedAt: SelectionBuilder[Package, Time] = _root_.caliban.client.SelectionBuilder.Field("updatedAt", Scalar())

    /** Version string.
      */
    def version: SelectionBuilder[Package, Option[String]] = _root_.caliban.client.SelectionBuilder.Field("version", OptionOf(Scalar()))

    /** The other versions of the package. Deprecated in 13.11: This field is now only returned in the PackageDetailsType.
      */
    @deprecated("This field is now only returned in the PackageDetailsType. Deprecated in 13.11.", "")
    def versions[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[PackageConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[Package, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "versions",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

  }

  type PackageComposerJsonType

  object PackageComposerJsonType {

    /** The license set in the Composer JSON file.
      */
    def license: SelectionBuilder[PackageComposerJsonType, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("license", OptionOf(Scalar()))

    /** The name set in the Composer JSON file.
      */
    def name: SelectionBuilder[PackageComposerJsonType, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("name", OptionOf(Scalar()))

    /** The type set in the Composer JSON file.
      */
    def `type`: SelectionBuilder[PackageComposerJsonType, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("type", OptionOf(Scalar()))

    /** The version set in the Composer JSON file.
      */
    def version: SelectionBuilder[PackageComposerJsonType, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("version", OptionOf(Scalar()))
  }

  type PackageConnection

  object PackageConnection {

    /** A list of edges.
      */
    def edges[A](innerSelection: SelectionBuilder[PackageEdge, A]): SelectionBuilder[PackageConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](innerSelection: SelectionBuilder[Package, A]): SelectionBuilder[PackageConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[PackageConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  }

  type PackageDetailsType

  object PackageDetailsType {

    /** Date of creation.
      */
    def createdAt: SelectionBuilder[PackageDetailsType, Time] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())

    /** ID of the package.
      */
    def id: SelectionBuilder[PackageDetailsType, PackagesPackageID] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())

    /** Package metadata.
      */
    def metadata[A](
      onComposerMetadata: SelectionBuilder[ComposerMetadata, A],
      onConanMetadata: SelectionBuilder[ConanMetadata, A],
      onMavenMetadata: SelectionBuilder[MavenMetadata, A],
      onNugetMetadata: SelectionBuilder[NugetMetadata, A],
      onPypiMetadata: SelectionBuilder[PypiMetadata, A]
    ): SelectionBuilder[PackageDetailsType, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "metadata",
        OptionOf(
          ChoiceOf(
            Map(
              "ComposerMetadata" -> Obj(onComposerMetadata),
              "ConanMetadata" -> Obj(onConanMetadata),
              "MavenMetadata" -> Obj(onMavenMetadata),
              "NugetMetadata" -> Obj(onNugetMetadata),
              "PypiMetadata" -> Obj(onPypiMetadata)
            )
          )
        )
      )

    /** Name of the package.
      */
    def name: SelectionBuilder[PackageDetailsType, String] = _root_.caliban.client.SelectionBuilder.Field("name", Scalar())

    /** Package files.
      */
    def packageFiles[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[PackageFileConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[PackageDetailsType, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "packageFiles",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** Package type.
      */
    def packageType: SelectionBuilder[PackageDetailsType, PackageTypeEnum] =
      _root_.caliban.client.SelectionBuilder.Field("packageType", Scalar())

    /** Pipelines that built the package.
      */
    def pipelines[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[PipelineConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[PackageDetailsType, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "pipelines",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** Project where the package is stored.
      */
    def project[A](innerSelection: SelectionBuilder[Project, A]): SelectionBuilder[PackageDetailsType, A] =
      _root_.caliban.client.SelectionBuilder.Field("project", Obj(innerSelection))

    /** Package status.
      */
    def status: SelectionBuilder[PackageDetailsType, PackageStatus] = _root_.caliban.client.SelectionBuilder.Field("status", Scalar())

    /** Package tags.
      */
    def tags[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[PackageTagConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[PackageDetailsType, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "tags",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** Date of most recent update.
      */
    def updatedAt: SelectionBuilder[PackageDetailsType, Time] = _root_.caliban.client.SelectionBuilder.Field("updatedAt", Scalar())

    /** Version string.
      */
    def version: SelectionBuilder[PackageDetailsType, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("version", OptionOf(Scalar()))

    /** The other versions of the package.
      */
    def versions[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[PackageConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[PackageDetailsType, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "versions",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

  }

  type PackageEdge

  object PackageEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[PackageEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](innerSelection: SelectionBuilder[Package, A]): SelectionBuilder[PackageEdge, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
  }

  type PackageFile

  object PackageFile {

    /** The created date.
      */
    def createdAt: SelectionBuilder[PackageFile, Time] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())

    /** Download path of the package file.
      */
    def downloadPath: SelectionBuilder[PackageFile, String] = _root_.caliban.client.SelectionBuilder.Field("downloadPath", Scalar())

    /** Md5 of the package file.
      */
    def fileMd5: SelectionBuilder[PackageFile, Option[String]] = _root_.caliban.client.SelectionBuilder.Field("fileMd5", OptionOf(Scalar()))

    /** File metadata.
      */
    def fileMetadata[A](
      onConanFileMetadata: Option[SelectionBuilder[ConanFileMetadata, A]] = None
    ): SelectionBuilder[PackageFile, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "fileMetadata",
        OptionOf(ChoiceOf(Map("ConanFileMetadata" -> onConanFileMetadata).collect { case (k, Some(v)) => k -> Obj(v) }))
      )

    /** Name of the package file.
      */
    def fileName: SelectionBuilder[PackageFile, String] = _root_.caliban.client.SelectionBuilder.Field("fileName", Scalar())

    /** Sha1 of the package file.
      */
    def fileSha1: SelectionBuilder[PackageFile, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("fileSha1", OptionOf(Scalar()))

    /** Sha256 of the package file.
      */
    def fileSha256: SelectionBuilder[PackageFile, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("fileSha256", OptionOf(Scalar()))

    /** ID of the file.
      */
    def id: SelectionBuilder[PackageFile, PackagesPackageFileID] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())

    /** Size of the package file.
      */
    def size: SelectionBuilder[PackageFile, String] = _root_.caliban.client.SelectionBuilder.Field("size", Scalar())

    /** The updated date.
      */
    def updatedAt: SelectionBuilder[PackageFile, Time] = _root_.caliban.client.SelectionBuilder.Field("updatedAt", Scalar())
  }

  type PackageFileConnection

  object PackageFileConnection {

    /** A list of edges.
      */
    def edges[A](innerSelection: SelectionBuilder[PackageFileEdge, A]): SelectionBuilder[PackageFileConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](innerSelection: SelectionBuilder[PackageFile, A]): SelectionBuilder[PackageFileConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[PackageFileConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  }

  type PackageFileEdge

  object PackageFileEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[PackageFileEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](innerSelection: SelectionBuilder[PackageFile, A]): SelectionBuilder[PackageFileEdge, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
  }

  type PackageFileRegistry

  object PackageFileRegistry {

    /** Timestamp when the PackageFileRegistry was created
      */
    def createdAt: SelectionBuilder[PackageFileRegistry, Option[Time]] =
      _root_.caliban.client.SelectionBuilder.Field("createdAt", OptionOf(Scalar()))

    /** ID of the PackageFileRegistry
      */
    def id: SelectionBuilder[PackageFileRegistry, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())

    /** Error message during sync of the PackageFileRegistry
      */
    def lastSyncFailure: SelectionBuilder[PackageFileRegistry, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("lastSyncFailure", OptionOf(Scalar()))

    /** Timestamp of the most recent successful sync of the PackageFileRegistry
      */
    def lastSyncedAt: SelectionBuilder[PackageFileRegistry, Option[Time]] =
      _root_.caliban.client.SelectionBuilder.Field("lastSyncedAt", OptionOf(Scalar()))

    /** ID of the PackageFile.
      */
    def packageFileId: SelectionBuilder[PackageFileRegistry, String] =
      _root_.caliban.client.SelectionBuilder.Field("packageFileId", Scalar())

    /** Timestamp after which the PackageFileRegistry should be resynced
      */
    def retryAt: SelectionBuilder[PackageFileRegistry, Option[Time]] =
      _root_.caliban.client.SelectionBuilder.Field("retryAt", OptionOf(Scalar()))

    /** Number of consecutive failed sync attempts of the PackageFileRegistry
      */
    def retryCount: SelectionBuilder[PackageFileRegistry, Option[Int]] =
      _root_.caliban.client.SelectionBuilder.Field("retryCount", OptionOf(Scalar()))

    /** Sync state of the PackageFileRegistry
      */
    def state: SelectionBuilder[PackageFileRegistry, Option[RegistryState]] =
      _root_.caliban.client.SelectionBuilder.Field("state", OptionOf(Scalar()))
  }

  type PackageFileRegistryConnection

  object PackageFileRegistryConnection {

    /** A list of edges.
      */
    def edges[A](
      innerSelection: SelectionBuilder[PackageFileRegistryEdge, A]
    ): SelectionBuilder[PackageFileRegistryConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](
      innerSelection: SelectionBuilder[PackageFileRegistry, A]
    ): SelectionBuilder[PackageFileRegistryConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[PackageFileRegistryConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  }

  type PackageFileRegistryEdge

  object PackageFileRegistryEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[PackageFileRegistryEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](innerSelection: SelectionBuilder[PackageFileRegistry, A]): SelectionBuilder[PackageFileRegistryEdge, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
  }

  type PackageSettings

  object PackageSettings {

    /** When generic_duplicates_allowed is false, you can publish duplicate packages with names that match this regex. Otherwise, this
      * setting has no effect.
      */
    def genericDuplicateExceptionRegex: SelectionBuilder[PackageSettings, Option[UntrustedRegexp]] =
      _root_.caliban.client.SelectionBuilder.Field("genericDuplicateExceptionRegex", OptionOf(Scalar()))

    /** Indicates whether duplicate generic packages are allowed for this namespace.
      */
    def genericDuplicatesAllowed: SelectionBuilder[PackageSettings, Boolean] =
      _root_.caliban.client.SelectionBuilder.Field("genericDuplicatesAllowed", Scalar())

    /** When maven_duplicates_allowed is false, you can publish duplicate packages with names that match this regex. Otherwise, this setting
      * has no effect.
      */
    def mavenDuplicateExceptionRegex: SelectionBuilder[PackageSettings, Option[UntrustedRegexp]] =
      _root_.caliban.client.SelectionBuilder.Field("mavenDuplicateExceptionRegex", OptionOf(Scalar()))

    /** Indicates whether duplicate Maven packages are allowed for this namespace.
      */
    def mavenDuplicatesAllowed: SelectionBuilder[PackageSettings, Boolean] =
      _root_.caliban.client.SelectionBuilder.Field("mavenDuplicatesAllowed", Scalar())
  }

  type PackageTag

  object PackageTag {

    /** The created date.
      */
    def createdAt: SelectionBuilder[PackageTag, Time] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())

    /** The ID of the tag.
      */
    def id: SelectionBuilder[PackageTag, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())

    /** The name of the tag.
      */
    def name: SelectionBuilder[PackageTag, String] = _root_.caliban.client.SelectionBuilder.Field("name", Scalar())

    /** The updated date.
      */
    def updatedAt: SelectionBuilder[PackageTag, Time] = _root_.caliban.client.SelectionBuilder.Field("updatedAt", Scalar())
  }

  type PackageTagConnection

  object PackageTagConnection {

    /** A list of edges.
      */
    def edges[A](innerSelection: SelectionBuilder[PackageTagEdge, A]): SelectionBuilder[PackageTagConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](innerSelection: SelectionBuilder[PackageTag, A]): SelectionBuilder[PackageTagConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[PackageTagConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  }

  type PackageTagEdge

  object PackageTagEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[PackageTagEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](innerSelection: SelectionBuilder[PackageTag, A]): SelectionBuilder[PackageTagEdge, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
  }

  type PageInfo

  object PageInfo {

    /** When paginating forwards, the cursor to continue.
      */
    def endCursor: SelectionBuilder[PageInfo, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("endCursor", OptionOf(Scalar()))

    /** When paginating forwards, are there more items?
      */
    def hasNextPage: SelectionBuilder[PageInfo, Boolean] = _root_.caliban.client.SelectionBuilder.Field("hasNextPage", Scalar())

    /** When paginating backwards, are there more items?
      */
    def hasPreviousPage: SelectionBuilder[PageInfo, Boolean] = _root_.caliban.client.SelectionBuilder.Field("hasPreviousPage", Scalar())

    /** When paginating backwards, the cursor to continue.
      */
    def startCursor: SelectionBuilder[PageInfo, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("startCursor", OptionOf(Scalar()))
  }

  type PathLock

  object PathLock {

    /** ID of the path lock.
      */
    def id: SelectionBuilder[PathLock, PathLockID] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())

    /** The locked path.
      */
    def path: SelectionBuilder[PathLock, Option[String]] = _root_.caliban.client.SelectionBuilder.Field("path", OptionOf(Scalar()))

    /** The user that has locked this path.
      */
    def user[A](innerSelection: SelectionBuilder[UserCore, A]): SelectionBuilder[PathLock, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("user", OptionOf(Obj(innerSelection)))
  }

  type PathLockConnection

  object PathLockConnection {

    /** A list of edges.
      */
    def edges[A](innerSelection: SelectionBuilder[PathLockEdge, A]): SelectionBuilder[PathLockConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](innerSelection: SelectionBuilder[PathLock, A]): SelectionBuilder[PathLockConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[PathLockConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  }

  type PathLockEdge

  object PathLockEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[PathLockEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](innerSelection: SelectionBuilder[PathLock, A]): SelectionBuilder[PathLockEdge, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
  }

  type Pipeline

  object Pipeline {

    /** Indicates if the pipeline is active.
      */
    def active: SelectionBuilder[Pipeline, Boolean] = _root_.caliban.client.SelectionBuilder.Field("active", Scalar())

    /** Base SHA of the source branch.
      */
    def beforeSha: SelectionBuilder[Pipeline, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("beforeSha", OptionOf(Scalar()))

    /** Specifies if a pipeline can be canceled.
      */
    def cancelable: SelectionBuilder[Pipeline, Boolean] = _root_.caliban.client.SelectionBuilder.Field("cancelable", Scalar())

    /** Code Quality degradations reported on the pipeline.
      */
    def codeQualityReports[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[CodeQualityDegradationConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[Pipeline, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "codeQualityReports",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** Path to the commit that triggered the pipeline.
      */
    def commitPath: SelectionBuilder[Pipeline, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("commitPath", OptionOf(Scalar()))

    /** Timestamp of the pipeline's commit.
      */
    def committedAt: SelectionBuilder[Pipeline, Option[Time]] =
      _root_.caliban.client.SelectionBuilder.Field("committedAt", OptionOf(Scalar()))

    /** Indicates if a pipeline is complete.
      */
    def complete: SelectionBuilder[Pipeline, Boolean] = _root_.caliban.client.SelectionBuilder.Field("complete", Scalar())

    /** Configuration source of the pipeline (UNKNOWN_SOURCE, REPOSITORY_SOURCE, AUTO_DEVOPS_SOURCE, WEBIDE_SOURCE, REMOTE_SOURCE,
      * EXTERNAL_PROJECT_SOURCE, BRIDGE_SOURCE, PARAMETER_SOURCE, COMPLIANCE_SOURCE)
      */
    def configSource: SelectionBuilder[Pipeline, Option[PipelineConfigSourceEnum]] =
      _root_.caliban.client.SelectionBuilder.Field("configSource", OptionOf(Scalar()))

    /** Coverage percentage.
      */
    def coverage: SelectionBuilder[Pipeline, Option[Double]] = _root_.caliban.client.SelectionBuilder.Field("coverage", OptionOf(Scalar()))

    /** Timestamp of the pipeline's creation.
      */
    def createdAt: SelectionBuilder[Pipeline, Time] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())

    /** Detailed status of the pipeline.
      */
    def detailedStatus[A](innerSelection: SelectionBuilder[DetailedStatus, A]): SelectionBuilder[Pipeline, A] =
      _root_.caliban.client.SelectionBuilder.Field("detailedStatus", Obj(innerSelection))

    /** Pipelines this pipeline will trigger.
      */
    def downstream[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[PipelineConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[Pipeline, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "downstream",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** Duration of the pipeline in seconds.
      */
    def duration: SelectionBuilder[Pipeline, Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("duration", OptionOf(Scalar()))

    /** Timestamp of the pipeline's completion.
      */
    def finishedAt: SelectionBuilder[Pipeline, Option[Time]] =
      _root_.caliban.client.SelectionBuilder.Field("finishedAt", OptionOf(Scalar()))

    /** ID of the pipeline.
      */
    def id: SelectionBuilder[Pipeline, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())

    /** Internal ID of the pipeline.
      */
    def iid: SelectionBuilder[Pipeline, String] = _root_.caliban.client.SelectionBuilder.Field("iid", Scalar())

    /** A specific job in this pipeline, either by name or ID.
      */
    def job[A](
      id: Option[JobID] = None,
      name: Option[String] = None
    )(
      innerSelection: SelectionBuilder[CiJob, A]
    )(
      implicit encoder0: ArgEncoder[Option[JobID]],
      encoder1: ArgEncoder[Option[String]]
    ): SelectionBuilder[Pipeline, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "job",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("id", id, "JobID")(encoder0), Argument("name", name, "String")(encoder1))
      )

    /** Jobs belonging to the pipeline.
      */
    def jobs[A](
      securityReportTypes: Option[List[SecurityReportTypeEnum]] = None,
      statuses: Option[List[CiJobStatus]] = None,
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[CiJobConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[List[SecurityReportTypeEnum]]],
      encoder1: ArgEncoder[Option[List[CiJobStatus]]],
      encoder2: ArgEncoder[Option[String]],
      encoder3: ArgEncoder[Option[String]],
      encoder4: ArgEncoder[Option[Int]],
      encoder5: ArgEncoder[Option[Int]]
    ): SelectionBuilder[Pipeline, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "jobs",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("securityReportTypes", securityReportTypes, "[SecurityReportTypeEnum!]")(encoder0),
          Argument("statuses", statuses, "[CiJobStatus!]")(encoder1),
          Argument("after", after, "String")(encoder2),
          Argument("before", before, "String")(encoder3),
          Argument("first", first, "Int")(encoder4),
          Argument("last", last, "Int")(encoder5)
        )
      )

    /** Relative path to the pipeline's page.
      */
    def path: SelectionBuilder[Pipeline, Option[String]] = _root_.caliban.client.SelectionBuilder.Field("path", OptionOf(Scalar()))

    /** Project the pipeline belongs to.
      */
    def project[A](innerSelection: SelectionBuilder[Project, A]): SelectionBuilder[Pipeline, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("project", OptionOf(Obj(innerSelection)))

    /** How long the pipeline was queued before starting.
      */
    def queuedDuration: SelectionBuilder[Pipeline, Option[Duration]] =
      _root_.caliban.client.SelectionBuilder.Field("queuedDuration", OptionOf(Scalar()))

    /** Specifies if a pipeline can be retried.
      */
    def retryable: SelectionBuilder[Pipeline, Boolean] = _root_.caliban.client.SelectionBuilder.Field("retryable", Scalar())

    /** Vulnerability findings reported on the pipeline.
      */
    def securityReportFindings[A](
      reportType: Option[List[String]] = None,
      severity: Option[List[String]] = None,
      scanner: Option[List[String]] = None,
      state: Option[List[VulnerabilityState]] = None,
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[PipelineSecurityReportFindingConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[List[String]]],
      encoder1: ArgEncoder[Option[List[String]]],
      encoder2: ArgEncoder[Option[List[String]]],
      encoder3: ArgEncoder[Option[List[VulnerabilityState]]],
      encoder4: ArgEncoder[Option[String]],
      encoder5: ArgEncoder[Option[String]],
      encoder6: ArgEncoder[Option[Int]],
      encoder7: ArgEncoder[Option[Int]]
    ): SelectionBuilder[Pipeline, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "securityReportFindings",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("reportType", reportType, "[String!]")(encoder0),
          Argument("severity", severity, "[String!]")(encoder1),
          Argument("scanner", scanner, "[String!]")(encoder2),
          Argument("state", state, "[VulnerabilityState!]")(encoder3),
          Argument("after", after, "String")(encoder4),
          Argument("before", before, "String")(encoder5),
          Argument("first", first, "Int")(encoder6),
          Argument("last", last, "Int")(encoder7)
        )
      )

    /** Vulnerability and scanned resource counts for each security scanner of the pipeline.
      */
    def securityReportSummary[A](innerSelection: SelectionBuilder[SecurityReportSummary, A]): SelectionBuilder[Pipeline, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("securityReportSummary", OptionOf(Obj(innerSelection)))

    /** SHA of the pipeline's commit.
      */
    def sha: SelectionBuilder[Pipeline, String] = _root_.caliban.client.SelectionBuilder.Field("sha", Scalar())

    /** Job where pipeline was triggered from.
      */
    def sourceJob[A](innerSelection: SelectionBuilder[CiJob, A]): SelectionBuilder[Pipeline, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("sourceJob", OptionOf(Obj(innerSelection)))

    /** Stages of the pipeline.
      */
    def stages[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[CiStageConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[Pipeline, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "stages",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** Timestamp when the pipeline was started.
      */
    def startedAt: SelectionBuilder[Pipeline, Option[Time]] = _root_.caliban.client.SelectionBuilder.Field("startedAt", OptionOf(Scalar()))

    /** Status of the pipeline (CREATED, WAITING_FOR_RESOURCE, PREPARING, PENDING, RUNNING, FAILED, SUCCESS, CANCELED, SKIPPED, MANUAL,
      * SCHEDULED)
      */
    def status: SelectionBuilder[Pipeline, PipelineStatusEnum] = _root_.caliban.client.SelectionBuilder.Field("status", Scalar())

    /** Summary of the test report generated by the pipeline.
      */
    def testReportSummary[A](innerSelection: SelectionBuilder[TestReportSummary, A]): SelectionBuilder[Pipeline, A] =
      _root_.caliban.client.SelectionBuilder.Field("testReportSummary", Obj(innerSelection))

    /** A specific test suite in a pipeline test report.
      */
    def testSuite[A](
      buildIds: List[String] = Nil
    )(
      innerSelection: SelectionBuilder[TestSuite, A]
    )(
      implicit encoder0: ArgEncoder[List[String]]
    ): SelectionBuilder[Pipeline, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field("testSuite", OptionOf(Obj(innerSelection)), arguments = List(Argument("buildIds", buildIds, "[ID!]!")(encoder0)))

    /** Timestamp of the pipeline's last activity.
      */
    def updatedAt: SelectionBuilder[Pipeline, Time] = _root_.caliban.client.SelectionBuilder.Field("updatedAt", Scalar())

    /** Pipeline that triggered the pipeline.
      */
    def upstream[A](innerSelection: SelectionBuilder[Pipeline, A]): SelectionBuilder[Pipeline, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("upstream", OptionOf(Obj(innerSelection)))

    /** Pipeline user.
      */
    def user[A](innerSelection: SelectionBuilder[UserCore, A]): SelectionBuilder[Pipeline, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("user", OptionOf(Obj(innerSelection)))

    /** Permissions for the current user on the resource
      */
    def userPermissions[A](innerSelection: SelectionBuilder[PipelinePermissions, A]): SelectionBuilder[Pipeline, A] =
      _root_.caliban.client.SelectionBuilder.Field("userPermissions", Obj(innerSelection))

    /** Indicates if the pipeline has jobs with `needs` dependencies.
      */
    def usesNeeds: SelectionBuilder[Pipeline, Option[Boolean]] =
      _root_.caliban.client.SelectionBuilder.Field("usesNeeds", OptionOf(Scalar()))

    /** Indicates if a pipeline has warnings.
      */
    def warnings: SelectionBuilder[Pipeline, Boolean] = _root_.caliban.client.SelectionBuilder.Field("warnings", Scalar())
  }

  type PipelineAnalytics

  object PipelineAnalytics {

    /** Labels for the monthly pipeline count.
      */
    def monthPipelinesLabels: SelectionBuilder[PipelineAnalytics, Option[List[String]]] =
      _root_.caliban.client.SelectionBuilder.Field("monthPipelinesLabels", OptionOf(ListOf(Scalar())))

    /** Total monthly successful pipeline count.
      */
    def monthPipelinesSuccessful: SelectionBuilder[PipelineAnalytics, Option[List[Int]]] =
      _root_.caliban.client.SelectionBuilder.Field("monthPipelinesSuccessful", OptionOf(ListOf(Scalar())))

    /** Total monthly pipeline count.
      */
    def monthPipelinesTotals: SelectionBuilder[PipelineAnalytics, Option[List[Int]]] =
      _root_.caliban.client.SelectionBuilder.Field("monthPipelinesTotals", OptionOf(ListOf(Scalar())))

    /** Pipeline times labels.
      */
    def pipelineTimesLabels: SelectionBuilder[PipelineAnalytics, Option[List[String]]] =
      _root_.caliban.client.SelectionBuilder.Field("pipelineTimesLabels", OptionOf(ListOf(Scalar())))

    /** Pipeline times.
      */
    def pipelineTimesValues: SelectionBuilder[PipelineAnalytics, Option[List[Int]]] =
      _root_.caliban.client.SelectionBuilder.Field("pipelineTimesValues", OptionOf(ListOf(Scalar())))

    /** Labels for the weekly pipeline count.
      */
    def weekPipelinesLabels: SelectionBuilder[PipelineAnalytics, Option[List[String]]] =
      _root_.caliban.client.SelectionBuilder.Field("weekPipelinesLabels", OptionOf(ListOf(Scalar())))

    /** Total weekly successful pipeline count.
      */
    def weekPipelinesSuccessful: SelectionBuilder[PipelineAnalytics, Option[List[Int]]] =
      _root_.caliban.client.SelectionBuilder.Field("weekPipelinesSuccessful", OptionOf(ListOf(Scalar())))

    /** Total weekly pipeline count.
      */
    def weekPipelinesTotals: SelectionBuilder[PipelineAnalytics, Option[List[Int]]] =
      _root_.caliban.client.SelectionBuilder.Field("weekPipelinesTotals", OptionOf(ListOf(Scalar())))

    /** Labels for the yearly pipeline count.
      */
    def yearPipelinesLabels: SelectionBuilder[PipelineAnalytics, Option[List[String]]] =
      _root_.caliban.client.SelectionBuilder.Field("yearPipelinesLabels", OptionOf(ListOf(Scalar())))

    /** Total yearly successful pipeline count.
      */
    def yearPipelinesSuccessful: SelectionBuilder[PipelineAnalytics, Option[List[Int]]] =
      _root_.caliban.client.SelectionBuilder.Field("yearPipelinesSuccessful", OptionOf(ListOf(Scalar())))

    /** Total yearly pipeline count.
      */
    def yearPipelinesTotals: SelectionBuilder[PipelineAnalytics, Option[List[Int]]] =
      _root_.caliban.client.SelectionBuilder.Field("yearPipelinesTotals", OptionOf(ListOf(Scalar())))
  }

  type PipelineArtifactRegistry

  object PipelineArtifactRegistry {

    /** Timestamp when the PipelineArtifactRegistry was created
      */
    def createdAt: SelectionBuilder[PipelineArtifactRegistry, Option[Time]] =
      _root_.caliban.client.SelectionBuilder.Field("createdAt", OptionOf(Scalar()))

    /** ID of the PipelineArtifactRegistry
      */
    def id: SelectionBuilder[PipelineArtifactRegistry, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())

    /** Error message during sync of the PipelineArtifactRegistry
      */
    def lastSyncFailure: SelectionBuilder[PipelineArtifactRegistry, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("lastSyncFailure", OptionOf(Scalar()))

    /** Timestamp of the most recent successful sync of the PipelineArtifactRegistry
      */
    def lastSyncedAt: SelectionBuilder[PipelineArtifactRegistry, Option[Time]] =
      _root_.caliban.client.SelectionBuilder.Field("lastSyncedAt", OptionOf(Scalar()))

    /** ID of the pipeline artifact.
      */
    def pipelineArtifactId: SelectionBuilder[PipelineArtifactRegistry, String] =
      _root_.caliban.client.SelectionBuilder.Field("pipelineArtifactId", Scalar())

    /** Timestamp after which the PipelineArtifactRegistry should be resynced
      */
    def retryAt: SelectionBuilder[PipelineArtifactRegistry, Option[Time]] =
      _root_.caliban.client.SelectionBuilder.Field("retryAt", OptionOf(Scalar()))

    /** Number of consecutive failed sync attempts of the PipelineArtifactRegistry
      */
    def retryCount: SelectionBuilder[PipelineArtifactRegistry, Option[Int]] =
      _root_.caliban.client.SelectionBuilder.Field("retryCount", OptionOf(Scalar()))

    /** Sync state of the PipelineArtifactRegistry
      */
    def state: SelectionBuilder[PipelineArtifactRegistry, Option[RegistryState]] =
      _root_.caliban.client.SelectionBuilder.Field("state", OptionOf(Scalar()))
  }

  type PipelineArtifactRegistryConnection

  object PipelineArtifactRegistryConnection {

    /** A list of edges.
      */
    def edges[A](
      innerSelection: SelectionBuilder[PipelineArtifactRegistryEdge, A]
    ): SelectionBuilder[PipelineArtifactRegistryConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](
      innerSelection: SelectionBuilder[PipelineArtifactRegistry, A]
    ): SelectionBuilder[PipelineArtifactRegistryConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[PipelineArtifactRegistryConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  }

  type PipelineArtifactRegistryEdge

  object PipelineArtifactRegistryEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[PipelineArtifactRegistryEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](innerSelection: SelectionBuilder[PipelineArtifactRegistry, A]): SelectionBuilder[PipelineArtifactRegistryEdge, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
  }

  type PipelineCancelPayload

  object PipelineCancelPayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[PipelineCancelPayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[PipelineCancelPayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))
  }

  type PipelineConnection

  object PipelineConnection {

    /** Total count of collection.
      */
    def count: SelectionBuilder[PipelineConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("count", Scalar())

    /** A list of edges.
      */
    def edges[A](innerSelection: SelectionBuilder[PipelineEdge, A]): SelectionBuilder[PipelineConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](innerSelection: SelectionBuilder[Pipeline, A]): SelectionBuilder[PipelineConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[PipelineConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  }

  type PipelineDestroyPayload

  object PipelineDestroyPayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[PipelineDestroyPayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[PipelineDestroyPayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))
  }

  type PipelineEdge

  object PipelineEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[PipelineEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](innerSelection: SelectionBuilder[Pipeline, A]): SelectionBuilder[PipelineEdge, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
  }

  type PipelinePermissions

  object PipelinePermissions {

    /** Indicates the user can perform `admin_pipeline` on this resource
      */
    def adminPipeline: SelectionBuilder[PipelinePermissions, Boolean] =
      _root_.caliban.client.SelectionBuilder.Field("adminPipeline", Scalar())

    /** Indicates the user can perform `destroy_pipeline` on this resource
      */
    def destroyPipeline: SelectionBuilder[PipelinePermissions, Boolean] =
      _root_.caliban.client.SelectionBuilder.Field("destroyPipeline", Scalar())

    /** Indicates the user can perform `update_pipeline` on this resource
      */
    def updatePipeline: SelectionBuilder[PipelinePermissions, Boolean] =
      _root_.caliban.client.SelectionBuilder.Field("updatePipeline", Scalar())
  }

  type PipelineRetryPayload

  object PipelineRetryPayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[PipelineRetryPayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[PipelineRetryPayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** The pipeline after mutation.
      */
    def pipeline[A](innerSelection: SelectionBuilder[Pipeline, A]): SelectionBuilder[PipelineRetryPayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("pipeline", OptionOf(Obj(innerSelection)))
  }

  type PipelineSecurityReportFinding

  object PipelineSecurityReportFinding {

    /** Type of the security report that found the vulnerability.
      */
    def confidence: SelectionBuilder[PipelineSecurityReportFinding, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("confidence", OptionOf(Scalar()))

    /** Description of the vulnerability finding.
      */
    def description: SelectionBuilder[PipelineSecurityReportFinding, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("description", OptionOf(Scalar()))

    /** Identifiers of the vulnerabilit finding.
      */
    def identifiers[A](
      innerSelection: SelectionBuilder[VulnerabilityIdentifier, A]
    ): SelectionBuilder[PipelineSecurityReportFinding, List[A]] =
      _root_.caliban.client.SelectionBuilder.Field("identifiers", ListOf(Obj(innerSelection)))

    /** Location metadata for the vulnerability. Its fields depend on the type of security scan that found the vulnerability.
      */
    def location[A](
      onVulnerabilityLocationContainerScanning: SelectionBuilder[VulnerabilityLocationContainerScanning, A],
      onVulnerabilityLocationCoverageFuzzing: SelectionBuilder[VulnerabilityLocationCoverageFuzzing, A],
      onVulnerabilityLocationDast: SelectionBuilder[VulnerabilityLocationDast, A],
      onVulnerabilityLocationDependencyScanning: SelectionBuilder[VulnerabilityLocationDependencyScanning, A],
      onVulnerabilityLocationSast: SelectionBuilder[VulnerabilityLocationSast, A],
      onVulnerabilityLocationSecretDetection: SelectionBuilder[VulnerabilityLocationSecretDetection, A]
    ): SelectionBuilder[PipelineSecurityReportFinding, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "location",
        OptionOf(
          ChoiceOf(
            Map(
              "VulnerabilityLocationContainerScanning" -> Obj(onVulnerabilityLocationContainerScanning),
              "VulnerabilityLocationCoverageFuzzing" -> Obj(onVulnerabilityLocationCoverageFuzzing),
              "VulnerabilityLocationDast" -> Obj(onVulnerabilityLocationDast),
              "VulnerabilityLocationDependencyScanning" -> Obj(onVulnerabilityLocationDependencyScanning),
              "VulnerabilityLocationSast" -> Obj(onVulnerabilityLocationSast),
              "VulnerabilityLocationSecretDetection" -> Obj(onVulnerabilityLocationSecretDetection)
            )
          )
        )
      )

    /** Name of the vulnerability finding.
      */
    def name: SelectionBuilder[PipelineSecurityReportFinding, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("name", OptionOf(Scalar()))

    /** The project on which the vulnerability finding was found.
      */
    def project[A](innerSelection: SelectionBuilder[Project, A]): SelectionBuilder[PipelineSecurityReportFinding, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("project", OptionOf(Obj(innerSelection)))

    /** Name of the vulnerability finding.
      */
    def projectFingerprint: SelectionBuilder[PipelineSecurityReportFinding, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("projectFingerprint", OptionOf(Scalar()))

    /** Type of the security report that found the vulnerability finding.
      */
    def reportType: SelectionBuilder[PipelineSecurityReportFinding, Option[VulnerabilityReportType]] =
      _root_.caliban.client.SelectionBuilder.Field("reportType", OptionOf(Scalar()))

    /** Scanner metadata for the vulnerability.
      */
    def scanner[A](innerSelection: SelectionBuilder[VulnerabilityScanner, A]): SelectionBuilder[PipelineSecurityReportFinding, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("scanner", OptionOf(Obj(innerSelection)))

    /** Severity of the vulnerability finding.
      */
    def severity: SelectionBuilder[PipelineSecurityReportFinding, Option[VulnerabilitySeverity]] =
      _root_.caliban.client.SelectionBuilder.Field("severity", OptionOf(Scalar()))

    /** URL to the vulnerability's details page.
      */
    def solution: SelectionBuilder[PipelineSecurityReportFinding, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("solution", OptionOf(Scalar()))

    /** The finding status.
      */
    def state: SelectionBuilder[PipelineSecurityReportFinding, Option[VulnerabilityState]] =
      _root_.caliban.client.SelectionBuilder.Field("state", OptionOf(Scalar()))

    /** Name of the vulnerability finding.
      */
    def uuid: SelectionBuilder[PipelineSecurityReportFinding, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("uuid", OptionOf(Scalar()))
  }

  type PipelineSecurityReportFindingConnection

  object PipelineSecurityReportFindingConnection {

    /** A list of edges.
      */
    def edges[A](
      innerSelection: SelectionBuilder[PipelineSecurityReportFindingEdge, A]
    ): SelectionBuilder[PipelineSecurityReportFindingConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](
      innerSelection: SelectionBuilder[PipelineSecurityReportFinding, A]
    ): SelectionBuilder[PipelineSecurityReportFindingConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[PipelineSecurityReportFindingConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  }

  type PipelineSecurityReportFindingEdge

  object PipelineSecurityReportFindingEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[PipelineSecurityReportFindingEdge, String] =
      _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](
      innerSelection: SelectionBuilder[PipelineSecurityReportFinding, A]
    ): SelectionBuilder[PipelineSecurityReportFindingEdge, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))

  }

  type Project

  object Project {

    /** Size limit for the repository in bytes.
      */
    def actualRepositorySizeLimit: SelectionBuilder[Project, Option[Double]] =
      _root_.caliban.client.SelectionBuilder.Field("actualRepositorySizeLimit", OptionOf(Scalar()))

    /** Agent configurations defined by the project
      */
    def agentConfigurations[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[AgentConfigurationConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[Project, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "agentConfigurations",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** A single Alert Management alert of the project.
      */
    def alertManagementAlert[A](
      iid: Option[String] = None,
      statuses: Option[List[AlertManagementStatus]] = None,
      sort: Option[AlertManagementAlertSort] = None,
      domain: AlertManagementDomainFilter,
      search: Option[String] = None,
      assigneeUsername: Option[String] = None
    )(
      innerSelection: SelectionBuilder[AlertManagementAlert, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[List[AlertManagementStatus]]],
      encoder2: ArgEncoder[Option[AlertManagementAlertSort]],
      encoder3: ArgEncoder[AlertManagementDomainFilter],
      encoder4: ArgEncoder[Option[String]],
      encoder5: ArgEncoder[Option[String]]
    ): SelectionBuilder[Project, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "alertManagementAlert",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("iid", iid, "String")(encoder0),
          Argument("statuses", statuses, "[AlertManagementStatus!]")(encoder1),
          Argument("sort", sort, "AlertManagementAlertSort")(encoder2),
          Argument("domain", domain, "AlertManagementDomainFilter!")(encoder3),
          Argument("search", search, "String")(encoder4),
          Argument("assigneeUsername", assigneeUsername, "String")(encoder5)
        )
      )

    /** Counts of alerts by status for the project.
      */
    def alertManagementAlertStatusCounts[A](
      search: Option[String] = None,
      assigneeUsername: Option[String] = None
    )(
      innerSelection: SelectionBuilder[AlertManagementAlertStatusCountsType, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]]
    ): SelectionBuilder[Project, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "alertManagementAlertStatusCounts",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("search", search, "String")(encoder0), Argument("assigneeUsername", assigneeUsername, "String")(encoder1))
      )

    /** Alert Management alerts of the project.
      */
    def alertManagementAlerts[A](
      iid: Option[String] = None,
      statuses: Option[List[AlertManagementStatus]] = None,
      sort: Option[AlertManagementAlertSort] = None,
      domain: AlertManagementDomainFilter,
      search: Option[String] = None,
      assigneeUsername: Option[String] = None,
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[AlertManagementAlertConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[List[AlertManagementStatus]]],
      encoder2: ArgEncoder[Option[AlertManagementAlertSort]],
      encoder3: ArgEncoder[AlertManagementDomainFilter],
      encoder4: ArgEncoder[Option[String]],
      encoder5: ArgEncoder[Option[String]],
      encoder6: ArgEncoder[Option[String]],
      encoder7: ArgEncoder[Option[String]],
      encoder8: ArgEncoder[Option[Int]],
      encoder9: ArgEncoder[Option[Int]]
    ): SelectionBuilder[Project, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "alertManagementAlerts",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("iid", iid, "String")(encoder0),
          Argument("statuses", statuses, "[AlertManagementStatus!]")(encoder1),
          Argument("sort", sort, "AlertManagementAlertSort")(encoder2),
          Argument("domain", domain, "AlertManagementDomainFilter!")(encoder3),
          Argument("search", search, "String")(encoder4),
          Argument("assigneeUsername", assigneeUsername, "String")(encoder5),
          Argument("after", after, "String")(encoder6),
          Argument("before", before, "String")(encoder7),
          Argument("first", first, "Int")(encoder8),
          Argument("last", last, "Int")(encoder9)
        )
      )

    /** HTTP Integrations which can receive alerts for the project.
      */
    def alertManagementHttpIntegrations[A](
      id: Option[AlertManagementHttpIntegrationID] = None,
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[AlertManagementHttpIntegrationConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[AlertManagementHttpIntegrationID]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[String]],
      encoder3: ArgEncoder[Option[Int]],
      encoder4: ArgEncoder[Option[Int]]
    ): SelectionBuilder[Project, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "alertManagementHttpIntegrations",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("id", id, "AlertManagementHttpIntegrationID")(encoder0),
          Argument("after", after, "String")(encoder1),
          Argument("before", before, "String")(encoder2),
          Argument("first", first, "Int")(encoder3),
          Argument("last", last, "Int")(encoder4)
        )
      )

    /** Integrations which can receive alerts for the project.
      */
    def alertManagementIntegrations[A](
      id: Option[GlobalID] = None,
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[AlertManagementIntegrationConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[GlobalID]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[String]],
      encoder3: ArgEncoder[Option[Int]],
      encoder4: ArgEncoder[Option[Int]]
    ): SelectionBuilder[Project, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "alertManagementIntegrations",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("id", id, "GlobalID")(encoder0),
          Argument("after", after, "String")(encoder1),
          Argument("before", before, "String")(encoder2),
          Argument("first", first, "Int")(encoder3),
          Argument("last", last, "Int")(encoder4)
        )
      )

    /** Extract alert fields from payload for custom mapping.
      */
    def alertManagementPayloadFields[A](
      payloadExample: String
    )(
      innerSelection: SelectionBuilder[AlertManagementPayloadAlertField, A]
    )(
      implicit encoder0: ArgEncoder[String]
    ): SelectionBuilder[Project, Option[List[A]]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "alertManagementPayloadFields",
        OptionOf(ListOf(Obj(innerSelection))),
        arguments = List(Argument("payloadExample", payloadExample, "String!")(encoder0))
      )

    /** If `only_allow_merge_if_pipeline_succeeds` is true, indicates if merge requests of the project can also be merged with skipped jobs.
      */
    def allowMergeOnSkippedPipeline: SelectionBuilder[Project, Option[Boolean]] =
      _root_.caliban.client.SelectionBuilder.Field("allowMergeOnSkippedPipeline", OptionOf(Scalar()))

    /** API fuzzing configuration for the project.
      */
    def apiFuzzingCiConfiguration[A](innerSelection: SelectionBuilder[ApiFuzzingCiConfiguration, A]): SelectionBuilder[Project, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("apiFuzzingCiConfiguration", OptionOf(Obj(innerSelection)))

    /** Indicates the archived status of the project.
      */
    def archived: SelectionBuilder[Project, Option[Boolean]] = _root_.caliban.client.SelectionBuilder.Field("archived", OptionOf(Scalar()))

    /** Indicates if issues referenced by merge requests and commits within the default branch are closed automatically.
      */
    def autocloseReferencedIssues: SelectionBuilder[Project, Option[Boolean]] =
      _root_.caliban.client.SelectionBuilder.Field("autocloseReferencedIssues", OptionOf(Scalar()))

    /** URL to avatar image file of the project.
      */
    def avatarUrl: SelectionBuilder[Project, Option[String]] = _root_.caliban.client.SelectionBuilder.Field("avatarUrl", OptionOf(Scalar()))

    /** A single board of the project.
      */
    def board[A](
      id: BoardID
    )(
      innerSelection: SelectionBuilder[Board, A]
    )(
      implicit encoder0: ArgEncoder[BoardID]
    ): SelectionBuilder[Project, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field("board", OptionOf(Obj(innerSelection)), arguments = List(Argument("id", id, "BoardID!")(encoder0)))

    /** Boards of the project.
      */
    def boards[A](
      id: Option[BoardID] = None,
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[BoardConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[BoardID]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[String]],
      encoder3: ArgEncoder[Option[Int]],
      encoder4: ArgEncoder[Option[Int]]
    ): SelectionBuilder[Project, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "boards",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("id", id, "BoardID")(encoder0),
          Argument("after", after, "String")(encoder1),
          Argument("before", before, "String")(encoder2),
          Argument("first", first, "Int")(encoder3),
          Argument("last", last, "Int")(encoder4)
        )
      )

    /** CI/CD settings for the project.
      */
    def ciCdSettings[A](innerSelection: SelectionBuilder[ProjectCiCdSetting, A]): SelectionBuilder[Project, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("ciCdSettings", OptionOf(Obj(innerSelection)))

    /** The CI Job Tokens scope of access.
      */
    def ciJobTokenScope[A](innerSelection: SelectionBuilder[CiJobTokenScopeType, A]): SelectionBuilder[Project, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("ciJobTokenScope", OptionOf(Obj(innerSelection)))

    /** Find a single CI/CD template by name.
      */
    def ciTemplate[A](
      name: String
    )(
      innerSelection: SelectionBuilder[CiTemplate, A]
    )(
      implicit encoder0: ArgEncoder[String]
    ): SelectionBuilder[Project, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field("ciTemplate", OptionOf(Obj(innerSelection)), arguments = List(Argument("name", name, "String!")(encoder0)))

    /** Find a single cluster agent by name.
      */
    def clusterAgent[A](
      name: String
    )(
      innerSelection: SelectionBuilder[ClusterAgent, A]
    )(
      implicit encoder0: ArgEncoder[String]
    ): SelectionBuilder[Project, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field("clusterAgent", OptionOf(Obj(innerSelection)), arguments = List(Argument("name", name, "String!")(encoder0)))

    /** Cluster agents associated with the project.
      */
    def clusterAgents[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[ClusterAgentConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[Project, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "clusterAgents",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** Code coverage summary associated with the project.
      */
    def codeCoverageSummary[A](innerSelection: SelectionBuilder[CodeCoverageSummary, A]): SelectionBuilder[Project, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("codeCoverageSummary", OptionOf(Obj(innerSelection)))

    /** Compliance frameworks associated with the project.
      */
    def complianceFrameworks[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[ComplianceFrameworkConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[Project, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "complianceFrameworks",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** The container expiration policy of the project.
      */
    def containerExpirationPolicy[A](innerSelection: SelectionBuilder[ContainerExpirationPolicy, A]): SelectionBuilder[Project, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("containerExpirationPolicy", OptionOf(Obj(innerSelection)))

    /** Indicates if the project stores Docker container images in a container registry.
      */
    def containerRegistryEnabled: SelectionBuilder[Project, Option[Boolean]] =
      _root_.caliban.client.SelectionBuilder.Field("containerRegistryEnabled", OptionOf(Scalar()))

    /** Container repositories of the project.
      */
    def containerRepositories[A](
      name: Option[String] = None,
      sort: Option[ContainerRepositorySort] = None,
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[ContainerRepositoryConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[ContainerRepositorySort]],
      encoder2: ArgEncoder[Option[String]],
      encoder3: ArgEncoder[Option[String]],
      encoder4: ArgEncoder[Option[Int]],
      encoder5: ArgEncoder[Option[Int]]
    ): SelectionBuilder[Project, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "containerRepositories",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("name", name, "String")(encoder0),
          Argument("sort", sort, "ContainerRepositorySort")(encoder1),
          Argument("after", after, "String")(encoder2),
          Argument("before", before, "String")(encoder3),
          Argument("first", first, "Int")(encoder4),
          Argument("last", last, "Int")(encoder5)
        )
      )

    /** Number of container repositories in the project.
      */
    def containerRepositoriesCount: SelectionBuilder[Project, Int] =
      _root_.caliban.client.SelectionBuilder.Field("containerRepositoriesCount", Scalar())

    /** Timestamp of the project creation.
      */
    def createdAt: SelectionBuilder[Project, Option[Time]] = _root_.caliban.client.SelectionBuilder.Field("createdAt", OptionOf(Scalar()))

    /** DAST Profiles associated with the project.
      */
    def dastProfiles[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[DastProfileConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[Project, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "dastProfiles",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** The DAST scanner profiles associated with the project.
      */
    def dastScannerProfiles[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[DastScannerProfileConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[Project, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "dastScannerProfiles",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** DAST Site Profile associated with the project.
      */
    def dastSiteProfile[A](
      id: DastSiteProfileID
    )(
      innerSelection: SelectionBuilder[DastSiteProfile, A]
    )(
      implicit encoder0: ArgEncoder[DastSiteProfileID]
    ): SelectionBuilder[Project, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field("dastSiteProfile", OptionOf(Obj(innerSelection)), arguments = List(Argument("id", id, "DastSiteProfileID!")(encoder0)))

    /** DAST Site Profiles associated with the project.
      */
    def dastSiteProfiles[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[DastSiteProfileConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[Project, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "dastSiteProfiles",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** DAST Site Validations associated with the project.
      */
    def dastSiteValidations[A](
      normalizedTargetUrls: Option[List[String]] = None,
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[DastSiteValidationConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[List[String]]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[String]],
      encoder3: ArgEncoder[Option[Int]],
      encoder4: ArgEncoder[Option[Int]]
    ): SelectionBuilder[Project, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "dastSiteValidations",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("normalizedTargetUrls", normalizedTargetUrls, "[String!]")(encoder0),
          Argument("after", after, "String")(encoder1),
          Argument("before", before, "String")(encoder2),
          Argument("first", first, "Int")(encoder3),
          Argument("last", last, "Int")(encoder4)
        )
      )

    /** Short description of the project.
      */
    def description: SelectionBuilder[Project, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("description", OptionOf(Scalar()))

    /** The GitLab Flavored Markdown rendering of `description`
      */
    def descriptionHtml: SelectionBuilder[Project, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("descriptionHtml", OptionOf(Scalar()))

    /** The project's DORA metrics.
      */
    def dora[A](innerSelection: SelectionBuilder[Dora, A]): SelectionBuilder[Project, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("dora", OptionOf(Obj(innerSelection)))

    /** A single environment of the project.
      */
    def environment[A](
      name: Option[String] = None,
      search: Option[String] = None,
      states: Option[List[String]] = None
    )(
      innerSelection: SelectionBuilder[Environment, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[List[String]]]
    ): SelectionBuilder[Project, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "environment",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("name", name, "String")(encoder0),
          Argument("search", search, "String")(encoder1),
          Argument("states", states, "[String!]")(encoder2)
        )
      )

    /** Environments of the project.
      */
    def environments[A](
      name: Option[String] = None,
      search: Option[String] = None,
      states: Option[List[String]] = None,
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[EnvironmentConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[List[String]]],
      encoder3: ArgEncoder[Option[String]],
      encoder4: ArgEncoder[Option[String]],
      encoder5: ArgEncoder[Option[Int]],
      encoder6: ArgEncoder[Option[Int]]
    ): SelectionBuilder[Project, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "environments",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("name", name, "String")(encoder0),
          Argument("search", search, "String")(encoder1),
          Argument("states", states, "[String!]")(encoder2),
          Argument("after", after, "String")(encoder3),
          Argument("before", before, "String")(encoder4),
          Argument("first", first, "Int")(encoder5),
          Argument("last", last, "Int")(encoder6)
        )
      )

    /** Number of times the project has been forked.
      */
    def forksCount: SelectionBuilder[Project, Int] = _root_.caliban.client.SelectionBuilder.Field("forksCount", Scalar())

    /** Full path of the project.
      */
    def fullPath: SelectionBuilder[Project, String] = _root_.caliban.client.SelectionBuilder.Field("fullPath", Scalar())

    /** Grafana integration details for the project.
      */
    def grafanaIntegration[A](innerSelection: SelectionBuilder[GrafanaIntegration, A]): SelectionBuilder[Project, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("grafanaIntegration", OptionOf(Obj(innerSelection)))

    /** Group of the project.
      */
    def group[A](innerSelection: SelectionBuilder[Group, A]): SelectionBuilder[Project, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("group", OptionOf(Obj(innerSelection)))

    /** URL to connect to the project via HTTPS.
      */
    def httpUrlToRepo: SelectionBuilder[Project, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("httpUrlToRepo", OptionOf(Scalar()))

    /** ID of the project.
      */
    def id: SelectionBuilder[Project, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())

    /** Status of import background job of the project.
      */
    def importStatus: SelectionBuilder[Project, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("importStatus", OptionOf(Scalar()))

    /** Incident Management escalation policies of the project.
      */
    def incidentManagementEscalationPolicies[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[EscalationPolicyTypeConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[Project, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "incidentManagementEscalationPolicies",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** Incident Management escalation policy of the project.
      */
    def incidentManagementEscalationPolicy[A](
      id: IncidentManagementEscalationPolicyID
    )(
      innerSelection: SelectionBuilder[EscalationPolicyType, A]
    )(
      implicit encoder0: ArgEncoder[IncidentManagementEscalationPolicyID]
    ): SelectionBuilder[Project, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "incidentManagementEscalationPolicy",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("id", id, "IncidentManagementEscalationPolicyID!")(encoder0))
      )

    /** Incident Management On-call schedules of the project.
      */
    def incidentManagementOncallSchedules[A](
      iids: Option[List[String]] = None,
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[IncidentManagementOncallScheduleConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[List[String]]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[String]],
      encoder3: ArgEncoder[Option[Int]],
      encoder4: ArgEncoder[Option[Int]]
    ): SelectionBuilder[Project, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "incidentManagementOncallSchedules",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("iids", iids, "[ID!]")(encoder0),
          Argument("after", after, "String")(encoder1),
          Argument("before", before, "String")(encoder2),
          Argument("first", first, "Int")(encoder3),
          Argument("last", last, "Int")(encoder4)
        )
      )

    /** A single issue of the project.
      */
    def issue[A](
      iid: Option[String] = None,
      iids: Option[List[String]] = None,
      labelName: Option[List[Option[String]]] = None,
      milestoneTitle: Option[List[Option[String]]] = None,
      authorUsername: Option[String] = None,
      assigneeUsernames: Option[List[String]] = None,
      assigneeId: Option[String] = None,
      createdBefore: Option[Time] = None,
      createdAfter: Option[Time] = None,
      updatedBefore: Option[Time] = None,
      updatedAfter: Option[Time] = None,
      closedBefore: Option[Time] = None,
      closedAfter: Option[Time] = None,
      search: Option[String] = None,
      types: Option[List[IssueType]] = None,
      not: Option[NegatedIssueFilterInput] = None,
      state: Option[IssuableState] = None,
      sort: Option[IssueSort] = None,
      iterationId: Option[List[Option[String]]] = None,
      iterationWildcardId: Option[IterationWildcardId] = None,
      epicId: Option[String] = None,
      weight: Option[String] = None
    )(
      innerSelection: SelectionBuilder[Issue, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[List[String]]],
      encoder2: ArgEncoder[Option[List[Option[String]]]],
      encoder3: ArgEncoder[Option[List[Option[String]]]],
      encoder4: ArgEncoder[Option[String]],
      encoder5: ArgEncoder[Option[List[String]]],
      encoder6: ArgEncoder[Option[String]],
      encoder7: ArgEncoder[Option[Time]],
      encoder8: ArgEncoder[Option[Time]],
      encoder9: ArgEncoder[Option[Time]],
      encoder10: ArgEncoder[Option[Time]],
      encoder11: ArgEncoder[Option[Time]],
      encoder12: ArgEncoder[Option[Time]],
      encoder13: ArgEncoder[Option[String]],
      encoder14: ArgEncoder[Option[List[IssueType]]],
      encoder15: ArgEncoder[Option[NegatedIssueFilterInput]],
      encoder16: ArgEncoder[Option[IssuableState]],
      encoder17: ArgEncoder[Option[IssueSort]],
      encoder18: ArgEncoder[Option[List[Option[String]]]],
      encoder19: ArgEncoder[Option[IterationWildcardId]],
      encoder20: ArgEncoder[Option[String]],
      encoder21: ArgEncoder[Option[String]]
    ): SelectionBuilder[Project, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "issue",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("iid", iid, "String")(encoder0),
          Argument("iids", iids, "[String!]")(encoder1),
          Argument("labelName", labelName, "[String]")(encoder2),
          Argument("milestoneTitle", milestoneTitle, "[String]")(encoder3),
          Argument("authorUsername", authorUsername, "String")(encoder4),
          Argument("assigneeUsernames", assigneeUsernames, "[String!]")(encoder5),
          Argument("assigneeId", assigneeId, "String")(encoder6),
          Argument("createdBefore", createdBefore, "Time")(encoder7),
          Argument("createdAfter", createdAfter, "Time")(encoder8),
          Argument("updatedBefore", updatedBefore, "Time")(encoder9),
          Argument("updatedAfter", updatedAfter, "Time")(encoder10),
          Argument("closedBefore", closedBefore, "Time")(encoder11),
          Argument("closedAfter", closedAfter, "Time")(encoder12),
          Argument("search", search, "String")(encoder13),
          Argument("types", types, "[IssueType!]")(encoder14),
          Argument("not", not, "NegatedIssueFilterInput")(encoder15),
          Argument("state", state, "IssuableState")(encoder16),
          Argument("sort", sort, "IssueSort")(encoder17),
          Argument("iterationId", iterationId, "[ID]")(encoder18),
          Argument("iterationWildcardId", iterationWildcardId, "IterationWildcardId")(encoder19),
          Argument("epicId", epicId, "String")(encoder20),
          Argument("weight", weight, "String")(encoder21)
        )
      )

    /** Counts of issues by status for the project.
      */
    def issueStatusCounts[A](
      iid: Option[String] = None,
      iids: Option[List[String]] = None,
      labelName: Option[List[Option[String]]] = None,
      milestoneTitle: Option[List[Option[String]]] = None,
      authorUsername: Option[String] = None,
      assigneeUsernames: Option[List[String]] = None,
      assigneeId: Option[String] = None,
      createdBefore: Option[Time] = None,
      createdAfter: Option[Time] = None,
      updatedBefore: Option[Time] = None,
      updatedAfter: Option[Time] = None,
      closedBefore: Option[Time] = None,
      closedAfter: Option[Time] = None,
      search: Option[String] = None,
      types: Option[List[IssueType]] = None,
      not: Option[NegatedIssueFilterInput] = None
    )(
      innerSelection: SelectionBuilder[IssueStatusCountsType, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[List[String]]],
      encoder2: ArgEncoder[Option[List[Option[String]]]],
      encoder3: ArgEncoder[Option[List[Option[String]]]],
      encoder4: ArgEncoder[Option[String]],
      encoder5: ArgEncoder[Option[List[String]]],
      encoder6: ArgEncoder[Option[String]],
      encoder7: ArgEncoder[Option[Time]],
      encoder8: ArgEncoder[Option[Time]],
      encoder9: ArgEncoder[Option[Time]],
      encoder10: ArgEncoder[Option[Time]],
      encoder11: ArgEncoder[Option[Time]],
      encoder12: ArgEncoder[Option[Time]],
      encoder13: ArgEncoder[Option[String]],
      encoder14: ArgEncoder[Option[List[IssueType]]],
      encoder15: ArgEncoder[Option[NegatedIssueFilterInput]]
    ): SelectionBuilder[Project, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "issueStatusCounts",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("iid", iid, "String")(encoder0),
          Argument("iids", iids, "[String!]")(encoder1),
          Argument("labelName", labelName, "[String]")(encoder2),
          Argument("milestoneTitle", milestoneTitle, "[String]")(encoder3),
          Argument("authorUsername", authorUsername, "String")(encoder4),
          Argument("assigneeUsernames", assigneeUsernames, "[String!]")(encoder5),
          Argument("assigneeId", assigneeId, "String")(encoder6),
          Argument("createdBefore", createdBefore, "Time")(encoder7),
          Argument("createdAfter", createdAfter, "Time")(encoder8),
          Argument("updatedBefore", updatedBefore, "Time")(encoder9),
          Argument("updatedAfter", updatedAfter, "Time")(encoder10),
          Argument("closedBefore", closedBefore, "Time")(encoder11),
          Argument("closedAfter", closedAfter, "Time")(encoder12),
          Argument("search", search, "String")(encoder13),
          Argument("types", types, "[IssueType!]")(encoder14),
          Argument("not", not, "NegatedIssueFilterInput")(encoder15)
        )
      )

    /** Issues of the project.
      */
    def issues[A](
      iid: Option[String] = None,
      iids: Option[List[String]] = None,
      labelName: Option[List[Option[String]]] = None,
      milestoneTitle: Option[List[Option[String]]] = None,
      authorUsername: Option[String] = None,
      assigneeUsernames: Option[List[String]] = None,
      assigneeId: Option[String] = None,
      createdBefore: Option[Time] = None,
      createdAfter: Option[Time] = None,
      updatedBefore: Option[Time] = None,
      updatedAfter: Option[Time] = None,
      closedBefore: Option[Time] = None,
      closedAfter: Option[Time] = None,
      search: Option[String] = None,
      types: Option[List[IssueType]] = None,
      not: Option[NegatedIssueFilterInput] = None,
      state: Option[IssuableState] = None,
      sort: Option[IssueSort] = None,
      iterationId: Option[List[Option[String]]] = None,
      iterationWildcardId: Option[IterationWildcardId] = None,
      epicId: Option[String] = None,
      weight: Option[String] = None,
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[IssueConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[List[String]]],
      encoder2: ArgEncoder[Option[List[Option[String]]]],
      encoder3: ArgEncoder[Option[List[Option[String]]]],
      encoder4: ArgEncoder[Option[String]],
      encoder5: ArgEncoder[Option[List[String]]],
      encoder6: ArgEncoder[Option[String]],
      encoder7: ArgEncoder[Option[Time]],
      encoder8: ArgEncoder[Option[Time]],
      encoder9: ArgEncoder[Option[Time]],
      encoder10: ArgEncoder[Option[Time]],
      encoder11: ArgEncoder[Option[Time]],
      encoder12: ArgEncoder[Option[Time]],
      encoder13: ArgEncoder[Option[String]],
      encoder14: ArgEncoder[Option[List[IssueType]]],
      encoder15: ArgEncoder[Option[NegatedIssueFilterInput]],
      encoder16: ArgEncoder[Option[IssuableState]],
      encoder17: ArgEncoder[Option[IssueSort]],
      encoder18: ArgEncoder[Option[List[Option[String]]]],
      encoder19: ArgEncoder[Option[IterationWildcardId]],
      encoder20: ArgEncoder[Option[String]],
      encoder21: ArgEncoder[Option[String]],
      encoder22: ArgEncoder[Option[String]],
      encoder23: ArgEncoder[Option[String]],
      encoder24: ArgEncoder[Option[Int]],
      encoder25: ArgEncoder[Option[Int]]
    ): SelectionBuilder[Project, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "issues",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("iid", iid, "String")(encoder0),
          Argument("iids", iids, "[String!]")(encoder1),
          Argument("labelName", labelName, "[String]")(encoder2),
          Argument("milestoneTitle", milestoneTitle, "[String]")(encoder3),
          Argument("authorUsername", authorUsername, "String")(encoder4),
          Argument("assigneeUsernames", assigneeUsernames, "[String!]")(encoder5),
          Argument("assigneeId", assigneeId, "String")(encoder6),
          Argument("createdBefore", createdBefore, "Time")(encoder7),
          Argument("createdAfter", createdAfter, "Time")(encoder8),
          Argument("updatedBefore", updatedBefore, "Time")(encoder9),
          Argument("updatedAfter", updatedAfter, "Time")(encoder10),
          Argument("closedBefore", closedBefore, "Time")(encoder11),
          Argument("closedAfter", closedAfter, "Time")(encoder12),
          Argument("search", search, "String")(encoder13),
          Argument("types", types, "[IssueType!]")(encoder14),
          Argument("not", not, "NegatedIssueFilterInput")(encoder15),
          Argument("state", state, "IssuableState")(encoder16),
          Argument("sort", sort, "IssueSort")(encoder17),
          Argument("iterationId", iterationId, "[ID]")(encoder18),
          Argument("iterationWildcardId", iterationWildcardId, "IterationWildcardId")(encoder19),
          Argument("epicId", epicId, "String")(encoder20),
          Argument("weight", weight, "String")(encoder21),
          Argument("after", after, "String")(encoder22),
          Argument("before", before, "String")(encoder23),
          Argument("first", first, "Int")(encoder24),
          Argument("last", last, "Int")(encoder25)
        )
      )

    /** Indicates if Issues are enabled for the current user
      */
    def issuesEnabled: SelectionBuilder[Project, Option[Boolean]] =
      _root_.caliban.client.SelectionBuilder.Field("issuesEnabled", OptionOf(Scalar()))

    /** Find iteration cadences.
      */
    def iterationCadences[A](
      id: Option[IterationsCadenceID] = None,
      title: Option[String] = None,
      durationInWeeks: Option[Int] = None,
      automatic: Option[Boolean] = None,
      active: Option[Boolean] = None,
      includeAncestorGroups: Option[Boolean] = None,
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[IterationCadenceConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[IterationsCadenceID]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Boolean]],
      encoder4: ArgEncoder[Option[Boolean]],
      encoder5: ArgEncoder[Option[Boolean]],
      encoder6: ArgEncoder[Option[String]],
      encoder7: ArgEncoder[Option[String]],
      encoder8: ArgEncoder[Option[Int]],
      encoder9: ArgEncoder[Option[Int]]
    ): SelectionBuilder[Project, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "iterationCadences",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("id", id, "IterationsCadenceID")(encoder0),
          Argument("title", title, "String")(encoder1),
          Argument("durationInWeeks", durationInWeeks, "Int")(encoder2),
          Argument("automatic", automatic, "Boolean")(encoder3),
          Argument("active", active, "Boolean")(encoder4),
          Argument("includeAncestorGroups", includeAncestorGroups, "Boolean")(encoder5),
          Argument("after", after, "String")(encoder6),
          Argument("before", before, "String")(encoder7),
          Argument("first", first, "Int")(encoder8),
          Argument("last", last, "Int")(encoder9)
        )
      )

    /** Find iterations.
      */
    def iterations[A](
      timeframe: Option[Timeframe] = None,
      state: Option[IterationState] = None,
      title: Option[String] = None,
      id: Option[String] = None,
      iid: Option[String] = None,
      includeAncestors: Option[Boolean] = None,
      iterationCadenceIds: Option[List[IterationsCadenceID]] = None,
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[IterationConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[Timeframe]],
      encoder1: ArgEncoder[Option[IterationState]],
      encoder2: ArgEncoder[Option[String]],
      encoder3: ArgEncoder[Option[String]],
      encoder4: ArgEncoder[Option[String]],
      encoder5: ArgEncoder[Option[Boolean]],
      encoder6: ArgEncoder[Option[List[IterationsCadenceID]]],
      encoder7: ArgEncoder[Option[String]],
      encoder8: ArgEncoder[Option[String]],
      encoder9: ArgEncoder[Option[Int]],
      encoder10: ArgEncoder[Option[Int]]
    ): SelectionBuilder[Project, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "iterations",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("timeframe", timeframe, "Timeframe")(encoder0),
          Argument("state", state, "IterationState")(encoder1),
          Argument("title", title, "String")(encoder2),
          Argument("id", id, "ID")(encoder3),
          Argument("iid", iid, "ID")(encoder4),
          Argument("includeAncestors", includeAncestors, "Boolean")(encoder5),
          Argument("iterationCadenceIds", iterationCadenceIds, "[IterationsCadenceID!]")(encoder6),
          Argument("after", after, "String")(encoder7),
          Argument("before", before, "String")(encoder8),
          Argument("first", first, "Int")(encoder9),
          Argument("last", last, "Int")(encoder10)
        )
      )

    /** Status of Jira import background job of the project.
      */
    def jiraImportStatus: SelectionBuilder[Project, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("jiraImportStatus", OptionOf(Scalar()))

    /** Jira imports into the project.
      */
    def jiraImports[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[JiraImportConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[Project, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "jiraImports",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** Jobs of a project. This field can only be resolved for one project in any single request.
      */
    def jobs[A](
      statuses: Option[List[CiJobStatus]] = None,
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[CiJobConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[List[CiJobStatus]]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[String]],
      encoder3: ArgEncoder[Option[Int]],
      encoder4: ArgEncoder[Option[Int]]
    ): SelectionBuilder[Project, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "jobs",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("statuses", statuses, "[CiJobStatus!]")(encoder0),
          Argument("after", after, "String")(encoder1),
          Argument("before", before, "String")(encoder2),
          Argument("first", first, "Int")(encoder3),
          Argument("last", last, "Int")(encoder4)
        )
      )

    /** Indicates if CI/CD pipeline jobs are enabled for the current user.
      */
    def jobsEnabled: SelectionBuilder[Project, Option[Boolean]] =
      _root_.caliban.client.SelectionBuilder.Field("jobsEnabled", OptionOf(Scalar()))

    /** A label available on this project.
      */
    def label[A](
      title: String
    )(
      innerSelection: SelectionBuilder[Label, A]
    )(
      implicit encoder0: ArgEncoder[String]
    ): SelectionBuilder[Project, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field("label", OptionOf(Obj(innerSelection)), arguments = List(Argument("title", title, "String!")(encoder0)))

    /** Labels available on this project.
      */
    def labels[A](
      searchTerm: Option[String] = None,
      includeAncestorGroups: Option[Boolean] = None,
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[LabelConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[Boolean]],
      encoder2: ArgEncoder[Option[String]],
      encoder3: ArgEncoder[Option[String]],
      encoder4: ArgEncoder[Option[Int]],
      encoder5: ArgEncoder[Option[Int]]
    ): SelectionBuilder[Project, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "labels",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("searchTerm", searchTerm, "String")(encoder0),
          Argument("includeAncestorGroups", includeAncestorGroups, "Boolean")(encoder1),
          Argument("after", after, "String")(encoder2),
          Argument("before", before, "String")(encoder3),
          Argument("first", first, "Int")(encoder4),
          Argument("last", last, "Int")(encoder5)
        )
      )

    /** Timestamp of the project last activity.
      */
    def lastActivityAt: SelectionBuilder[Project, Option[Time]] =
      _root_.caliban.client.SelectionBuilder.Field("lastActivityAt", OptionOf(Scalar()))

    /** Indicates if the project has Large File Storage (LFS) enabled.
      */
    def lfsEnabled: SelectionBuilder[Project, Option[Boolean]] =
      _root_.caliban.client.SelectionBuilder.Field("lfsEnabled", OptionOf(Scalar()))

    /** A single merge request of the project.
      */
    def mergeRequest[A](
      iid: String
    )(
      innerSelection: SelectionBuilder[MergeRequest, A]
    )(
      implicit encoder0: ArgEncoder[String]
    ): SelectionBuilder[Project, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field("mergeRequest", OptionOf(Obj(innerSelection)), arguments = List(Argument("iid", iid, "String!")(encoder0)))

    /** Merge requests of the project.
      */
    def mergeRequests[A](
      iids: Option[List[String]] = None,
      sourceBranches: Option[List[String]] = None,
      targetBranches: Option[List[String]] = None,
      state: Option[MergeRequestState] = None,
      labels: Option[List[String]] = None,
      mergedAfter: Option[Time] = None,
      mergedBefore: Option[Time] = None,
      milestoneTitle: Option[String] = None,
      sort: Option[MergeRequestSort] = None,
      not: Option[MergeRequestsResolverNegatedParams] = None,
      assigneeUsername: Option[String] = None,
      authorUsername: Option[String] = None,
      reviewerUsername: Option[String] = None,
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[MergeRequestConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[List[String]]],
      encoder1: ArgEncoder[Option[List[String]]],
      encoder2: ArgEncoder[Option[List[String]]],
      encoder3: ArgEncoder[Option[MergeRequestState]],
      encoder4: ArgEncoder[Option[List[String]]],
      encoder5: ArgEncoder[Option[Time]],
      encoder6: ArgEncoder[Option[Time]],
      encoder7: ArgEncoder[Option[String]],
      encoder8: ArgEncoder[Option[MergeRequestSort]],
      encoder9: ArgEncoder[Option[MergeRequestsResolverNegatedParams]],
      encoder10: ArgEncoder[Option[String]],
      encoder11: ArgEncoder[Option[String]],
      encoder12: ArgEncoder[Option[String]],
      encoder13: ArgEncoder[Option[String]],
      encoder14: ArgEncoder[Option[String]],
      encoder15: ArgEncoder[Option[Int]],
      encoder16: ArgEncoder[Option[Int]]
    ): SelectionBuilder[Project, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "mergeRequests",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("iids", iids, "[String!]")(encoder0),
          Argument("sourceBranches", sourceBranches, "[String!]")(encoder1),
          Argument("targetBranches", targetBranches, "[String!]")(encoder2),
          Argument("state", state, "MergeRequestState")(encoder3),
          Argument("labels", labels, "[String!]")(encoder4),
          Argument("mergedAfter", mergedAfter, "Time")(encoder5),
          Argument("mergedBefore", mergedBefore, "Time")(encoder6),
          Argument("milestoneTitle", milestoneTitle, "String")(encoder7),
          Argument("sort", sort, "MergeRequestSort")(encoder8),
          Argument("not", not, "MergeRequestsResolverNegatedParams")(encoder9),
          Argument("assigneeUsername", assigneeUsername, "String")(encoder10),
          Argument("authorUsername", authorUsername, "String")(encoder11),
          Argument("reviewerUsername", reviewerUsername, "String")(encoder12),
          Argument("after", after, "String")(encoder13),
          Argument("before", before, "String")(encoder14),
          Argument("first", first, "Int")(encoder15),
          Argument("last", last, "Int")(encoder16)
        )
      )

    /** Indicates if Merge Requests are enabled for the current user
      */
    def mergeRequestsEnabled: SelectionBuilder[Project, Option[Boolean]] =
      _root_.caliban.client.SelectionBuilder.Field("mergeRequestsEnabled", OptionOf(Scalar()))

    /** Indicates if no merge commits should be created and all merges should instead be fast-forwarded, which means that merging is only
      * allowed if the branch could be fast-forwarded.
      */
    def mergeRequestsFfOnlyEnabled: SelectionBuilder[Project, Option[Boolean]] =
      _root_.caliban.client.SelectionBuilder.Field("mergeRequestsFfOnlyEnabled", OptionOf(Scalar()))

    /** Milestones of the project.
      */
    def milestones[A](
      timeframe: Option[Timeframe] = None,
      ids: Option[List[String]] = None,
      state: Option[MilestoneStateEnum] = None,
      title: Option[String] = None,
      searchTitle: Option[String] = None,
      containingDate: Option[Time] = None,
      sort: Option[MilestoneSort] = None,
      includeAncestors: Option[Boolean] = None,
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[MilestoneConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[Timeframe]],
      encoder1: ArgEncoder[Option[List[String]]],
      encoder2: ArgEncoder[Option[MilestoneStateEnum]],
      encoder3: ArgEncoder[Option[String]],
      encoder4: ArgEncoder[Option[String]],
      encoder5: ArgEncoder[Option[Time]],
      encoder6: ArgEncoder[Option[MilestoneSort]],
      encoder7: ArgEncoder[Option[Boolean]],
      encoder8: ArgEncoder[Option[String]],
      encoder9: ArgEncoder[Option[String]],
      encoder10: ArgEncoder[Option[Int]],
      encoder11: ArgEncoder[Option[Int]]
    ): SelectionBuilder[Project, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "milestones",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("timeframe", timeframe, "Timeframe")(encoder0),
          Argument("ids", ids, "[ID!]")(encoder1),
          Argument("state", state, "MilestoneStateEnum")(encoder2),
          Argument("title", title, "String")(encoder3),
          Argument("searchTitle", searchTitle, "String")(encoder4),
          Argument("containingDate", containingDate, "Time")(encoder5),
          Argument("sort", sort, "MilestoneSort")(encoder6),
          Argument("includeAncestors", includeAncestors, "Boolean")(encoder7),
          Argument("after", after, "String")(encoder8),
          Argument("before", before, "String")(encoder9),
          Argument("first", first, "Int")(encoder10),
          Argument("last", last, "Int")(encoder11)
        )
      )

    /** Name of the project (without namespace).
      */
    def name: SelectionBuilder[Project, String] = _root_.caliban.client.SelectionBuilder.Field("name", Scalar())

    /** Full name of the project with its namespace.
      */
    def nameWithNamespace: SelectionBuilder[Project, String] = _root_.caliban.client.SelectionBuilder.Field("nameWithNamespace", Scalar())

    /** Namespace of the project.
      */
    def namespace[A](innerSelection: SelectionBuilder[Namespace, A]): SelectionBuilder[Project, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("namespace", OptionOf(Obj(innerSelection)))

    /** Network Policies of the project
      */
    def networkPolicies[A](
      environmentId: Option[EnvironmentID] = None,
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[NetworkPolicyConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[EnvironmentID]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[String]],
      encoder3: ArgEncoder[Option[Int]],
      encoder4: ArgEncoder[Option[Int]]
    ): SelectionBuilder[Project, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "networkPolicies",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("environmentId", environmentId, "EnvironmentID")(encoder0),
          Argument("after", after, "String")(encoder1),
          Argument("before", before, "String")(encoder2),
          Argument("first", first, "Int")(encoder3),
          Argument("last", last, "Int")(encoder4)
        )
      )

    /** Indicates if merge requests of the project can only be merged when all the discussions are resolved.
      */
    def onlyAllowMergeIfAllDiscussionsAreResolved: SelectionBuilder[Project, Option[Boolean]] =
      _root_.caliban.client.SelectionBuilder.Field("onlyAllowMergeIfAllDiscussionsAreResolved", OptionOf(Scalar()))

    /** Indicates if merge requests of the project can only be merged with successful jobs.
      */
    def onlyAllowMergeIfPipelineSucceeds: SelectionBuilder[Project, Option[Boolean]] =
      _root_.caliban.client.SelectionBuilder.Field("onlyAllowMergeIfPipelineSucceeds", OptionOf(Scalar()))

    /** Number of open issues for the project.
      */
    def openIssuesCount: SelectionBuilder[Project, Option[Int]] =
      _root_.caliban.client.SelectionBuilder.Field("openIssuesCount", OptionOf(Scalar()))

    /** Packages of the project.
      */
    def packages[A](
      sort: Option[PackageSort] = None,
      packageName: Option[String] = None,
      packageType: Option[PackageTypeEnum] = None,
      status: Option[PackageStatus] = None,
      includeVersionless: Option[Boolean] = None,
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[PackageConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[PackageSort]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[PackageTypeEnum]],
      encoder3: ArgEncoder[Option[PackageStatus]],
      encoder4: ArgEncoder[Option[Boolean]],
      encoder5: ArgEncoder[Option[String]],
      encoder6: ArgEncoder[Option[String]],
      encoder7: ArgEncoder[Option[Int]],
      encoder8: ArgEncoder[Option[Int]]
    ): SelectionBuilder[Project, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "packages",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("sort", sort, "PackageSort")(encoder0),
          Argument("packageName", packageName, "String")(encoder1),
          Argument("packageType", packageType, "PackageTypeEnum")(encoder2),
          Argument("status", status, "PackageStatus")(encoder3),
          Argument("includeVersionless", includeVersionless, "Boolean")(encoder4),
          Argument("after", after, "String")(encoder5),
          Argument("before", before, "String")(encoder6),
          Argument("first", first, "Int")(encoder7),
          Argument("last", last, "Int")(encoder8)
        )
      )

    /** Path of the project.
      */
    def path: SelectionBuilder[Project, String] = _root_.caliban.client.SelectionBuilder.Field("path", Scalar())

    /** The project's path locks.
      */
    def pathLocks[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[PathLockConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[Project, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "pathLocks",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** Build pipeline of the project.
      */
    def pipeline[A](
      iid: Option[String] = None,
      sha: Option[String] = None
    )(
      innerSelection: SelectionBuilder[Pipeline, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]]
    ): SelectionBuilder[Project, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "pipeline",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("iid", iid, "ID")(encoder0), Argument("sha", sha, "String")(encoder1))
      )

    /** Pipeline analytics.
      */
    def pipelineAnalytics[A](innerSelection: SelectionBuilder[PipelineAnalytics, A]): SelectionBuilder[Project, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("pipelineAnalytics", OptionOf(Obj(innerSelection)))

    /** Build pipelines of the project.
      */
    def pipelines[A](
      status: Option[PipelineStatusEnum] = None,
      ref: Option[String] = None,
      sha: Option[String] = None,
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[PipelineConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[PipelineStatusEnum]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[String]],
      encoder3: ArgEncoder[Option[String]],
      encoder4: ArgEncoder[Option[String]],
      encoder5: ArgEncoder[Option[Int]],
      encoder6: ArgEncoder[Option[Int]]
    ): SelectionBuilder[Project, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "pipelines",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("status", status, "PipelineStatusEnum")(encoder0),
          Argument("ref", ref, "String")(encoder1),
          Argument("sha", sha, "String")(encoder2),
          Argument("after", after, "String")(encoder3),
          Argument("before", before, "String")(encoder4),
          Argument("first", first, "Int")(encoder5),
          Argument("last", last, "Int")(encoder6)
        )
      )

    /** Indicates if a link to create or view a merge request should display after a push to Git repositories of the project from the
      * command line.
      */
    def printingMergeRequestLinkEnabled: SelectionBuilder[Project, Option[Boolean]] =
      _root_.caliban.client.SelectionBuilder.Field("printingMergeRequestLinkEnabled", OptionOf(Scalar()))

    /** Members of the project.
      */
    def projectMembers[A](
      search: Option[String] = None,
      relations: Option[List[ProjectMemberRelation]] = None,
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[MemberInterfaceConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[List[ProjectMemberRelation]]],
      encoder2: ArgEncoder[Option[String]],
      encoder3: ArgEncoder[Option[String]],
      encoder4: ArgEncoder[Option[Int]],
      encoder5: ArgEncoder[Option[Int]]
    ): SelectionBuilder[Project, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "projectMembers",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("search", search, "String")(encoder0),
          Argument("relations", relations, "[ProjectMemberRelation!]")(encoder1),
          Argument("after", after, "String")(encoder2),
          Argument("before", before, "String")(encoder3),
          Argument("first", first, "Int")(encoder4),
          Argument("last", last, "Int")(encoder5)
        )
      )

    /** Indicates if there is public access to pipelines and job details of the project, including output logs and artifacts.
      */
    def publicJobs: SelectionBuilder[Project, Option[Boolean]] =
      _root_.caliban.client.SelectionBuilder.Field("publicJobs", OptionOf(Scalar()))

    /** The project's push rules settings.
      */
    def pushRules[A](innerSelection: SelectionBuilder[PushRules, A]): SelectionBuilder[Project, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("pushRules", OptionOf(Obj(innerSelection)))

    /** A single release of the project.
      */
    def release[A](
      tagName: String
    )(
      innerSelection: SelectionBuilder[Release, A]
    )(
      implicit encoder0: ArgEncoder[String]
    ): SelectionBuilder[Project, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field("release", OptionOf(Obj(innerSelection)), arguments = List(Argument("tagName", tagName, "String!")(encoder0)))

    /** Releases of the project.
      */
    def releases[A](
      sort: Option[ReleaseSort] = None,
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[ReleaseConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[ReleaseSort]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[String]],
      encoder3: ArgEncoder[Option[Int]],
      encoder4: ArgEncoder[Option[Int]]
    ): SelectionBuilder[Project, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "releases",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("sort", sort, "ReleaseSort")(encoder0),
          Argument("after", after, "String")(encoder1),
          Argument("before", before, "String")(encoder2),
          Argument("first", first, "Int")(encoder3),
          Argument("last", last, "Int")(encoder4)
        )
      )

    /** Indicates if `Delete source branch` option should be enabled by default for all new merge requests of the project.
      */
    def removeSourceBranchAfterMerge: SelectionBuilder[Project, Option[Boolean]] =
      _root_.caliban.client.SelectionBuilder.Field("removeSourceBranchAfterMerge", OptionOf(Scalar()))

    /** Git repository of the project.
      */
    def repository[A](innerSelection: SelectionBuilder[Repository, A]): SelectionBuilder[Project, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("repository", OptionOf(Obj(innerSelection)))

    /** Size of repository that exceeds the limit in bytes.
      */
    def repositorySizeExcess: SelectionBuilder[Project, Option[Double]] =
      _root_.caliban.client.SelectionBuilder.Field("repositorySizeExcess", OptionOf(Scalar()))

    /** Indicates if users can request member access to the project.
      */
    def requestAccessEnabled: SelectionBuilder[Project, Option[Boolean]] =
      _root_.caliban.client.SelectionBuilder.Field("requestAccessEnabled", OptionOf(Scalar()))

    /** Find a single requirement.
      */
    def requirement[A](
      sort: Option[Sort] = None,
      state: Option[RequirementState] = None,
      search: Option[String] = None,
      authorUsername: Option[List[String]] = None,
      iid: Option[String] = None,
      iids: Option[List[String]] = None,
      lastTestReportState: Option[RequirementStatusFilter] = None
    )(
      innerSelection: SelectionBuilder[Requirement, A]
    )(
      implicit encoder0: ArgEncoder[Option[Sort]],
      encoder1: ArgEncoder[Option[RequirementState]],
      encoder2: ArgEncoder[Option[String]],
      encoder3: ArgEncoder[Option[List[String]]],
      encoder4: ArgEncoder[Option[String]],
      encoder5: ArgEncoder[Option[List[String]]],
      encoder6: ArgEncoder[Option[RequirementStatusFilter]]
    ): SelectionBuilder[Project, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "requirement",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("sort", sort, "Sort")(encoder0),
          Argument("state", state, "RequirementState")(encoder1),
          Argument("search", search, "String")(encoder2),
          Argument("authorUsername", authorUsername, "[String!]")(encoder3),
          Argument("iid", iid, "ID")(encoder4),
          Argument("iids", iids, "[ID!]")(encoder5),
          Argument("lastTestReportState", lastTestReportState, "RequirementStatusFilter")(encoder6)
        )
      )

    /** Number of requirements for the project by their state.
      */
    def requirementStatesCount[A](innerSelection: SelectionBuilder[RequirementStatesCount, A]): SelectionBuilder[Project, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("requirementStatesCount", OptionOf(Obj(innerSelection)))

    /** Find requirements.
      */
    def requirements[A](
      sort: Option[Sort] = None,
      state: Option[RequirementState] = None,
      search: Option[String] = None,
      authorUsername: Option[List[String]] = None,
      iid: Option[String] = None,
      iids: Option[List[String]] = None,
      lastTestReportState: Option[RequirementStatusFilter] = None,
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[RequirementConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[Sort]],
      encoder1: ArgEncoder[Option[RequirementState]],
      encoder2: ArgEncoder[Option[String]],
      encoder3: ArgEncoder[Option[List[String]]],
      encoder4: ArgEncoder[Option[String]],
      encoder5: ArgEncoder[Option[List[String]]],
      encoder6: ArgEncoder[Option[RequirementStatusFilter]],
      encoder7: ArgEncoder[Option[String]],
      encoder8: ArgEncoder[Option[String]],
      encoder9: ArgEncoder[Option[Int]],
      encoder10: ArgEncoder[Option[Int]]
    ): SelectionBuilder[Project, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "requirements",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("sort", sort, "Sort")(encoder0),
          Argument("state", state, "RequirementState")(encoder1),
          Argument("search", search, "String")(encoder2),
          Argument("authorUsername", authorUsername, "[String!]")(encoder3),
          Argument("iid", iid, "ID")(encoder4),
          Argument("iids", iids, "[ID!]")(encoder5),
          Argument("lastTestReportState", lastTestReportState, "RequirementStatusFilter")(encoder6),
          Argument("after", after, "String")(encoder7),
          Argument("before", before, "String")(encoder8),
          Argument("first", first, "Int")(encoder9),
          Argument("last", last, "Int")(encoder10)
        )
      )

    /** SAST CI configuration for the project.
      */
    def sastCiConfiguration[A](innerSelection: SelectionBuilder[SastCiConfiguration, A]): SelectionBuilder[Project, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("sastCiConfiguration", OptionOf(Obj(innerSelection)))

    /** Scan Execution Policies of the project
      */
    def scanExecutionPolicies[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[ScanExecutionPolicyConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[Project, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "scanExecutionPolicies",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** Path to project's security dashboard.
      */
    def securityDashboardPath: SelectionBuilder[Project, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("securityDashboardPath", OptionOf(Scalar()))

    /** Information about security analyzers used in the project.
      */
    def securityScanners[A](innerSelection: SelectionBuilder[SecurityScanners, A]): SelectionBuilder[Project, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("securityScanners", OptionOf(Obj(innerSelection)))

    /** Detailed version of a Sentry error on the project.
      */
    def sentryDetailedError[A](
      id: GitlabErrorTrackingDetailedErrorID
    )(
      innerSelection: SelectionBuilder[SentryDetailedError, A]
    )(
      implicit encoder0: ArgEncoder[GitlabErrorTrackingDetailedErrorID]
    ): SelectionBuilder[Project, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "sentryDetailedError",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("id", id, "GitlabErrorTrackingDetailedErrorID!")(encoder0))
      )

    /** Paginated collection of Sentry errors on the project.
      */
    def sentryErrors[A](innerSelection: SelectionBuilder[SentryErrorCollection, A]): SelectionBuilder[Project, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("sentryErrors", OptionOf(Obj(innerSelection)))

    /** E-mail address of the service desk.
      */
    def serviceDeskAddress: SelectionBuilder[Project, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("serviceDeskAddress", OptionOf(Scalar()))

    /** Indicates if the project has service desk enabled.
      */
    def serviceDeskEnabled: SelectionBuilder[Project, Option[Boolean]] =
      _root_.caliban.client.SelectionBuilder.Field("serviceDeskEnabled", OptionOf(Scalar()))

    /** Project services.
      */
    def services[A](
      active: Option[Boolean] = None,
      `type`: Option[ServiceType] = None,
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[ServiceConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[Boolean]],
      encoder1: ArgEncoder[Option[ServiceType]],
      encoder2: ArgEncoder[Option[String]],
      encoder3: ArgEncoder[Option[String]],
      encoder4: ArgEncoder[Option[Int]],
      encoder5: ArgEncoder[Option[Int]]
    ): SelectionBuilder[Project, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "services",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("active", active, "Boolean")(encoder0),
          Argument("type", `type`, "ServiceType")(encoder1),
          Argument("after", after, "String")(encoder2),
          Argument("before", before, "String")(encoder3),
          Argument("first", first, "Int")(encoder4),
          Argument("last", last, "Int")(encoder5)
        )
      )

    /** Indicates if shared runners are enabled for the project.
      */
    def sharedRunnersEnabled: SelectionBuilder[Project, Option[Boolean]] =
      _root_.caliban.client.SelectionBuilder.Field("sharedRunnersEnabled", OptionOf(Scalar()))

    /** Snippets of the project.
      */
    def snippets[A](
      ids: Option[List[SnippetID]] = None,
      visibility: Option[VisibilityScopesEnum] = None,
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[SnippetConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[List[SnippetID]]],
      encoder1: ArgEncoder[Option[VisibilityScopesEnum]],
      encoder2: ArgEncoder[Option[String]],
      encoder3: ArgEncoder[Option[String]],
      encoder4: ArgEncoder[Option[Int]],
      encoder5: ArgEncoder[Option[Int]]
    ): SelectionBuilder[Project, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "snippets",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("ids", ids, "[SnippetID!]")(encoder0),
          Argument("visibility", visibility, "VisibilityScopesEnum")(encoder1),
          Argument("after", after, "String")(encoder2),
          Argument("before", before, "String")(encoder3),
          Argument("first", first, "Int")(encoder4),
          Argument("last", last, "Int")(encoder5)
        )
      )

    /** Indicates if Snippets are enabled for the current user
      */
    def snippetsEnabled: SelectionBuilder[Project, Option[Boolean]] =
      _root_.caliban.client.SelectionBuilder.Field("snippetsEnabled", OptionOf(Scalar()))

    /** Indicates if `squashReadOnly` is enabled.
      */
    def squashReadOnly: SelectionBuilder[Project, Boolean] = _root_.caliban.client.SelectionBuilder.Field("squashReadOnly", Scalar())

    /** URL to connect to the project via SSH.
      */
    def sshUrlToRepo: SelectionBuilder[Project, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("sshUrlToRepo", OptionOf(Scalar()))

    /** Number of times the project has been starred.
      */
    def starCount: SelectionBuilder[Project, Int] = _root_.caliban.client.SelectionBuilder.Field("starCount", Scalar())

    /** Statistics of the project.
      */
    def statistics[A](innerSelection: SelectionBuilder[ProjectStatistics, A]): SelectionBuilder[Project, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("statistics", OptionOf(Obj(innerSelection)))

    /** The commit message used to apply merge request suggestions.
      */
    def suggestionCommitMessage: SelectionBuilder[Project, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("suggestionCommitMessage", OptionOf(Scalar()))

    /** List of project topics (not Git tags). Deprecated in 13.12: Use `topics`.
      */
    @deprecated("Use `topics`. Deprecated in 13.12.", "")
    def tagList: SelectionBuilder[Project, Option[String]] = _root_.caliban.client.SelectionBuilder.Field("tagList", OptionOf(Scalar()))

    /** Find a single Terraform state by name.
      */
    def terraformState[A](
      name: String
    )(
      innerSelection: SelectionBuilder[TerraformState, A]
    )(
      implicit encoder0: ArgEncoder[String]
    ): SelectionBuilder[Project, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field("terraformState", OptionOf(Obj(innerSelection)), arguments = List(Argument("name", name, "String!")(encoder0)))

    /** Terraform states associated with the project.
      */
    def terraformStates[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[TerraformStateConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[Project, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "terraformStates",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** List of project topics.
      */
    def topics: SelectionBuilder[Project, Option[List[String]]] =
      _root_.caliban.client.SelectionBuilder.Field("topics", OptionOf(ListOf(Scalar())))

    /** Permissions for the current user on the resource
      */
    def userPermissions[A](innerSelection: SelectionBuilder[ProjectPermissions, A]): SelectionBuilder[Project, A] =
      _root_.caliban.client.SelectionBuilder.Field("userPermissions", Obj(innerSelection))

    /** Visibility of the project.
      */
    def visibility: SelectionBuilder[Project, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("visibility", OptionOf(Scalar()))

    /** Vulnerabilities reported on the project.
      */
    def vulnerabilities[A](
      projectId: Option[List[String]] = None,
      reportType: Option[List[VulnerabilityReportType]] = None,
      severity: Option[List[VulnerabilitySeverity]] = None,
      state: Option[List[VulnerabilityState]] = None,
      scanner: Option[List[String]] = None,
      scannerId: Option[List[VulnerabilitiesScannerID]] = None,
      sort: Option[VulnerabilitySort] = None,
      hasResolution: Option[Boolean] = None,
      hasIssues: Option[Boolean] = None,
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[VulnerabilityConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[List[String]]],
      encoder1: ArgEncoder[Option[List[VulnerabilityReportType]]],
      encoder2: ArgEncoder[Option[List[VulnerabilitySeverity]]],
      encoder3: ArgEncoder[Option[List[VulnerabilityState]]],
      encoder4: ArgEncoder[Option[List[String]]],
      encoder5: ArgEncoder[Option[List[VulnerabilitiesScannerID]]],
      encoder6: ArgEncoder[Option[VulnerabilitySort]],
      encoder7: ArgEncoder[Option[Boolean]],
      encoder8: ArgEncoder[Option[Boolean]],
      encoder9: ArgEncoder[Option[String]],
      encoder10: ArgEncoder[Option[String]],
      encoder11: ArgEncoder[Option[Int]],
      encoder12: ArgEncoder[Option[Int]]
    ): SelectionBuilder[Project, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "vulnerabilities",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("projectId", projectId, "[ID!]")(encoder0),
          Argument("reportType", reportType, "[VulnerabilityReportType!]")(encoder1),
          Argument("severity", severity, "[VulnerabilitySeverity!]")(encoder2),
          Argument("state", state, "[VulnerabilityState!]")(encoder3),
          Argument("scanner", scanner, "[String!]")(encoder4),
          Argument("scannerId", scannerId, "[VulnerabilitiesScannerID!]")(encoder5),
          Argument("sort", sort, "VulnerabilitySort")(encoder6),
          Argument("hasResolution", hasResolution, "Boolean")(encoder7),
          Argument("hasIssues", hasIssues, "Boolean")(encoder8),
          Argument("after", after, "String")(encoder9),
          Argument("before", before, "String")(encoder10),
          Argument("first", first, "Int")(encoder11),
          Argument("last", last, "Int")(encoder12)
        )
      )

    /** Number of vulnerabilities per day for the project.
      */
    def vulnerabilitiesCountByDay[A](
      startDate: ISO8601Date,
      endDate: ISO8601Date,
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[VulnerabilitiesCountByDayConnection, A]
    )(
      implicit encoder0: ArgEncoder[ISO8601Date],
      encoder1: ArgEncoder[ISO8601Date],
      encoder2: ArgEncoder[Option[String]],
      encoder3: ArgEncoder[Option[String]],
      encoder4: ArgEncoder[Option[Int]],
      encoder5: ArgEncoder[Option[Int]]
    ): SelectionBuilder[Project, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "vulnerabilitiesCountByDay",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("startDate", startDate, "ISO8601Date!")(encoder0),
          Argument("endDate", endDate, "ISO8601Date!")(encoder1),
          Argument("after", after, "String")(encoder2),
          Argument("before", before, "String")(encoder3),
          Argument("first", first, "Int")(encoder4),
          Argument("last", last, "Int")(encoder5)
        )
      )

    /** Vulnerability scanners reported on the project vulnerabilities.
      */
    def vulnerabilityScanners[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[VulnerabilityScannerConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[Project, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "vulnerabilityScanners",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** Counts for each vulnerability severity in the project.
      */
    def vulnerabilitySeveritiesCount[A](
      projectId: Option[List[String]] = None,
      reportType: Option[List[VulnerabilityReportType]] = None,
      severity: Option[List[VulnerabilitySeverity]] = None,
      state: Option[List[VulnerabilityState]] = None,
      scanner: Option[List[String]] = None,
      scannerId: Option[List[VulnerabilitiesScannerID]] = None,
      hasIssues: Option[Boolean] = None,
      hasResolution: Option[Boolean] = None
    )(
      innerSelection: SelectionBuilder[VulnerabilitySeveritiesCount, A]
    )(
      implicit encoder0: ArgEncoder[Option[List[String]]],
      encoder1: ArgEncoder[Option[List[VulnerabilityReportType]]],
      encoder2: ArgEncoder[Option[List[VulnerabilitySeverity]]],
      encoder3: ArgEncoder[Option[List[VulnerabilityState]]],
      encoder4: ArgEncoder[Option[List[String]]],
      encoder5: ArgEncoder[Option[List[VulnerabilitiesScannerID]]],
      encoder6: ArgEncoder[Option[Boolean]],
      encoder7: ArgEncoder[Option[Boolean]]
    ): SelectionBuilder[Project, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "vulnerabilitySeveritiesCount",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("projectId", projectId, "[ID!]")(encoder0),
          Argument("reportType", reportType, "[VulnerabilityReportType!]")(encoder1),
          Argument("severity", severity, "[VulnerabilitySeverity!]")(encoder2),
          Argument("state", state, "[VulnerabilityState!]")(encoder3),
          Argument("scanner", scanner, "[String!]")(encoder4),
          Argument("scannerId", scannerId, "[VulnerabilitiesScannerID!]")(encoder5),
          Argument("hasIssues", hasIssues, "Boolean")(encoder6),
          Argument("hasResolution", hasResolution, "Boolean")(encoder7)
        )
      )

    /** Web URL of the project.
      */
    def webUrl: SelectionBuilder[Project, Option[String]] = _root_.caliban.client.SelectionBuilder.Field("webUrl", OptionOf(Scalar()))

    /** Indicates if Wikis are enabled for the current user
      */
    def wikiEnabled: SelectionBuilder[Project, Option[Boolean]] =
      _root_.caliban.client.SelectionBuilder.Field("wikiEnabled", OptionOf(Scalar()))
  }

  type ProjectCiCdSetting

  object ProjectCiCdSetting {

    /** Indicates CI job tokens generated in this project have restricted access to resources.
      */
    def jobTokenScopeEnabled: SelectionBuilder[ProjectCiCdSetting, Option[Boolean]] =
      _root_.caliban.client.SelectionBuilder.Field("jobTokenScopeEnabled", OptionOf(Scalar()))

    /** Whether to keep the latest builds artifacts.
      */
    def keepLatestArtifact: SelectionBuilder[ProjectCiCdSetting, Option[Boolean]] =
      _root_.caliban.client.SelectionBuilder.Field("keepLatestArtifact", OptionOf(Scalar()))

    /** Whether merge pipelines are enabled.
      */
    def mergePipelinesEnabled: SelectionBuilder[ProjectCiCdSetting, Option[Boolean]] =
      _root_.caliban.client.SelectionBuilder.Field("mergePipelinesEnabled", OptionOf(Scalar()))

    /** Whether merge trains are enabled.
      */
    def mergeTrainsEnabled: SelectionBuilder[ProjectCiCdSetting, Option[Boolean]] =
      _root_.caliban.client.SelectionBuilder.Field("mergeTrainsEnabled", OptionOf(Scalar()))

    /** Project the CI/CD settings belong to.
      */
    def project[A](innerSelection: SelectionBuilder[Project, A]): SelectionBuilder[ProjectCiCdSetting, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("project", OptionOf(Obj(innerSelection)))
  }

  type ProjectConnection

  object ProjectConnection {

    /** A list of edges.
      */
    def edges[A](innerSelection: SelectionBuilder[ProjectEdge, A]): SelectionBuilder[ProjectConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](innerSelection: SelectionBuilder[Project, A]): SelectionBuilder[ProjectConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[ProjectConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  }

  type ProjectEdge

  object ProjectEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[ProjectEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](innerSelection: SelectionBuilder[Project, A]): SelectionBuilder[ProjectEdge, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
  }

  type ProjectMember

  object ProjectMember {

    /** GitLab::Access level.
      */
    def accessLevel[A](innerSelection: SelectionBuilder[AccessLevel, A]): SelectionBuilder[ProjectMember, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("accessLevel", OptionOf(Obj(innerSelection)))

    /** Date and time the membership was created.
      */
    def createdAt: SelectionBuilder[ProjectMember, Option[Time]] =
      _root_.caliban.client.SelectionBuilder.Field("createdAt", OptionOf(Scalar()))

    /** User that authorized membership.
      */
    def createdBy[A](innerSelection: SelectionBuilder[UserCore, A]): SelectionBuilder[ProjectMember, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("createdBy", OptionOf(Obj(innerSelection)))

    /** Date and time the membership expires.
      */
    def expiresAt: SelectionBuilder[ProjectMember, Option[Time]] =
      _root_.caliban.client.SelectionBuilder.Field("expiresAt", OptionOf(Scalar()))

    /** ID of the member.
      */
    def id: SelectionBuilder[ProjectMember, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())

    /** Project that User is a member of.
      */
    def project[A](innerSelection: SelectionBuilder[Project, A]): SelectionBuilder[ProjectMember, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("project", OptionOf(Obj(innerSelection)))

    /** Date and time the membership was last updated.
      */
    def updatedAt: SelectionBuilder[ProjectMember, Option[Time]] =
      _root_.caliban.client.SelectionBuilder.Field("updatedAt", OptionOf(Scalar()))

    /** User that is associated with the member object.
      */
    def user[A](innerSelection: SelectionBuilder[UserCore, A]): SelectionBuilder[ProjectMember, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("user", OptionOf(Obj(innerSelection)))

    /** Permissions for the current user on the resource
      */
    def userPermissions[A](innerSelection: SelectionBuilder[ProjectPermissions, A]): SelectionBuilder[ProjectMember, A] =
      _root_.caliban.client.SelectionBuilder.Field("userPermissions", Obj(innerSelection))
  }

  type ProjectMemberConnection

  object ProjectMemberConnection {

    /** A list of edges.
      */
    def edges[A](
      innerSelection: SelectionBuilder[ProjectMemberEdge, A]
    ): SelectionBuilder[ProjectMemberConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](innerSelection: SelectionBuilder[ProjectMember, A]): SelectionBuilder[ProjectMemberConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[ProjectMemberConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  }

  type ProjectMemberEdge

  object ProjectMemberEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[ProjectMemberEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](innerSelection: SelectionBuilder[ProjectMember, A]): SelectionBuilder[ProjectMemberEdge, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
  }

  type ProjectPermissions

  object ProjectPermissions {

    /** Indicates the user can perform `admin_operations` on this resource
      */
    def adminOperations: SelectionBuilder[ProjectPermissions, Boolean] =
      _root_.caliban.client.SelectionBuilder.Field("adminOperations", Scalar())

    /** Indicates the user can perform `admin_path_locks` on this resource
      */
    def adminPathLocks: SelectionBuilder[ProjectPermissions, Boolean] =
      _root_.caliban.client.SelectionBuilder.Field("adminPathLocks", Scalar())

    /** Indicates the user can perform `admin_project` on this resource
      */
    def adminProject: SelectionBuilder[ProjectPermissions, Boolean] = _root_.caliban.client.SelectionBuilder.Field("adminProject", Scalar())

    /** Indicates the user can perform `admin_remote_mirror` on this resource
      */
    def adminRemoteMirror: SelectionBuilder[ProjectPermissions, Boolean] =
      _root_.caliban.client.SelectionBuilder.Field("adminRemoteMirror", Scalar())

    /** Indicates the user can perform `admin_wiki` on this resource
      */
    def adminWiki: SelectionBuilder[ProjectPermissions, Boolean] = _root_.caliban.client.SelectionBuilder.Field("adminWiki", Scalar())

    /** Indicates the user can perform `archive_project` on this resource
      */
    def archiveProject: SelectionBuilder[ProjectPermissions, Boolean] =
      _root_.caliban.client.SelectionBuilder.Field("archiveProject", Scalar())

    /** Indicates the user can perform `change_namespace` on this resource
      */
    def changeNamespace: SelectionBuilder[ProjectPermissions, Boolean] =
      _root_.caliban.client.SelectionBuilder.Field("changeNamespace", Scalar())

    /** Indicates the user can perform `change_visibility_level` on this resource
      */
    def changeVisibilityLevel: SelectionBuilder[ProjectPermissions, Boolean] =
      _root_.caliban.client.SelectionBuilder.Field("changeVisibilityLevel", Scalar())

    /** Indicates the user can perform `create_deployment` on this resource
      */
    def createDeployment: SelectionBuilder[ProjectPermissions, Boolean] =
      _root_.caliban.client.SelectionBuilder.Field("createDeployment", Scalar())

    /** Indicates the user can perform `create_design` on this resource
      */
    def createDesign: SelectionBuilder[ProjectPermissions, Boolean] = _root_.caliban.client.SelectionBuilder.Field("createDesign", Scalar())

    /** Indicates the user can perform `create_issue` on this resource
      */
    def createIssue: SelectionBuilder[ProjectPermissions, Boolean] = _root_.caliban.client.SelectionBuilder.Field("createIssue", Scalar())

    /** Indicates the user can perform `create_label` on this resource
      */
    def createLabel: SelectionBuilder[ProjectPermissions, Boolean] = _root_.caliban.client.SelectionBuilder.Field("createLabel", Scalar())

    /** Indicates the user can perform `create_merge_request_from` on this resource
      */
    def createMergeRequestFrom: SelectionBuilder[ProjectPermissions, Boolean] =
      _root_.caliban.client.SelectionBuilder.Field("createMergeRequestFrom", Scalar())

    /** Indicates the user can perform `create_merge_request_in` on this resource
      */
    def createMergeRequestIn: SelectionBuilder[ProjectPermissions, Boolean] =
      _root_.caliban.client.SelectionBuilder.Field("createMergeRequestIn", Scalar())

    /** Indicates the user can perform `create_pages` on this resource
      */
    def createPages: SelectionBuilder[ProjectPermissions, Boolean] = _root_.caliban.client.SelectionBuilder.Field("createPages", Scalar())

    /** Indicates the user can perform `create_pipeline` on this resource
      */
    def createPipeline: SelectionBuilder[ProjectPermissions, Boolean] =
      _root_.caliban.client.SelectionBuilder.Field("createPipeline", Scalar())

    /** Indicates the user can perform `create_pipeline_schedule` on this resource
      */
    def createPipelineSchedule: SelectionBuilder[ProjectPermissions, Boolean] =
      _root_.caliban.client.SelectionBuilder.Field("createPipelineSchedule", Scalar())

    /** Indicates the user can perform `create_snippet` on this resource
      */
    def createSnippet: SelectionBuilder[ProjectPermissions, Boolean] =
      _root_.caliban.client.SelectionBuilder.Field("createSnippet", Scalar())

    /** Indicates the user can perform `create_wiki` on this resource
      */
    def createWiki: SelectionBuilder[ProjectPermissions, Boolean] = _root_.caliban.client.SelectionBuilder.Field("createWiki", Scalar())

    /** Indicates the user can perform `destroy_design` on this resource
      */
    def destroyDesign: SelectionBuilder[ProjectPermissions, Boolean] =
      _root_.caliban.client.SelectionBuilder.Field("destroyDesign", Scalar())

    /** Indicates the user can perform `destroy_pages` on this resource
      */
    def destroyPages: SelectionBuilder[ProjectPermissions, Boolean] = _root_.caliban.client.SelectionBuilder.Field("destroyPages", Scalar())

    /** Indicates the user can perform `destroy_wiki` on this resource
      */
    def destroyWiki: SelectionBuilder[ProjectPermissions, Boolean] = _root_.caliban.client.SelectionBuilder.Field("destroyWiki", Scalar())

    /** Indicates the user can perform `download_code` on this resource
      */
    def downloadCode: SelectionBuilder[ProjectPermissions, Boolean] = _root_.caliban.client.SelectionBuilder.Field("downloadCode", Scalar())

    /** Indicates the user can perform `download_wiki_code` on this resource
      */
    def downloadWikiCode: SelectionBuilder[ProjectPermissions, Boolean] =
      _root_.caliban.client.SelectionBuilder.Field("downloadWikiCode", Scalar())

    /** Indicates the user can perform `fork_project` on this resource
      */
    def forkProject: SelectionBuilder[ProjectPermissions, Boolean] = _root_.caliban.client.SelectionBuilder.Field("forkProject", Scalar())

    /** Indicates the user can perform `push_code` on this resource
      */
    def pushCode: SelectionBuilder[ProjectPermissions, Boolean] = _root_.caliban.client.SelectionBuilder.Field("pushCode", Scalar())

    /** Indicates the user can perform `push_to_delete_protected_branch` on this resource
      */
    def pushToDeleteProtectedBranch: SelectionBuilder[ProjectPermissions, Boolean] =
      _root_.caliban.client.SelectionBuilder.Field("pushToDeleteProtectedBranch", Scalar())

    /** Indicates the user can perform `read_commit_status` on this resource
      */
    def readCommitStatus: SelectionBuilder[ProjectPermissions, Boolean] =
      _root_.caliban.client.SelectionBuilder.Field("readCommitStatus", Scalar())

    /** Indicates the user can perform `read_cycle_analytics` on this resource
      */
    def readCycleAnalytics: SelectionBuilder[ProjectPermissions, Boolean] =
      _root_.caliban.client.SelectionBuilder.Field("readCycleAnalytics", Scalar())

    /** Indicates the user can perform `read_design` on this resource
      */
    def readDesign: SelectionBuilder[ProjectPermissions, Boolean] = _root_.caliban.client.SelectionBuilder.Field("readDesign", Scalar())

    /** Indicates the user can perform `read_merge_request` on this resource
      */
    def readMergeRequest: SelectionBuilder[ProjectPermissions, Boolean] =
      _root_.caliban.client.SelectionBuilder.Field("readMergeRequest", Scalar())

    /** Indicates the user can perform `read_pages_content` on this resource
      */
    def readPagesContent: SelectionBuilder[ProjectPermissions, Boolean] =
      _root_.caliban.client.SelectionBuilder.Field("readPagesContent", Scalar())

    /** Indicates the user can perform `read_project` on this resource
      */
    def readProject: SelectionBuilder[ProjectPermissions, Boolean] = _root_.caliban.client.SelectionBuilder.Field("readProject", Scalar())

    /** Indicates the user can perform `read_project_member` on this resource
      */
    def readProjectMember: SelectionBuilder[ProjectPermissions, Boolean] =
      _root_.caliban.client.SelectionBuilder.Field("readProjectMember", Scalar())

    /** Indicates the user can perform `read_wiki` on this resource
      */
    def readWiki: SelectionBuilder[ProjectPermissions, Boolean] = _root_.caliban.client.SelectionBuilder.Field("readWiki", Scalar())

    /** Indicates the user can perform `remove_fork_project` on this resource
      */
    def removeForkProject: SelectionBuilder[ProjectPermissions, Boolean] =
      _root_.caliban.client.SelectionBuilder.Field("removeForkProject", Scalar())

    /** Indicates the user can perform `remove_pages` on this resource
      */
    def removePages: SelectionBuilder[ProjectPermissions, Boolean] = _root_.caliban.client.SelectionBuilder.Field("removePages", Scalar())

    /** Indicates the user can perform `remove_project` on this resource
      */
    def removeProject: SelectionBuilder[ProjectPermissions, Boolean] =
      _root_.caliban.client.SelectionBuilder.Field("removeProject", Scalar())

    /** Indicates the user can perform `rename_project` on this resource
      */
    def renameProject: SelectionBuilder[ProjectPermissions, Boolean] =
      _root_.caliban.client.SelectionBuilder.Field("renameProject", Scalar())

    /** Indicates the user can perform `request_access` on this resource
      */
    def requestAccess: SelectionBuilder[ProjectPermissions, Boolean] =
      _root_.caliban.client.SelectionBuilder.Field("requestAccess", Scalar())

    /** Indicates the user can perform `update_pages` on this resource
      */
    def updatePages: SelectionBuilder[ProjectPermissions, Boolean] = _root_.caliban.client.SelectionBuilder.Field("updatePages", Scalar())

    /** Indicates the user can perform `update_wiki` on this resource
      */
    def updateWiki: SelectionBuilder[ProjectPermissions, Boolean] = _root_.caliban.client.SelectionBuilder.Field("updateWiki", Scalar())

    /** Indicates the user can perform `upload_file` on this resource
      */
    def uploadFile: SelectionBuilder[ProjectPermissions, Boolean] = _root_.caliban.client.SelectionBuilder.Field("uploadFile", Scalar())
  }

  type ProjectStatistics

  object ProjectStatistics {

    /** Build artifacts size of the project in bytes.
      */
    def buildArtifactsSize: SelectionBuilder[ProjectStatistics, Double] =
      _root_.caliban.client.SelectionBuilder.Field("buildArtifactsSize", Scalar())

    /** Commit count of the project.
      */
    def commitCount: SelectionBuilder[ProjectStatistics, Double] = _root_.caliban.client.SelectionBuilder.Field("commitCount", Scalar())

    /** Large File Storage (LFS) object size of the project in bytes.
      */
    def lfsObjectsSize: SelectionBuilder[ProjectStatistics, Double] =
      _root_.caliban.client.SelectionBuilder.Field("lfsObjectsSize", Scalar())

    /** Packages size of the project in bytes.
      */
    def packagesSize: SelectionBuilder[ProjectStatistics, Double] = _root_.caliban.client.SelectionBuilder.Field("packagesSize", Scalar())

    /** Repository size of the project in bytes.
      */
    def repositorySize: SelectionBuilder[ProjectStatistics, Double] =
      _root_.caliban.client.SelectionBuilder.Field("repositorySize", Scalar())

    /** Snippets size of the project in bytes.
      */
    def snippetsSize: SelectionBuilder[ProjectStatistics, Option[Double]] =
      _root_.caliban.client.SelectionBuilder.Field("snippetsSize", OptionOf(Scalar()))

    /** Storage size of the project in bytes.
      */
    def storageSize: SelectionBuilder[ProjectStatistics, Double] = _root_.caliban.client.SelectionBuilder.Field("storageSize", Scalar())

    /** Uploads size of the project in bytes.
      */
    def uploadsSize: SelectionBuilder[ProjectStatistics, Option[Double]] =
      _root_.caliban.client.SelectionBuilder.Field("uploadsSize", OptionOf(Scalar()))

    /** Wiki size of the project in bytes.
      */
    def wikiSize: SelectionBuilder[ProjectStatistics, Option[Double]] =
      _root_.caliban.client.SelectionBuilder.Field("wikiSize", OptionOf(Scalar()))
  }

  type PrometheusAlert

  object PrometheusAlert {

    /** The human-readable text of the alert condition.
      */
    def humanizedText: SelectionBuilder[PrometheusAlert, String] = _root_.caliban.client.SelectionBuilder.Field("humanizedText", Scalar())

    /** ID of the alert condition.
      */
    def id: SelectionBuilder[PrometheusAlert, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  }

  type PrometheusIntegrationCreatePayload

  object PrometheusIntegrationCreatePayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[PrometheusIntegrationCreatePayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[PrometheusIntegrationCreatePayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** The newly created integration.
      */
    def integration[A](
      innerSelection: SelectionBuilder[AlertManagementPrometheusIntegration, A]
    ): SelectionBuilder[PrometheusIntegrationCreatePayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("integration", OptionOf(Obj(innerSelection)))

  }

  type PrometheusIntegrationResetTokenPayload

  object PrometheusIntegrationResetTokenPayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[PrometheusIntegrationResetTokenPayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[PrometheusIntegrationResetTokenPayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** The newly created integration.
      */
    def integration[A](
      innerSelection: SelectionBuilder[AlertManagementPrometheusIntegration, A]
    ): SelectionBuilder[PrometheusIntegrationResetTokenPayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("integration", OptionOf(Obj(innerSelection)))

  }

  type PrometheusIntegrationUpdatePayload

  object PrometheusIntegrationUpdatePayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[PrometheusIntegrationUpdatePayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[PrometheusIntegrationUpdatePayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** The newly created integration.
      */
    def integration[A](
      innerSelection: SelectionBuilder[AlertManagementPrometheusIntegration, A]
    ): SelectionBuilder[PrometheusIntegrationUpdatePayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("integration", OptionOf(Obj(innerSelection)))

  }

  type PromoteToEpicPayload

  object PromoteToEpicPayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[PromoteToEpicPayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** The epic after issue promotion.
      */
    def epic[A](innerSelection: SelectionBuilder[Epic, A]): SelectionBuilder[PromoteToEpicPayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("epic", OptionOf(Obj(innerSelection)))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[PromoteToEpicPayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** The issue after mutation.
      */
    def issue[A](innerSelection: SelectionBuilder[Issue, A]): SelectionBuilder[PromoteToEpicPayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("issue", OptionOf(Obj(innerSelection)))
  }

  type PushRules

  object PushRules {

    /** Indicates whether commits not signed through GPG will be rejected.
      */
    def rejectUnsignedCommits: SelectionBuilder[PushRules, Boolean] =
      _root_.caliban.client.SelectionBuilder.Field("rejectUnsignedCommits", Scalar())
  }

  type PypiMetadata

  object PypiMetadata {

    /** ID of the metadatum.
      */
    def id: SelectionBuilder[PypiMetadata, PackagesPypiMetadatumID] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())

    /** Required Python version of the Pypi package.
      */
    def requiredPython: SelectionBuilder[PypiMetadata, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("requiredPython", OptionOf(Scalar()))
  }

  type RecentFailures

  object RecentFailures {

    /** Name of the base branch of the project.
      */
    def baseBranch: SelectionBuilder[RecentFailures, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("baseBranch", OptionOf(Scalar()))

    /** Number of times the test case has failed in the past 14 days.
      */
    def count: SelectionBuilder[RecentFailures, Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("count", OptionOf(Scalar()))
  }

  type Release

  object Release {

    /** Assets of the release.
      */
    def assets[A](innerSelection: SelectionBuilder[ReleaseAssets, A]): SelectionBuilder[Release, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("assets", OptionOf(Obj(innerSelection)))

    /** User that created the release.
      */
    def author[A](innerSelection: SelectionBuilder[UserCore, A]): SelectionBuilder[Release, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("author", OptionOf(Obj(innerSelection)))

    /** The commit associated with the release.
      */
    def commit[A](innerSelection: SelectionBuilder[Commit, A]): SelectionBuilder[Release, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("commit", OptionOf(Obj(innerSelection)))

    /** Timestamp of when the release was created.
      */
    def createdAt: SelectionBuilder[Release, Option[Time]] = _root_.caliban.client.SelectionBuilder.Field("createdAt", OptionOf(Scalar()))

    /** Description (also known as "release notes") of the release.
      */
    def description: SelectionBuilder[Release, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("description", OptionOf(Scalar()))

    /** The GitLab Flavored Markdown rendering of `description`
      */
    def descriptionHtml: SelectionBuilder[Release, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("descriptionHtml", OptionOf(Scalar()))

    /** Evidence for the release.
      */
    def evidences[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[ReleaseEvidenceConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[Release, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "evidences",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** Links of the release.
      */
    def links[A](innerSelection: SelectionBuilder[ReleaseLinks, A]): SelectionBuilder[Release, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("links", OptionOf(Obj(innerSelection)))

    /** Milestones associated to the release.
      */
    def milestones[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[MilestoneConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[Release, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "milestones",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** Name of the release.
      */
    def name: SelectionBuilder[Release, Option[String]] = _root_.caliban.client.SelectionBuilder.Field("name", OptionOf(Scalar()))

    /** Timestamp of when the release was released.
      */
    def releasedAt: SelectionBuilder[Release, Option[Time]] = _root_.caliban.client.SelectionBuilder.Field("releasedAt", OptionOf(Scalar()))

    /** Name of the tag associated with the release.
      */
    def tagName: SelectionBuilder[Release, Option[String]] = _root_.caliban.client.SelectionBuilder.Field("tagName", OptionOf(Scalar()))

    /** Relative web path to the tag associated with the release.
      */
    def tagPath: SelectionBuilder[Release, Option[String]] = _root_.caliban.client.SelectionBuilder.Field("tagPath", OptionOf(Scalar()))

    /** Indicates the release is an upcoming release.
      */
    def upcomingRelease: SelectionBuilder[Release, Option[Boolean]] =
      _root_.caliban.client.SelectionBuilder.Field("upcomingRelease", OptionOf(Scalar()))
  }

  type ReleaseAssetLink

  object ReleaseAssetLink {

    /** Relative path for the direct asset link.
      */
    def directAssetPath: SelectionBuilder[ReleaseAssetLink, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("directAssetPath", OptionOf(Scalar()))

    /** Direct asset URL of the link.
      */
    def directAssetUrl: SelectionBuilder[ReleaseAssetLink, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("directAssetUrl", OptionOf(Scalar()))

    /** Indicates the link points to an external resource.
      */
    def external: SelectionBuilder[ReleaseAssetLink, Option[Boolean]] =
      _root_.caliban.client.SelectionBuilder.Field("external", OptionOf(Scalar()))

    /** ID of the link.
      */
    def id: SelectionBuilder[ReleaseAssetLink, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())

    /** Type of the link: `other`, `runbook`, `image`, `package`; defaults to `other`.
      */
    def linkType: SelectionBuilder[ReleaseAssetLink, Option[ReleaseAssetLinkType]] =
      _root_.caliban.client.SelectionBuilder.Field("linkType", OptionOf(Scalar()))

    /** Name of the link.
      */
    def name: SelectionBuilder[ReleaseAssetLink, Option[String]] = _root_.caliban.client.SelectionBuilder.Field("name", OptionOf(Scalar()))

    /** URL of the link.
      */
    def url: SelectionBuilder[ReleaseAssetLink, Option[String]] = _root_.caliban.client.SelectionBuilder.Field("url", OptionOf(Scalar()))
  }

  type ReleaseAssetLinkConnection

  object ReleaseAssetLinkConnection {

    /** A list of edges.
      */
    def edges[A](
      innerSelection: SelectionBuilder[ReleaseAssetLinkEdge, A]
    ): SelectionBuilder[ReleaseAssetLinkConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](
      innerSelection: SelectionBuilder[ReleaseAssetLink, A]
    ): SelectionBuilder[ReleaseAssetLinkConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[ReleaseAssetLinkConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  }

  type ReleaseAssetLinkCreatePayload

  object ReleaseAssetLinkCreatePayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[ReleaseAssetLinkCreatePayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[ReleaseAssetLinkCreatePayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** The asset link after mutation.
      */
    def link[A](innerSelection: SelectionBuilder[ReleaseAssetLink, A]): SelectionBuilder[ReleaseAssetLinkCreatePayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("link", OptionOf(Obj(innerSelection)))
  }

  type ReleaseAssetLinkDeletePayload

  object ReleaseAssetLinkDeletePayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[ReleaseAssetLinkDeletePayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[ReleaseAssetLinkDeletePayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** The deleted release asset link.
      */
    def link[A](innerSelection: SelectionBuilder[ReleaseAssetLink, A]): SelectionBuilder[ReleaseAssetLinkDeletePayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("link", OptionOf(Obj(innerSelection)))
  }

  type ReleaseAssetLinkEdge

  object ReleaseAssetLinkEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[ReleaseAssetLinkEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](innerSelection: SelectionBuilder[ReleaseAssetLink, A]): SelectionBuilder[ReleaseAssetLinkEdge, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
  }

  type ReleaseAssetLinkUpdatePayload

  object ReleaseAssetLinkUpdatePayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[ReleaseAssetLinkUpdatePayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[ReleaseAssetLinkUpdatePayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** The asset link after mutation.
      */
    def link[A](innerSelection: SelectionBuilder[ReleaseAssetLink, A]): SelectionBuilder[ReleaseAssetLinkUpdatePayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("link", OptionOf(Obj(innerSelection)))
  }

  type ReleaseAssets

  object ReleaseAssets {

    /** Number of assets of the release.
      */
    def count: SelectionBuilder[ReleaseAssets, Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("count", OptionOf(Scalar()))

    /** Asset links of the release.
      */
    def links[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[ReleaseAssetLinkConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[ReleaseAssets, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "links",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** Sources of the release.
      */
    def sources[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[ReleaseSourceConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[ReleaseAssets, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "sources",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

  }

  type ReleaseConnection

  object ReleaseConnection {

    /** Total count of collection.
      */
    def count: SelectionBuilder[ReleaseConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("count", Scalar())

    /** A list of edges.
      */
    def edges[A](innerSelection: SelectionBuilder[ReleaseEdge, A]): SelectionBuilder[ReleaseConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](innerSelection: SelectionBuilder[Release, A]): SelectionBuilder[ReleaseConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[ReleaseConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  }

  type ReleaseCreatePayload

  object ReleaseCreatePayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[ReleaseCreatePayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[ReleaseCreatePayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** The release after mutation.
      */
    def release[A](innerSelection: SelectionBuilder[Release, A]): SelectionBuilder[ReleaseCreatePayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("release", OptionOf(Obj(innerSelection)))
  }

  type ReleaseDeletePayload

  object ReleaseDeletePayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[ReleaseDeletePayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[ReleaseDeletePayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** The deleted release.
      */
    def release[A](innerSelection: SelectionBuilder[Release, A]): SelectionBuilder[ReleaseDeletePayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("release", OptionOf(Obj(innerSelection)))
  }

  type ReleaseEdge

  object ReleaseEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[ReleaseEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](innerSelection: SelectionBuilder[Release, A]): SelectionBuilder[ReleaseEdge, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
  }

  type ReleaseEvidence

  object ReleaseEvidence {

    /** Timestamp when the evidence was collected.
      */
    def collectedAt: SelectionBuilder[ReleaseEvidence, Option[Time]] =
      _root_.caliban.client.SelectionBuilder.Field("collectedAt", OptionOf(Scalar()))

    /** URL from where the evidence can be downloaded.
      */
    def filepath: SelectionBuilder[ReleaseEvidence, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("filepath", OptionOf(Scalar()))

    /** ID of the evidence.
      */
    def id: SelectionBuilder[ReleaseEvidence, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())

    /** SHA1 ID of the evidence hash.
      */
    def sha: SelectionBuilder[ReleaseEvidence, Option[String]] = _root_.caliban.client.SelectionBuilder.Field("sha", OptionOf(Scalar()))
  }

  type ReleaseEvidenceConnection

  object ReleaseEvidenceConnection {

    /** A list of edges.
      */
    def edges[A](
      innerSelection: SelectionBuilder[ReleaseEvidenceEdge, A]
    ): SelectionBuilder[ReleaseEvidenceConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](
      innerSelection: SelectionBuilder[ReleaseEvidence, A]
    ): SelectionBuilder[ReleaseEvidenceConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[ReleaseEvidenceConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  }

  type ReleaseEvidenceEdge

  object ReleaseEvidenceEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[ReleaseEvidenceEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](innerSelection: SelectionBuilder[ReleaseEvidence, A]): SelectionBuilder[ReleaseEvidenceEdge, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
  }

  type ReleaseLinks

  object ReleaseLinks {

    /** HTTP URL of the issues page, filtered by this release and `state=closed`.
      */
    def closedIssuesUrl: SelectionBuilder[ReleaseLinks, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("closedIssuesUrl", OptionOf(Scalar()))

    /** HTTP URL of the merge request page , filtered by this release and `state=closed`.
      */
    def closedMergeRequestsUrl: SelectionBuilder[ReleaseLinks, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("closedMergeRequestsUrl", OptionOf(Scalar()))

    /** HTTP URL of the release's edit page.
      */
    def editUrl: SelectionBuilder[ReleaseLinks, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("editUrl", OptionOf(Scalar()))

    /** HTTP URL of the merge request page , filtered by this release and `state=merged`.
      */
    def mergedMergeRequestsUrl: SelectionBuilder[ReleaseLinks, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("mergedMergeRequestsUrl", OptionOf(Scalar()))

    /** HTTP URL of the issues page, filtered by this release and `state=open`.
      */
    def openedIssuesUrl: SelectionBuilder[ReleaseLinks, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("openedIssuesUrl", OptionOf(Scalar()))

    /** HTTP URL of the merge request page, filtered by this release and `state=open`.
      */
    def openedMergeRequestsUrl: SelectionBuilder[ReleaseLinks, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("openedMergeRequestsUrl", OptionOf(Scalar()))

    /** HTTP URL of the release.
      */
    def selfUrl: SelectionBuilder[ReleaseLinks, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("selfUrl", OptionOf(Scalar()))
  }

  type ReleaseSource

  object ReleaseSource {

    /** Format of the source.
      */
    def format: SelectionBuilder[ReleaseSource, Option[String]] = _root_.caliban.client.SelectionBuilder.Field("format", OptionOf(Scalar()))

    /** Download URL of the source.
      */
    def url: SelectionBuilder[ReleaseSource, Option[String]] = _root_.caliban.client.SelectionBuilder.Field("url", OptionOf(Scalar()))
  }

  type ReleaseSourceConnection

  object ReleaseSourceConnection {

    /** A list of edges.
      */
    def edges[A](
      innerSelection: SelectionBuilder[ReleaseSourceEdge, A]
    ): SelectionBuilder[ReleaseSourceConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](innerSelection: SelectionBuilder[ReleaseSource, A]): SelectionBuilder[ReleaseSourceConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[ReleaseSourceConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  }

  type ReleaseSourceEdge

  object ReleaseSourceEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[ReleaseSourceEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](innerSelection: SelectionBuilder[ReleaseSource, A]): SelectionBuilder[ReleaseSourceEdge, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
  }

  type ReleaseUpdatePayload

  object ReleaseUpdatePayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[ReleaseUpdatePayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[ReleaseUpdatePayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** The release after mutation.
      */
    def release[A](innerSelection: SelectionBuilder[Release, A]): SelectionBuilder[ReleaseUpdatePayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("release", OptionOf(Obj(innerSelection)))
  }

  type RemoveProjectFromSecurityDashboardPayload

  object RemoveProjectFromSecurityDashboardPayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[RemoveProjectFromSecurityDashboardPayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[RemoveProjectFromSecurityDashboardPayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))
  }

  type RepositionImageDiffNotePayload

  object RepositionImageDiffNotePayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[RepositionImageDiffNotePayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[RepositionImageDiffNotePayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** The note after mutation.
      */
    def note[A](innerSelection: SelectionBuilder[Note, A]): SelectionBuilder[RepositionImageDiffNotePayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("note", OptionOf(Obj(innerSelection)))
  }

  type Repository

  object Repository {

    /** Blobs contained within the repository
      */
    def blobs[A](
      paths: List[String] = Nil,
      ref: Option[String] = None,
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[RepositoryBlobConnection, A]
    )(
      implicit encoder0: ArgEncoder[List[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[String]],
      encoder3: ArgEncoder[Option[String]],
      encoder4: ArgEncoder[Option[Int]],
      encoder5: ArgEncoder[Option[Int]]
    ): SelectionBuilder[Repository, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "blobs",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("paths", paths, "[String!]!")(encoder0),
          Argument("ref", ref, "String")(encoder1),
          Argument("after", after, "String")(encoder2),
          Argument("before", before, "String")(encoder3),
          Argument("first", first, "Int")(encoder4),
          Argument("last", last, "Int")(encoder5)
        )
      )

    /** Names of branches available in this repository that match the search pattern.
      */
    def branchNames(
      searchPattern: String,
      offset: Int,
      limit: Int
    )(
      implicit encoder0: ArgEncoder[String],
      encoder1: ArgEncoder[Int],
      encoder2: ArgEncoder[Int]
    ): SelectionBuilder[Repository, Option[List[String]]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "branchNames",
        OptionOf(ListOf(Scalar())),
        arguments = List(
          Argument("searchPattern", searchPattern, "String!")(encoder0),
          Argument("offset", offset, "Int!")(encoder1),
          Argument("limit", limit, "Int!")(encoder2)
        )
      )

    /** Shows a disk path of the repository.
      */
    def diskPath: SelectionBuilder[Repository, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("diskPath", OptionOf(Scalar()))

    /** Indicates repository has no visible content.
      */
    def empty: SelectionBuilder[Repository, Boolean] = _root_.caliban.client.SelectionBuilder.Field("empty", Scalar())

    /** Indicates a corresponding Git repository exists on disk.
      */
    def exists: SelectionBuilder[Repository, Boolean] = _root_.caliban.client.SelectionBuilder.Field("exists", Scalar())

    /** Default branch of the repository.
      */
    def rootRef: SelectionBuilder[Repository, Option[String]] = _root_.caliban.client.SelectionBuilder.Field("rootRef", OptionOf(Scalar()))

    /** Tree of the repository.
      */
    def tree[A](
      path: Option[String] = None,
      ref: Option[String] = None,
      recursive: Option[Boolean] = None
    )(
      innerSelection: SelectionBuilder[Tree, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Boolean]]
    ): SelectionBuilder[Repository, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "tree",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("path", path, "String")(encoder0),
          Argument("ref", ref, "String")(encoder1),
          Argument("recursive", recursive, "Boolean")(encoder2)
        )
      )

  }

  type RepositoryBlob

  object RepositoryBlob {

    /** Whether the current user can modify the blob.
      */
    def canModifyBlob: SelectionBuilder[RepositoryBlob, Option[Boolean]] =
      _root_.caliban.client.SelectionBuilder.Field("canModifyBlob", OptionOf(Scalar()))

    /** Web path to edit the blob in the old-style editor.
      */
    def editBlobPath: SelectionBuilder[RepositoryBlob, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("editBlobPath", OptionOf(Scalar()))

    /** Web path to download the raw blob via external storage, if enabled.
      */
    def externalStorageUrl: SelectionBuilder[RepositoryBlob, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("externalStorageUrl", OptionOf(Scalar()))

    /** The expected format of the blob based on the extension.
      */
    def fileType: SelectionBuilder[RepositoryBlob, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("fileType", OptionOf(Scalar()))

    /** Web path to edit this blob using a forked project.
      */
    def forkAndEditPath: SelectionBuilder[RepositoryBlob, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("forkAndEditPath", OptionOf(Scalar()))

    /** ID of the blob.
      */
    def id: SelectionBuilder[RepositoryBlob, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())

    /** Web path to edit this blob in the Web IDE.
      */
    def ideEditPath: SelectionBuilder[RepositoryBlob, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("ideEditPath", OptionOf(Scalar()))

    /** Web path to edit this blob in the Web IDE using a forked project.
      */
    def ideForkAndEditPath: SelectionBuilder[RepositoryBlob, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("ideForkAndEditPath", OptionOf(Scalar()))

    /** LFS OID of the blob.
      */
    def lfsOid: SelectionBuilder[RepositoryBlob, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("lfsOid", OptionOf(Scalar()))

    /** Blob mode.
      */
    def mode: SelectionBuilder[RepositoryBlob, Option[String]] = _root_.caliban.client.SelectionBuilder.Field("mode", OptionOf(Scalar()))

    /** Blob name.
      */
    def name: SelectionBuilder[RepositoryBlob, Option[String]] = _root_.caliban.client.SelectionBuilder.Field("name", OptionOf(Scalar()))

    /** OID of the blob.
      */
    def oid: SelectionBuilder[RepositoryBlob, String] = _root_.caliban.client.SelectionBuilder.Field("oid", Scalar())

    /** Path of the blob.
      */
    def path: SelectionBuilder[RepositoryBlob, String] = _root_.caliban.client.SelectionBuilder.Field("path", Scalar())

    /** Blob plain highlighted data.
      */
    def plainData: SelectionBuilder[RepositoryBlob, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("plainData", OptionOf(Scalar()))

    /** The raw content of the blob.
      */
    def rawBlob: SelectionBuilder[RepositoryBlob, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("rawBlob", OptionOf(Scalar()))

    /** Web path to download the raw blob.
      */
    def rawPath: SelectionBuilder[RepositoryBlob, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("rawPath", OptionOf(Scalar()))

    /** Size (in bytes) of the blob, or the blob target if stored externally.
      */
    def rawSize: SelectionBuilder[RepositoryBlob, Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("rawSize", OptionOf(Scalar()))

    /** The raw content of the blob, if the blob is text data.
      */
    def rawTextBlob: SelectionBuilder[RepositoryBlob, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("rawTextBlob", OptionOf(Scalar()))

    /** Web path to replace the blob content.
      */
    def replacePath: SelectionBuilder[RepositoryBlob, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("replacePath", OptionOf(Scalar()))

    /** Blob content rich viewer.
      */
    def richViewer[A](innerSelection: SelectionBuilder[BlobViewer, A]): SelectionBuilder[RepositoryBlob, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("richViewer", OptionOf(Obj(innerSelection)))

    /** Blob content simple viewer.
      */
    def simpleViewer[A](innerSelection: SelectionBuilder[BlobViewer, A]): SelectionBuilder[RepositoryBlob, A] =
      _root_.caliban.client.SelectionBuilder.Field("simpleViewer", Obj(innerSelection))

    /** Size (in bytes) of the blob.
      */
    def size: SelectionBuilder[RepositoryBlob, Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("size", OptionOf(Scalar()))

    /** Whether the blob's content is stored externally (for instance, in LFS).
      */
    def storedExternally: SelectionBuilder[RepositoryBlob, Option[Boolean]] =
      _root_.caliban.client.SelectionBuilder.Field("storedExternally", OptionOf(Scalar()))

    /** Web path of the blob.
      */
    def webPath: SelectionBuilder[RepositoryBlob, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("webPath", OptionOf(Scalar()))
  }

  type RepositoryBlobConnection

  object RepositoryBlobConnection {

    /** A list of edges.
      */
    def edges[A](
      innerSelection: SelectionBuilder[RepositoryBlobEdge, A]
    ): SelectionBuilder[RepositoryBlobConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](innerSelection: SelectionBuilder[RepositoryBlob, A]): SelectionBuilder[RepositoryBlobConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[RepositoryBlobConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  }

  type RepositoryBlobEdge

  object RepositoryBlobEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[RepositoryBlobEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](innerSelection: SelectionBuilder[RepositoryBlob, A]): SelectionBuilder[RepositoryBlobEdge, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
  }

  type Requirement

  object Requirement {

    /** Author of the requirement.
      */
    def author[A](innerSelection: SelectionBuilder[UserCore, A]): SelectionBuilder[Requirement, A] =
      _root_.caliban.client.SelectionBuilder.Field("author", Obj(innerSelection))

    /** Timestamp of when the requirement was created.
      */
    def createdAt: SelectionBuilder[Requirement, Time] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())

    /** Description of the requirement.
      */
    def description: SelectionBuilder[Requirement, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("description", OptionOf(Scalar()))

    /** The GitLab Flavored Markdown rendering of `description`
      */
    def descriptionHtml: SelectionBuilder[Requirement, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("descriptionHtml", OptionOf(Scalar()))

    /** ID of the requirement.
      */
    def id: SelectionBuilder[Requirement, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())

    /** Internal ID of the requirement.
      */
    def iid: SelectionBuilder[Requirement, String] = _root_.caliban.client.SelectionBuilder.Field("iid", Scalar())

    /** Indicates if latest test report was created by user.
      */
    def lastTestReportManuallyCreated: SelectionBuilder[Requirement, Option[Boolean]] =
      _root_.caliban.client.SelectionBuilder.Field("lastTestReportManuallyCreated", OptionOf(Scalar()))

    /** Latest requirement test report state.
      */
    def lastTestReportState: SelectionBuilder[Requirement, Option[TestReportState]] =
      _root_.caliban.client.SelectionBuilder.Field("lastTestReportState", OptionOf(Scalar()))

    /** Project to which the requirement belongs.
      */
    def project[A](innerSelection: SelectionBuilder[Project, A]): SelectionBuilder[Requirement, A] =
      _root_.caliban.client.SelectionBuilder.Field("project", Obj(innerSelection))

    /** State of the requirement.
      */
    def state: SelectionBuilder[Requirement, RequirementState] = _root_.caliban.client.SelectionBuilder.Field("state", Scalar())

    /** Test reports of the requirement.
      */
    def testReports[A](
      sort: Option[Sort] = None,
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[TestReportConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[Sort]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[String]],
      encoder3: ArgEncoder[Option[Int]],
      encoder4: ArgEncoder[Option[Int]]
    ): SelectionBuilder[Requirement, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "testReports",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("sort", sort, "Sort")(encoder0),
          Argument("after", after, "String")(encoder1),
          Argument("before", before, "String")(encoder2),
          Argument("first", first, "Int")(encoder3),
          Argument("last", last, "Int")(encoder4)
        )
      )

    /** Title of the requirement.
      */
    def title: SelectionBuilder[Requirement, Option[String]] = _root_.caliban.client.SelectionBuilder.Field("title", OptionOf(Scalar()))

    /** The GitLab Flavored Markdown rendering of `title`
      */
    def titleHtml: SelectionBuilder[Requirement, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("titleHtml", OptionOf(Scalar()))

    /** Timestamp of when the requirement was last updated.
      */
    def updatedAt: SelectionBuilder[Requirement, Time] = _root_.caliban.client.SelectionBuilder.Field("updatedAt", Scalar())

    /** Permissions for the current user on the resource
      */
    def userPermissions[A](innerSelection: SelectionBuilder[RequirementPermissions, A]): SelectionBuilder[Requirement, A] =
      _root_.caliban.client.SelectionBuilder.Field("userPermissions", Obj(innerSelection))
  }

  type RequirementConnection

  object RequirementConnection {

    /** A list of edges.
      */
    def edges[A](innerSelection: SelectionBuilder[RequirementEdge, A]): SelectionBuilder[RequirementConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](innerSelection: SelectionBuilder[Requirement, A]): SelectionBuilder[RequirementConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[RequirementConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  }

  type RequirementEdge

  object RequirementEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[RequirementEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](innerSelection: SelectionBuilder[Requirement, A]): SelectionBuilder[RequirementEdge, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
  }

  type RequirementPermissions

  object RequirementPermissions {

    /** Indicates the user can perform `admin_requirement` on this resource
      */
    def adminRequirement: SelectionBuilder[RequirementPermissions, Boolean] =
      _root_.caliban.client.SelectionBuilder.Field("adminRequirement", Scalar())

    /** Indicates the user can perform `create_requirement` on this resource
      */
    def createRequirement: SelectionBuilder[RequirementPermissions, Boolean] =
      _root_.caliban.client.SelectionBuilder.Field("createRequirement", Scalar())

    /** Indicates the user can perform `destroy_requirement` on this resource
      */
    def destroyRequirement: SelectionBuilder[RequirementPermissions, Boolean] =
      _root_.caliban.client.SelectionBuilder.Field("destroyRequirement", Scalar())

    /** Indicates the user can perform `read_requirement` on this resource
      */
    def readRequirement: SelectionBuilder[RequirementPermissions, Boolean] =
      _root_.caliban.client.SelectionBuilder.Field("readRequirement", Scalar())

    /** Indicates the user can perform `update_requirement` on this resource
      */
    def updateRequirement: SelectionBuilder[RequirementPermissions, Boolean] =
      _root_.caliban.client.SelectionBuilder.Field("updateRequirement", Scalar())
  }

  type RequirementStatesCount

  object RequirementStatesCount {

    /** Number of archived requirements.
      */
    def archived: SelectionBuilder[RequirementStatesCount, Option[Int]] =
      _root_.caliban.client.SelectionBuilder.Field("archived", OptionOf(Scalar()))

    /** Number of opened requirements.
      */
    def opened: SelectionBuilder[RequirementStatesCount, Option[Int]] =
      _root_.caliban.client.SelectionBuilder.Field("opened", OptionOf(Scalar()))
  }

  type RootStorageStatistics

  object RootStorageStatistics {

    /** The CI artifacts size in bytes.
      */
    def buildArtifactsSize: SelectionBuilder[RootStorageStatistics, Double] =
      _root_.caliban.client.SelectionBuilder.Field("buildArtifactsSize", Scalar())

    /** The LFS objects size in bytes.
      */
    def lfsObjectsSize: SelectionBuilder[RootStorageStatistics, Double] =
      _root_.caliban.client.SelectionBuilder.Field("lfsObjectsSize", Scalar())

    /** The packages size in bytes.
      */
    def packagesSize: SelectionBuilder[RootStorageStatistics, Double] =
      _root_.caliban.client.SelectionBuilder.Field("packagesSize", Scalar())

    /** The CI pipeline artifacts size in bytes.
      */
    def pipelineArtifactsSize: SelectionBuilder[RootStorageStatistics, Double] =
      _root_.caliban.client.SelectionBuilder.Field("pipelineArtifactsSize", Scalar())

    /** The Git repository size in bytes.
      */
    def repositorySize: SelectionBuilder[RootStorageStatistics, Double] =
      _root_.caliban.client.SelectionBuilder.Field("repositorySize", Scalar())

    /** The snippets size in bytes.
      */
    def snippetsSize: SelectionBuilder[RootStorageStatistics, Double] =
      _root_.caliban.client.SelectionBuilder.Field("snippetsSize", Scalar())

    /** The total storage in bytes.
      */
    def storageSize: SelectionBuilder[RootStorageStatistics, Double] = _root_.caliban.client.SelectionBuilder.Field("storageSize", Scalar())

    /** The uploads size in bytes.
      */
    def uploadsSize: SelectionBuilder[RootStorageStatistics, Double] = _root_.caliban.client.SelectionBuilder.Field("uploadsSize", Scalar())

    /** The wiki size in bytes.
      */
    def wikiSize: SelectionBuilder[RootStorageStatistics, Double] = _root_.caliban.client.SelectionBuilder.Field("wikiSize", Scalar())
  }

  type RunnerArchitecture

  object RunnerArchitecture {

    /** Download location for the runner for the platform architecture.
      */
    def downloadLocation: SelectionBuilder[RunnerArchitecture, String] =
      _root_.caliban.client.SelectionBuilder.Field("downloadLocation", Scalar())

    /** Name of the runner platform architecture.
      */
    def name: SelectionBuilder[RunnerArchitecture, String] = _root_.caliban.client.SelectionBuilder.Field("name", Scalar())
  }

  type RunnerArchitectureConnection

  object RunnerArchitectureConnection {

    /** A list of edges.
      */
    def edges[A](
      innerSelection: SelectionBuilder[RunnerArchitectureEdge, A]
    ): SelectionBuilder[RunnerArchitectureConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](
      innerSelection: SelectionBuilder[RunnerArchitecture, A]
    ): SelectionBuilder[RunnerArchitectureConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[RunnerArchitectureConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  }

  type RunnerArchitectureEdge

  object RunnerArchitectureEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[RunnerArchitectureEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](innerSelection: SelectionBuilder[RunnerArchitecture, A]): SelectionBuilder[RunnerArchitectureEdge, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
  }

  type RunnerDeletePayload

  object RunnerDeletePayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[RunnerDeletePayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[RunnerDeletePayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))
  }

  type RunnerPlatform

  object RunnerPlatform {

    /** Runner architectures supported for the platform.
      */
    def architectures[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[RunnerArchitectureConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[RunnerPlatform, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "architectures",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** Human readable name of the runner platform.
      */
    def humanReadableName: SelectionBuilder[RunnerPlatform, String] =
      _root_.caliban.client.SelectionBuilder.Field("humanReadableName", Scalar())

    /** Name slug of the runner platform.
      */
    def name: SelectionBuilder[RunnerPlatform, String] = _root_.caliban.client.SelectionBuilder.Field("name", Scalar())
  }

  type RunnerPlatformConnection

  object RunnerPlatformConnection {

    /** A list of edges.
      */
    def edges[A](
      innerSelection: SelectionBuilder[RunnerPlatformEdge, A]
    ): SelectionBuilder[RunnerPlatformConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](innerSelection: SelectionBuilder[RunnerPlatform, A]): SelectionBuilder[RunnerPlatformConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[RunnerPlatformConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  }

  type RunnerPlatformEdge

  object RunnerPlatformEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[RunnerPlatformEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](innerSelection: SelectionBuilder[RunnerPlatform, A]): SelectionBuilder[RunnerPlatformEdge, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
  }

  type RunnerSetup

  object RunnerSetup {

    /** Instructions for installing the runner on the specified architecture.
      */
    def installInstructions: SelectionBuilder[RunnerSetup, String] =
      _root_.caliban.client.SelectionBuilder.Field("installInstructions", Scalar())

    /** Instructions for registering the runner.
      */
    def registerInstructions: SelectionBuilder[RunnerSetup, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("registerInstructions", OptionOf(Scalar()))
  }

  type RunnerUpdatePayload

  object RunnerUpdatePayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[RunnerUpdatePayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[RunnerUpdatePayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** The runner after mutation.
      */
    def runner[A](innerSelection: SelectionBuilder[CiRunner, A]): SelectionBuilder[RunnerUpdatePayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("runner", OptionOf(Obj(innerSelection)))
  }

  type RunnersRegistrationTokenResetPayload

  object RunnersRegistrationTokenResetPayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[RunnersRegistrationTokenResetPayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[RunnersRegistrationTokenResetPayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** The runner token after mutation.
      */
    def token: SelectionBuilder[RunnersRegistrationTokenResetPayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("token", OptionOf(Scalar()))
  }

  type SastCiConfiguration

  object SastCiConfiguration {

    /** List of analyzers entities attached to SAST configuration.
      */
    def analyzers[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[SastCiConfigurationAnalyzersEntityConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[SastCiConfiguration, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "analyzers",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** List of global entities related to SAST configuration.
      */
    def global[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[SastCiConfigurationEntityConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[SastCiConfiguration, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "global",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** List of pipeline entities related to SAST configuration.
      */
    def pipeline[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[SastCiConfigurationEntityConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[SastCiConfiguration, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "pipeline",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

  }

  type SastCiConfigurationAnalyzersEntity

  object SastCiConfigurationAnalyzersEntity {

    /** Analyzer description that is displayed on the form.
      */
    def description: SelectionBuilder[SastCiConfigurationAnalyzersEntity, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("description", OptionOf(Scalar()))

    /** Indicates whether an analyzer is enabled.
      */
    def enabled: SelectionBuilder[SastCiConfigurationAnalyzersEntity, Option[Boolean]] =
      _root_.caliban.client.SelectionBuilder.Field("enabled", OptionOf(Scalar()))

    /** Analyzer label used in the config UI.
      */
    def label: SelectionBuilder[SastCiConfigurationAnalyzersEntity, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("label", OptionOf(Scalar()))

    /** Name of the analyzer.
      */
    def name: SelectionBuilder[SastCiConfigurationAnalyzersEntity, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("name", OptionOf(Scalar()))

    /** List of supported variables.
      */
    def variables[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[SastCiConfigurationEntityConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[SastCiConfigurationAnalyzersEntity, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "variables",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

  }

  type SastCiConfigurationAnalyzersEntityConnection

  object SastCiConfigurationAnalyzersEntityConnection {

    /** A list of edges.
      */
    def edges[A](
      innerSelection: SelectionBuilder[SastCiConfigurationAnalyzersEntityEdge, A]
    ): SelectionBuilder[SastCiConfigurationAnalyzersEntityConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](
      innerSelection: SelectionBuilder[SastCiConfigurationAnalyzersEntity, A]
    ): SelectionBuilder[SastCiConfigurationAnalyzersEntityConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[SastCiConfigurationAnalyzersEntityConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  }

  type SastCiConfigurationAnalyzersEntityEdge

  object SastCiConfigurationAnalyzersEntityEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[SastCiConfigurationAnalyzersEntityEdge, String] =
      _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](
      innerSelection: SelectionBuilder[SastCiConfigurationAnalyzersEntity, A]
    ): SelectionBuilder[SastCiConfigurationAnalyzersEntityEdge, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))

  }

  type SastCiConfigurationEntity

  object SastCiConfigurationEntity {

    /** Default value that is used if value is empty.
      */
    def defaultValue: SelectionBuilder[SastCiConfigurationEntity, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("defaultValue", OptionOf(Scalar()))

    /** Entity description that is displayed on the form.
      */
    def description: SelectionBuilder[SastCiConfigurationEntity, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("description", OptionOf(Scalar()))

    /** CI keyword of entity.
      */
    def field: SelectionBuilder[SastCiConfigurationEntity, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("field", OptionOf(Scalar()))

    /** Label for entity used in the form.
      */
    def label: SelectionBuilder[SastCiConfigurationEntity, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("label", OptionOf(Scalar()))

    /** Different possible values of the field.
      */
    def options[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[SastCiConfigurationOptionsEntityConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[SastCiConfigurationEntity, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "options",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** Size of the UI component.
      */
    def size: SelectionBuilder[SastCiConfigurationEntity, Option[SastUiComponentSize]] =
      _root_.caliban.client.SelectionBuilder.Field("size", OptionOf(Scalar()))

    /** Type of the field value.
      */
    def `type`: SelectionBuilder[SastCiConfigurationEntity, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("type", OptionOf(Scalar()))

    /** Current value of the entity.
      */
    def value: SelectionBuilder[SastCiConfigurationEntity, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("value", OptionOf(Scalar()))
  }

  type SastCiConfigurationEntityConnection

  object SastCiConfigurationEntityConnection {

    /** A list of edges.
      */
    def edges[A](
      innerSelection: SelectionBuilder[SastCiConfigurationEntityEdge, A]
    ): SelectionBuilder[SastCiConfigurationEntityConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](
      innerSelection: SelectionBuilder[SastCiConfigurationEntity, A]
    ): SelectionBuilder[SastCiConfigurationEntityConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[SastCiConfigurationEntityConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  }

  type SastCiConfigurationEntityEdge

  object SastCiConfigurationEntityEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[SastCiConfigurationEntityEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](
      innerSelection: SelectionBuilder[SastCiConfigurationEntity, A]
    ): SelectionBuilder[SastCiConfigurationEntityEdge, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))

  }

  type SastCiConfigurationOptionsEntity

  object SastCiConfigurationOptionsEntity {

    /** Label of option entity.
      */
    def label: SelectionBuilder[SastCiConfigurationOptionsEntity, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("label", OptionOf(Scalar()))

    /** Value of option entity.
      */
    def value: SelectionBuilder[SastCiConfigurationOptionsEntity, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("value", OptionOf(Scalar()))
  }

  type SastCiConfigurationOptionsEntityConnection

  object SastCiConfigurationOptionsEntityConnection {

    /** A list of edges.
      */
    def edges[A](
      innerSelection: SelectionBuilder[SastCiConfigurationOptionsEntityEdge, A]
    ): SelectionBuilder[SastCiConfigurationOptionsEntityConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](
      innerSelection: SelectionBuilder[SastCiConfigurationOptionsEntity, A]
    ): SelectionBuilder[SastCiConfigurationOptionsEntityConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[SastCiConfigurationOptionsEntityConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  }

  type SastCiConfigurationOptionsEntityEdge

  object SastCiConfigurationOptionsEntityEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[SastCiConfigurationOptionsEntityEdge, String] =
      _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](
      innerSelection: SelectionBuilder[SastCiConfigurationOptionsEntity, A]
    ): SelectionBuilder[SastCiConfigurationOptionsEntityEdge, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))

  }

  type Scan

  object Scan {

    /** List of errors.
      */
    def errors: SelectionBuilder[Scan, List[String]] = _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** Name of the scan.
      */
    def name: SelectionBuilder[Scan, String] = _root_.caliban.client.SelectionBuilder.Field("name", Scalar())
  }

  type ScanConnection

  object ScanConnection {

    /** A list of edges.
      */
    def edges[A](innerSelection: SelectionBuilder[ScanEdge, A]): SelectionBuilder[ScanConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](innerSelection: SelectionBuilder[Scan, A]): SelectionBuilder[ScanConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[ScanConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  }

  type ScanEdge

  object ScanEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[ScanEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](innerSelection: SelectionBuilder[Scan, A]): SelectionBuilder[ScanEdge, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
  }

  type ScanExecutionPolicy

  object ScanExecutionPolicy {

    /** Description of the policy.
      */
    def description: SelectionBuilder[ScanExecutionPolicy, String] = _root_.caliban.client.SelectionBuilder.Field("description", Scalar())

    /** Indicates whether this policy is enabled.
      */
    def enabled: SelectionBuilder[ScanExecutionPolicy, Boolean] = _root_.caliban.client.SelectionBuilder.Field("enabled", Scalar())

    /** Name of the policy.
      */
    def name: SelectionBuilder[ScanExecutionPolicy, String] = _root_.caliban.client.SelectionBuilder.Field("name", Scalar())

    /** Timestamp of when the policy YAML was last updated.
      */
    def updatedAt: SelectionBuilder[ScanExecutionPolicy, Time] = _root_.caliban.client.SelectionBuilder.Field("updatedAt", Scalar())

    /** YAML definition of the policy.
      */
    def yaml: SelectionBuilder[ScanExecutionPolicy, String] = _root_.caliban.client.SelectionBuilder.Field("yaml", Scalar())
  }

  type ScanExecutionPolicyCommitPayload

  object ScanExecutionPolicyCommitPayload {

    /** Name of the branch to which the policy changes are committed.
      */
    def branch: SelectionBuilder[ScanExecutionPolicyCommitPayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("branch", OptionOf(Scalar()))

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[ScanExecutionPolicyCommitPayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[ScanExecutionPolicyCommitPayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))
  }

  type ScanExecutionPolicyConnection

  object ScanExecutionPolicyConnection {

    /** A list of edges.
      */
    def edges[A](
      innerSelection: SelectionBuilder[ScanExecutionPolicyEdge, A]
    ): SelectionBuilder[ScanExecutionPolicyConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](
      innerSelection: SelectionBuilder[ScanExecutionPolicy, A]
    ): SelectionBuilder[ScanExecutionPolicyConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[ScanExecutionPolicyConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  }

  type ScanExecutionPolicyEdge

  object ScanExecutionPolicyEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[ScanExecutionPolicyEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](innerSelection: SelectionBuilder[ScanExecutionPolicy, A]): SelectionBuilder[ScanExecutionPolicyEdge, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
  }

  type ScannedResource

  object ScannedResource {

    /** The HTTP request method used to access the URL.
      */
    def requestMethod: SelectionBuilder[ScannedResource, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("requestMethod", OptionOf(Scalar()))

    /** The URL scanned by the scanner.
      */
    def url: SelectionBuilder[ScannedResource, Option[String]] = _root_.caliban.client.SelectionBuilder.Field("url", OptionOf(Scalar()))
  }

  type ScannedResourceConnection

  object ScannedResourceConnection {

    /** A list of edges.
      */
    def edges[A](
      innerSelection: SelectionBuilder[ScannedResourceEdge, A]
    ): SelectionBuilder[ScannedResourceConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](
      innerSelection: SelectionBuilder[ScannedResource, A]
    ): SelectionBuilder[ScannedResourceConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[ScannedResourceConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  }

  type ScannedResourceEdge

  object ScannedResourceEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[ScannedResourceEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](innerSelection: SelectionBuilder[ScannedResource, A]): SelectionBuilder[ScannedResourceEdge, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
  }

  type SecurityPolicyProjectAssignPayload

  object SecurityPolicyProjectAssignPayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[SecurityPolicyProjectAssignPayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[SecurityPolicyProjectAssignPayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))
  }

  type SecurityPolicyProjectCreatePayload

  object SecurityPolicyProjectCreatePayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[SecurityPolicyProjectCreatePayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[SecurityPolicyProjectCreatePayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** Security Policy Project that was created.
      */
    def project[A](innerSelection: SelectionBuilder[Project, A]): SelectionBuilder[SecurityPolicyProjectCreatePayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("project", OptionOf(Obj(innerSelection)))
  }

  type SecurityReportSummary

  object SecurityReportSummary {

    /** Aggregated counts for the `api_fuzzing` scan
      */
    def apiFuzzing[A](
      innerSelection: SelectionBuilder[SecurityReportSummarySection, A]
    ): SelectionBuilder[SecurityReportSummary, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("apiFuzzing", OptionOf(Obj(innerSelection)))

    /** Aggregated counts for the `cluster_image_scanning` scan
      */
    def clusterImageScanning[A](
      innerSelection: SelectionBuilder[SecurityReportSummarySection, A]
    ): SelectionBuilder[SecurityReportSummary, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("clusterImageScanning", OptionOf(Obj(innerSelection)))

    /** Aggregated counts for the `container_scanning` scan
      */
    def containerScanning[A](
      innerSelection: SelectionBuilder[SecurityReportSummarySection, A]
    ): SelectionBuilder[SecurityReportSummary, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("containerScanning", OptionOf(Obj(innerSelection)))

    /** Aggregated counts for the `coverage_fuzzing` scan
      */
    def coverageFuzzing[A](
      innerSelection: SelectionBuilder[SecurityReportSummarySection, A]
    ): SelectionBuilder[SecurityReportSummary, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("coverageFuzzing", OptionOf(Obj(innerSelection)))

    /** Aggregated counts for the `dast` scan
      */
    def dast[A](innerSelection: SelectionBuilder[SecurityReportSummarySection, A]): SelectionBuilder[SecurityReportSummary, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("dast", OptionOf(Obj(innerSelection)))

    /** Aggregated counts for the `dependency_scanning` scan
      */
    def dependencyScanning[A](
      innerSelection: SelectionBuilder[SecurityReportSummarySection, A]
    ): SelectionBuilder[SecurityReportSummary, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("dependencyScanning", OptionOf(Obj(innerSelection)))

    /** Aggregated counts for the `sast` scan
      */
    def sast[A](innerSelection: SelectionBuilder[SecurityReportSummarySection, A]): SelectionBuilder[SecurityReportSummary, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("sast", OptionOf(Obj(innerSelection)))

    /** Aggregated counts for the `secret_detection` scan
      */
    def secretDetection[A](
      innerSelection: SelectionBuilder[SecurityReportSummarySection, A]
    ): SelectionBuilder[SecurityReportSummary, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("secretDetection", OptionOf(Obj(innerSelection)))

  }

  type SecurityReportSummarySection

  object SecurityReportSummarySection {

    /** A list of the first 20 scanned resources.
      */
    def scannedResources[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[ScannedResourceConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[SecurityReportSummarySection, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "scannedResources",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** Total number of scanned resources.
      */
    def scannedResourcesCount: SelectionBuilder[SecurityReportSummarySection, Option[Int]] =
      _root_.caliban.client.SelectionBuilder.Field("scannedResourcesCount", OptionOf(Scalar()))

    /** Path to download all the scanned resources in CSV format.
      */
    def scannedResourcesCsvPath: SelectionBuilder[SecurityReportSummarySection, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("scannedResourcesCsvPath", OptionOf(Scalar()))

    /** List of security scans ran for the type.
      */
    def scans[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[ScanConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[SecurityReportSummarySection, A] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "scans",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** Total number of vulnerabilities.
      */
    def vulnerabilitiesCount: SelectionBuilder[SecurityReportSummarySection, Option[Int]] =
      _root_.caliban.client.SelectionBuilder.Field("vulnerabilitiesCount", OptionOf(Scalar()))
  }

  type SecurityScanners

  object SecurityScanners {

    /** List of analyzers which are available for the project.
      */
    def available: SelectionBuilder[SecurityScanners, Option[List[SecurityScannerType]]] =
      _root_.caliban.client.SelectionBuilder.Field("available", OptionOf(ListOf(Scalar())))

    /** List of analyzers which are enabled for the project.
      */
    def enabled: SelectionBuilder[SecurityScanners, Option[List[SecurityScannerType]]] =
      _root_.caliban.client.SelectionBuilder.Field("enabled", OptionOf(ListOf(Scalar())))

    /** List of analyzers which ran successfully in the latest pipeline.
      */
    def pipelineRun: SelectionBuilder[SecurityScanners, Option[List[SecurityScannerType]]] =
      _root_.caliban.client.SelectionBuilder.Field("pipelineRun", OptionOf(ListOf(Scalar())))
  }

  type SentryDetailedError

  object SentryDetailedError {

    /** Count of occurrences.
      */
    def count: SelectionBuilder[SentryDetailedError, Int] = _root_.caliban.client.SelectionBuilder.Field("count", Scalar())

    /** Culprit of the error.
      */
    def culprit: SelectionBuilder[SentryDetailedError, String] = _root_.caliban.client.SelectionBuilder.Field("culprit", Scalar())

    /** External Base URL of the Sentry Instance.
      */
    def externalBaseUrl: SelectionBuilder[SentryDetailedError, String] =
      _root_.caliban.client.SelectionBuilder.Field("externalBaseUrl", Scalar())

    /** External URL of the error.
      */
    def externalUrl: SelectionBuilder[SentryDetailedError, String] = _root_.caliban.client.SelectionBuilder.Field("externalUrl", Scalar())

    /** Commit the error was first seen.
      */
    def firstReleaseLastCommit: SelectionBuilder[SentryDetailedError, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("firstReleaseLastCommit", OptionOf(Scalar()))

    /** Release short version the error was first seen.
      */
    def firstReleaseShortVersion: SelectionBuilder[SentryDetailedError, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("firstReleaseShortVersion", OptionOf(Scalar()))

    /** Release version the error was first seen.
      */
    def firstReleaseVersion: SelectionBuilder[SentryDetailedError, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("firstReleaseVersion", OptionOf(Scalar()))

    /** Timestamp when the error was first seen.
      */
    def firstSeen: SelectionBuilder[SentryDetailedError, Time] = _root_.caliban.client.SelectionBuilder.Field("firstSeen", Scalar())

    /** Last 24hr stats of the error.
      */
    def frequency[A](innerSelection: SelectionBuilder[SentryErrorFrequency, A]): SelectionBuilder[SentryDetailedError, List[A]] =
      _root_.caliban.client.SelectionBuilder.Field("frequency", ListOf(Obj(innerSelection)))

    /** GitLab commit SHA attributed to the Error based on the release version.
      */
    def gitlabCommit: SelectionBuilder[SentryDetailedError, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("gitlabCommit", OptionOf(Scalar()))

    /** Path to the GitLab page for the GitLab commit attributed to the error.
      */
    def gitlabCommitPath: SelectionBuilder[SentryDetailedError, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("gitlabCommitPath", OptionOf(Scalar()))

    /** URL of GitLab Issue.
      */
    def gitlabIssuePath: SelectionBuilder[SentryDetailedError, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("gitlabIssuePath", OptionOf(Scalar()))

    /** ID (global ID) of the error.
      */
    def id: SelectionBuilder[SentryDetailedError, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())

    /** Commit the error was last seen.
      */
    def lastReleaseLastCommit: SelectionBuilder[SentryDetailedError, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("lastReleaseLastCommit", OptionOf(Scalar()))

    /** Release short version the error was last seen.
      */
    def lastReleaseShortVersion: SelectionBuilder[SentryDetailedError, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("lastReleaseShortVersion", OptionOf(Scalar()))

    /** Release version the error was last seen.
      */
    def lastReleaseVersion: SelectionBuilder[SentryDetailedError, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("lastReleaseVersion", OptionOf(Scalar()))

    /** Timestamp when the error was last seen.
      */
    def lastSeen: SelectionBuilder[SentryDetailedError, Time] = _root_.caliban.client.SelectionBuilder.Field("lastSeen", Scalar())

    /** Sentry metadata message of the error.
      */
    def message: SelectionBuilder[SentryDetailedError, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("message", OptionOf(Scalar()))

    /** ID (Sentry ID) of the error.
      */
    def sentryId: SelectionBuilder[SentryDetailedError, String] = _root_.caliban.client.SelectionBuilder.Field("sentryId", Scalar())

    /** ID of the project (Sentry project).
      */
    def sentryProjectId: SelectionBuilder[SentryDetailedError, String] =
      _root_.caliban.client.SelectionBuilder.Field("sentryProjectId", Scalar())

    /** Name of the project affected by the error.
      */
    def sentryProjectName: SelectionBuilder[SentryDetailedError, String] =
      _root_.caliban.client.SelectionBuilder.Field("sentryProjectName", Scalar())

    /** Slug of the project affected by the error.
      */
    def sentryProjectSlug: SelectionBuilder[SentryDetailedError, String] =
      _root_.caliban.client.SelectionBuilder.Field("sentryProjectSlug", Scalar())

    /** Short ID (Sentry ID) of the error.
      */
    def shortId: SelectionBuilder[SentryDetailedError, String] = _root_.caliban.client.SelectionBuilder.Field("shortId", Scalar())

    /** Status of the error.
      */
    def status: SelectionBuilder[SentryDetailedError, SentryErrorStatus] = _root_.caliban.client.SelectionBuilder.Field("status", Scalar())

    /** Tags associated with the Sentry Error.
      */
    def tags[A](innerSelection: SelectionBuilder[SentryErrorTags, A]): SelectionBuilder[SentryDetailedError, A] =
      _root_.caliban.client.SelectionBuilder.Field("tags", Obj(innerSelection))

    /** Title of the error.
      */
    def title: SelectionBuilder[SentryDetailedError, String] = _root_.caliban.client.SelectionBuilder.Field("title", Scalar())

    /** Type of the error.
      */
    def `type`: SelectionBuilder[SentryDetailedError, String] = _root_.caliban.client.SelectionBuilder.Field("type", Scalar())

    /** Count of users affected by the error.
      */
    def userCount: SelectionBuilder[SentryDetailedError, Int] = _root_.caliban.client.SelectionBuilder.Field("userCount", Scalar())
  }

  type SentryError

  object SentryError {

    /** Count of occurrences.
      */
    def count: SelectionBuilder[SentryError, Int] = _root_.caliban.client.SelectionBuilder.Field("count", Scalar())

    /** Culprit of the error.
      */
    def culprit: SelectionBuilder[SentryError, String] = _root_.caliban.client.SelectionBuilder.Field("culprit", Scalar())

    /** External URL of the error.
      */
    def externalUrl: SelectionBuilder[SentryError, String] = _root_.caliban.client.SelectionBuilder.Field("externalUrl", Scalar())

    /** Timestamp when the error was first seen.
      */
    def firstSeen: SelectionBuilder[SentryError, Time] = _root_.caliban.client.SelectionBuilder.Field("firstSeen", Scalar())

    /** Last 24hr stats of the error.
      */
    def frequency[A](innerSelection: SelectionBuilder[SentryErrorFrequency, A]): SelectionBuilder[SentryError, List[A]] =
      _root_.caliban.client.SelectionBuilder.Field("frequency", ListOf(Obj(innerSelection)))

    /** ID (global ID) of the error.
      */
    def id: SelectionBuilder[SentryError, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())

    /** Timestamp when the error was last seen.
      */
    def lastSeen: SelectionBuilder[SentryError, Time] = _root_.caliban.client.SelectionBuilder.Field("lastSeen", Scalar())

    /** Sentry metadata message of the error.
      */
    def message: SelectionBuilder[SentryError, Option[String]] = _root_.caliban.client.SelectionBuilder.Field("message", OptionOf(Scalar()))

    /** ID (Sentry ID) of the error.
      */
    def sentryId: SelectionBuilder[SentryError, String] = _root_.caliban.client.SelectionBuilder.Field("sentryId", Scalar())

    /** ID of the project (Sentry project).
      */
    def sentryProjectId: SelectionBuilder[SentryError, String] = _root_.caliban.client.SelectionBuilder.Field("sentryProjectId", Scalar())

    /** Name of the project affected by the error.
      */
    def sentryProjectName: SelectionBuilder[SentryError, String] =
      _root_.caliban.client.SelectionBuilder.Field("sentryProjectName", Scalar())

    /** Slug of the project affected by the error.
      */
    def sentryProjectSlug: SelectionBuilder[SentryError, String] =
      _root_.caliban.client.SelectionBuilder.Field("sentryProjectSlug", Scalar())

    /** Short ID (Sentry ID) of the error.
      */
    def shortId: SelectionBuilder[SentryError, String] = _root_.caliban.client.SelectionBuilder.Field("shortId", Scalar())

    /** Status of the error.
      */
    def status: SelectionBuilder[SentryError, SentryErrorStatus] = _root_.caliban.client.SelectionBuilder.Field("status", Scalar())

    /** Title of the error.
      */
    def title: SelectionBuilder[SentryError, String] = _root_.caliban.client.SelectionBuilder.Field("title", Scalar())

    /** Type of the error.
      */
    def `type`: SelectionBuilder[SentryError, String] = _root_.caliban.client.SelectionBuilder.Field("type", Scalar())

    /** Count of users affected by the error.
      */
    def userCount: SelectionBuilder[SentryError, Int] = _root_.caliban.client.SelectionBuilder.Field("userCount", Scalar())
  }

  type SentryErrorCollection

  object SentryErrorCollection {

    /** Detailed version of a Sentry error on the project.
      */
    def detailedError[A](
      id: GitlabErrorTrackingDetailedErrorID
    )(
      innerSelection: SelectionBuilder[SentryDetailedError, A]
    )(
      implicit encoder0: ArgEncoder[GitlabErrorTrackingDetailedErrorID]
    ): SelectionBuilder[SentryErrorCollection, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "detailedError",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("id", id, "GitlabErrorTrackingDetailedErrorID!")(encoder0))
      )

    /** Stack Trace of Sentry Error.
      */
    def errorStackTrace[A](
      id: GitlabErrorTrackingDetailedErrorID
    )(
      innerSelection: SelectionBuilder[SentryErrorStackTrace, A]
    )(
      implicit encoder0: ArgEncoder[GitlabErrorTrackingDetailedErrorID]
    ): SelectionBuilder[SentryErrorCollection, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "errorStackTrace",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("id", id, "GitlabErrorTrackingDetailedErrorID!")(encoder0))
      )

    /** Collection of Sentry Errors.
      */
    def errors[A](
      searchTerm: Option[String] = None,
      sort: Option[String] = None,
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[SentryErrorConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[String]],
      encoder3: ArgEncoder[Option[String]],
      encoder4: ArgEncoder[Option[Int]],
      encoder5: ArgEncoder[Option[Int]]
    ): SelectionBuilder[SentryErrorCollection, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "errors",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("searchTerm", searchTerm, "String")(encoder0),
          Argument("sort", sort, "String")(encoder1),
          Argument("after", after, "String")(encoder2),
          Argument("before", before, "String")(encoder3),
          Argument("first", first, "Int")(encoder4),
          Argument("last", last, "Int")(encoder5)
        )
      )

    /** External URL for Sentry.
      */
    def externalUrl: SelectionBuilder[SentryErrorCollection, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("externalUrl", OptionOf(Scalar()))
  }

  type SentryErrorConnection

  object SentryErrorConnection {

    /** A list of edges.
      */
    def edges[A](innerSelection: SelectionBuilder[SentryErrorEdge, A]): SelectionBuilder[SentryErrorConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](innerSelection: SelectionBuilder[SentryError, A]): SelectionBuilder[SentryErrorConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[SentryErrorConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  }

  type SentryErrorEdge

  object SentryErrorEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[SentryErrorEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](innerSelection: SelectionBuilder[SentryError, A]): SelectionBuilder[SentryErrorEdge, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
  }

  type SentryErrorFrequency

  object SentryErrorFrequency {

    /** Count of errors received since the previously recorded time.
      */
    def count: SelectionBuilder[SentryErrorFrequency, Int] = _root_.caliban.client.SelectionBuilder.Field("count", Scalar())

    /** Time the error frequency stats were recorded.
      */
    def time: SelectionBuilder[SentryErrorFrequency, Time] = _root_.caliban.client.SelectionBuilder.Field("time", Scalar())
  }

  type SentryErrorStackTrace

  object SentryErrorStackTrace {

    /** Time the stack trace was received by Sentry.
      */
    def dateReceived: SelectionBuilder[SentryErrorStackTrace, String] =
      _root_.caliban.client.SelectionBuilder.Field("dateReceived", Scalar())

    /** ID of the Sentry error.
      */
    def issueId: SelectionBuilder[SentryErrorStackTrace, String] = _root_.caliban.client.SelectionBuilder.Field("issueId", Scalar())

    /** Stack trace entries for the Sentry error.
      */
    def stackTraceEntries[A](
      innerSelection: SelectionBuilder[SentryErrorStackTraceEntry, A]
    ): SelectionBuilder[SentryErrorStackTrace, List[A]] =
      _root_.caliban.client.SelectionBuilder.Field("stackTraceEntries", ListOf(Obj(innerSelection)))

  }

  type SentryErrorStackTraceContext

  object SentryErrorStackTraceContext {

    /** Code number of the context.
      */
    def code: SelectionBuilder[SentryErrorStackTraceContext, String] = _root_.caliban.client.SelectionBuilder.Field("code", Scalar())

    /** Line number of the context.
      */
    def line: SelectionBuilder[SentryErrorStackTraceContext, Int] = _root_.caliban.client.SelectionBuilder.Field("line", Scalar())
  }

  type SentryErrorStackTraceEntry

  object SentryErrorStackTraceEntry {

    /** Function in which the Sentry error occurred.
      */
    def col: SelectionBuilder[SentryErrorStackTraceEntry, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("col", OptionOf(Scalar()))

    /** File in which the Sentry error occurred.
      */
    def fileName: SelectionBuilder[SentryErrorStackTraceEntry, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("fileName", OptionOf(Scalar()))

    /** Function in which the Sentry error occurred.
      */
    def function: SelectionBuilder[SentryErrorStackTraceEntry, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("function", OptionOf(Scalar()))

    /** Function in which the Sentry error occurred.
      */
    def line: SelectionBuilder[SentryErrorStackTraceEntry, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("line", OptionOf(Scalar()))

    /** Context of the Sentry error.
      */
    def traceContext[A](
      innerSelection: SelectionBuilder[SentryErrorStackTraceContext, A]
    ): SelectionBuilder[SentryErrorStackTraceEntry, Option[List[A]]] =
      _root_.caliban.client.SelectionBuilder.Field("traceContext", OptionOf(ListOf(Obj(innerSelection))))

  }

  type SentryErrorTags

  object SentryErrorTags {

    /** Severity level of the Sentry Error.
      */
    def level: SelectionBuilder[SentryErrorTags, Option[String]] = _root_.caliban.client.SelectionBuilder.Field("level", OptionOf(Scalar()))

    /** Logger of the Sentry Error.
      */
    def logger: SelectionBuilder[SentryErrorTags, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("logger", OptionOf(Scalar()))
  }

  type ServiceConnection

  object ServiceConnection {

    /** A list of edges.
      */
    def edges[A](innerSelection: SelectionBuilder[ServiceEdge, A]): SelectionBuilder[ServiceConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](
      onBaseService: Option[SelectionBuilder[BaseService, A]] = None,
      onJiraService: Option[SelectionBuilder[JiraService, A]] = None
    ): SelectionBuilder[ServiceConnection, Option[List[Option[A]]]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "nodes",
        OptionOf(ListOf(OptionOf(ChoiceOf(Map("BaseService" -> onBaseService, "JiraService" -> onJiraService).collect { case (k, Some(v)) =>
          k -> Obj(v)
        }))))
      )

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[ServiceConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  }

  type ServiceEdge

  object ServiceEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[ServiceEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](
      onBaseService: Option[SelectionBuilder[BaseService, A]] = None,
      onJiraService: Option[SelectionBuilder[JiraService, A]] = None
    ): SelectionBuilder[ServiceEdge, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "node",
        OptionOf(ChoiceOf(Map("BaseService" -> onBaseService, "JiraService" -> onJiraService).collect { case (k, Some(v)) => k -> Obj(v) }))
      )

  }

  type Snippet

  object Snippet {

    /** The owner of the snippet.
      */
    def author[A](innerSelection: SelectionBuilder[UserCore, A]): SelectionBuilder[Snippet, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("author", OptionOf(Obj(innerSelection)))

    /** Snippet blobs.
      */
    def blobs[A](
      paths: Option[List[String]] = None,
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[SnippetBlobConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[List[String]]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[String]],
      encoder3: ArgEncoder[Option[Int]],
      encoder4: ArgEncoder[Option[Int]]
    ): SelectionBuilder[Snippet, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "blobs",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("paths", paths, "[String!]")(encoder0),
          Argument("after", after, "String")(encoder1),
          Argument("before", before, "String")(encoder2),
          Argument("first", first, "Int")(encoder3),
          Argument("last", last, "Int")(encoder4)
        )
      )

    /** Timestamp this snippet was created.
      */
    def createdAt: SelectionBuilder[Snippet, Time] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())

    /** Description of the snippet.
      */
    def description: SelectionBuilder[Snippet, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("description", OptionOf(Scalar()))

    /** The GitLab Flavored Markdown rendering of `description`
      */
    def descriptionHtml: SelectionBuilder[Snippet, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("descriptionHtml", OptionOf(Scalar()))

    /** All discussions on this noteable.
      */
    def discussions[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[DiscussionConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[Snippet, A] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "discussions",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** File Name of the snippet.
      */
    def fileName: SelectionBuilder[Snippet, Option[String]] = _root_.caliban.client.SelectionBuilder.Field("fileName", OptionOf(Scalar()))

    /** HTTP URL to the snippet repository.
      */
    def httpUrlToRepo: SelectionBuilder[Snippet, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("httpUrlToRepo", OptionOf(Scalar()))

    /** ID of the snippet.
      */
    def id: SelectionBuilder[Snippet, SnippetID] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())

    /** All notes on this noteable.
      */
    def notes[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[NoteConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[Snippet, A] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "notes",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** The project the snippet is associated with.
      */
    def project[A](innerSelection: SelectionBuilder[Project, A]): SelectionBuilder[Snippet, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("project", OptionOf(Obj(innerSelection)))

    /** Raw URL of the snippet.
      */
    def rawUrl: SelectionBuilder[Snippet, String] = _root_.caliban.client.SelectionBuilder.Field("rawUrl", Scalar())

    /** SSH URL to the snippet repository.
      */
    def sshUrlToRepo: SelectionBuilder[Snippet, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("sshUrlToRepo", OptionOf(Scalar()))

    /** Title of the snippet.
      */
    def title: SelectionBuilder[Snippet, String] = _root_.caliban.client.SelectionBuilder.Field("title", Scalar())

    /** Timestamp this snippet was updated.
      */
    def updatedAt: SelectionBuilder[Snippet, Time] = _root_.caliban.client.SelectionBuilder.Field("updatedAt", Scalar())

    /** Permissions for the current user on the resource
      */
    def userPermissions[A](innerSelection: SelectionBuilder[SnippetPermissions, A]): SelectionBuilder[Snippet, A] =
      _root_.caliban.client.SelectionBuilder.Field("userPermissions", Obj(innerSelection))

    /** Visibility Level of the snippet.
      */
    def visibilityLevel: SelectionBuilder[Snippet, VisibilityLevelsEnum] =
      _root_.caliban.client.SelectionBuilder.Field("visibilityLevel", Scalar())

    /** Web URL of the snippet.
      */
    def webUrl: SelectionBuilder[Snippet, String] = _root_.caliban.client.SelectionBuilder.Field("webUrl", Scalar())
  }

  type SnippetBlob

  object SnippetBlob {

    /** Shows whether the blob is binary.
      */
    def binary: SelectionBuilder[SnippetBlob, Boolean] = _root_.caliban.client.SelectionBuilder.Field("binary", Scalar())

    /** Blob external storage.
      */
    def externalStorage: SelectionBuilder[SnippetBlob, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("externalStorage", OptionOf(Scalar()))

    /** Blob mode.
      */
    def mode: SelectionBuilder[SnippetBlob, Option[String]] = _root_.caliban.client.SelectionBuilder.Field("mode", OptionOf(Scalar()))

    /** Blob name.
      */
    def name: SelectionBuilder[SnippetBlob, Option[String]] = _root_.caliban.client.SelectionBuilder.Field("name", OptionOf(Scalar()))

    /** Blob path.
      */
    def path: SelectionBuilder[SnippetBlob, Option[String]] = _root_.caliban.client.SelectionBuilder.Field("path", OptionOf(Scalar()))

    /** Blob plain highlighted data.
      */
    def plainData: SelectionBuilder[SnippetBlob, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("plainData", OptionOf(Scalar()))

    /** Blob raw content endpoint path.
      */
    def rawPath: SelectionBuilder[SnippetBlob, String] = _root_.caliban.client.SelectionBuilder.Field("rawPath", Scalar())

    /** The raw content of the blob, if the blob is text data.
      */
    def rawPlainData: SelectionBuilder[SnippetBlob, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("rawPlainData", OptionOf(Scalar()))

    /** Shows whether the blob is rendered as text.
      */
    def renderedAsText: SelectionBuilder[SnippetBlob, Boolean] = _root_.caliban.client.SelectionBuilder.Field("renderedAsText", Scalar())

    /** Blob highlighted data.
      */
    def richData: SelectionBuilder[SnippetBlob, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("richData", OptionOf(Scalar()))

    /** Blob content rich viewer.
      */
    def richViewer[A](innerSelection: SelectionBuilder[SnippetBlobViewer, A]): SelectionBuilder[SnippetBlob, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("richViewer", OptionOf(Obj(innerSelection)))

    /** Blob content simple viewer.
      */
    def simpleViewer[A](innerSelection: SelectionBuilder[SnippetBlobViewer, A]): SelectionBuilder[SnippetBlob, A] =
      _root_.caliban.client.SelectionBuilder.Field("simpleViewer", Obj(innerSelection))

    /** Blob size.
      */
    def size: SelectionBuilder[SnippetBlob, Int] = _root_.caliban.client.SelectionBuilder.Field("size", Scalar())
  }

  type SnippetBlobConnection

  object SnippetBlobConnection {

    /** A list of edges.
      */
    def edges[A](innerSelection: SelectionBuilder[SnippetBlobEdge, A]): SelectionBuilder[SnippetBlobConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](innerSelection: SelectionBuilder[SnippetBlob, A]): SelectionBuilder[SnippetBlobConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[SnippetBlobConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  }

  type SnippetBlobEdge

  object SnippetBlobEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[SnippetBlobEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](innerSelection: SelectionBuilder[SnippetBlob, A]): SelectionBuilder[SnippetBlobEdge, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
  }

  type SnippetBlobViewer

  object SnippetBlobViewer {

    /** Shows whether the blob should be displayed collapsed.
      */
    def collapsed: SelectionBuilder[SnippetBlobViewer, Boolean] = _root_.caliban.client.SelectionBuilder.Field("collapsed", Scalar())

    /** Content file type.
      */
    def fileType: SelectionBuilder[SnippetBlobViewer, String] = _root_.caliban.client.SelectionBuilder.Field("fileType", Scalar())

    /** Shows whether the blob content is loaded asynchronously.
      */
    def loadAsync: SelectionBuilder[SnippetBlobViewer, Boolean] = _root_.caliban.client.SelectionBuilder.Field("loadAsync", Scalar())

    /** Loading partial name.
      */
    def loadingPartialName: SelectionBuilder[SnippetBlobViewer, String] =
      _root_.caliban.client.SelectionBuilder.Field("loadingPartialName", Scalar())

    /** Error rendering the blob content.
      */
    def renderError: SelectionBuilder[SnippetBlobViewer, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("renderError", OptionOf(Scalar()))

    /** Shows whether the blob is too large to be displayed.
      */
    def tooLarge: SelectionBuilder[SnippetBlobViewer, Boolean] = _root_.caliban.client.SelectionBuilder.Field("tooLarge", Scalar())

    /** Type of blob viewer.
      */
    def `type`: SelectionBuilder[SnippetBlobViewer, BlobViewersType] = _root_.caliban.client.SelectionBuilder.Field("type", Scalar())
  }

  type SnippetConnection

  object SnippetConnection {

    /** A list of edges.
      */
    def edges[A](innerSelection: SelectionBuilder[SnippetEdge, A]): SelectionBuilder[SnippetConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](innerSelection: SelectionBuilder[Snippet, A]): SelectionBuilder[SnippetConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[SnippetConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  }

  type SnippetEdge

  object SnippetEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[SnippetEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](innerSelection: SelectionBuilder[Snippet, A]): SelectionBuilder[SnippetEdge, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
  }

  type SnippetPermissions

  object SnippetPermissions {

    /** Indicates the user can perform `admin_snippet` on this resource
      */
    def adminSnippet: SelectionBuilder[SnippetPermissions, Boolean] = _root_.caliban.client.SelectionBuilder.Field("adminSnippet", Scalar())

    /** Indicates the user can perform `award_emoji` on this resource
      */
    def awardEmoji: SelectionBuilder[SnippetPermissions, Boolean] = _root_.caliban.client.SelectionBuilder.Field("awardEmoji", Scalar())

    /** Indicates the user can perform `create_note` on this resource
      */
    def createNote: SelectionBuilder[SnippetPermissions, Boolean] = _root_.caliban.client.SelectionBuilder.Field("createNote", Scalar())

    /** Indicates the user can perform `read_snippet` on this resource
      */
    def readSnippet: SelectionBuilder[SnippetPermissions, Boolean] = _root_.caliban.client.SelectionBuilder.Field("readSnippet", Scalar())

    /** Indicates the user can perform `report_snippet` on this resource
      */
    def reportSnippet: SelectionBuilder[SnippetPermissions, Boolean] =
      _root_.caliban.client.SelectionBuilder.Field("reportSnippet", Scalar())

    /** Indicates the user can perform `update_snippet` on this resource
      */
    def updateSnippet: SelectionBuilder[SnippetPermissions, Boolean] =
      _root_.caliban.client.SelectionBuilder.Field("updateSnippet", Scalar())
  }

  type SnippetRepositoryRegistry

  object SnippetRepositoryRegistry {

    /** Timestamp when the SnippetRepositoryRegistry was created
      */
    def createdAt: SelectionBuilder[SnippetRepositoryRegistry, Option[Time]] =
      _root_.caliban.client.SelectionBuilder.Field("createdAt", OptionOf(Scalar()))

    /** ID of the SnippetRepositoryRegistry
      */
    def id: SelectionBuilder[SnippetRepositoryRegistry, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())

    /** Error message during sync of the SnippetRepositoryRegistry
      */
    def lastSyncFailure: SelectionBuilder[SnippetRepositoryRegistry, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("lastSyncFailure", OptionOf(Scalar()))

    /** Timestamp of the most recent successful sync of the SnippetRepositoryRegistry
      */
    def lastSyncedAt: SelectionBuilder[SnippetRepositoryRegistry, Option[Time]] =
      _root_.caliban.client.SelectionBuilder.Field("lastSyncedAt", OptionOf(Scalar()))

    /** Timestamp after which the SnippetRepositoryRegistry should be resynced
      */
    def retryAt: SelectionBuilder[SnippetRepositoryRegistry, Option[Time]] =
      _root_.caliban.client.SelectionBuilder.Field("retryAt", OptionOf(Scalar()))

    /** Number of consecutive failed sync attempts of the SnippetRepositoryRegistry
      */
    def retryCount: SelectionBuilder[SnippetRepositoryRegistry, Option[Int]] =
      _root_.caliban.client.SelectionBuilder.Field("retryCount", OptionOf(Scalar()))

    /** ID of the Snippet Repository.
      */
    def snippetRepositoryId: SelectionBuilder[SnippetRepositoryRegistry, String] =
      _root_.caliban.client.SelectionBuilder.Field("snippetRepositoryId", Scalar())

    /** Sync state of the SnippetRepositoryRegistry
      */
    def state: SelectionBuilder[SnippetRepositoryRegistry, Option[RegistryState]] =
      _root_.caliban.client.SelectionBuilder.Field("state", OptionOf(Scalar()))
  }

  type SnippetRepositoryRegistryConnection

  object SnippetRepositoryRegistryConnection {

    /** A list of edges.
      */
    def edges[A](
      innerSelection: SelectionBuilder[SnippetRepositoryRegistryEdge, A]
    ): SelectionBuilder[SnippetRepositoryRegistryConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](
      innerSelection: SelectionBuilder[SnippetRepositoryRegistry, A]
    ): SelectionBuilder[SnippetRepositoryRegistryConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[SnippetRepositoryRegistryConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  }

  type SnippetRepositoryRegistryEdge

  object SnippetRepositoryRegistryEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[SnippetRepositoryRegistryEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](
      innerSelection: SelectionBuilder[SnippetRepositoryRegistry, A]
    ): SelectionBuilder[SnippetRepositoryRegistryEdge, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))

  }

  type StatusAction

  object StatusAction {

    /** Title for the button, for example: Retry this job.
      */
    def buttonTitle: SelectionBuilder[StatusAction, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("buttonTitle", OptionOf(Scalar()))

    /** Icon used in the action button.
      */
    def icon: SelectionBuilder[StatusAction, Option[String]] = _root_.caliban.client.SelectionBuilder.Field("icon", OptionOf(Scalar()))

    /** Method for the action, for example: :post.
      */
    def method: SelectionBuilder[StatusAction, Option[String]] = _root_.caliban.client.SelectionBuilder.Field("method", OptionOf(Scalar()))

    /** Path for the action.
      */
    def path: SelectionBuilder[StatusAction, Option[String]] = _root_.caliban.client.SelectionBuilder.Field("path", OptionOf(Scalar()))

    /** Title for the action, for example: Retry.
      */
    def title: SelectionBuilder[StatusAction, Option[String]] = _root_.caliban.client.SelectionBuilder.Field("title", OptionOf(Scalar()))
  }

  type Submodule

  object Submodule {

    /** Flat path of the entry.
      */
    def flatPath: SelectionBuilder[Submodule, String] = _root_.caliban.client.SelectionBuilder.Field("flatPath", Scalar())

    /** ID of the entry.
      */
    def id: SelectionBuilder[Submodule, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())

    /** Name of the entry.
      */
    def name: SelectionBuilder[Submodule, String] = _root_.caliban.client.SelectionBuilder.Field("name", Scalar())

    /** Path of the entry.
      */
    def path: SelectionBuilder[Submodule, String] = _root_.caliban.client.SelectionBuilder.Field("path", Scalar())

    /** Last commit SHA for the entry.
      */
    def sha: SelectionBuilder[Submodule, String] = _root_.caliban.client.SelectionBuilder.Field("sha", Scalar())

    /** Tree URL for the sub-module.
      */
    def treeUrl: SelectionBuilder[Submodule, Option[String]] = _root_.caliban.client.SelectionBuilder.Field("treeUrl", OptionOf(Scalar()))

    /** Type of tree entry.
      */
    def `type`: SelectionBuilder[Submodule, EntryType] = _root_.caliban.client.SelectionBuilder.Field("type", Scalar())

    /** Web URL for the sub-module.
      */
    def webUrl: SelectionBuilder[Submodule, Option[String]] = _root_.caliban.client.SelectionBuilder.Field("webUrl", OptionOf(Scalar()))
  }

  type SubmoduleConnection

  object SubmoduleConnection {

    /** A list of edges.
      */
    def edges[A](innerSelection: SelectionBuilder[SubmoduleEdge, A]): SelectionBuilder[SubmoduleConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](innerSelection: SelectionBuilder[Submodule, A]): SelectionBuilder[SubmoduleConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[SubmoduleConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  }

  type SubmoduleEdge

  object SubmoduleEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[SubmoduleEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](innerSelection: SelectionBuilder[Submodule, A]): SelectionBuilder[SubmoduleEdge, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
  }

  type TaskCompletionStatus

  object TaskCompletionStatus {

    /** Number of completed tasks.
      */
    def completedCount: SelectionBuilder[TaskCompletionStatus, Int] =
      _root_.caliban.client.SelectionBuilder.Field("completedCount", Scalar())

    /** Number of total tasks.
      */
    def count: SelectionBuilder[TaskCompletionStatus, Int] = _root_.caliban.client.SelectionBuilder.Field("count", Scalar())
  }

  type TerraformState

  object TerraformState {

    /** Timestamp the Terraform state was created.
      */
    def createdAt: SelectionBuilder[TerraformState, Time] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())

    /** ID of the Terraform state.
      */
    def id: SelectionBuilder[TerraformState, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())

    /** The latest version of the Terraform state.
      */
    def latestVersion[A](innerSelection: SelectionBuilder[TerraformStateVersion, A]): SelectionBuilder[TerraformState, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("latestVersion", OptionOf(Obj(innerSelection)))

    /** Timestamp the Terraform state was locked.
      */
    def lockedAt: SelectionBuilder[TerraformState, Option[Time]] =
      _root_.caliban.client.SelectionBuilder.Field("lockedAt", OptionOf(Scalar()))

    /** The user currently holding a lock on the Terraform state.
      */
    def lockedByUser[A](innerSelection: SelectionBuilder[UserCore, A]): SelectionBuilder[TerraformState, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("lockedByUser", OptionOf(Obj(innerSelection)))

    /** Name of the Terraform state.
      */
    def name: SelectionBuilder[TerraformState, String] = _root_.caliban.client.SelectionBuilder.Field("name", Scalar())

    /** Timestamp the Terraform state was updated.
      */
    def updatedAt: SelectionBuilder[TerraformState, Time] = _root_.caliban.client.SelectionBuilder.Field("updatedAt", Scalar())
  }

  type TerraformStateConnection

  object TerraformStateConnection {

    /** Total count of collection.
      */
    def count: SelectionBuilder[TerraformStateConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("count", Scalar())

    /** A list of edges.
      */
    def edges[A](
      innerSelection: SelectionBuilder[TerraformStateEdge, A]
    ): SelectionBuilder[TerraformStateConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](innerSelection: SelectionBuilder[TerraformState, A]): SelectionBuilder[TerraformStateConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[TerraformStateConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  }

  type TerraformStateDeletePayload

  object TerraformStateDeletePayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[TerraformStateDeletePayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[TerraformStateDeletePayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))
  }

  type TerraformStateEdge

  object TerraformStateEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[TerraformStateEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](innerSelection: SelectionBuilder[TerraformState, A]): SelectionBuilder[TerraformStateEdge, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
  }

  type TerraformStateLockPayload

  object TerraformStateLockPayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[TerraformStateLockPayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[TerraformStateLockPayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))
  }

  type TerraformStateUnlockPayload

  object TerraformStateUnlockPayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[TerraformStateUnlockPayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[TerraformStateUnlockPayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))
  }

  type TerraformStateVersion

  object TerraformStateVersion {

    /** Timestamp the version was created.
      */
    def createdAt: SelectionBuilder[TerraformStateVersion, Time] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())

    /** The user that created this version.
      */
    def createdByUser[A](innerSelection: SelectionBuilder[UserCore, A]): SelectionBuilder[TerraformStateVersion, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("createdByUser", OptionOf(Obj(innerSelection)))

    /** URL for downloading the version's JSON file.
      */
    def downloadPath: SelectionBuilder[TerraformStateVersion, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("downloadPath", OptionOf(Scalar()))

    /** ID of the Terraform state version.
      */
    def id: SelectionBuilder[TerraformStateVersion, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())

    /** The job that created this version.
      */
    def job[A](innerSelection: SelectionBuilder[CiJob, A]): SelectionBuilder[TerraformStateVersion, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("job", OptionOf(Obj(innerSelection)))

    /** Serial number of the version.
      */
    def serial: SelectionBuilder[TerraformStateVersion, Option[Int]] =
      _root_.caliban.client.SelectionBuilder.Field("serial", OptionOf(Scalar()))

    /** Timestamp the version was updated.
      */
    def updatedAt: SelectionBuilder[TerraformStateVersion, Time] = _root_.caliban.client.SelectionBuilder.Field("updatedAt", Scalar())
  }

  type TerraformStateVersionRegistry

  object TerraformStateVersionRegistry {

    /** Timestamp when the TerraformStateVersionRegistry was created
      */
    def createdAt: SelectionBuilder[TerraformStateVersionRegistry, Option[Time]] =
      _root_.caliban.client.SelectionBuilder.Field("createdAt", OptionOf(Scalar()))

    /** ID of the TerraformStateVersionRegistry
      */
    def id: SelectionBuilder[TerraformStateVersionRegistry, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())

    /** Error message during sync of the TerraformStateVersionRegistry
      */
    def lastSyncFailure: SelectionBuilder[TerraformStateVersionRegistry, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("lastSyncFailure", OptionOf(Scalar()))

    /** Timestamp of the most recent successful sync of the TerraformStateVersionRegistry
      */
    def lastSyncedAt: SelectionBuilder[TerraformStateVersionRegistry, Option[Time]] =
      _root_.caliban.client.SelectionBuilder.Field("lastSyncedAt", OptionOf(Scalar()))

    /** Timestamp after which the TerraformStateVersionRegistry should be resynced
      */
    def retryAt: SelectionBuilder[TerraformStateVersionRegistry, Option[Time]] =
      _root_.caliban.client.SelectionBuilder.Field("retryAt", OptionOf(Scalar()))

    /** Number of consecutive failed sync attempts of the TerraformStateVersionRegistry
      */
    def retryCount: SelectionBuilder[TerraformStateVersionRegistry, Option[Int]] =
      _root_.caliban.client.SelectionBuilder.Field("retryCount", OptionOf(Scalar()))

    /** Sync state of the TerraformStateVersionRegistry
      */
    def state: SelectionBuilder[TerraformStateVersionRegistry, Option[RegistryState]] =
      _root_.caliban.client.SelectionBuilder.Field("state", OptionOf(Scalar()))

    /** ID of the terraform state version.
      */
    def terraformStateVersionId: SelectionBuilder[TerraformStateVersionRegistry, String] =
      _root_.caliban.client.SelectionBuilder.Field("terraformStateVersionId", Scalar())
  }

  type TerraformStateVersionRegistryConnection

  object TerraformStateVersionRegistryConnection {

    /** A list of edges.
      */
    def edges[A](
      innerSelection: SelectionBuilder[TerraformStateVersionRegistryEdge, A]
    ): SelectionBuilder[TerraformStateVersionRegistryConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](
      innerSelection: SelectionBuilder[TerraformStateVersionRegistry, A]
    ): SelectionBuilder[TerraformStateVersionRegistryConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[TerraformStateVersionRegistryConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  }

  type TerraformStateVersionRegistryEdge

  object TerraformStateVersionRegistryEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[TerraformStateVersionRegistryEdge, String] =
      _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](
      innerSelection: SelectionBuilder[TerraformStateVersionRegistry, A]
    ): SelectionBuilder[TerraformStateVersionRegistryEdge, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))

  }

  type TestCase

  object TestCase {

    /** URL of the test case attachment file.
      */
    def attachmentUrl: SelectionBuilder[TestCase, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("attachmentUrl", OptionOf(Scalar()))

    /** Classname of the test case.
      */
    def classname: SelectionBuilder[TestCase, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("classname", OptionOf(Scalar()))

    /** Test case execution time in seconds.
      */
    def executionTime: SelectionBuilder[TestCase, Option[Double]] =
      _root_.caliban.client.SelectionBuilder.Field("executionTime", OptionOf(Scalar()))

    /** Path to the file of the test case.
      */
    def file: SelectionBuilder[TestCase, Option[String]] = _root_.caliban.client.SelectionBuilder.Field("file", OptionOf(Scalar()))

    /** Name of the test case.
      */
    def name: SelectionBuilder[TestCase, Option[String]] = _root_.caliban.client.SelectionBuilder.Field("name", OptionOf(Scalar()))

    /** Recent failure history of the test case on the base branch.
      */
    def recentFailures[A](innerSelection: SelectionBuilder[RecentFailures, A]): SelectionBuilder[TestCase, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("recentFailures", OptionOf(Obj(innerSelection)))

    /** Stack trace of the test case.
      */
    def stackTrace: SelectionBuilder[TestCase, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("stackTrace", OptionOf(Scalar()))

    /** Status of the test case (error, failed, success, skipped).
      */
    def status: SelectionBuilder[TestCase, Option[TestCaseStatus]] =
      _root_.caliban.client.SelectionBuilder.Field("status", OptionOf(Scalar()))

    /** System output of the test case.
      */
    def systemOutput: SelectionBuilder[TestCase, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("systemOutput", OptionOf(Scalar()))
  }

  type TestCaseConnection

  object TestCaseConnection {

    /** Total count of collection.
      */
    def count: SelectionBuilder[TestCaseConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("count", Scalar())

    /** A list of edges.
      */
    def edges[A](innerSelection: SelectionBuilder[TestCaseEdge, A]): SelectionBuilder[TestCaseConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](innerSelection: SelectionBuilder[TestCase, A]): SelectionBuilder[TestCaseConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[TestCaseConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  }

  type TestCaseEdge

  object TestCaseEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[TestCaseEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](innerSelection: SelectionBuilder[TestCase, A]): SelectionBuilder[TestCaseEdge, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
  }

  type TestReport

  object TestReport {

    /** Author of the test report.
      */
    def author[A](innerSelection: SelectionBuilder[UserCore, A]): SelectionBuilder[TestReport, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("author", OptionOf(Obj(innerSelection)))

    /** Timestamp of when the test report was created.
      */
    def createdAt: SelectionBuilder[TestReport, Time] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())

    /** ID of the test report.
      */
    def id: SelectionBuilder[TestReport, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())

    /** State of the test report.
      */
    def state: SelectionBuilder[TestReport, TestReportState] = _root_.caliban.client.SelectionBuilder.Field("state", Scalar())
  }

  type TestReportConnection

  object TestReportConnection {

    /** A list of edges.
      */
    def edges[A](innerSelection: SelectionBuilder[TestReportEdge, A]): SelectionBuilder[TestReportConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](innerSelection: SelectionBuilder[TestReport, A]): SelectionBuilder[TestReportConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[TestReportConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  }

  type TestReportEdge

  object TestReportEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[TestReportEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](innerSelection: SelectionBuilder[TestReport, A]): SelectionBuilder[TestReportEdge, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
  }

  type TestReportSummary

  object TestReportSummary {

    /** Test suites belonging to a pipeline test report.
      */
    def testSuites[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[TestSuiteSummaryConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[TestReportSummary, A] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "testSuites",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** Total report statistics for a pipeline test report.
      */
    def total[A](innerSelection: SelectionBuilder[TestReportTotal, A]): SelectionBuilder[TestReportSummary, A] =
      _root_.caliban.client.SelectionBuilder.Field("total", Obj(innerSelection))
  }

  type TestReportTotal

  object TestReportTotal {

    /** Total number of the test cases.
      */
    def count: SelectionBuilder[TestReportTotal, Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("count", OptionOf(Scalar()))

    /** Total number of test cases that had an error.
      */
    def error: SelectionBuilder[TestReportTotal, Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("error", OptionOf(Scalar()))

    /** Total number of test cases that failed.
      */
    def failed: SelectionBuilder[TestReportTotal, Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("failed", OptionOf(Scalar()))

    /** Total number of test cases that were skipped.
      */
    def skipped: SelectionBuilder[TestReportTotal, Option[Int]] =
      _root_.caliban.client.SelectionBuilder.Field("skipped", OptionOf(Scalar()))

    /** Total number of test cases that succeeded.
      */
    def success: SelectionBuilder[TestReportTotal, Option[Int]] =
      _root_.caliban.client.SelectionBuilder.Field("success", OptionOf(Scalar()))

    /** Test suite error message.
      */
    def suiteError: SelectionBuilder[TestReportTotal, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("suiteError", OptionOf(Scalar()))

    /** Total duration of the tests.
      */
    def time: SelectionBuilder[TestReportTotal, Option[Double]] = _root_.caliban.client.SelectionBuilder.Field("time", OptionOf(Scalar()))
  }

  type TestSuite

  object TestSuite {

    /** Total number of test cases that had an error.
      */
    def errorCount: SelectionBuilder[TestSuite, Option[Int]] =
      _root_.caliban.client.SelectionBuilder.Field("errorCount", OptionOf(Scalar()))

    /** Total number of test cases that failed in the test suite.
      */
    def failedCount: SelectionBuilder[TestSuite, Option[Int]] =
      _root_.caliban.client.SelectionBuilder.Field("failedCount", OptionOf(Scalar()))

    /** Name of the test suite.
      */
    def name: SelectionBuilder[TestSuite, Option[String]] = _root_.caliban.client.SelectionBuilder.Field("name", OptionOf(Scalar()))

    /** Total number of test cases that were skipped in the test suite.
      */
    def skippedCount: SelectionBuilder[TestSuite, Option[Int]] =
      _root_.caliban.client.SelectionBuilder.Field("skippedCount", OptionOf(Scalar()))

    /** Total number of test cases that succeeded in the test suite.
      */
    def successCount: SelectionBuilder[TestSuite, Option[Int]] =
      _root_.caliban.client.SelectionBuilder.Field("successCount", OptionOf(Scalar()))

    /** Test suite error message.
      */
    def suiteError: SelectionBuilder[TestSuite, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("suiteError", OptionOf(Scalar()))

    /** Test cases in the test suite.
      */
    def testCases[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[TestCaseConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[TestSuite, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "testCases",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** Total number of the test cases in the test suite.
      */
    def totalCount: SelectionBuilder[TestSuite, Option[Int]] =
      _root_.caliban.client.SelectionBuilder.Field("totalCount", OptionOf(Scalar()))

    /** Total duration of the tests in the test suite.
      */
    def totalTime: SelectionBuilder[TestSuite, Option[Double]] =
      _root_.caliban.client.SelectionBuilder.Field("totalTime", OptionOf(Scalar()))
  }

  type TestSuiteSummary

  object TestSuiteSummary {

    /** IDs of the builds used to run the test suite.
      */
    def buildIds: SelectionBuilder[TestSuiteSummary, Option[List[String]]] =
      _root_.caliban.client.SelectionBuilder.Field("buildIds", OptionOf(ListOf(Scalar())))

    /** Total number of test cases that had an error.
      */
    def errorCount: SelectionBuilder[TestSuiteSummary, Option[Int]] =
      _root_.caliban.client.SelectionBuilder.Field("errorCount", OptionOf(Scalar()))

    /** Total number of test cases that failed in the test suite.
      */
    def failedCount: SelectionBuilder[TestSuiteSummary, Option[Int]] =
      _root_.caliban.client.SelectionBuilder.Field("failedCount", OptionOf(Scalar()))

    /** Name of the test suite.
      */
    def name: SelectionBuilder[TestSuiteSummary, Option[String]] = _root_.caliban.client.SelectionBuilder.Field("name", OptionOf(Scalar()))

    /** Total number of test cases that were skipped in the test suite.
      */
    def skippedCount: SelectionBuilder[TestSuiteSummary, Option[Int]] =
      _root_.caliban.client.SelectionBuilder.Field("skippedCount", OptionOf(Scalar()))

    /** Total number of test cases that succeeded in the test suite.
      */
    def successCount: SelectionBuilder[TestSuiteSummary, Option[Int]] =
      _root_.caliban.client.SelectionBuilder.Field("successCount", OptionOf(Scalar()))

    /** Test suite error message.
      */
    def suiteError: SelectionBuilder[TestSuiteSummary, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("suiteError", OptionOf(Scalar()))

    /** Total number of the test cases in the test suite.
      */
    def totalCount: SelectionBuilder[TestSuiteSummary, Option[Int]] =
      _root_.caliban.client.SelectionBuilder.Field("totalCount", OptionOf(Scalar()))

    /** Total duration of the tests in the test suite.
      */
    def totalTime: SelectionBuilder[TestSuiteSummary, Option[Double]] =
      _root_.caliban.client.SelectionBuilder.Field("totalTime", OptionOf(Scalar()))
  }

  type TestSuiteSummaryConnection

  object TestSuiteSummaryConnection {

    /** Total count of collection.
      */
    def count: SelectionBuilder[TestSuiteSummaryConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("count", Scalar())

    /** A list of edges.
      */
    def edges[A](
      innerSelection: SelectionBuilder[TestSuiteSummaryEdge, A]
    ): SelectionBuilder[TestSuiteSummaryConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](
      innerSelection: SelectionBuilder[TestSuiteSummary, A]
    ): SelectionBuilder[TestSuiteSummaryConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[TestSuiteSummaryConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  }

  type TestSuiteSummaryEdge

  object TestSuiteSummaryEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[TestSuiteSummaryEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](innerSelection: SelectionBuilder[TestSuiteSummary, A]): SelectionBuilder[TestSuiteSummaryEdge, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
  }

  type TimeReportStats

  object TimeReportStats {

    /** Completed issues metrics.
      */
    def complete[A](innerSelection: SelectionBuilder[TimeboxMetrics, A]): SelectionBuilder[TimeReportStats, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("complete", OptionOf(Obj(innerSelection)))

    /** Incomplete issues metrics.
      */
    def incomplete[A](innerSelection: SelectionBuilder[TimeboxMetrics, A]): SelectionBuilder[TimeReportStats, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("incomplete", OptionOf(Obj(innerSelection)))

    /** Total issues metrics.
      */
    def total[A](innerSelection: SelectionBuilder[TimeboxMetrics, A]): SelectionBuilder[TimeReportStats, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("total", OptionOf(Obj(innerSelection)))
  }

  type TimeboxMetrics

  object TimeboxMetrics {

    /** The count metric.
      */
    def count: SelectionBuilder[TimeboxMetrics, Int] = _root_.caliban.client.SelectionBuilder.Field("count", Scalar())

    /** The weight metric.
      */
    def weight: SelectionBuilder[TimeboxMetrics, Int] = _root_.caliban.client.SelectionBuilder.Field("weight", Scalar())
  }

  type TimeboxReport

  object TimeboxReport {

    /** Daily scope and completed totals for burnup charts.
      */
    def burnupTimeSeries[A](innerSelection: SelectionBuilder[BurnupChartDailyTotals, A]): SelectionBuilder[TimeboxReport, Option[List[A]]] =
      _root_.caliban.client.SelectionBuilder.Field("burnupTimeSeries", OptionOf(ListOf(Obj(innerSelection))))

    /** Represents the time report stats for the timebox.
      */
    def stats[A](innerSelection: SelectionBuilder[TimeReportStats, A]): SelectionBuilder[TimeboxReport, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("stats", OptionOf(Obj(innerSelection)))
  }

  type Timelog

  object Timelog {

    /** The issue that logged time was added to.
      */
    def issue[A](innerSelection: SelectionBuilder[Issue, A]): SelectionBuilder[Timelog, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("issue", OptionOf(Obj(innerSelection)))

    /** The merge request that logged time was added to.
      */
    def mergeRequest[A](innerSelection: SelectionBuilder[MergeRequest, A]): SelectionBuilder[Timelog, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("mergeRequest", OptionOf(Obj(innerSelection)))

    /** The note where the quick action to add the logged time was executed.
      */
    def note[A](innerSelection: SelectionBuilder[Note, A]): SelectionBuilder[Timelog, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("note", OptionOf(Obj(innerSelection)))

    /** Timestamp of when the time tracked was spent at.
      */
    def spentAt: SelectionBuilder[Timelog, Option[Time]] = _root_.caliban.client.SelectionBuilder.Field("spentAt", OptionOf(Scalar()))

    /** The time spent displayed in seconds.
      */
    def timeSpent: SelectionBuilder[Timelog, Int] = _root_.caliban.client.SelectionBuilder.Field("timeSpent", Scalar())

    /** The user that logged the time.
      */
    def user[A](innerSelection: SelectionBuilder[UserCore, A]): SelectionBuilder[Timelog, A] =
      _root_.caliban.client.SelectionBuilder.Field("user", Obj(innerSelection))
  }

  type TimelogConnection

  object TimelogConnection {

    /** A list of edges.
      */
    def edges[A](innerSelection: SelectionBuilder[TimelogEdge, A]): SelectionBuilder[TimelogConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](innerSelection: SelectionBuilder[Timelog, A]): SelectionBuilder[TimelogConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[TimelogConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  }

  type TimelogEdge

  object TimelogEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[TimelogEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](innerSelection: SelectionBuilder[Timelog, A]): SelectionBuilder[TimelogEdge, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
  }

  type Todo

  object Todo {

    /** Action of the to-do item.
      */
    def action: SelectionBuilder[Todo, TodoActionEnum] = _root_.caliban.client.SelectionBuilder.Field("action", Scalar())

    /** The author of this to-do item.
      */
    def author[A](innerSelection: SelectionBuilder[UserCore, A]): SelectionBuilder[Todo, A] =
      _root_.caliban.client.SelectionBuilder.Field("author", Obj(innerSelection))

    /** Body of the to-do item.
      */
    def body: SelectionBuilder[Todo, String] = _root_.caliban.client.SelectionBuilder.Field("body", Scalar())

    /** Timestamp this to-do item was created.
      */
    def createdAt: SelectionBuilder[Todo, Time] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())

    /** Group this to-do item is associated with.
      */
    def group[A](innerSelection: SelectionBuilder[Group, A]): SelectionBuilder[Todo, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("group", OptionOf(Obj(innerSelection)))

    /** ID of the to-do item.
      */
    def id: SelectionBuilder[Todo, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())

    /** The project this to-do item is associated with.
      */
    def project[A](innerSelection: SelectionBuilder[Project, A]): SelectionBuilder[Todo, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("project", OptionOf(Obj(innerSelection)))

    /** State of the to-do item.
      */
    def state: SelectionBuilder[Todo, TodoStateEnum] = _root_.caliban.client.SelectionBuilder.Field("state", Scalar())

    /** Target type of the to-do item.
      */
    def targetType: SelectionBuilder[Todo, TodoTargetEnum] = _root_.caliban.client.SelectionBuilder.Field("targetType", Scalar())
  }

  type TodoConnection

  object TodoConnection {

    /** A list of edges.
      */
    def edges[A](innerSelection: SelectionBuilder[TodoEdge, A]): SelectionBuilder[TodoConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](innerSelection: SelectionBuilder[Todo, A]): SelectionBuilder[TodoConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[TodoConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  }

  type TodoCreatePayload

  object TodoCreatePayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[TodoCreatePayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[TodoCreatePayload, List[String]] = _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** The to-do item created.
      */
    def todo[A](innerSelection: SelectionBuilder[Todo, A]): SelectionBuilder[TodoCreatePayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("todo", OptionOf(Obj(innerSelection)))
  }

  type TodoEdge

  object TodoEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[TodoEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](innerSelection: SelectionBuilder[Todo, A]): SelectionBuilder[TodoEdge, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
  }

  type TodoMarkDonePayload

  object TodoMarkDonePayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[TodoMarkDonePayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[TodoMarkDonePayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** The requested to-do item.
      */
    def todo[A](innerSelection: SelectionBuilder[Todo, A]): SelectionBuilder[TodoMarkDonePayload, A] =
      _root_.caliban.client.SelectionBuilder.Field("todo", Obj(innerSelection))
  }

  type TodoRestoreManyPayload

  object TodoRestoreManyPayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[TodoRestoreManyPayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[TodoRestoreManyPayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** Updated to-do items.
      */
    def todos[A](innerSelection: SelectionBuilder[Todo, A]): SelectionBuilder[TodoRestoreManyPayload, List[A]] =
      _root_.caliban.client.SelectionBuilder.Field("todos", ListOf(Obj(innerSelection)))
  }

  type TodoRestorePayload

  object TodoRestorePayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[TodoRestorePayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[TodoRestorePayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** The requested to-do item.
      */
    def todo[A](innerSelection: SelectionBuilder[Todo, A]): SelectionBuilder[TodoRestorePayload, A] =
      _root_.caliban.client.SelectionBuilder.Field("todo", Obj(innerSelection))
  }

  type TodosMarkAllDonePayload

  object TodosMarkAllDonePayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[TodosMarkAllDonePayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[TodosMarkAllDonePayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** Updated to-do items.
      */
    def todos[A](innerSelection: SelectionBuilder[Todo, A]): SelectionBuilder[TodosMarkAllDonePayload, List[A]] =
      _root_.caliban.client.SelectionBuilder.Field("todos", ListOf(Obj(innerSelection)))
  }

  type Tree

  object Tree {

    /** Blobs of the tree.
      */
    def blobs[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[BlobConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[Tree, A] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "blobs",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** Last commit for the tree.
      */
    def lastCommit[A](innerSelection: SelectionBuilder[Commit, A]): SelectionBuilder[Tree, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("lastCommit", OptionOf(Obj(innerSelection)))

    /** Sub-modules of the tree.
      */
    def submodules[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[SubmoduleConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[Tree, A] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "submodules",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** Trees of the tree.
      */
    def trees[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[TreeEntryConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[Tree, A] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "trees",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

  }

  type TreeEntry

  object TreeEntry {

    /** Flat path of the entry.
      */
    def flatPath: SelectionBuilder[TreeEntry, String] = _root_.caliban.client.SelectionBuilder.Field("flatPath", Scalar())

    /** ID of the entry.
      */
    def id: SelectionBuilder[TreeEntry, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())

    /** Name of the entry.
      */
    def name: SelectionBuilder[TreeEntry, String] = _root_.caliban.client.SelectionBuilder.Field("name", Scalar())

    /** Path of the entry.
      */
    def path: SelectionBuilder[TreeEntry, String] = _root_.caliban.client.SelectionBuilder.Field("path", Scalar())

    /** Last commit SHA for the entry.
      */
    def sha: SelectionBuilder[TreeEntry, String] = _root_.caliban.client.SelectionBuilder.Field("sha", Scalar())

    /** Type of tree entry.
      */
    def `type`: SelectionBuilder[TreeEntry, EntryType] = _root_.caliban.client.SelectionBuilder.Field("type", Scalar())

    /** Web path for the tree entry (directory).
      */
    def webPath: SelectionBuilder[TreeEntry, Option[String]] = _root_.caliban.client.SelectionBuilder.Field("webPath", OptionOf(Scalar()))

    /** Web URL for the tree entry (directory).
      */
    def webUrl: SelectionBuilder[TreeEntry, Option[String]] = _root_.caliban.client.SelectionBuilder.Field("webUrl", OptionOf(Scalar()))
  }

  type TreeEntryConnection

  object TreeEntryConnection {

    /** A list of edges.
      */
    def edges[A](innerSelection: SelectionBuilder[TreeEntryEdge, A]): SelectionBuilder[TreeEntryConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](innerSelection: SelectionBuilder[TreeEntry, A]): SelectionBuilder[TreeEntryConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[TreeEntryConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  }

  type TreeEntryEdge

  object TreeEntryEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[TreeEntryEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](innerSelection: SelectionBuilder[TreeEntry, A]): SelectionBuilder[TreeEntryEdge, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
  }

  type UpdateAlertStatusPayload

  object UpdateAlertStatusPayload {

    /** The alert after mutation.
      */
    def alert[A](innerSelection: SelectionBuilder[AlertManagementAlert, A]): SelectionBuilder[UpdateAlertStatusPayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("alert", OptionOf(Obj(innerSelection)))

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[UpdateAlertStatusPayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[UpdateAlertStatusPayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** The issue created after mutation.
      */
    def issue[A](innerSelection: SelectionBuilder[Issue, A]): SelectionBuilder[UpdateAlertStatusPayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("issue", OptionOf(Obj(innerSelection)))

    /** The to-do item after mutation.
      */
    def todo[A](innerSelection: SelectionBuilder[Todo, A]): SelectionBuilder[UpdateAlertStatusPayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("todo", OptionOf(Obj(innerSelection)))
  }

  type UpdateBoardEpicUserPreferencesPayload

  object UpdateBoardEpicUserPreferencesPayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[UpdateBoardEpicUserPreferencesPayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** User preferences for the epic in the board after mutation.
      */
    def epicUserPreferences[A](
      innerSelection: SelectionBuilder[BoardEpicUserPreferences, A]
    ): SelectionBuilder[UpdateBoardEpicUserPreferencesPayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("epicUserPreferences", OptionOf(Obj(innerSelection)))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[UpdateBoardEpicUserPreferencesPayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))
  }

  type UpdateBoardListPayload

  object UpdateBoardListPayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[UpdateBoardListPayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[UpdateBoardListPayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** Mutated list.
      */
    def list[A](innerSelection: SelectionBuilder[BoardList, A]): SelectionBuilder[UpdateBoardListPayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("list", OptionOf(Obj(innerSelection)))
  }

  type UpdateBoardPayload

  object UpdateBoardPayload {

    /** The board after mutation.
      */
    def board[A](innerSelection: SelectionBuilder[Board, A]): SelectionBuilder[UpdateBoardPayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("board", OptionOf(Obj(innerSelection)))

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[UpdateBoardPayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[UpdateBoardPayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))
  }

  type UpdateComplianceFrameworkPayload

  object UpdateComplianceFrameworkPayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[UpdateComplianceFrameworkPayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** The compliance framework after mutation.
      */
    def complianceFramework[A](
      innerSelection: SelectionBuilder[ComplianceFramework, A]
    ): SelectionBuilder[UpdateComplianceFrameworkPayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("complianceFramework", OptionOf(Obj(innerSelection)))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[UpdateComplianceFrameworkPayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))
  }

  type UpdateContainerExpirationPolicyPayload

  object UpdateContainerExpirationPolicyPayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[UpdateContainerExpirationPolicyPayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** The container expiration policy after mutation.
      */
    def containerExpirationPolicy[A](
      innerSelection: SelectionBuilder[ContainerExpirationPolicy, A]
    ): SelectionBuilder[UpdateContainerExpirationPolicyPayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("containerExpirationPolicy", OptionOf(Obj(innerSelection)))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[UpdateContainerExpirationPolicyPayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))
  }

  type UpdateEpicBoardListPayload

  object UpdateEpicBoardListPayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[UpdateEpicBoardListPayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[UpdateEpicBoardListPayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** Mutated epic list.
      */
    def list[A](innerSelection: SelectionBuilder[EpicList, A]): SelectionBuilder[UpdateEpicBoardListPayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("list", OptionOf(Obj(innerSelection)))
  }

  type UpdateEpicPayload

  object UpdateEpicPayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[UpdateEpicPayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** The epic after mutation.
      */
    def epic[A](innerSelection: SelectionBuilder[Epic, A]): SelectionBuilder[UpdateEpicPayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("epic", OptionOf(Obj(innerSelection)))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[UpdateEpicPayload, List[String]] = _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))
  }

  type UpdateImageDiffNotePayload

  object UpdateImageDiffNotePayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[UpdateImageDiffNotePayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[UpdateImageDiffNotePayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** The note after mutation.
      */
    def note[A](innerSelection: SelectionBuilder[Note, A]): SelectionBuilder[UpdateImageDiffNotePayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("note", OptionOf(Obj(innerSelection)))
  }

  type UpdateIssuePayload

  object UpdateIssuePayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[UpdateIssuePayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[UpdateIssuePayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** The issue after mutation.
      */
    def issue[A](innerSelection: SelectionBuilder[Issue, A]): SelectionBuilder[UpdateIssuePayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("issue", OptionOf(Obj(innerSelection)))
  }

  type UpdateIterationPayload

  object UpdateIterationPayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[UpdateIterationPayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[UpdateIterationPayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** Updated iteration.
      */
    def iteration[A](innerSelection: SelectionBuilder[Iteration, A]): SelectionBuilder[UpdateIterationPayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("iteration", OptionOf(Obj(innerSelection)))
  }

  type UpdateNamespacePackageSettingsPayload

  object UpdateNamespacePackageSettingsPayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[UpdateNamespacePackageSettingsPayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[UpdateNamespacePackageSettingsPayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** The namespace package setting after mutation.
      */
    def packageSettings[A](
      innerSelection: SelectionBuilder[PackageSettings, A]
    ): SelectionBuilder[UpdateNamespacePackageSettingsPayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("packageSettings", OptionOf(Obj(innerSelection)))

  }

  type UpdateNotePayload

  object UpdateNotePayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[UpdateNotePayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[UpdateNotePayload, List[String]] = _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** The note after mutation.
      */
    def note[A](innerSelection: SelectionBuilder[Note, A]): SelectionBuilder[UpdateNotePayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("note", OptionOf(Obj(innerSelection)))
  }

  type UpdateRequirementPayload

  object UpdateRequirementPayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[UpdateRequirementPayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[UpdateRequirementPayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** Requirement after mutation.
      */
    def requirement[A](innerSelection: SelectionBuilder[Requirement, A]): SelectionBuilder[UpdateRequirementPayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("requirement", OptionOf(Obj(innerSelection)))
  }

  type UpdateSnippetPayload

  object UpdateSnippetPayload {

    /** The CAPTCHA site key which must be used to render a challenge for the user to solve to obtain a valid captchaResponse value.
      * Included only when an operation was not completed because "NeedsCaptchaResponse" is true. Deprecated in 13.11: Use spam protection
      * with HTTP headers instead.
      */
    @deprecated("Use spam protection with HTTP headers instead. Deprecated in 13.11.", "")
    def captchaSiteKey: SelectionBuilder[UpdateSnippetPayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("captchaSiteKey", OptionOf(Scalar()))

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[UpdateSnippetPayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[UpdateSnippetPayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** Indicates whether the operation was detected as possible spam and not completed. If CAPTCHA is enabled, the request must be
      * resubmitted with a valid CAPTCHA response and spam_log_id included for the operation to be completed. Included only when an
      * operation was not completed because "NeedsCaptchaResponse" is true. Deprecated in 13.11: Use spam protection with HTTP headers
      * instead.
      */
    @deprecated("Use spam protection with HTTP headers instead. Deprecated in 13.11.", "")
    def needsCaptchaResponse: SelectionBuilder[UpdateSnippetPayload, Option[Boolean]] =
      _root_.caliban.client.SelectionBuilder.Field("needsCaptchaResponse", OptionOf(Scalar()))

    /** The snippet after mutation.
      */
    def snippet[A](innerSelection: SelectionBuilder[Snippet, A]): SelectionBuilder[UpdateSnippetPayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("snippet", OptionOf(Obj(innerSelection)))

    /** Indicates whether the operation was detected as definite spam. There is no option to resubmit the request with a CAPTCHA response.
      * Deprecated in 13.11: Use spam protection with HTTP headers instead.
      */
    @deprecated("Use spam protection with HTTP headers instead. Deprecated in 13.11.", "")
    def spam: SelectionBuilder[UpdateSnippetPayload, Option[Boolean]] =
      _root_.caliban.client.SelectionBuilder.Field("spam", OptionOf(Scalar()))

    /** The spam log ID which must be passed along with a valid CAPTCHA response for an operation to be completed. Included only when an
      * operation was not completed because "NeedsCaptchaResponse" is true. Deprecated in 13.11: Use spam protection with HTTP headers
      * instead.
      */
    @deprecated("Use spam protection with HTTP headers instead. Deprecated in 13.11.", "")
    def spamLogId: SelectionBuilder[UpdateSnippetPayload, Option[Int]] =
      _root_.caliban.client.SelectionBuilder.Field("spamLogId", OptionOf(Scalar()))

  }

  type UsageTrendsMeasurement

  object UsageTrendsMeasurement {

    /** Object count.
      */
    def count: SelectionBuilder[UsageTrendsMeasurement, Int] = _root_.caliban.client.SelectionBuilder.Field("count", Scalar())

    /** The type of objects being measured.
      */
    def identifier: SelectionBuilder[UsageTrendsMeasurement, MeasurementIdentifier] =
      _root_.caliban.client.SelectionBuilder.Field("identifier", Scalar())

    /** The time the measurement was recorded.
      */
    def recordedAt: SelectionBuilder[UsageTrendsMeasurement, Option[Time]] =
      _root_.caliban.client.SelectionBuilder.Field("recordedAt", OptionOf(Scalar()))
  }

  type UsageTrendsMeasurementConnection

  object UsageTrendsMeasurementConnection {

    /** A list of edges.
      */
    def edges[A](
      innerSelection: SelectionBuilder[UsageTrendsMeasurementEdge, A]
    ): SelectionBuilder[UsageTrendsMeasurementConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](
      innerSelection: SelectionBuilder[UsageTrendsMeasurement, A]
    ): SelectionBuilder[UsageTrendsMeasurementConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[UsageTrendsMeasurementConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  }

  type UsageTrendsMeasurementEdge

  object UsageTrendsMeasurementEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[UsageTrendsMeasurementEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](innerSelection: SelectionBuilder[UsageTrendsMeasurement, A]): SelectionBuilder[UsageTrendsMeasurementEdge, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
  }

  type UserCallout

  object UserCallout {

    /** Date when the callout was dismissed.
      */
    def dismissedAt: SelectionBuilder[UserCallout, Option[Time]] =
      _root_.caliban.client.SelectionBuilder.Field("dismissedAt", OptionOf(Scalar()))

    /** Name of the feature that the callout is for.
      */
    def featureName: SelectionBuilder[UserCallout, UserCalloutFeatureNameEnum] =
      _root_.caliban.client.SelectionBuilder.Field("featureName", Scalar())
  }

  type UserCalloutConnection

  object UserCalloutConnection {

    /** A list of edges.
      */
    def edges[A](innerSelection: SelectionBuilder[UserCalloutEdge, A]): SelectionBuilder[UserCalloutConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](innerSelection: SelectionBuilder[UserCallout, A]): SelectionBuilder[UserCalloutConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[UserCalloutConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  }

  type UserCalloutCreatePayload

  object UserCalloutCreatePayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[UserCalloutCreatePayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[UserCalloutCreatePayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** The user callout dismissed.
      */
    def userCallout[A](innerSelection: SelectionBuilder[UserCallout, A]): SelectionBuilder[UserCalloutCreatePayload, A] =
      _root_.caliban.client.SelectionBuilder.Field("userCallout", Obj(innerSelection))
  }

  type UserCalloutEdge

  object UserCalloutEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[UserCalloutEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](innerSelection: SelectionBuilder[UserCallout, A]): SelectionBuilder[UserCalloutEdge, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
  }

  type UserCore

  object UserCore {

    /** Merge requests assigned to the user.
      */
    def assignedMergeRequests[A](
      iids: Option[List[String]] = None,
      sourceBranches: Option[List[String]] = None,
      targetBranches: Option[List[String]] = None,
      state: Option[MergeRequestState] = None,
      labels: Option[List[String]] = None,
      mergedAfter: Option[Time] = None,
      mergedBefore: Option[Time] = None,
      milestoneTitle: Option[String] = None,
      sort: Option[MergeRequestSort] = None,
      not: Option[MergeRequestsResolverNegatedParams] = None,
      projectPath: Option[String] = None,
      projectId: Option[ProjectID] = None,
      authorUsername: Option[String] = None,
      reviewerUsername: Option[String] = None,
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[MergeRequestConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[List[String]]],
      encoder1: ArgEncoder[Option[List[String]]],
      encoder2: ArgEncoder[Option[List[String]]],
      encoder3: ArgEncoder[Option[MergeRequestState]],
      encoder4: ArgEncoder[Option[List[String]]],
      encoder5: ArgEncoder[Option[Time]],
      encoder6: ArgEncoder[Option[Time]],
      encoder7: ArgEncoder[Option[String]],
      encoder8: ArgEncoder[Option[MergeRequestSort]],
      encoder9: ArgEncoder[Option[MergeRequestsResolverNegatedParams]],
      encoder10: ArgEncoder[Option[String]],
      encoder11: ArgEncoder[Option[ProjectID]],
      encoder12: ArgEncoder[Option[String]],
      encoder13: ArgEncoder[Option[String]],
      encoder14: ArgEncoder[Option[String]],
      encoder15: ArgEncoder[Option[String]],
      encoder16: ArgEncoder[Option[Int]],
      encoder17: ArgEncoder[Option[Int]]
    ): SelectionBuilder[UserCore, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "assignedMergeRequests",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("iids", iids, "[String!]")(encoder0),
          Argument("sourceBranches", sourceBranches, "[String!]")(encoder1),
          Argument("targetBranches", targetBranches, "[String!]")(encoder2),
          Argument("state", state, "MergeRequestState")(encoder3),
          Argument("labels", labels, "[String!]")(encoder4),
          Argument("mergedAfter", mergedAfter, "Time")(encoder5),
          Argument("mergedBefore", mergedBefore, "Time")(encoder6),
          Argument("milestoneTitle", milestoneTitle, "String")(encoder7),
          Argument("sort", sort, "MergeRequestSort")(encoder8),
          Argument("not", not, "MergeRequestsResolverNegatedParams")(encoder9),
          Argument("projectPath", projectPath, "String")(encoder10),
          Argument("projectId", projectId, "ProjectID")(encoder11),
          Argument("authorUsername", authorUsername, "String")(encoder12),
          Argument("reviewerUsername", reviewerUsername, "String")(encoder13),
          Argument("after", after, "String")(encoder14),
          Argument("before", before, "String")(encoder15),
          Argument("first", first, "Int")(encoder16),
          Argument("last", last, "Int")(encoder17)
        )
      )

    /** Merge requests authored by the user.
      */
    def authoredMergeRequests[A](
      iids: Option[List[String]] = None,
      sourceBranches: Option[List[String]] = None,
      targetBranches: Option[List[String]] = None,
      state: Option[MergeRequestState] = None,
      labels: Option[List[String]] = None,
      mergedAfter: Option[Time] = None,
      mergedBefore: Option[Time] = None,
      milestoneTitle: Option[String] = None,
      sort: Option[MergeRequestSort] = None,
      not: Option[MergeRequestsResolverNegatedParams] = None,
      projectPath: Option[String] = None,
      projectId: Option[ProjectID] = None,
      assigneeUsername: Option[String] = None,
      reviewerUsername: Option[String] = None,
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[MergeRequestConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[List[String]]],
      encoder1: ArgEncoder[Option[List[String]]],
      encoder2: ArgEncoder[Option[List[String]]],
      encoder3: ArgEncoder[Option[MergeRequestState]],
      encoder4: ArgEncoder[Option[List[String]]],
      encoder5: ArgEncoder[Option[Time]],
      encoder6: ArgEncoder[Option[Time]],
      encoder7: ArgEncoder[Option[String]],
      encoder8: ArgEncoder[Option[MergeRequestSort]],
      encoder9: ArgEncoder[Option[MergeRequestsResolverNegatedParams]],
      encoder10: ArgEncoder[Option[String]],
      encoder11: ArgEncoder[Option[ProjectID]],
      encoder12: ArgEncoder[Option[String]],
      encoder13: ArgEncoder[Option[String]],
      encoder14: ArgEncoder[Option[String]],
      encoder15: ArgEncoder[Option[String]],
      encoder16: ArgEncoder[Option[Int]],
      encoder17: ArgEncoder[Option[Int]]
    ): SelectionBuilder[UserCore, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "authoredMergeRequests",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("iids", iids, "[String!]")(encoder0),
          Argument("sourceBranches", sourceBranches, "[String!]")(encoder1),
          Argument("targetBranches", targetBranches, "[String!]")(encoder2),
          Argument("state", state, "MergeRequestState")(encoder3),
          Argument("labels", labels, "[String!]")(encoder4),
          Argument("mergedAfter", mergedAfter, "Time")(encoder5),
          Argument("mergedBefore", mergedBefore, "Time")(encoder6),
          Argument("milestoneTitle", milestoneTitle, "String")(encoder7),
          Argument("sort", sort, "MergeRequestSort")(encoder8),
          Argument("not", not, "MergeRequestsResolverNegatedParams")(encoder9),
          Argument("projectPath", projectPath, "String")(encoder10),
          Argument("projectId", projectId, "ProjectID")(encoder11),
          Argument("assigneeUsername", assigneeUsername, "String")(encoder12),
          Argument("reviewerUsername", reviewerUsername, "String")(encoder13),
          Argument("after", after, "String")(encoder14),
          Argument("before", before, "String")(encoder15),
          Argument("first", first, "Int")(encoder16),
          Argument("last", last, "Int")(encoder17)
        )
      )

    /** URL of the user's avatar.
      */
    def avatarUrl: SelectionBuilder[UserCore, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("avatarUrl", OptionOf(Scalar()))

    /** Indicates if the user is a bot.
      */
    def bot: SelectionBuilder[UserCore, Boolean] = _root_.caliban.client.SelectionBuilder.Field("bot", Scalar())

    /** User callouts that belong to the user.
      */
    def callouts[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[UserCalloutConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[UserCore, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "callouts",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** User email. Deprecated in 13.7: This was renamed.
      */
    @deprecated("This was renamed. Please use `User.publicEmail`. Deprecated in 13.7.", "")
    def email: SelectionBuilder[UserCore, Option[String]] = _root_.caliban.client.SelectionBuilder.Field("email", OptionOf(Scalar()))

    /** Group count for the user.
      */
    def groupCount: SelectionBuilder[UserCore, Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("groupCount", OptionOf(Scalar()))

    /** Group memberships of the user.
      */
    def groupMemberships[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[GroupMemberConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[UserCore, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "groupMemberships",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** ID of the user.
      */
    def id: SelectionBuilder[UserCore, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())

    /** The location of the user.
      */
    def location: SelectionBuilder[UserCore, Option[String]] = _root_.caliban.client.SelectionBuilder.Field("location", OptionOf(Scalar()))

    /** Human-readable name of the user.
      */
    def name: SelectionBuilder[UserCore, String] = _root_.caliban.client.SelectionBuilder.Field("name", Scalar())

    /** Project memberships of the user.
      */
    def projectMemberships[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[ProjectMemberConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[UserCore, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "projectMemberships",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** User's public email.
      */
    def publicEmail: SelectionBuilder[UserCore, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("publicEmail", OptionOf(Scalar()))

    /** Merge requests assigned to the user for review.
      */
    def reviewRequestedMergeRequests[A](
      iids: Option[List[String]] = None,
      sourceBranches: Option[List[String]] = None,
      targetBranches: Option[List[String]] = None,
      state: Option[MergeRequestState] = None,
      labels: Option[List[String]] = None,
      mergedAfter: Option[Time] = None,
      mergedBefore: Option[Time] = None,
      milestoneTitle: Option[String] = None,
      sort: Option[MergeRequestSort] = None,
      not: Option[MergeRequestsResolverNegatedParams] = None,
      projectPath: Option[String] = None,
      projectId: Option[ProjectID] = None,
      authorUsername: Option[String] = None,
      assigneeUsername: Option[String] = None,
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[MergeRequestConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[List[String]]],
      encoder1: ArgEncoder[Option[List[String]]],
      encoder2: ArgEncoder[Option[List[String]]],
      encoder3: ArgEncoder[Option[MergeRequestState]],
      encoder4: ArgEncoder[Option[List[String]]],
      encoder5: ArgEncoder[Option[Time]],
      encoder6: ArgEncoder[Option[Time]],
      encoder7: ArgEncoder[Option[String]],
      encoder8: ArgEncoder[Option[MergeRequestSort]],
      encoder9: ArgEncoder[Option[MergeRequestsResolverNegatedParams]],
      encoder10: ArgEncoder[Option[String]],
      encoder11: ArgEncoder[Option[ProjectID]],
      encoder12: ArgEncoder[Option[String]],
      encoder13: ArgEncoder[Option[String]],
      encoder14: ArgEncoder[Option[String]],
      encoder15: ArgEncoder[Option[String]],
      encoder16: ArgEncoder[Option[Int]],
      encoder17: ArgEncoder[Option[Int]]
    ): SelectionBuilder[UserCore, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "reviewRequestedMergeRequests",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("iids", iids, "[String!]")(encoder0),
          Argument("sourceBranches", sourceBranches, "[String!]")(encoder1),
          Argument("targetBranches", targetBranches, "[String!]")(encoder2),
          Argument("state", state, "MergeRequestState")(encoder3),
          Argument("labels", labels, "[String!]")(encoder4),
          Argument("mergedAfter", mergedAfter, "Time")(encoder5),
          Argument("mergedBefore", mergedBefore, "Time")(encoder6),
          Argument("milestoneTitle", milestoneTitle, "String")(encoder7),
          Argument("sort", sort, "MergeRequestSort")(encoder8),
          Argument("not", not, "MergeRequestsResolverNegatedParams")(encoder9),
          Argument("projectPath", projectPath, "String")(encoder10),
          Argument("projectId", projectId, "ProjectID")(encoder11),
          Argument("authorUsername", authorUsername, "String")(encoder12),
          Argument("assigneeUsername", assigneeUsername, "String")(encoder13),
          Argument("after", after, "String")(encoder14),
          Argument("before", before, "String")(encoder15),
          Argument("first", first, "Int")(encoder16),
          Argument("last", last, "Int")(encoder17)
        )
      )

    /** Snippets authored by the user.
      */
    def snippets[A](
      ids: Option[List[SnippetID]] = None,
      visibility: Option[VisibilityScopesEnum] = None,
      `type`: Option[TypeEnum] = None,
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[SnippetConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[List[SnippetID]]],
      encoder1: ArgEncoder[Option[VisibilityScopesEnum]],
      encoder2: ArgEncoder[Option[TypeEnum]],
      encoder3: ArgEncoder[Option[String]],
      encoder4: ArgEncoder[Option[String]],
      encoder5: ArgEncoder[Option[Int]],
      encoder6: ArgEncoder[Option[Int]]
    ): SelectionBuilder[UserCore, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "snippets",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("ids", ids, "[SnippetID!]")(encoder0),
          Argument("visibility", visibility, "VisibilityScopesEnum")(encoder1),
          Argument("type", `type`, "TypeEnum")(encoder2),
          Argument("after", after, "String")(encoder3),
          Argument("before", before, "String")(encoder4),
          Argument("first", first, "Int")(encoder5),
          Argument("last", last, "Int")(encoder6)
        )
      )

    /** Projects starred by the user.
      */
    def starredProjects[A](
      search: Option[String] = None,
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[ProjectConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[String]],
      encoder3: ArgEncoder[Option[Int]],
      encoder4: ArgEncoder[Option[Int]]
    ): SelectionBuilder[UserCore, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "starredProjects",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("search", search, "String")(encoder0),
          Argument("after", after, "String")(encoder1),
          Argument("before", before, "String")(encoder2),
          Argument("first", first, "Int")(encoder3),
          Argument("last", last, "Int")(encoder4)
        )
      )

    /** State of the user.
      */
    def state: SelectionBuilder[UserCore, UserState] = _root_.caliban.client.SelectionBuilder.Field("state", Scalar())

    /** User status.
      */
    def status[A](innerSelection: SelectionBuilder[UserStatus, A]): SelectionBuilder[UserCore, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("status", OptionOf(Obj(innerSelection)))

    /** To-do items of the user.
      */
    def todos[A](
      action: Option[List[TodoActionEnum]] = None,
      authorId: Option[List[String]] = None,
      projectId: Option[List[String]] = None,
      groupId: Option[List[String]] = None,
      state: Option[List[TodoStateEnum]] = None,
      `type`: Option[List[TodoTargetEnum]] = None,
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[TodoConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[List[TodoActionEnum]]],
      encoder1: ArgEncoder[Option[List[String]]],
      encoder2: ArgEncoder[Option[List[String]]],
      encoder3: ArgEncoder[Option[List[String]]],
      encoder4: ArgEncoder[Option[List[TodoStateEnum]]],
      encoder5: ArgEncoder[Option[List[TodoTargetEnum]]],
      encoder6: ArgEncoder[Option[String]],
      encoder7: ArgEncoder[Option[String]],
      encoder8: ArgEncoder[Option[Int]],
      encoder9: ArgEncoder[Option[Int]]
    ): SelectionBuilder[UserCore, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "todos",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("action", action, "[TodoActionEnum!]")(encoder0),
          Argument("authorId", authorId, "[ID!]")(encoder1),
          Argument("projectId", projectId, "[ID!]")(encoder2),
          Argument("groupId", groupId, "[ID!]")(encoder3),
          Argument("state", state, "[TodoStateEnum!]")(encoder4),
          Argument("type", `type`, "[TodoTargetEnum!]")(encoder5),
          Argument("after", after, "String")(encoder6),
          Argument("before", before, "String")(encoder7),
          Argument("first", first, "Int")(encoder8),
          Argument("last", last, "Int")(encoder9)
        )
      )

    /** Permissions for the current user on the resource.
      */
    def userPermissions[A](innerSelection: SelectionBuilder[UserPermissions, A]): SelectionBuilder[UserCore, A] =
      _root_.caliban.client.SelectionBuilder.Field("userPermissions", Obj(innerSelection))

    /** Username of the user. Unique within this instance of GitLab.
      */
    def username: SelectionBuilder[UserCore, String] = _root_.caliban.client.SelectionBuilder.Field("username", Scalar())

    /** Web path of the user.
      */
    def webPath: SelectionBuilder[UserCore, String] = _root_.caliban.client.SelectionBuilder.Field("webPath", Scalar())

    /** Web URL of the user.
      */
    def webUrl: SelectionBuilder[UserCore, String] = _root_.caliban.client.SelectionBuilder.Field("webUrl", Scalar())
  }

  type UserCoreConnection

  object UserCoreConnection {

    /** A list of edges.
      */
    def edges[A](innerSelection: SelectionBuilder[UserCoreEdge, A]): SelectionBuilder[UserCoreConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](innerSelection: SelectionBuilder[UserCore, A]): SelectionBuilder[UserCoreConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[UserCoreConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  }

  type UserCoreEdge

  object UserCoreEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[UserCoreEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](innerSelection: SelectionBuilder[UserCore, A]): SelectionBuilder[UserCoreEdge, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
  }

  type UserMergeRequestInteraction

  object UserMergeRequestInteraction {

    /** Approval rules that apply to this user for this merge request.
      */
    def applicableApprovalRules[A](
      innerSelection: SelectionBuilder[ApprovalRule, A]
    ): SelectionBuilder[UserMergeRequestInteraction, Option[List[A]]] =
      _root_.caliban.client.SelectionBuilder.Field("applicableApprovalRules", OptionOf(ListOf(Obj(innerSelection))))

    /** Whether this user has approved this merge request.
      */
    def approved: SelectionBuilder[UserMergeRequestInteraction, Boolean] =
      _root_.caliban.client.SelectionBuilder.Field("approved", Scalar())

    /** Whether this user can merge this merge request.
      */
    def canMerge: SelectionBuilder[UserMergeRequestInteraction, Boolean] =
      _root_.caliban.client.SelectionBuilder.Field("canMerge", Scalar())

    /** Whether this user can update this merge request.
      */
    def canUpdate: SelectionBuilder[UserMergeRequestInteraction, Boolean] =
      _root_.caliban.client.SelectionBuilder.Field("canUpdate", Scalar())

    /** The state of the review by this user.
      */
    def reviewState: SelectionBuilder[UserMergeRequestInteraction, Option[MergeRequestReviewState]] =
      _root_.caliban.client.SelectionBuilder.Field("reviewState", OptionOf(Scalar()))

    /** Whether this user has provided a review for this merge request.
      */
    def reviewed: SelectionBuilder[UserMergeRequestInteraction, Boolean] =
      _root_.caliban.client.SelectionBuilder.Field("reviewed", Scalar())
  }

  type UserPermissions

  object UserPermissions {

    /** Indicates the user can perform `create_snippet` on this resource
      */
    def createSnippet: SelectionBuilder[UserPermissions, Boolean] = _root_.caliban.client.SelectionBuilder.Field("createSnippet", Scalar())
  }

  type UserStatus

  object UserStatus {

    /** User availability status.
      */
    def availability: SelectionBuilder[UserStatus, AvailabilityEnum] =
      _root_.caliban.client.SelectionBuilder.Field("availability", Scalar())

    /** String representation of emoji.
      */
    def emoji: SelectionBuilder[UserStatus, Option[String]] = _root_.caliban.client.SelectionBuilder.Field("emoji", OptionOf(Scalar()))

    /** User status message.
      */
    def message: SelectionBuilder[UserStatus, Option[String]] = _root_.caliban.client.SelectionBuilder.Field("message", OptionOf(Scalar()))

    /** HTML of the user status message
      */
    def messageHtml: SelectionBuilder[UserStatus, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("messageHtml", OptionOf(Scalar()))
  }

  type VulnerabilitiesCountByDay

  object VulnerabilitiesCountByDay {

    /** Total number of vulnerabilities on a particular day with critical severity
      */
    def critical: SelectionBuilder[VulnerabilitiesCountByDay, Int] = _root_.caliban.client.SelectionBuilder.Field("critical", Scalar())

    /** Date for the count.
      */
    def date: SelectionBuilder[VulnerabilitiesCountByDay, ISO8601Date] = _root_.caliban.client.SelectionBuilder.Field("date", Scalar())

    /** Total number of vulnerabilities on a particular day with high severity
      */
    def high: SelectionBuilder[VulnerabilitiesCountByDay, Int] = _root_.caliban.client.SelectionBuilder.Field("high", Scalar())

    /** Total number of vulnerabilities on a particular day with info severity
      */
    def info: SelectionBuilder[VulnerabilitiesCountByDay, Int] = _root_.caliban.client.SelectionBuilder.Field("info", Scalar())

    /** Total number of vulnerabilities on a particular day with low severity
      */
    def low: SelectionBuilder[VulnerabilitiesCountByDay, Int] = _root_.caliban.client.SelectionBuilder.Field("low", Scalar())

    /** Total number of vulnerabilities on a particular day with medium severity
      */
    def medium: SelectionBuilder[VulnerabilitiesCountByDay, Int] = _root_.caliban.client.SelectionBuilder.Field("medium", Scalar())

    /** Total number of vulnerabilities on a particular day.
      */
    def total: SelectionBuilder[VulnerabilitiesCountByDay, Int] = _root_.caliban.client.SelectionBuilder.Field("total", Scalar())

    /** Total number of vulnerabilities on a particular day with unknown severity
      */
    def unknown: SelectionBuilder[VulnerabilitiesCountByDay, Int] = _root_.caliban.client.SelectionBuilder.Field("unknown", Scalar())
  }

  type VulnerabilitiesCountByDayConnection

  object VulnerabilitiesCountByDayConnection {

    /** A list of edges.
      */
    def edges[A](
      innerSelection: SelectionBuilder[VulnerabilitiesCountByDayEdge, A]
    ): SelectionBuilder[VulnerabilitiesCountByDayConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](
      innerSelection: SelectionBuilder[VulnerabilitiesCountByDay, A]
    ): SelectionBuilder[VulnerabilitiesCountByDayConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[VulnerabilitiesCountByDayConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  }

  type VulnerabilitiesCountByDayEdge

  object VulnerabilitiesCountByDayEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[VulnerabilitiesCountByDayEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](
      innerSelection: SelectionBuilder[VulnerabilitiesCountByDay, A]
    ): SelectionBuilder[VulnerabilitiesCountByDayEdge, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))

  }

  type Vulnerability

  object Vulnerability {

    /** Timestamp of when the vulnerability state was changed to confirmed.
      */
    def confirmedAt: SelectionBuilder[Vulnerability, Option[Time]] =
      _root_.caliban.client.SelectionBuilder.Field("confirmedAt", OptionOf(Scalar()))

    /** The user that confirmed the vulnerability.
      */
    def confirmedBy[A](innerSelection: SelectionBuilder[UserCore, A]): SelectionBuilder[Vulnerability, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("confirmedBy", OptionOf(Obj(innerSelection)))

    /** Description of the vulnerability.
      */
    def description: SelectionBuilder[Vulnerability, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("description", OptionOf(Scalar()))

    /** Details of the vulnerability.
      */
    def details[A](
      onVulnerabilityDetailBase: SelectionBuilder[VulnerabilityDetailBase, A],
      onVulnerabilityDetailBoolean: SelectionBuilder[VulnerabilityDetailBoolean, A],
      onVulnerabilityDetailCode: SelectionBuilder[VulnerabilityDetailCode, A],
      onVulnerabilityDetailCommit: SelectionBuilder[VulnerabilityDetailCommit, A],
      onVulnerabilityDetailDiff: SelectionBuilder[VulnerabilityDetailDiff, A],
      onVulnerabilityDetailFileLocation: SelectionBuilder[VulnerabilityDetailFileLocation, A],
      onVulnerabilityDetailInt: SelectionBuilder[VulnerabilityDetailInt, A],
      onVulnerabilityDetailList: SelectionBuilder[VulnerabilityDetailList, A],
      onVulnerabilityDetailMarkdown: SelectionBuilder[VulnerabilityDetailMarkdown, A],
      onVulnerabilityDetailModuleLocation: SelectionBuilder[VulnerabilityDetailModuleLocation, A],
      onVulnerabilityDetailTable: SelectionBuilder[VulnerabilityDetailTable, A],
      onVulnerabilityDetailText: SelectionBuilder[VulnerabilityDetailText, A],
      onVulnerabilityDetailUrl: SelectionBuilder[VulnerabilityDetailUrl, A]
    ): SelectionBuilder[Vulnerability, List[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "details",
        ListOf(
          ChoiceOf(
            Map(
              "VulnerabilityDetailBase" -> Obj(onVulnerabilityDetailBase),
              "VulnerabilityDetailBoolean" -> Obj(onVulnerabilityDetailBoolean),
              "VulnerabilityDetailCode" -> Obj(onVulnerabilityDetailCode),
              "VulnerabilityDetailCommit" -> Obj(onVulnerabilityDetailCommit),
              "VulnerabilityDetailDiff" -> Obj(onVulnerabilityDetailDiff),
              "VulnerabilityDetailFileLocation" -> Obj(onVulnerabilityDetailFileLocation),
              "VulnerabilityDetailInt" -> Obj(onVulnerabilityDetailInt),
              "VulnerabilityDetailList" -> Obj(onVulnerabilityDetailList),
              "VulnerabilityDetailMarkdown" -> Obj(onVulnerabilityDetailMarkdown),
              "VulnerabilityDetailModuleLocation" -> Obj(onVulnerabilityDetailModuleLocation),
              "VulnerabilityDetailTable" -> Obj(onVulnerabilityDetailTable),
              "VulnerabilityDetailText" -> Obj(onVulnerabilityDetailText),
              "VulnerabilityDetailUrl" -> Obj(onVulnerabilityDetailUrl)
            )
          )
        )
      )

    /** Timestamp of when the vulnerability was first detected.
      */
    def detectedAt: SelectionBuilder[Vulnerability, Time] = _root_.caliban.client.SelectionBuilder.Field("detectedAt", Scalar())

    /** All discussions on this noteable.
      */
    def discussions[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[DiscussionConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[Vulnerability, A] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "discussions",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** Timestamp of when the vulnerability state was changed to dismissed.
      */
    def dismissedAt: SelectionBuilder[Vulnerability, Option[Time]] =
      _root_.caliban.client.SelectionBuilder.Field("dismissedAt", OptionOf(Scalar()))

    /** The user that dismissed the vulnerability.
      */
    def dismissedBy[A](innerSelection: SelectionBuilder[UserCore, A]): SelectionBuilder[Vulnerability, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("dismissedBy", OptionOf(Obj(innerSelection)))

    /** List of external issue links related to the vulnerability.
      */
    def externalIssueLinks[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[VulnerabilityExternalIssueLinkConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[Vulnerability, A] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "externalIssueLinks",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** Indicates whether there is a solution available for this vulnerability.
      */
    def hasSolutions: SelectionBuilder[Vulnerability, Option[Boolean]] =
      _root_.caliban.client.SelectionBuilder.Field("hasSolutions", OptionOf(Scalar()))

    /** GraphQL ID of the vulnerability.
      */
    def id: SelectionBuilder[Vulnerability, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())

    /** Identifiers of the vulnerability.
      */
    def identifiers[A](innerSelection: SelectionBuilder[VulnerabilityIdentifier, A]): SelectionBuilder[Vulnerability, List[A]] =
      _root_.caliban.client.SelectionBuilder.Field("identifiers", ListOf(Obj(innerSelection)))

    /** List of issue links related to the vulnerability.
      */
    def issueLinks[A](
      linkType: Option[VulnerabilityIssueLinkType] = None,
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[VulnerabilityIssueLinkConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[VulnerabilityIssueLinkType]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[String]],
      encoder3: ArgEncoder[Option[Int]],
      encoder4: ArgEncoder[Option[Int]]
    ): SelectionBuilder[Vulnerability, A] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "issueLinks",
        Obj(innerSelection),
        arguments = List(
          Argument("linkType", linkType, "VulnerabilityIssueLinkType")(encoder0),
          Argument("after", after, "String")(encoder1),
          Argument("before", before, "String")(encoder2),
          Argument("first", first, "Int")(encoder3),
          Argument("last", last, "Int")(encoder4)
        )
      )

    /** Location metadata for the vulnerability. Its fields depend on the type of security scan that found the vulnerability.
      */
    def location[A](
      onVulnerabilityLocationContainerScanning: SelectionBuilder[VulnerabilityLocationContainerScanning, A],
      onVulnerabilityLocationCoverageFuzzing: SelectionBuilder[VulnerabilityLocationCoverageFuzzing, A],
      onVulnerabilityLocationDast: SelectionBuilder[VulnerabilityLocationDast, A],
      onVulnerabilityLocationDependencyScanning: SelectionBuilder[VulnerabilityLocationDependencyScanning, A],
      onVulnerabilityLocationSast: SelectionBuilder[VulnerabilityLocationSast, A],
      onVulnerabilityLocationSecretDetection: SelectionBuilder[VulnerabilityLocationSecretDetection, A]
    ): SelectionBuilder[Vulnerability, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "location",
        OptionOf(
          ChoiceOf(
            Map(
              "VulnerabilityLocationContainerScanning" -> Obj(onVulnerabilityLocationContainerScanning),
              "VulnerabilityLocationCoverageFuzzing" -> Obj(onVulnerabilityLocationCoverageFuzzing),
              "VulnerabilityLocationDast" -> Obj(onVulnerabilityLocationDast),
              "VulnerabilityLocationDependencyScanning" -> Obj(onVulnerabilityLocationDependencyScanning),
              "VulnerabilityLocationSast" -> Obj(onVulnerabilityLocationSast),
              "VulnerabilityLocationSecretDetection" -> Obj(onVulnerabilityLocationSecretDetection)
            )
          )
        )
      )

    /** Merge request that fixes the vulnerability.
      */
    def mergeRequest[A](innerSelection: SelectionBuilder[MergeRequest, A]): SelectionBuilder[Vulnerability, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("mergeRequest", OptionOf(Obj(innerSelection)))

    /** All notes on this noteable.
      */
    def notes[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[NoteConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[Vulnerability, A] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "notes",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** Primary identifier of the vulnerability.
      */
    def primaryIdentifier[A](innerSelection: SelectionBuilder[VulnerabilityIdentifier, A]): SelectionBuilder[Vulnerability, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("primaryIdentifier", OptionOf(Obj(innerSelection)))

    /** The project on which the vulnerability was found.
      */
    def project[A](innerSelection: SelectionBuilder[Project, A]): SelectionBuilder[Vulnerability, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("project", OptionOf(Obj(innerSelection)))

    /** Type of the security report that found the vulnerability (SAST, DEPENDENCY_SCANNING, CONTAINER_SCANNING, DAST, SECRET_DETECTION,
      * COVERAGE_FUZZING, API_FUZZING, CLUSTER_IMAGE_SCANNING). `Scan Type` in the UI.
      */
    def reportType: SelectionBuilder[Vulnerability, Option[VulnerabilityReportType]] =
      _root_.caliban.client.SelectionBuilder.Field("reportType", OptionOf(Scalar()))

    /** Timestamp of when the vulnerability state was changed to resolved.
      */
    def resolvedAt: SelectionBuilder[Vulnerability, Option[Time]] =
      _root_.caliban.client.SelectionBuilder.Field("resolvedAt", OptionOf(Scalar()))

    /** The user that resolved the vulnerability.
      */
    def resolvedBy[A](innerSelection: SelectionBuilder[UserCore, A]): SelectionBuilder[Vulnerability, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("resolvedBy", OptionOf(Obj(innerSelection)))

    /** Indicates whether the vulnerability is fixed on the default branch or not.
      */
    def resolvedOnDefaultBranch: SelectionBuilder[Vulnerability, Boolean] =
      _root_.caliban.client.SelectionBuilder.Field("resolvedOnDefaultBranch", Scalar())

    /** Scanner metadata for the vulnerability.
      */
    def scanner[A](innerSelection: SelectionBuilder[VulnerabilityScanner, A]): SelectionBuilder[Vulnerability, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("scanner", OptionOf(Obj(innerSelection)))

    /** Severity of the vulnerability (INFO, UNKNOWN, LOW, MEDIUM, HIGH, CRITICAL)
      */
    def severity: SelectionBuilder[Vulnerability, Option[VulnerabilitySeverity]] =
      _root_.caliban.client.SelectionBuilder.Field("severity", OptionOf(Scalar()))

    /** State of the vulnerability (DETECTED, CONFIRMED, RESOLVED, DISMISSED)
      */
    def state: SelectionBuilder[Vulnerability, Option[VulnerabilityState]] =
      _root_.caliban.client.SelectionBuilder.Field("state", OptionOf(Scalar()))

    /** Title of the vulnerability.
      */
    def title: SelectionBuilder[Vulnerability, Option[String]] = _root_.caliban.client.SelectionBuilder.Field("title", OptionOf(Scalar()))

    /** Number of user notes attached to the vulnerability.
      */
    def userNotesCount: SelectionBuilder[Vulnerability, Int] = _root_.caliban.client.SelectionBuilder.Field("userNotesCount", Scalar())

    /** Permissions for the current user on the resource
      */
    def userPermissions[A](innerSelection: SelectionBuilder[VulnerabilityPermissions, A]): SelectionBuilder[Vulnerability, A] =
      _root_.caliban.client.SelectionBuilder.Field("userPermissions", Obj(innerSelection))

    /** URL to the vulnerability's details page.
      */
    def vulnerabilityPath: SelectionBuilder[Vulnerability, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("vulnerabilityPath", OptionOf(Scalar()))
  }

  type VulnerabilityConfirmPayload

  object VulnerabilityConfirmPayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[VulnerabilityConfirmPayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[VulnerabilityConfirmPayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** The vulnerability after state change.
      */
    def vulnerability[A](innerSelection: SelectionBuilder[Vulnerability, A]): SelectionBuilder[VulnerabilityConfirmPayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("vulnerability", OptionOf(Obj(innerSelection)))
  }

  type VulnerabilityConnection

  object VulnerabilityConnection {

    /** A list of edges.
      */
    def edges[A](
      innerSelection: SelectionBuilder[VulnerabilityEdge, A]
    ): SelectionBuilder[VulnerabilityConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](innerSelection: SelectionBuilder[Vulnerability, A]): SelectionBuilder[VulnerabilityConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[VulnerabilityConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  }

  type VulnerabilityDetailBase

  object VulnerabilityDetailBase {

    /** Description of the field.
      */
    def description: SelectionBuilder[VulnerabilityDetailBase, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("description", OptionOf(Scalar()))

    /** Name of the field.
      */
    def fieldName: SelectionBuilder[VulnerabilityDetailBase, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("fieldName", OptionOf(Scalar()))

    /** Name of the field.
      */
    def name: SelectionBuilder[VulnerabilityDetailBase, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("name", OptionOf(Scalar()))
  }

  type VulnerabilityDetailBoolean

  object VulnerabilityDetailBoolean {

    /** Description of the field.
      */
    def description: SelectionBuilder[VulnerabilityDetailBoolean, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("description", OptionOf(Scalar()))

    /** Name of the field.
      */
    def fieldName: SelectionBuilder[VulnerabilityDetailBoolean, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("fieldName", OptionOf(Scalar()))

    /** Name of the field.
      */
    def name: SelectionBuilder[VulnerabilityDetailBoolean, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("name", OptionOf(Scalar()))

    /** Value of the field.
      */
    def value: SelectionBuilder[VulnerabilityDetailBoolean, Boolean] = _root_.caliban.client.SelectionBuilder.Field("value", Scalar())
  }

  type VulnerabilityDetailCode

  object VulnerabilityDetailCode {

    /** Description of the field.
      */
    def description: SelectionBuilder[VulnerabilityDetailCode, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("description", OptionOf(Scalar()))

    /** Name of the field.
      */
    def fieldName: SelectionBuilder[VulnerabilityDetailCode, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("fieldName", OptionOf(Scalar()))

    /** Language of the code.
      */
    def lang: SelectionBuilder[VulnerabilityDetailCode, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("lang", OptionOf(Scalar()))

    /** Name of the field.
      */
    def name: SelectionBuilder[VulnerabilityDetailCode, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("name", OptionOf(Scalar()))

    /** Source code.
      */
    def value: SelectionBuilder[VulnerabilityDetailCode, String] = _root_.caliban.client.SelectionBuilder.Field("value", Scalar())
  }

  type VulnerabilityDetailCommit

  object VulnerabilityDetailCommit {

    /** Description of the field.
      */
    def description: SelectionBuilder[VulnerabilityDetailCommit, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("description", OptionOf(Scalar()))

    /** Name of the field.
      */
    def fieldName: SelectionBuilder[VulnerabilityDetailCommit, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("fieldName", OptionOf(Scalar()))

    /** Name of the field.
      */
    def name: SelectionBuilder[VulnerabilityDetailCommit, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("name", OptionOf(Scalar()))

    /** The commit SHA value.
      */
    def value: SelectionBuilder[VulnerabilityDetailCommit, String] = _root_.caliban.client.SelectionBuilder.Field("value", Scalar())
  }

  type VulnerabilityDetailDiff

  object VulnerabilityDetailDiff {

    /** Value of the field after the change.
      */
    def after: SelectionBuilder[VulnerabilityDetailDiff, String] = _root_.caliban.client.SelectionBuilder.Field("after", Scalar())

    /** Value of the field before the change.
      */
    def before: SelectionBuilder[VulnerabilityDetailDiff, String] = _root_.caliban.client.SelectionBuilder.Field("before", Scalar())

    /** Description of the field.
      */
    def description: SelectionBuilder[VulnerabilityDetailDiff, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("description", OptionOf(Scalar()))

    /** Name of the field.
      */
    def fieldName: SelectionBuilder[VulnerabilityDetailDiff, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("fieldName", OptionOf(Scalar()))

    /** Name of the field.
      */
    def name: SelectionBuilder[VulnerabilityDetailDiff, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("name", OptionOf(Scalar()))
  }

  type VulnerabilityDetailFileLocation

  object VulnerabilityDetailFileLocation {

    /** Description of the field.
      */
    def description: SelectionBuilder[VulnerabilityDetailFileLocation, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("description", OptionOf(Scalar()))

    /** Name of the field.
      */
    def fieldName: SelectionBuilder[VulnerabilityDetailFileLocation, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("fieldName", OptionOf(Scalar()))

    /** File name.
      */
    def fileName: SelectionBuilder[VulnerabilityDetailFileLocation, String] =
      _root_.caliban.client.SelectionBuilder.Field("fileName", Scalar())

    /** End line number of the file location.
      */
    def lineEnd: SelectionBuilder[VulnerabilityDetailFileLocation, Int] = _root_.caliban.client.SelectionBuilder.Field("lineEnd", Scalar())

    /** Start line number of the file location.
      */
    def lineStart: SelectionBuilder[VulnerabilityDetailFileLocation, Int] =
      _root_.caliban.client.SelectionBuilder.Field("lineStart", Scalar())

    /** Name of the field.
      */
    def name: SelectionBuilder[VulnerabilityDetailFileLocation, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("name", OptionOf(Scalar()))
  }

  type VulnerabilityDetailInt

  object VulnerabilityDetailInt {

    /** Description of the field.
      */
    def description: SelectionBuilder[VulnerabilityDetailInt, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("description", OptionOf(Scalar()))

    /** Name of the field.
      */
    def fieldName: SelectionBuilder[VulnerabilityDetailInt, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("fieldName", OptionOf(Scalar()))

    /** Name of the field.
      */
    def name: SelectionBuilder[VulnerabilityDetailInt, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("name", OptionOf(Scalar()))

    /** Value of the field.
      */
    def value: SelectionBuilder[VulnerabilityDetailInt, Int] = _root_.caliban.client.SelectionBuilder.Field("value", Scalar())
  }

  type VulnerabilityDetailList

  object VulnerabilityDetailList {

    /** Description of the field.
      */
    def description: SelectionBuilder[VulnerabilityDetailList, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("description", OptionOf(Scalar()))

    /** Name of the field.
      */
    def fieldName: SelectionBuilder[VulnerabilityDetailList, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("fieldName", OptionOf(Scalar()))

    /** List of details.
      */
    def items[A](
      onVulnerabilityDetailBase: SelectionBuilder[VulnerabilityDetailBase, A],
      onVulnerabilityDetailBoolean: SelectionBuilder[VulnerabilityDetailBoolean, A],
      onVulnerabilityDetailCode: SelectionBuilder[VulnerabilityDetailCode, A],
      onVulnerabilityDetailCommit: SelectionBuilder[VulnerabilityDetailCommit, A],
      onVulnerabilityDetailDiff: SelectionBuilder[VulnerabilityDetailDiff, A],
      onVulnerabilityDetailFileLocation: SelectionBuilder[VulnerabilityDetailFileLocation, A],
      onVulnerabilityDetailInt: SelectionBuilder[VulnerabilityDetailInt, A],
      onVulnerabilityDetailList: SelectionBuilder[VulnerabilityDetailList, A],
      onVulnerabilityDetailMarkdown: SelectionBuilder[VulnerabilityDetailMarkdown, A],
      onVulnerabilityDetailModuleLocation: SelectionBuilder[VulnerabilityDetailModuleLocation, A],
      onVulnerabilityDetailTable: SelectionBuilder[VulnerabilityDetailTable, A],
      onVulnerabilityDetailText: SelectionBuilder[VulnerabilityDetailText, A],
      onVulnerabilityDetailUrl: SelectionBuilder[VulnerabilityDetailUrl, A]
    ): SelectionBuilder[VulnerabilityDetailList, List[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "items",
        ListOf(
          ChoiceOf(
            Map(
              "VulnerabilityDetailBase" -> Obj(onVulnerabilityDetailBase),
              "VulnerabilityDetailBoolean" -> Obj(onVulnerabilityDetailBoolean),
              "VulnerabilityDetailCode" -> Obj(onVulnerabilityDetailCode),
              "VulnerabilityDetailCommit" -> Obj(onVulnerabilityDetailCommit),
              "VulnerabilityDetailDiff" -> Obj(onVulnerabilityDetailDiff),
              "VulnerabilityDetailFileLocation" -> Obj(onVulnerabilityDetailFileLocation),
              "VulnerabilityDetailInt" -> Obj(onVulnerabilityDetailInt),
              "VulnerabilityDetailList" -> Obj(onVulnerabilityDetailList),
              "VulnerabilityDetailMarkdown" -> Obj(onVulnerabilityDetailMarkdown),
              "VulnerabilityDetailModuleLocation" -> Obj(onVulnerabilityDetailModuleLocation),
              "VulnerabilityDetailTable" -> Obj(onVulnerabilityDetailTable),
              "VulnerabilityDetailText" -> Obj(onVulnerabilityDetailText),
              "VulnerabilityDetailUrl" -> Obj(onVulnerabilityDetailUrl)
            )
          )
        )
      )

    /** Name of the field.
      */
    def name: SelectionBuilder[VulnerabilityDetailList, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("name", OptionOf(Scalar()))
  }

  type VulnerabilityDetailMarkdown

  object VulnerabilityDetailMarkdown {

    /** Description of the field.
      */
    def description: SelectionBuilder[VulnerabilityDetailMarkdown, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("description", OptionOf(Scalar()))

    /** Name of the field.
      */
    def fieldName: SelectionBuilder[VulnerabilityDetailMarkdown, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("fieldName", OptionOf(Scalar()))

    /** Name of the field.
      */
    def name: SelectionBuilder[VulnerabilityDetailMarkdown, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("name", OptionOf(Scalar()))

    /** Value of the Markdown field.
      */
    def value: SelectionBuilder[VulnerabilityDetailMarkdown, String] = _root_.caliban.client.SelectionBuilder.Field("value", Scalar())
  }

  type VulnerabilityDetailModuleLocation

  object VulnerabilityDetailModuleLocation {

    /** Description of the field.
      */
    def description: SelectionBuilder[VulnerabilityDetailModuleLocation, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("description", OptionOf(Scalar()))

    /** Name of the field.
      */
    def fieldName: SelectionBuilder[VulnerabilityDetailModuleLocation, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("fieldName", OptionOf(Scalar()))

    /** Module name.
      */
    def moduleName: SelectionBuilder[VulnerabilityDetailModuleLocation, String] =
      _root_.caliban.client.SelectionBuilder.Field("moduleName", Scalar())

    /** Name of the field.
      */
    def name: SelectionBuilder[VulnerabilityDetailModuleLocation, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("name", OptionOf(Scalar()))

    /** Offset of the module location.
      */
    def offset: SelectionBuilder[VulnerabilityDetailModuleLocation, Int] = _root_.caliban.client.SelectionBuilder.Field("offset", Scalar())
  }

  type VulnerabilityDetailTable

  object VulnerabilityDetailTable {

    /** Description of the field.
      */
    def description: SelectionBuilder[VulnerabilityDetailTable, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("description", OptionOf(Scalar()))

    /** Name of the field.
      */
    def fieldName: SelectionBuilder[VulnerabilityDetailTable, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("fieldName", OptionOf(Scalar()))

    /** Table headers.
      */
    def headers[A](
      onVulnerabilityDetailBase: SelectionBuilder[VulnerabilityDetailBase, A],
      onVulnerabilityDetailBoolean: SelectionBuilder[VulnerabilityDetailBoolean, A],
      onVulnerabilityDetailCode: SelectionBuilder[VulnerabilityDetailCode, A],
      onVulnerabilityDetailCommit: SelectionBuilder[VulnerabilityDetailCommit, A],
      onVulnerabilityDetailDiff: SelectionBuilder[VulnerabilityDetailDiff, A],
      onVulnerabilityDetailFileLocation: SelectionBuilder[VulnerabilityDetailFileLocation, A],
      onVulnerabilityDetailInt: SelectionBuilder[VulnerabilityDetailInt, A],
      onVulnerabilityDetailList: SelectionBuilder[VulnerabilityDetailList, A],
      onVulnerabilityDetailMarkdown: SelectionBuilder[VulnerabilityDetailMarkdown, A],
      onVulnerabilityDetailModuleLocation: SelectionBuilder[VulnerabilityDetailModuleLocation, A],
      onVulnerabilityDetailTable: SelectionBuilder[VulnerabilityDetailTable, A],
      onVulnerabilityDetailText: SelectionBuilder[VulnerabilityDetailText, A],
      onVulnerabilityDetailUrl: SelectionBuilder[VulnerabilityDetailUrl, A]
    ): SelectionBuilder[VulnerabilityDetailTable, List[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "headers",
        ListOf(
          ChoiceOf(
            Map(
              "VulnerabilityDetailBase" -> Obj(onVulnerabilityDetailBase),
              "VulnerabilityDetailBoolean" -> Obj(onVulnerabilityDetailBoolean),
              "VulnerabilityDetailCode" -> Obj(onVulnerabilityDetailCode),
              "VulnerabilityDetailCommit" -> Obj(onVulnerabilityDetailCommit),
              "VulnerabilityDetailDiff" -> Obj(onVulnerabilityDetailDiff),
              "VulnerabilityDetailFileLocation" -> Obj(onVulnerabilityDetailFileLocation),
              "VulnerabilityDetailInt" -> Obj(onVulnerabilityDetailInt),
              "VulnerabilityDetailList" -> Obj(onVulnerabilityDetailList),
              "VulnerabilityDetailMarkdown" -> Obj(onVulnerabilityDetailMarkdown),
              "VulnerabilityDetailModuleLocation" -> Obj(onVulnerabilityDetailModuleLocation),
              "VulnerabilityDetailTable" -> Obj(onVulnerabilityDetailTable),
              "VulnerabilityDetailText" -> Obj(onVulnerabilityDetailText),
              "VulnerabilityDetailUrl" -> Obj(onVulnerabilityDetailUrl)
            )
          )
        )
      )

    /** Name of the field.
      */
    def name: SelectionBuilder[VulnerabilityDetailTable, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("name", OptionOf(Scalar()))

    /** Table rows.
      */
    def rows[A](
      onVulnerabilityDetailBase: SelectionBuilder[VulnerabilityDetailBase, A],
      onVulnerabilityDetailBoolean: SelectionBuilder[VulnerabilityDetailBoolean, A],
      onVulnerabilityDetailCode: SelectionBuilder[VulnerabilityDetailCode, A],
      onVulnerabilityDetailCommit: SelectionBuilder[VulnerabilityDetailCommit, A],
      onVulnerabilityDetailDiff: SelectionBuilder[VulnerabilityDetailDiff, A],
      onVulnerabilityDetailFileLocation: SelectionBuilder[VulnerabilityDetailFileLocation, A],
      onVulnerabilityDetailInt: SelectionBuilder[VulnerabilityDetailInt, A],
      onVulnerabilityDetailList: SelectionBuilder[VulnerabilityDetailList, A],
      onVulnerabilityDetailMarkdown: SelectionBuilder[VulnerabilityDetailMarkdown, A],
      onVulnerabilityDetailModuleLocation: SelectionBuilder[VulnerabilityDetailModuleLocation, A],
      onVulnerabilityDetailTable: SelectionBuilder[VulnerabilityDetailTable, A],
      onVulnerabilityDetailText: SelectionBuilder[VulnerabilityDetailText, A],
      onVulnerabilityDetailUrl: SelectionBuilder[VulnerabilityDetailUrl, A]
    ): SelectionBuilder[VulnerabilityDetailTable, List[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "rows",
        ListOf(
          ChoiceOf(
            Map(
              "VulnerabilityDetailBase" -> Obj(onVulnerabilityDetailBase),
              "VulnerabilityDetailBoolean" -> Obj(onVulnerabilityDetailBoolean),
              "VulnerabilityDetailCode" -> Obj(onVulnerabilityDetailCode),
              "VulnerabilityDetailCommit" -> Obj(onVulnerabilityDetailCommit),
              "VulnerabilityDetailDiff" -> Obj(onVulnerabilityDetailDiff),
              "VulnerabilityDetailFileLocation" -> Obj(onVulnerabilityDetailFileLocation),
              "VulnerabilityDetailInt" -> Obj(onVulnerabilityDetailInt),
              "VulnerabilityDetailList" -> Obj(onVulnerabilityDetailList),
              "VulnerabilityDetailMarkdown" -> Obj(onVulnerabilityDetailMarkdown),
              "VulnerabilityDetailModuleLocation" -> Obj(onVulnerabilityDetailModuleLocation),
              "VulnerabilityDetailTable" -> Obj(onVulnerabilityDetailTable),
              "VulnerabilityDetailText" -> Obj(onVulnerabilityDetailText),
              "VulnerabilityDetailUrl" -> Obj(onVulnerabilityDetailUrl)
            )
          )
        )
      )

  }

  type VulnerabilityDetailText

  object VulnerabilityDetailText {

    /** Description of the field.
      */
    def description: SelectionBuilder[VulnerabilityDetailText, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("description", OptionOf(Scalar()))

    /** Name of the field.
      */
    def fieldName: SelectionBuilder[VulnerabilityDetailText, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("fieldName", OptionOf(Scalar()))

    /** Name of the field.
      */
    def name: SelectionBuilder[VulnerabilityDetailText, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("name", OptionOf(Scalar()))

    /** Value of the text field.
      */
    def value: SelectionBuilder[VulnerabilityDetailText, String] = _root_.caliban.client.SelectionBuilder.Field("value", Scalar())
  }

  type VulnerabilityDetailUrl

  object VulnerabilityDetailUrl {

    /** Description of the field.
      */
    def description: SelectionBuilder[VulnerabilityDetailUrl, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("description", OptionOf(Scalar()))

    /** Name of the field.
      */
    def fieldName: SelectionBuilder[VulnerabilityDetailUrl, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("fieldName", OptionOf(Scalar()))

    /** Href of the URL.
      */
    def href: SelectionBuilder[VulnerabilityDetailUrl, String] = _root_.caliban.client.SelectionBuilder.Field("href", Scalar())

    /** Name of the field.
      */
    def name: SelectionBuilder[VulnerabilityDetailUrl, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("name", OptionOf(Scalar()))

    /** Text of the URL.
      */
    def text: SelectionBuilder[VulnerabilityDetailUrl, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("text", OptionOf(Scalar()))
  }

  type VulnerabilityDismissPayload

  object VulnerabilityDismissPayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[VulnerabilityDismissPayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[VulnerabilityDismissPayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** The vulnerability after dismissal.
      */
    def vulnerability[A](innerSelection: SelectionBuilder[Vulnerability, A]): SelectionBuilder[VulnerabilityDismissPayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("vulnerability", OptionOf(Obj(innerSelection)))
  }

  type VulnerabilityEdge

  object VulnerabilityEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[VulnerabilityEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](innerSelection: SelectionBuilder[Vulnerability, A]): SelectionBuilder[VulnerabilityEdge, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
  }

  type VulnerabilityExternalIssueLink

  object VulnerabilityExternalIssueLink {

    /** The external issue attached to the issue link.
      */
    def externalIssue[A](innerSelection: SelectionBuilder[ExternalIssue, A]): SelectionBuilder[VulnerabilityExternalIssueLink, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("externalIssue", OptionOf(Obj(innerSelection)))

    /** GraphQL ID of the external issue link.
      */
    def id: SelectionBuilder[VulnerabilityExternalIssueLink, VulnerabilitiesExternalIssueLinkID] =
      _root_.caliban.client.SelectionBuilder.Field("id", Scalar())

    /** Type of the external issue link.
      */
    def linkType: SelectionBuilder[VulnerabilityExternalIssueLink, VulnerabilityExternalIssueLinkType] =
      _root_.caliban.client.SelectionBuilder.Field("linkType", Scalar())
  }

  type VulnerabilityExternalIssueLinkConnection

  object VulnerabilityExternalIssueLinkConnection {

    /** A list of edges.
      */
    def edges[A](
      innerSelection: SelectionBuilder[VulnerabilityExternalIssueLinkEdge, A]
    ): SelectionBuilder[VulnerabilityExternalIssueLinkConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](
      innerSelection: SelectionBuilder[VulnerabilityExternalIssueLink, A]
    ): SelectionBuilder[VulnerabilityExternalIssueLinkConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[VulnerabilityExternalIssueLinkConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  }

  type VulnerabilityExternalIssueLinkCreatePayload

  object VulnerabilityExternalIssueLinkCreatePayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[VulnerabilityExternalIssueLinkCreatePayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[VulnerabilityExternalIssueLinkCreatePayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** The created external issue link.
      */
    def externalIssueLink[A](
      innerSelection: SelectionBuilder[VulnerabilityExternalIssueLink, A]
    ): SelectionBuilder[VulnerabilityExternalIssueLinkCreatePayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("externalIssueLink", OptionOf(Obj(innerSelection)))

  }

  type VulnerabilityExternalIssueLinkDestroyPayload

  object VulnerabilityExternalIssueLinkDestroyPayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[VulnerabilityExternalIssueLinkDestroyPayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[VulnerabilityExternalIssueLinkDestroyPayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))
  }

  type VulnerabilityExternalIssueLinkEdge

  object VulnerabilityExternalIssueLinkEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[VulnerabilityExternalIssueLinkEdge, String] =
      _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](
      innerSelection: SelectionBuilder[VulnerabilityExternalIssueLink, A]
    ): SelectionBuilder[VulnerabilityExternalIssueLinkEdge, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))

  }

  type VulnerabilityIdentifier

  object VulnerabilityIdentifier {

    /** External ID of the vulnerability identifier.
      */
    def externalId: SelectionBuilder[VulnerabilityIdentifier, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("externalId", OptionOf(Scalar()))

    /** External type of the vulnerability identifier.
      */
    def externalType: SelectionBuilder[VulnerabilityIdentifier, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("externalType", OptionOf(Scalar()))

    /** Name of the vulnerability identifier.
      */
    def name: SelectionBuilder[VulnerabilityIdentifier, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("name", OptionOf(Scalar()))

    /** URL of the vulnerability identifier.
      */
    def url: SelectionBuilder[VulnerabilityIdentifier, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("url", OptionOf(Scalar()))
  }

  type VulnerabilityIssueLink

  object VulnerabilityIssueLink {

    /** GraphQL ID of the vulnerability.
      */
    def id: SelectionBuilder[VulnerabilityIssueLink, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())

    /** The issue attached to issue link.
      */
    def issue[A](innerSelection: SelectionBuilder[Issue, A]): SelectionBuilder[VulnerabilityIssueLink, A] =
      _root_.caliban.client.SelectionBuilder.Field("issue", Obj(innerSelection))

    /** Type of the issue link.
      */
    def linkType: SelectionBuilder[VulnerabilityIssueLink, VulnerabilityIssueLinkType] =
      _root_.caliban.client.SelectionBuilder.Field("linkType", Scalar())
  }

  type VulnerabilityIssueLinkConnection

  object VulnerabilityIssueLinkConnection {

    /** A list of edges.
      */
    def edges[A](
      innerSelection: SelectionBuilder[VulnerabilityIssueLinkEdge, A]
    ): SelectionBuilder[VulnerabilityIssueLinkConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](
      innerSelection: SelectionBuilder[VulnerabilityIssueLink, A]
    ): SelectionBuilder[VulnerabilityIssueLinkConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[VulnerabilityIssueLinkConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  }

  type VulnerabilityIssueLinkEdge

  object VulnerabilityIssueLinkEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[VulnerabilityIssueLinkEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](innerSelection: SelectionBuilder[VulnerabilityIssueLink, A]): SelectionBuilder[VulnerabilityIssueLinkEdge, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
  }

  type VulnerabilityLocationContainerScanning

  object VulnerabilityLocationContainerScanning {

    /** Dependency containing the vulnerability.
      */
    def dependency[A](
      innerSelection: SelectionBuilder[VulnerableDependency, A]
    ): SelectionBuilder[VulnerabilityLocationContainerScanning, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("dependency", OptionOf(Obj(innerSelection)))

    /** Name of the vulnerable container image.
      */
    def image: SelectionBuilder[VulnerabilityLocationContainerScanning, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("image", OptionOf(Scalar()))

    /** Operating system that runs on the vulnerable container image.
      */
    def operatingSystem: SelectionBuilder[VulnerabilityLocationContainerScanning, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("operatingSystem", OptionOf(Scalar()))
  }

  type VulnerabilityLocationCoverageFuzzing

  object VulnerabilityLocationCoverageFuzzing {

    /** Blob path to the vulnerable file.
      */
    def blobPath: SelectionBuilder[VulnerabilityLocationCoverageFuzzing, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("blobPath", OptionOf(Scalar()))

    /** Number of the last relevant line in the vulnerable file.
      */
    def endLine: SelectionBuilder[VulnerabilityLocationCoverageFuzzing, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("endLine", OptionOf(Scalar()))

    /** Path to the vulnerable file.
      */
    def file: SelectionBuilder[VulnerabilityLocationCoverageFuzzing, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("file", OptionOf(Scalar()))

    /** Number of the first relevant line in the vulnerable file.
      */
    def startLine: SelectionBuilder[VulnerabilityLocationCoverageFuzzing, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("startLine", OptionOf(Scalar()))

    /** Class containing the vulnerability.
      */
    def vulnerableClass: SelectionBuilder[VulnerabilityLocationCoverageFuzzing, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("vulnerableClass", OptionOf(Scalar()))

    /** Method containing the vulnerability.
      */
    def vulnerableMethod: SelectionBuilder[VulnerabilityLocationCoverageFuzzing, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("vulnerableMethod", OptionOf(Scalar()))
  }

  type VulnerabilityLocationDast

  object VulnerabilityLocationDast {

    /** Domain name of the vulnerable request.
      */
    def hostname: SelectionBuilder[VulnerabilityLocationDast, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("hostname", OptionOf(Scalar()))

    /** Query parameter for the URL on which the vulnerability occurred.
      */
    def param: SelectionBuilder[VulnerabilityLocationDast, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("param", OptionOf(Scalar()))

    /** URL path and query string of the vulnerable request.
      */
    def path: SelectionBuilder[VulnerabilityLocationDast, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("path", OptionOf(Scalar()))

    /** HTTP method of the vulnerable request.
      */
    def requestMethod: SelectionBuilder[VulnerabilityLocationDast, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("requestMethod", OptionOf(Scalar()))
  }

  type VulnerabilityLocationDependencyScanning

  object VulnerabilityLocationDependencyScanning {

    /** Blob path to the vulnerable file.
      */
    def blobPath: SelectionBuilder[VulnerabilityLocationDependencyScanning, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("blobPath", OptionOf(Scalar()))

    /** Dependency containing the vulnerability.
      */
    def dependency[A](
      innerSelection: SelectionBuilder[VulnerableDependency, A]
    ): SelectionBuilder[VulnerabilityLocationDependencyScanning, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("dependency", OptionOf(Obj(innerSelection)))

    /** Path to the vulnerable file.
      */
    def file: SelectionBuilder[VulnerabilityLocationDependencyScanning, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("file", OptionOf(Scalar()))
  }

  type VulnerabilityLocationSast

  object VulnerabilityLocationSast {

    /** Blob path to the vulnerable file.
      */
    def blobPath: SelectionBuilder[VulnerabilityLocationSast, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("blobPath", OptionOf(Scalar()))

    /** Number of the last relevant line in the vulnerable file.
      */
    def endLine: SelectionBuilder[VulnerabilityLocationSast, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("endLine", OptionOf(Scalar()))

    /** Path to the vulnerable file.
      */
    def file: SelectionBuilder[VulnerabilityLocationSast, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("file", OptionOf(Scalar()))

    /** Number of the first relevant line in the vulnerable file.
      */
    def startLine: SelectionBuilder[VulnerabilityLocationSast, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("startLine", OptionOf(Scalar()))

    /** Class containing the vulnerability.
      */
    def vulnerableClass: SelectionBuilder[VulnerabilityLocationSast, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("vulnerableClass", OptionOf(Scalar()))

    /** Method containing the vulnerability.
      */
    def vulnerableMethod: SelectionBuilder[VulnerabilityLocationSast, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("vulnerableMethod", OptionOf(Scalar()))
  }

  type VulnerabilityLocationSecretDetection

  object VulnerabilityLocationSecretDetection {

    /** Blob path to the vulnerable file.
      */
    def blobPath: SelectionBuilder[VulnerabilityLocationSecretDetection, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("blobPath", OptionOf(Scalar()))

    /** Number of the last relevant line in the vulnerable file.
      */
    def endLine: SelectionBuilder[VulnerabilityLocationSecretDetection, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("endLine", OptionOf(Scalar()))

    /** Path to the vulnerable file.
      */
    def file: SelectionBuilder[VulnerabilityLocationSecretDetection, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("file", OptionOf(Scalar()))

    /** Number of the first relevant line in the vulnerable file.
      */
    def startLine: SelectionBuilder[VulnerabilityLocationSecretDetection, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("startLine", OptionOf(Scalar()))

    /** Class containing the vulnerability.
      */
    def vulnerableClass: SelectionBuilder[VulnerabilityLocationSecretDetection, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("vulnerableClass", OptionOf(Scalar()))

    /** Method containing the vulnerability.
      */
    def vulnerableMethod: SelectionBuilder[VulnerabilityLocationSecretDetection, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("vulnerableMethod", OptionOf(Scalar()))
  }

  type VulnerabilityPermissions

  object VulnerabilityPermissions {

    /** Indicates the user can perform `admin_vulnerability` on this resource
      */
    def adminVulnerability: SelectionBuilder[VulnerabilityPermissions, Boolean] =
      _root_.caliban.client.SelectionBuilder.Field("adminVulnerability", Scalar())

    /** Indicates the user can perform `admin_vulnerability_external_issue_link` on this resource
      */
    def adminVulnerabilityExternalIssueLink: SelectionBuilder[VulnerabilityPermissions, Boolean] =
      _root_.caliban.client.SelectionBuilder.Field("adminVulnerabilityExternalIssueLink", Scalar())

    /** Indicates the user can perform `admin_vulnerability_issue_link` on this resource
      */
    def adminVulnerabilityIssueLink: SelectionBuilder[VulnerabilityPermissions, Boolean] =
      _root_.caliban.client.SelectionBuilder.Field("adminVulnerabilityIssueLink", Scalar())

    /** Indicates the user can perform `create_vulnerability` on this resource
      */
    def createVulnerability: SelectionBuilder[VulnerabilityPermissions, Boolean] =
      _root_.caliban.client.SelectionBuilder.Field("createVulnerability", Scalar())

    /** Indicates the user can perform `create_vulnerability_export` on this resource
      */
    def createVulnerabilityExport: SelectionBuilder[VulnerabilityPermissions, Boolean] =
      _root_.caliban.client.SelectionBuilder.Field("createVulnerabilityExport", Scalar())

    /** Indicates the user can perform `create_vulnerability_feedback` on this resource
      */
    def createVulnerabilityFeedback: SelectionBuilder[VulnerabilityPermissions, Boolean] =
      _root_.caliban.client.SelectionBuilder.Field("createVulnerabilityFeedback", Scalar())

    /** Indicates the user can perform `destroy_vulnerability_feedback` on this resource
      */
    def destroyVulnerabilityFeedback: SelectionBuilder[VulnerabilityPermissions, Boolean] =
      _root_.caliban.client.SelectionBuilder.Field("destroyVulnerabilityFeedback", Scalar())

    /** Indicates the user can perform `read_vulnerability_feedback` on this resource
      */
    def readVulnerabilityFeedback: SelectionBuilder[VulnerabilityPermissions, Boolean] =
      _root_.caliban.client.SelectionBuilder.Field("readVulnerabilityFeedback", Scalar())

    /** Indicates the user can perform `update_vulnerability_feedback` on this resource
      */
    def updateVulnerabilityFeedback: SelectionBuilder[VulnerabilityPermissions, Boolean] =
      _root_.caliban.client.SelectionBuilder.Field("updateVulnerabilityFeedback", Scalar())
  }

  type VulnerabilityResolvePayload

  object VulnerabilityResolvePayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[VulnerabilityResolvePayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[VulnerabilityResolvePayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** The vulnerability after state change.
      */
    def vulnerability[A](innerSelection: SelectionBuilder[Vulnerability, A]): SelectionBuilder[VulnerabilityResolvePayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("vulnerability", OptionOf(Obj(innerSelection)))
  }

  type VulnerabilityRevertToDetectedPayload

  object VulnerabilityRevertToDetectedPayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[VulnerabilityRevertToDetectedPayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[VulnerabilityRevertToDetectedPayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** The vulnerability after revert.
      */
    def vulnerability[A](
      innerSelection: SelectionBuilder[Vulnerability, A]
    ): SelectionBuilder[VulnerabilityRevertToDetectedPayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("vulnerability", OptionOf(Obj(innerSelection)))

  }

  type VulnerabilityScanner

  object VulnerabilityScanner {

    /** External ID of the vulnerability scanner.
      */
    def externalId: SelectionBuilder[VulnerabilityScanner, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("externalId", OptionOf(Scalar()))

    /** ID of the scanner.
      */
    def id: SelectionBuilder[VulnerabilityScanner, Option[String]] = _root_.caliban.client.SelectionBuilder.Field("id", OptionOf(Scalar()))

    /** Name of the vulnerability scanner.
      */
    def name: SelectionBuilder[VulnerabilityScanner, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("name", OptionOf(Scalar()))

    /** Type of the vulnerability report.
      */
    def reportType: SelectionBuilder[VulnerabilityScanner, Option[VulnerabilityReportType]] =
      _root_.caliban.client.SelectionBuilder.Field("reportType", OptionOf(Scalar()))

    /** Vendor of the vulnerability scanner.
      */
    def vendor: SelectionBuilder[VulnerabilityScanner, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("vendor", OptionOf(Scalar()))
  }

  type VulnerabilityScannerConnection

  object VulnerabilityScannerConnection {

    /** A list of edges.
      */
    def edges[A](
      innerSelection: SelectionBuilder[VulnerabilityScannerEdge, A]
    ): SelectionBuilder[VulnerabilityScannerConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** A list of nodes.
      */
    def nodes[A](
      innerSelection: SelectionBuilder[VulnerabilityScanner, A]
    ): SelectionBuilder[VulnerabilityScannerConnection, Option[List[Option[A]]]] =
      _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /** Information to aid in pagination.
      */
    def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[VulnerabilityScannerConnection, A] =
      _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  }

  type VulnerabilityScannerEdge

  object VulnerabilityScannerEdge {

    /** A cursor for use in pagination.
      */
    def cursor: SelectionBuilder[VulnerabilityScannerEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())

    /** The item at the end of the edge.
      */
    def node[A](innerSelection: SelectionBuilder[VulnerabilityScanner, A]): SelectionBuilder[VulnerabilityScannerEdge, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
  }

  type VulnerabilitySeveritiesCount

  object VulnerabilitySeveritiesCount {

    /** Number of vulnerabilities of CRITICAL severity of the project
      */
    def critical: SelectionBuilder[VulnerabilitySeveritiesCount, Option[Int]] =
      _root_.caliban.client.SelectionBuilder.Field("critical", OptionOf(Scalar()))

    /** Number of vulnerabilities of HIGH severity of the project
      */
    def high: SelectionBuilder[VulnerabilitySeveritiesCount, Option[Int]] =
      _root_.caliban.client.SelectionBuilder.Field("high", OptionOf(Scalar()))

    /** Number of vulnerabilities of INFO severity of the project
      */
    def info: SelectionBuilder[VulnerabilitySeveritiesCount, Option[Int]] =
      _root_.caliban.client.SelectionBuilder.Field("info", OptionOf(Scalar()))

    /** Number of vulnerabilities of LOW severity of the project
      */
    def low: SelectionBuilder[VulnerabilitySeveritiesCount, Option[Int]] =
      _root_.caliban.client.SelectionBuilder.Field("low", OptionOf(Scalar()))

    /** Number of vulnerabilities of MEDIUM severity of the project
      */
    def medium: SelectionBuilder[VulnerabilitySeveritiesCount, Option[Int]] =
      _root_.caliban.client.SelectionBuilder.Field("medium", OptionOf(Scalar()))

    /** Number of vulnerabilities of UNKNOWN severity of the project
      */
    def unknown: SelectionBuilder[VulnerabilitySeveritiesCount, Option[Int]] =
      _root_.caliban.client.SelectionBuilder.Field("unknown", OptionOf(Scalar()))
  }

  type VulnerableDependency

  object VulnerableDependency {

    /** The package associated with the vulnerable dependency.
      */
    def `package`[A](innerSelection: SelectionBuilder[VulnerablePackage, A]): SelectionBuilder[VulnerableDependency, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("package", OptionOf(Obj(innerSelection)))

    /** The version of the vulnerable dependency.
      */
    def version: SelectionBuilder[VulnerableDependency, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("version", OptionOf(Scalar()))
  }

  type VulnerablePackage

  object VulnerablePackage {

    /** The name of the vulnerable package.
      */
    def name: SelectionBuilder[VulnerablePackage, Option[String]] = _root_.caliban.client.SelectionBuilder.Field("name", OptionOf(Scalar()))
  }

  type VulnerableProjectsByGrade

  object VulnerableProjectsByGrade {

    /** Number of projects within this grade.
      */
    def count: SelectionBuilder[VulnerableProjectsByGrade, Int] = _root_.caliban.client.SelectionBuilder.Field("count", Scalar())

    /** Grade based on the highest severity vulnerability present.
      */
    def grade: SelectionBuilder[VulnerableProjectsByGrade, VulnerabilityGrade] =
      _root_.caliban.client.SelectionBuilder.Field("grade", Scalar())

    /** Projects within this grade.
      */
    def projects[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[ProjectConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[VulnerableProjectsByGrade, A] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "projects",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

  }

  type iterationCreatePayload

  object iterationCreatePayload {

    /** A unique identifier for the client performing the mutation.
      */
    def clientMutationId: SelectionBuilder[iterationCreatePayload, Option[String]] =
      _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))

    /** Errors encountered during execution of the mutation.
      */
    def errors: SelectionBuilder[iterationCreatePayload, List[String]] =
      _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Scalar()))

    /** The created iteration.
      */
    def iteration[A](innerSelection: SelectionBuilder[Iteration, A]): SelectionBuilder[iterationCreatePayload, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("iteration", OptionOf(Obj(innerSelection)))
  }

  case class AddProjectToSecurityDashboardInput(id: ProjectID, clientMutationId: Option[String] = None)

  object AddProjectToSecurityDashboardInput {

    implicit val encoder: ArgEncoder[AddProjectToSecurityDashboardInput] = new ArgEncoder[AddProjectToSecurityDashboardInput] {

      override def encode(value: AddProjectToSecurityDashboardInput): __Value =
        __ObjectValue(
          List(
            "id" -> implicitly[ArgEncoder[ProjectID]].encode(value.id),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class AdminSidekiqQueuesDeleteJobsInput(
    user: Option[String] = None,
    project: Option[String] = None,
    rootNamespace: Option[String] = None,
    subscriptionPlan: Option[String] = None,
    callerId: Option[String] = None,
    remoteIp: Option[String] = None,
    relatedClass: Option[String] = None,
    featureCategory: Option[String] = None,
    clientId: Option[String] = None,
    queueName: String,
    clientMutationId: Option[String] = None
  )

  object AdminSidekiqQueuesDeleteJobsInput {

    implicit val encoder: ArgEncoder[AdminSidekiqQueuesDeleteJobsInput] = new ArgEncoder[AdminSidekiqQueuesDeleteJobsInput] {

      override def encode(value: AdminSidekiqQueuesDeleteJobsInput): __Value =
        __ObjectValue(
          List(
            "user" -> value.user.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "project" -> value.project.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "rootNamespace" -> value.rootNamespace.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "subscriptionPlan" -> value.subscriptionPlan.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "callerId" -> value.callerId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "remoteIp" -> value.remoteIp.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "relatedClass" -> value.relatedClass.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "featureCategory" -> value.featureCategory.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "clientId" -> value.clientId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "queueName" -> implicitly[ArgEncoder[String]].encode(value.queueName),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class AlertManagementPayloadAlertFieldInput(
    fieldName: AlertManagementPayloadAlertFieldName,
    path: List[PayloadAlertFieldPathSegment] = Nil,
    label: Option[String] = None,
    `type`: AlertManagementPayloadAlertFieldType
  )

  object AlertManagementPayloadAlertFieldInput {

    implicit val encoder: ArgEncoder[AlertManagementPayloadAlertFieldInput] = new ArgEncoder[AlertManagementPayloadAlertFieldInput] {

      override def encode(value: AlertManagementPayloadAlertFieldInput): __Value =
        __ObjectValue(
          List(
            "fieldName" -> implicitly[ArgEncoder[AlertManagementPayloadAlertFieldName]].encode(value.fieldName),
            "path" -> __ListValue(value.path.map(value => implicitly[ArgEncoder[PayloadAlertFieldPathSegment]].encode(value))),
            "label" -> value.label.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "type" -> implicitly[ArgEncoder[AlertManagementPayloadAlertFieldType]].encode(value.`type`)
          )
        )

    }

  }

  case class AlertSetAssigneesInput(
    projectPath: String,
    iid: String,
    assigneeUsernames: List[String] = Nil,
    operationMode: Option[MutationOperationMode] = None,
    clientMutationId: Option[String] = None
  )

  object AlertSetAssigneesInput {

    implicit val encoder: ArgEncoder[AlertSetAssigneesInput] = new ArgEncoder[AlertSetAssigneesInput] {

      override def encode(value: AlertSetAssigneesInput): __Value =
        __ObjectValue(
          List(
            "projectPath" -> implicitly[ArgEncoder[String]].encode(value.projectPath),
            "iid" -> implicitly[ArgEncoder[String]].encode(value.iid),
            "assigneeUsernames" -> __ListValue(value.assigneeUsernames.map(value => implicitly[ArgEncoder[String]].encode(value))),
            "operationMode" -> value
              .operationMode
              .fold(__NullValue: __Value)(value => implicitly[ArgEncoder[MutationOperationMode]].encode(value)),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class AlertTodoCreateInput(projectPath: String, iid: String, clientMutationId: Option[String] = None)

  object AlertTodoCreateInput {

    implicit val encoder: ArgEncoder[AlertTodoCreateInput] = new ArgEncoder[AlertTodoCreateInput] {

      override def encode(value: AlertTodoCreateInput): __Value =
        __ObjectValue(
          List(
            "projectPath" -> implicitly[ArgEncoder[String]].encode(value.projectPath),
            "iid" -> implicitly[ArgEncoder[String]].encode(value.iid),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class ApiFuzzingCiConfigurationCreateInput(
    projectPath: String,
    apiSpecificationFile: String,
    authPassword: Option[String] = None,
    authUsername: Option[String] = None,
    scanMode: ApiFuzzingScanMode,
    scanProfile: Option[String] = None,
    target: String,
    clientMutationId: Option[String] = None
  )

  object ApiFuzzingCiConfigurationCreateInput {

    implicit val encoder: ArgEncoder[ApiFuzzingCiConfigurationCreateInput] = new ArgEncoder[ApiFuzzingCiConfigurationCreateInput] {

      override def encode(value: ApiFuzzingCiConfigurationCreateInput): __Value =
        __ObjectValue(
          List(
            "projectPath" -> implicitly[ArgEncoder[String]].encode(value.projectPath),
            "apiSpecificationFile" -> implicitly[ArgEncoder[String]].encode(value.apiSpecificationFile),
            "authPassword" -> value.authPassword.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "authUsername" -> value.authUsername.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "scanMode" -> implicitly[ArgEncoder[ApiFuzzingScanMode]].encode(value.scanMode),
            "scanProfile" -> value.scanProfile.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "target" -> implicitly[ArgEncoder[String]].encode(value.target),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class AwardEmojiAddInput(awardableId: AwardableID, name: String, clientMutationId: Option[String] = None)

  object AwardEmojiAddInput {

    implicit val encoder: ArgEncoder[AwardEmojiAddInput] = new ArgEncoder[AwardEmojiAddInput] {

      override def encode(value: AwardEmojiAddInput): __Value =
        __ObjectValue(
          List(
            "awardableId" -> implicitly[ArgEncoder[AwardableID]].encode(value.awardableId),
            "name" -> implicitly[ArgEncoder[String]].encode(value.name),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class AwardEmojiRemoveInput(awardableId: AwardableID, name: String, clientMutationId: Option[String] = None)

  object AwardEmojiRemoveInput {

    implicit val encoder: ArgEncoder[AwardEmojiRemoveInput] = new ArgEncoder[AwardEmojiRemoveInput] {

      override def encode(value: AwardEmojiRemoveInput): __Value =
        __ObjectValue(
          List(
            "awardableId" -> implicitly[ArgEncoder[AwardableID]].encode(value.awardableId),
            "name" -> implicitly[ArgEncoder[String]].encode(value.name),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class AwardEmojiToggleInput(awardableId: AwardableID, name: String, clientMutationId: Option[String] = None)

  object AwardEmojiToggleInput {

    implicit val encoder: ArgEncoder[AwardEmojiToggleInput] = new ArgEncoder[AwardEmojiToggleInput] {

      override def encode(value: AwardEmojiToggleInput): __Value =
        __ObjectValue(
          List(
            "awardableId" -> implicitly[ArgEncoder[AwardableID]].encode(value.awardableId),
            "name" -> implicitly[ArgEncoder[String]].encode(value.name),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class BoardEpicCreateInput(
    groupPath: String,
    boardId: BoardsEpicBoardID,
    listId: BoardsEpicListID,
    title: String,
    clientMutationId: Option[String] = None
  )

  object BoardEpicCreateInput {

    implicit val encoder: ArgEncoder[BoardEpicCreateInput] = new ArgEncoder[BoardEpicCreateInput] {

      override def encode(value: BoardEpicCreateInput): __Value =
        __ObjectValue(
          List(
            "groupPath" -> implicitly[ArgEncoder[String]].encode(value.groupPath),
            "boardId" -> implicitly[ArgEncoder[BoardsEpicBoardID]].encode(value.boardId),
            "listId" -> implicitly[ArgEncoder[BoardsEpicListID]].encode(value.listId),
            "title" -> implicitly[ArgEncoder[String]].encode(value.title),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class BoardIssueInput(
    labelName: Option[List[Option[String]]] = None,
    authorUsername: Option[String] = None,
    myReactionEmoji: Option[String] = None,
    iids: Option[List[String]] = None,
    milestoneTitle: Option[String] = None,
    assigneeUsername: Option[List[Option[String]]] = None,
    releaseTag: Option[String] = None,
    epicId: Option[EpicID] = None,
    iterationTitle: Option[String] = None,
    weight: Option[String] = None,
    iterationId: Option[List[IterationID]] = None,
    not: Option[NegatedBoardIssueInput] = None,
    search: Option[String] = None,
    assigneeWildcardId: Option[AssigneeWildcardId] = None,
    epicWildcardId: Option[EpicWildcardId] = None,
    iterationWildcardId: Option[IterationWildcardId] = None,
    weightWildcardId: Option[WeightWildcardId] = None
  )

  object BoardIssueInput {

    implicit val encoder: ArgEncoder[BoardIssueInput] = new ArgEncoder[BoardIssueInput] {

      override def encode(value: BoardIssueInput): __Value =
        __ObjectValue(
          List(
            "labelName" -> value
              .labelName
              .fold(__NullValue: __Value)(value =>
                __ListValue(value.map(value => value.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))))
              ),
            "authorUsername" -> value.authorUsername.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "myReactionEmoji" -> value.myReactionEmoji.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "iids" -> value
              .iids
              .fold(__NullValue: __Value)(value => __ListValue(value.map(value => implicitly[ArgEncoder[String]].encode(value)))),
            "milestoneTitle" -> value.milestoneTitle.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "assigneeUsername" -> value
              .assigneeUsername
              .fold(__NullValue: __Value)(value =>
                __ListValue(value.map(value => value.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))))
              ),
            "releaseTag" -> value.releaseTag.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "epicId" -> value.epicId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[EpicID]].encode(value)),
            "iterationTitle" -> value.iterationTitle.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "weight" -> value.weight.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "iterationId" -> value
              .iterationId
              .fold(__NullValue: __Value)(value => __ListValue(value.map(value => implicitly[ArgEncoder[IterationID]].encode(value)))),
            "not" -> value.not.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[NegatedBoardIssueInput]].encode(value)),
            "search" -> value.search.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "assigneeWildcardId" -> value
              .assigneeWildcardId
              .fold(__NullValue: __Value)(value => implicitly[ArgEncoder[AssigneeWildcardId]].encode(value)),
            "epicWildcardId" -> value
              .epicWildcardId
              .fold(__NullValue: __Value)(value => implicitly[ArgEncoder[EpicWildcardId]].encode(value)),
            "iterationWildcardId" -> value
              .iterationWildcardId
              .fold(__NullValue: __Value)(value => implicitly[ArgEncoder[IterationWildcardId]].encode(value)),
            "weightWildcardId" -> value
              .weightWildcardId
              .fold(__NullValue: __Value)(value => implicitly[ArgEncoder[WeightWildcardId]].encode(value))
          )
        )

    }

  }

  case class BoardListCreateInput(
    backlog: Option[Boolean] = None,
    labelId: Option[LabelID] = None,
    boardId: BoardID,
    milestoneId: Option[MilestoneID] = None,
    iterationId: Option[IterationID] = None,
    assigneeId: Option[UserID] = None,
    clientMutationId: Option[String] = None
  )

  object BoardListCreateInput {

    implicit val encoder: ArgEncoder[BoardListCreateInput] = new ArgEncoder[BoardListCreateInput] {

      override def encode(value: BoardListCreateInput): __Value =
        __ObjectValue(
          List(
            "backlog" -> value.backlog.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)),
            "labelId" -> value.labelId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[LabelID]].encode(value)),
            "boardId" -> implicitly[ArgEncoder[BoardID]].encode(value.boardId),
            "milestoneId" -> value.milestoneId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[MilestoneID]].encode(value)),
            "iterationId" -> value.iterationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[IterationID]].encode(value)),
            "assigneeId" -> value.assigneeId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[UserID]].encode(value)),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class BoardListUpdateLimitMetricsInput(
    listId: ListID,
    limitMetric: Option[ListLimitMetric] = None,
    maxIssueCount: Option[Int] = None,
    maxIssueWeight: Option[Int] = None,
    clientMutationId: Option[String] = None
  )

  object BoardListUpdateLimitMetricsInput {

    implicit val encoder: ArgEncoder[BoardListUpdateLimitMetricsInput] = new ArgEncoder[BoardListUpdateLimitMetricsInput] {

      override def encode(value: BoardListUpdateLimitMetricsInput): __Value =
        __ObjectValue(
          List(
            "listId" -> implicitly[ArgEncoder[ListID]].encode(value.listId),
            "limitMetric" -> value.limitMetric.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[ListLimitMetric]].encode(value)),
            "maxIssueCount" -> value.maxIssueCount.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Int]].encode(value)),
            "maxIssueWeight" -> value.maxIssueWeight.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Int]].encode(value)),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class BulkEnableDevopsAdoptionNamespacesInput(
    namespaceIds: List[NamespaceID] = Nil,
    displayNamespaceId: Option[NamespaceID] = None,
    clientMutationId: Option[String] = None
  )

  object BulkEnableDevopsAdoptionNamespacesInput {

    implicit val encoder: ArgEncoder[BulkEnableDevopsAdoptionNamespacesInput] = new ArgEncoder[BulkEnableDevopsAdoptionNamespacesInput] {

      override def encode(value: BulkEnableDevopsAdoptionNamespacesInput): __Value =
        __ObjectValue(
          List(
            "namespaceIds" -> __ListValue(value.namespaceIds.map(value => implicitly[ArgEncoder[NamespaceID]].encode(value))),
            "displayNamespaceId" -> value
              .displayNamespaceId
              .fold(__NullValue: __Value)(value => implicitly[ArgEncoder[NamespaceID]].encode(value)),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class CiCdSettingsUpdateInput(
    fullPath: String,
    keepLatestArtifact: Option[Boolean] = None,
    jobTokenScopeEnabled: Option[Boolean] = None,
    mergePipelinesEnabled: Option[Boolean] = None,
    mergeTrainsEnabled: Option[Boolean] = None,
    clientMutationId: Option[String] = None
  )

  object CiCdSettingsUpdateInput {

    implicit val encoder: ArgEncoder[CiCdSettingsUpdateInput] = new ArgEncoder[CiCdSettingsUpdateInput] {

      override def encode(value: CiCdSettingsUpdateInput): __Value =
        __ObjectValue(
          List(
            "fullPath" -> implicitly[ArgEncoder[String]].encode(value.fullPath),
            "keepLatestArtifact" -> value
              .keepLatestArtifact
              .fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)),
            "jobTokenScopeEnabled" -> value
              .jobTokenScopeEnabled
              .fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)),
            "mergePipelinesEnabled" -> value
              .mergePipelinesEnabled
              .fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)),
            "mergeTrainsEnabled" -> value
              .mergeTrainsEnabled
              .fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class CiJobTokenScopeAddProjectInput(projectPath: String, targetProjectPath: String, clientMutationId: Option[String] = None)

  object CiJobTokenScopeAddProjectInput {

    implicit val encoder: ArgEncoder[CiJobTokenScopeAddProjectInput] = new ArgEncoder[CiJobTokenScopeAddProjectInput] {

      override def encode(value: CiJobTokenScopeAddProjectInput): __Value =
        __ObjectValue(
          List(
            "projectPath" -> implicitly[ArgEncoder[String]].encode(value.projectPath),
            "targetProjectPath" -> implicitly[ArgEncoder[String]].encode(value.targetProjectPath),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class CiJobTokenScopeRemoveProjectInput(projectPath: String, targetProjectPath: String, clientMutationId: Option[String] = None)

  object CiJobTokenScopeRemoveProjectInput {

    implicit val encoder: ArgEncoder[CiJobTokenScopeRemoveProjectInput] = new ArgEncoder[CiJobTokenScopeRemoveProjectInput] {

      override def encode(value: CiJobTokenScopeRemoveProjectInput): __Value =
        __ObjectValue(
          List(
            "projectPath" -> implicitly[ArgEncoder[String]].encode(value.projectPath),
            "targetProjectPath" -> implicitly[ArgEncoder[String]].encode(value.targetProjectPath),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class ClusterAgentDeleteInput(id: ClustersAgentID, clientMutationId: Option[String] = None)

  object ClusterAgentDeleteInput {

    implicit val encoder: ArgEncoder[ClusterAgentDeleteInput] = new ArgEncoder[ClusterAgentDeleteInput] {

      override def encode(value: ClusterAgentDeleteInput): __Value =
        __ObjectValue(
          List(
            "id" -> implicitly[ArgEncoder[ClustersAgentID]].encode(value.id),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class ClusterAgentTokenCreateInput(
    clusterAgentId: ClustersAgentID,
    description: Option[String] = None,
    name: String,
    clientMutationId: Option[String] = None
  )

  object ClusterAgentTokenCreateInput {

    implicit val encoder: ArgEncoder[ClusterAgentTokenCreateInput] = new ArgEncoder[ClusterAgentTokenCreateInput] {

      override def encode(value: ClusterAgentTokenCreateInput): __Value =
        __ObjectValue(
          List(
            "clusterAgentId" -> implicitly[ArgEncoder[ClustersAgentID]].encode(value.clusterAgentId),
            "description" -> value.description.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "name" -> implicitly[ArgEncoder[String]].encode(value.name),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class ClusterAgentTokenDeleteInput(id: ClustersAgentTokenID, clientMutationId: Option[String] = None)

  object ClusterAgentTokenDeleteInput {

    implicit val encoder: ArgEncoder[ClusterAgentTokenDeleteInput] = new ArgEncoder[ClusterAgentTokenDeleteInput] {

      override def encode(value: ClusterAgentTokenDeleteInput): __Value =
        __ObjectValue(
          List(
            "id" -> implicitly[ArgEncoder[ClustersAgentTokenID]].encode(value.id),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class CommitAction(
    action: CommitActionMode,
    filePath: String,
    content: Option[String] = None,
    previousPath: Option[String] = None,
    lastCommitId: Option[String] = None,
    executeFilemode: Option[Boolean] = None,
    encoding: Option[CommitEncoding] = None
  )

  object CommitAction {

    implicit val encoder: ArgEncoder[CommitAction] = new ArgEncoder[CommitAction] {

      override def encode(value: CommitAction): __Value =
        __ObjectValue(
          List(
            "action" -> implicitly[ArgEncoder[CommitActionMode]].encode(value.action),
            "filePath" -> implicitly[ArgEncoder[String]].encode(value.filePath),
            "content" -> value.content.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "previousPath" -> value.previousPath.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "lastCommitId" -> value.lastCommitId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "executeFilemode" -> value.executeFilemode.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)),
            "encoding" -> value.encoding.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[CommitEncoding]].encode(value))
          )
        )

    }

  }

  case class CommitCreateInput(
    projectPath: String,
    branch: String,
    startBranch: Option[String] = None,
    message: String,
    actions: List[CommitAction] = Nil,
    clientMutationId: Option[String] = None
  )

  object CommitCreateInput {

    implicit val encoder: ArgEncoder[CommitCreateInput] = new ArgEncoder[CommitCreateInput] {

      override def encode(value: CommitCreateInput): __Value =
        __ObjectValue(
          List(
            "projectPath" -> implicitly[ArgEncoder[String]].encode(value.projectPath),
            "branch" -> implicitly[ArgEncoder[String]].encode(value.branch),
            "startBranch" -> value.startBranch.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "message" -> implicitly[ArgEncoder[String]].encode(value.message),
            "actions" -> __ListValue(value.actions.map(value => implicitly[ArgEncoder[CommitAction]].encode(value))),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class ComplianceFrameworkInput(
    name: Option[String] = None,
    description: Option[String] = None,
    color: Option[String] = None,
    pipelineConfigurationFullPath: Option[String] = None
  )

  object ComplianceFrameworkInput {

    implicit val encoder: ArgEncoder[ComplianceFrameworkInput] = new ArgEncoder[ComplianceFrameworkInput] {

      override def encode(value: ComplianceFrameworkInput): __Value =
        __ObjectValue(
          List(
            "name" -> value.name.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "description" -> value.description.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "color" -> value.color.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "pipelineConfigurationFullPath" -> value
              .pipelineConfigurationFullPath
              .fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class ConfigureSastInput(projectPath: String, configuration: SastCiConfigurationInput, clientMutationId: Option[String] = None)

  object ConfigureSastInput {

    implicit val encoder: ArgEncoder[ConfigureSastInput] = new ArgEncoder[ConfigureSastInput] {

      override def encode(value: ConfigureSastInput): __Value =
        __ObjectValue(
          List(
            "projectPath" -> implicitly[ArgEncoder[String]].encode(value.projectPath),
            "configuration" -> implicitly[ArgEncoder[SastCiConfigurationInput]].encode(value.configuration),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class ConfigureSecretDetectionInput(projectPath: String, clientMutationId: Option[String] = None)

  object ConfigureSecretDetectionInput {

    implicit val encoder: ArgEncoder[ConfigureSecretDetectionInput] = new ArgEncoder[ConfigureSecretDetectionInput] {

      override def encode(value: ConfigureSecretDetectionInput): __Value =
        __ObjectValue(
          List(
            "projectPath" -> implicitly[ArgEncoder[String]].encode(value.projectPath),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class CreateAlertIssueInput(projectPath: String, iid: String, clientMutationId: Option[String] = None)

  object CreateAlertIssueInput {

    implicit val encoder: ArgEncoder[CreateAlertIssueInput] = new ArgEncoder[CreateAlertIssueInput] {

      override def encode(value: CreateAlertIssueInput): __Value =
        __ObjectValue(
          List(
            "projectPath" -> implicitly[ArgEncoder[String]].encode(value.projectPath),
            "iid" -> implicitly[ArgEncoder[String]].encode(value.iid),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class CreateAnnotationInput(
    environmentId: Option[EnvironmentID] = None,
    clusterId: Option[ClustersClusterID] = None,
    startingAt: Time,
    endingAt: Option[Time] = None,
    dashboardPath: String,
    description: String,
    clientMutationId: Option[String] = None
  )

  object CreateAnnotationInput {

    implicit val encoder: ArgEncoder[CreateAnnotationInput] = new ArgEncoder[CreateAnnotationInput] {

      override def encode(value: CreateAnnotationInput): __Value =
        __ObjectValue(
          List(
            "environmentId" -> value.environmentId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[EnvironmentID]].encode(value)),
            "clusterId" -> value.clusterId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[ClustersClusterID]].encode(value)),
            "startingAt" -> implicitly[ArgEncoder[Time]].encode(value.startingAt),
            "endingAt" -> value.endingAt.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Time]].encode(value)),
            "dashboardPath" -> implicitly[ArgEncoder[String]].encode(value.dashboardPath),
            "description" -> implicitly[ArgEncoder[String]].encode(value.description),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class CreateBoardInput(
    projectPath: Option[String] = None,
    groupPath: Option[String] = None,
    name: Option[String] = None,
    hideBacklogList: Option[Boolean] = None,
    hideClosedList: Option[Boolean] = None,
    assigneeId: Option[UserID] = None,
    milestoneId: Option[MilestoneID] = None,
    iterationId: Option[IterationID] = None,
    weight: Option[Int] = None,
    labels: Option[List[String]] = None,
    labelIds: Option[List[LabelID]] = None,
    clientMutationId: Option[String] = None
  )

  object CreateBoardInput {

    implicit val encoder: ArgEncoder[CreateBoardInput] = new ArgEncoder[CreateBoardInput] {

      override def encode(value: CreateBoardInput): __Value =
        __ObjectValue(
          List(
            "projectPath" -> value.projectPath.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "groupPath" -> value.groupPath.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "name" -> value.name.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "hideBacklogList" -> value.hideBacklogList.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)),
            "hideClosedList" -> value.hideClosedList.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)),
            "assigneeId" -> value.assigneeId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[UserID]].encode(value)),
            "milestoneId" -> value.milestoneId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[MilestoneID]].encode(value)),
            "iterationId" -> value.iterationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[IterationID]].encode(value)),
            "weight" -> value.weight.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Int]].encode(value)),
            "labels" -> value
              .labels
              .fold(__NullValue: __Value)(value => __ListValue(value.map(value => implicitly[ArgEncoder[String]].encode(value)))),
            "labelIds" -> value
              .labelIds
              .fold(__NullValue: __Value)(value => __ListValue(value.map(value => implicitly[ArgEncoder[LabelID]].encode(value)))),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class CreateBranchInput(projectPath: String, name: String, ref: String, clientMutationId: Option[String] = None)

  object CreateBranchInput {

    implicit val encoder: ArgEncoder[CreateBranchInput] = new ArgEncoder[CreateBranchInput] {

      override def encode(value: CreateBranchInput): __Value =
        __ObjectValue(
          List(
            "projectPath" -> implicitly[ArgEncoder[String]].encode(value.projectPath),
            "name" -> implicitly[ArgEncoder[String]].encode(value.name),
            "ref" -> implicitly[ArgEncoder[String]].encode(value.ref),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class CreateClusterAgentInput(projectPath: String, name: String, clientMutationId: Option[String] = None)

  object CreateClusterAgentInput {

    implicit val encoder: ArgEncoder[CreateClusterAgentInput] = new ArgEncoder[CreateClusterAgentInput] {

      override def encode(value: CreateClusterAgentInput): __Value =
        __ObjectValue(
          List(
            "projectPath" -> implicitly[ArgEncoder[String]].encode(value.projectPath),
            "name" -> implicitly[ArgEncoder[String]].encode(value.name),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class CreateComplianceFrameworkInput(
    namespacePath: String,
    params: ComplianceFrameworkInput,
    clientMutationId: Option[String] = None
  )

  object CreateComplianceFrameworkInput {

    implicit val encoder: ArgEncoder[CreateComplianceFrameworkInput] = new ArgEncoder[CreateComplianceFrameworkInput] {

      override def encode(value: CreateComplianceFrameworkInput): __Value =
        __ObjectValue(
          List(
            "namespacePath" -> implicitly[ArgEncoder[String]].encode(value.namespacePath),
            "params" -> implicitly[ArgEncoder[ComplianceFrameworkInput]].encode(value.params),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class CreateCustomEmojiInput(groupPath: String, name: String, url: String, clientMutationId: Option[String] = None)

  object CreateCustomEmojiInput {

    implicit val encoder: ArgEncoder[CreateCustomEmojiInput] = new ArgEncoder[CreateCustomEmojiInput] {

      override def encode(value: CreateCustomEmojiInput): __Value =
        __ObjectValue(
          List(
            "groupPath" -> implicitly[ArgEncoder[String]].encode(value.groupPath),
            "name" -> implicitly[ArgEncoder[String]].encode(value.name),
            "url" -> implicitly[ArgEncoder[String]].encode(value.url),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class CreateDiffNoteInput(
    noteableId: NoteableID,
    body: String,
    confidential: Option[Boolean] = None,
    position: DiffPositionInput,
    clientMutationId: Option[String] = None
  )

  object CreateDiffNoteInput {

    implicit val encoder: ArgEncoder[CreateDiffNoteInput] = new ArgEncoder[CreateDiffNoteInput] {

      override def encode(value: CreateDiffNoteInput): __Value =
        __ObjectValue(
          List(
            "noteableId" -> implicitly[ArgEncoder[NoteableID]].encode(value.noteableId),
            "body" -> implicitly[ArgEncoder[String]].encode(value.body),
            "confidential" -> value.confidential.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)),
            "position" -> implicitly[ArgEncoder[DiffPositionInput]].encode(value.position),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class CreateEpicInput(
    groupPath: String,
    title: Option[String] = None,
    description: Option[String] = None,
    confidential: Option[Boolean] = None,
    startDateFixed: Option[String] = None,
    dueDateFixed: Option[String] = None,
    startDateIsFixed: Option[Boolean] = None,
    dueDateIsFixed: Option[Boolean] = None,
    addLabelIds: Option[List[String]] = None,
    removeLabelIds: Option[List[String]] = None,
    clientMutationId: Option[String] = None
  )

  object CreateEpicInput {

    implicit val encoder: ArgEncoder[CreateEpicInput] = new ArgEncoder[CreateEpicInput] {

      override def encode(value: CreateEpicInput): __Value =
        __ObjectValue(
          List(
            "groupPath" -> implicitly[ArgEncoder[String]].encode(value.groupPath),
            "title" -> value.title.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "description" -> value.description.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "confidential" -> value.confidential.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)),
            "startDateFixed" -> value.startDateFixed.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "dueDateFixed" -> value.dueDateFixed.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "startDateIsFixed" -> value.startDateIsFixed.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)),
            "dueDateIsFixed" -> value.dueDateIsFixed.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)),
            "addLabelIds" -> value
              .addLabelIds
              .fold(__NullValue: __Value)(value => __ListValue(value.map(value => implicitly[ArgEncoder[String]].encode(value)))),
            "removeLabelIds" -> value
              .removeLabelIds
              .fold(__NullValue: __Value)(value => __ListValue(value.map(value => implicitly[ArgEncoder[String]].encode(value)))),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class CreateImageDiffNoteInput(
    noteableId: NoteableID,
    body: String,
    confidential: Option[Boolean] = None,
    position: DiffImagePositionInput,
    clientMutationId: Option[String] = None
  )

  object CreateImageDiffNoteInput {

    implicit val encoder: ArgEncoder[CreateImageDiffNoteInput] = new ArgEncoder[CreateImageDiffNoteInput] {

      override def encode(value: CreateImageDiffNoteInput): __Value =
        __ObjectValue(
          List(
            "noteableId" -> implicitly[ArgEncoder[NoteableID]].encode(value.noteableId),
            "body" -> implicitly[ArgEncoder[String]].encode(value.body),
            "confidential" -> value.confidential.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)),
            "position" -> implicitly[ArgEncoder[DiffImagePositionInput]].encode(value.position),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class CreateIssueInput(
    description: Option[String] = None,
    dueDate: Option[ISO8601Date] = None,
    confidential: Option[Boolean] = None,
    locked: Option[Boolean] = None,
    `type`: Option[IssueType] = None,
    projectPath: String,
    iid: Option[Int] = None,
    title: String,
    milestoneId: Option[MilestoneID] = None,
    labels: Option[List[String]] = None,
    labelIds: Option[List[LabelID]] = None,
    createdAt: Option[Time] = None,
    mergeRequestToResolveDiscussionsOf: Option[MergeRequestID] = None,
    discussionToResolve: Option[String] = None,
    assigneeIds: Option[List[UserID]] = None,
    healthStatus: Option[HealthStatus] = None,
    weight: Option[Int] = None,
    epicId: Option[EpicID] = None,
    clientMutationId: Option[String] = None
  )

  object CreateIssueInput {

    implicit val encoder: ArgEncoder[CreateIssueInput] = new ArgEncoder[CreateIssueInput] {

      override def encode(value: CreateIssueInput): __Value =
        __ObjectValue(
          List(
            "description" -> value.description.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "dueDate" -> value.dueDate.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[ISO8601Date]].encode(value)),
            "confidential" -> value.confidential.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)),
            "locked" -> value.locked.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)),
            "type" -> value.`type`.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[IssueType]].encode(value)),
            "projectPath" -> implicitly[ArgEncoder[String]].encode(value.projectPath),
            "iid" -> value.iid.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Int]].encode(value)),
            "title" -> implicitly[ArgEncoder[String]].encode(value.title),
            "milestoneId" -> value.milestoneId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[MilestoneID]].encode(value)),
            "labels" -> value
              .labels
              .fold(__NullValue: __Value)(value => __ListValue(value.map(value => implicitly[ArgEncoder[String]].encode(value)))),
            "labelIds" -> value
              .labelIds
              .fold(__NullValue: __Value)(value => __ListValue(value.map(value => implicitly[ArgEncoder[LabelID]].encode(value)))),
            "createdAt" -> value.createdAt.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Time]].encode(value)),
            "mergeRequestToResolveDiscussionsOf" -> value
              .mergeRequestToResolveDiscussionsOf
              .fold(__NullValue: __Value)(value => implicitly[ArgEncoder[MergeRequestID]].encode(value)),
            "discussionToResolve" -> value
              .discussionToResolve
              .fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "assigneeIds" -> value
              .assigneeIds
              .fold(__NullValue: __Value)(value => __ListValue(value.map(value => implicitly[ArgEncoder[UserID]].encode(value)))),
            "healthStatus" -> value.healthStatus.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[HealthStatus]].encode(value)),
            "weight" -> value.weight.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Int]].encode(value)),
            "epicId" -> value.epicId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[EpicID]].encode(value)),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class CreateIterationInput(
    projectPath: Option[String] = None,
    groupPath: Option[String] = None,
    iterationsCadenceId: Option[IterationsCadenceID] = None,
    title: Option[String] = None,
    description: Option[String] = None,
    startDate: Option[String] = None,
    dueDate: Option[String] = None,
    clientMutationId: Option[String] = None
  )

  object CreateIterationInput {

    implicit val encoder: ArgEncoder[CreateIterationInput] = new ArgEncoder[CreateIterationInput] {

      override def encode(value: CreateIterationInput): __Value =
        __ObjectValue(
          List(
            "projectPath" -> value.projectPath.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "groupPath" -> value.groupPath.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "iterationsCadenceId" -> value
              .iterationsCadenceId
              .fold(__NullValue: __Value)(value => implicitly[ArgEncoder[IterationsCadenceID]].encode(value)),
            "title" -> value.title.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "description" -> value.description.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "startDate" -> value.startDate.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "dueDate" -> value.dueDate.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class CreateNoteInput(
    noteableId: NoteableID,
    body: String,
    confidential: Option[Boolean] = None,
    discussionId: Option[DiscussionID] = None,
    clientMutationId: Option[String] = None
  )

  object CreateNoteInput {

    implicit val encoder: ArgEncoder[CreateNoteInput] = new ArgEncoder[CreateNoteInput] {

      override def encode(value: CreateNoteInput): __Value =
        __ObjectValue(
          List(
            "noteableId" -> implicitly[ArgEncoder[NoteableID]].encode(value.noteableId),
            "body" -> implicitly[ArgEncoder[String]].encode(value.body),
            "confidential" -> value.confidential.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)),
            "discussionId" -> value.discussionId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[DiscussionID]].encode(value)),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class CreateRequirementInput(
    title: Option[String] = None,
    description: Option[String] = None,
    projectPath: String,
    clientMutationId: Option[String] = None
  )

  object CreateRequirementInput {

    implicit val encoder: ArgEncoder[CreateRequirementInput] = new ArgEncoder[CreateRequirementInput] {

      override def encode(value: CreateRequirementInput): __Value =
        __ObjectValue(
          List(
            "title" -> value.title.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "description" -> value.description.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "projectPath" -> implicitly[ArgEncoder[String]].encode(value.projectPath),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class CreateSnippetInput(
    title: String,
    description: Option[String] = None,
    visibilityLevel: VisibilityLevelsEnum,
    projectPath: Option[String] = None,
    uploadedFiles: Option[List[String]] = None,
    blobActions: Option[List[SnippetBlobActionInputType]] = None,
    clientMutationId: Option[String] = None
  )

  object CreateSnippetInput {

    implicit val encoder: ArgEncoder[CreateSnippetInput] = new ArgEncoder[CreateSnippetInput] {

      override def encode(value: CreateSnippetInput): __Value =
        __ObjectValue(
          List(
            "title" -> implicitly[ArgEncoder[String]].encode(value.title),
            "description" -> value.description.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "visibilityLevel" -> implicitly[ArgEncoder[VisibilityLevelsEnum]].encode(value.visibilityLevel),
            "projectPath" -> value.projectPath.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "uploadedFiles" -> value
              .uploadedFiles
              .fold(__NullValue: __Value)(value => __ListValue(value.map(value => implicitly[ArgEncoder[String]].encode(value)))),
            "blobActions" -> value
              .blobActions
              .fold(__NullValue: __Value)(value =>
                __ListValue(value.map(value => implicitly[ArgEncoder[SnippetBlobActionInputType]].encode(value)))
              ),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class CreateTestCaseInput(
    title: String,
    description: Option[String] = None,
    labelIds: Option[List[String]] = None,
    projectPath: String,
    clientMutationId: Option[String] = None
  )

  object CreateTestCaseInput {

    implicit val encoder: ArgEncoder[CreateTestCaseInput] = new ArgEncoder[CreateTestCaseInput] {

      override def encode(value: CreateTestCaseInput): __Value =
        __ObjectValue(
          List(
            "title" -> implicitly[ArgEncoder[String]].encode(value.title),
            "description" -> value.description.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "labelIds" -> value
              .labelIds
              .fold(__NullValue: __Value)(value => __ListValue(value.map(value => implicitly[ArgEncoder[String]].encode(value)))),
            "projectPath" -> implicitly[ArgEncoder[String]].encode(value.projectPath),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class DastOnDemandScanCreateInput(
    fullPath: String,
    dastSiteProfileId: DastSiteProfileID,
    dastScannerProfileId: Option[DastScannerProfileID] = None,
    clientMutationId: Option[String] = None
  )

  object DastOnDemandScanCreateInput {

    implicit val encoder: ArgEncoder[DastOnDemandScanCreateInput] = new ArgEncoder[DastOnDemandScanCreateInput] {

      override def encode(value: DastOnDemandScanCreateInput): __Value =
        __ObjectValue(
          List(
            "fullPath" -> implicitly[ArgEncoder[String]].encode(value.fullPath),
            "dastSiteProfileId" -> implicitly[ArgEncoder[DastSiteProfileID]].encode(value.dastSiteProfileId),
            "dastScannerProfileId" -> value
              .dastScannerProfileId
              .fold(__NullValue: __Value)(value => implicitly[ArgEncoder[DastScannerProfileID]].encode(value)),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class DastProfileCreateInput(
    fullPath: String,
    name: String,
    description: Option[String] = None,
    branchName: Option[String] = None,
    dastSiteProfileId: DastSiteProfileID,
    dastScannerProfileId: DastScannerProfileID,
    runAfterCreate: Option[Boolean] = None,
    clientMutationId: Option[String] = None
  )

  object DastProfileCreateInput {

    implicit val encoder: ArgEncoder[DastProfileCreateInput] = new ArgEncoder[DastProfileCreateInput] {

      override def encode(value: DastProfileCreateInput): __Value =
        __ObjectValue(
          List(
            "fullPath" -> implicitly[ArgEncoder[String]].encode(value.fullPath),
            "name" -> implicitly[ArgEncoder[String]].encode(value.name),
            "description" -> value.description.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "branchName" -> value.branchName.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "dastSiteProfileId" -> implicitly[ArgEncoder[DastSiteProfileID]].encode(value.dastSiteProfileId),
            "dastScannerProfileId" -> implicitly[ArgEncoder[DastScannerProfileID]].encode(value.dastScannerProfileId),
            "runAfterCreate" -> value.runAfterCreate.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class DastProfileDeleteInput(id: DastProfileID, clientMutationId: Option[String] = None)

  object DastProfileDeleteInput {

    implicit val encoder: ArgEncoder[DastProfileDeleteInput] = new ArgEncoder[DastProfileDeleteInput] {

      override def encode(value: DastProfileDeleteInput): __Value =
        __ObjectValue(
          List(
            "id" -> implicitly[ArgEncoder[DastProfileID]].encode(value.id),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class DastProfileRunInput(fullPath: String, id: DastProfileID, clientMutationId: Option[String] = None)

  object DastProfileRunInput {

    implicit val encoder: ArgEncoder[DastProfileRunInput] = new ArgEncoder[DastProfileRunInput] {

      override def encode(value: DastProfileRunInput): __Value =
        __ObjectValue(
          List(
            "fullPath" -> implicitly[ArgEncoder[String]].encode(value.fullPath),
            "id" -> implicitly[ArgEncoder[DastProfileID]].encode(value.id),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class DastProfileUpdateInput(
    id: DastProfileID,
    fullPath: String,
    name: Option[String] = None,
    description: Option[String] = None,
    branchName: Option[String] = None,
    dastSiteProfileId: Option[DastSiteProfileID] = None,
    dastScannerProfileId: Option[DastScannerProfileID] = None,
    runAfterUpdate: Option[Boolean] = None,
    clientMutationId: Option[String] = None
  )

  object DastProfileUpdateInput {

    implicit val encoder: ArgEncoder[DastProfileUpdateInput] = new ArgEncoder[DastProfileUpdateInput] {

      override def encode(value: DastProfileUpdateInput): __Value =
        __ObjectValue(
          List(
            "id" -> implicitly[ArgEncoder[DastProfileID]].encode(value.id),
            "fullPath" -> implicitly[ArgEncoder[String]].encode(value.fullPath),
            "name" -> value.name.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "description" -> value.description.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "branchName" -> value.branchName.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "dastSiteProfileId" -> value
              .dastSiteProfileId
              .fold(__NullValue: __Value)(value => implicitly[ArgEncoder[DastSiteProfileID]].encode(value)),
            "dastScannerProfileId" -> value
              .dastScannerProfileId
              .fold(__NullValue: __Value)(value => implicitly[ArgEncoder[DastScannerProfileID]].encode(value)),
            "runAfterUpdate" -> value.runAfterUpdate.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class DastScannerProfileCreateInput(
    fullPath: String,
    profileName: String,
    spiderTimeout: Option[Int] = None,
    targetTimeout: Option[Int] = None,
    scanType: Option[DastScanTypeEnum] = None,
    useAjaxSpider: Option[Boolean] = None,
    showDebugMessages: Option[Boolean] = None,
    clientMutationId: Option[String] = None
  )

  object DastScannerProfileCreateInput {

    implicit val encoder: ArgEncoder[DastScannerProfileCreateInput] = new ArgEncoder[DastScannerProfileCreateInput] {

      override def encode(value: DastScannerProfileCreateInput): __Value =
        __ObjectValue(
          List(
            "fullPath" -> implicitly[ArgEncoder[String]].encode(value.fullPath),
            "profileName" -> implicitly[ArgEncoder[String]].encode(value.profileName),
            "spiderTimeout" -> value.spiderTimeout.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Int]].encode(value)),
            "targetTimeout" -> value.targetTimeout.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Int]].encode(value)),
            "scanType" -> value.scanType.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[DastScanTypeEnum]].encode(value)),
            "useAjaxSpider" -> value.useAjaxSpider.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)),
            "showDebugMessages" -> value
              .showDebugMessages
              .fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class DastScannerProfileDeleteInput(fullPath: String, id: DastScannerProfileID, clientMutationId: Option[String] = None)

  object DastScannerProfileDeleteInput {

    implicit val encoder: ArgEncoder[DastScannerProfileDeleteInput] = new ArgEncoder[DastScannerProfileDeleteInput] {

      override def encode(value: DastScannerProfileDeleteInput): __Value =
        __ObjectValue(
          List(
            "fullPath" -> implicitly[ArgEncoder[String]].encode(value.fullPath),
            "id" -> implicitly[ArgEncoder[DastScannerProfileID]].encode(value.id),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class DastScannerProfileUpdateInput(
    fullPath: String,
    id: DastScannerProfileID,
    profileName: String,
    spiderTimeout: Int,
    targetTimeout: Int,
    scanType: Option[DastScanTypeEnum] = None,
    useAjaxSpider: Option[Boolean] = None,
    showDebugMessages: Option[Boolean] = None,
    clientMutationId: Option[String] = None
  )

  object DastScannerProfileUpdateInput {

    implicit val encoder: ArgEncoder[DastScannerProfileUpdateInput] = new ArgEncoder[DastScannerProfileUpdateInput] {

      override def encode(value: DastScannerProfileUpdateInput): __Value =
        __ObjectValue(
          List(
            "fullPath" -> implicitly[ArgEncoder[String]].encode(value.fullPath),
            "id" -> implicitly[ArgEncoder[DastScannerProfileID]].encode(value.id),
            "profileName" -> implicitly[ArgEncoder[String]].encode(value.profileName),
            "spiderTimeout" -> implicitly[ArgEncoder[Int]].encode(value.spiderTimeout),
            "targetTimeout" -> implicitly[ArgEncoder[Int]].encode(value.targetTimeout),
            "scanType" -> value.scanType.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[DastScanTypeEnum]].encode(value)),
            "useAjaxSpider" -> value.useAjaxSpider.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)),
            "showDebugMessages" -> value
              .showDebugMessages
              .fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class DastSiteProfileAuthInput(
    enabled: Option[Boolean] = None,
    url: Option[String] = None,
    usernameField: Option[String] = None,
    passwordField: Option[String] = None,
    username: Option[String] = None,
    password: Option[String] = None
  )

  object DastSiteProfileAuthInput {

    implicit val encoder: ArgEncoder[DastSiteProfileAuthInput] = new ArgEncoder[DastSiteProfileAuthInput] {

      override def encode(value: DastSiteProfileAuthInput): __Value =
        __ObjectValue(
          List(
            "enabled" -> value.enabled.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)),
            "url" -> value.url.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "usernameField" -> value.usernameField.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "passwordField" -> value.passwordField.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "username" -> value.username.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "password" -> value.password.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class DastSiteProfileCreateInput(
    fullPath: String,
    profileName: String,
    targetUrl: Option[String] = None,
    targetType: Option[DastTargetTypeEnum] = None,
    excludedUrls: Option[List[String]] = None,
    requestHeaders: Option[String] = None,
    auth: Option[DastSiteProfileAuthInput] = None,
    clientMutationId: Option[String] = None
  )

  object DastSiteProfileCreateInput {

    implicit val encoder: ArgEncoder[DastSiteProfileCreateInput] = new ArgEncoder[DastSiteProfileCreateInput] {

      override def encode(value: DastSiteProfileCreateInput): __Value =
        __ObjectValue(
          List(
            "fullPath" -> implicitly[ArgEncoder[String]].encode(value.fullPath),
            "profileName" -> implicitly[ArgEncoder[String]].encode(value.profileName),
            "targetUrl" -> value.targetUrl.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "targetType" -> value.targetType.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[DastTargetTypeEnum]].encode(value)),
            "excludedUrls" -> value
              .excludedUrls
              .fold(__NullValue: __Value)(value => __ListValue(value.map(value => implicitly[ArgEncoder[String]].encode(value)))),
            "requestHeaders" -> value.requestHeaders.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "auth" -> value.auth.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[DastSiteProfileAuthInput]].encode(value)),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class DastSiteProfileDeleteInput(fullPath: String, id: DastSiteProfileID, clientMutationId: Option[String] = None)

  object DastSiteProfileDeleteInput {

    implicit val encoder: ArgEncoder[DastSiteProfileDeleteInput] = new ArgEncoder[DastSiteProfileDeleteInput] {

      override def encode(value: DastSiteProfileDeleteInput): __Value =
        __ObjectValue(
          List(
            "fullPath" -> implicitly[ArgEncoder[String]].encode(value.fullPath),
            "id" -> implicitly[ArgEncoder[DastSiteProfileID]].encode(value.id),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class DastSiteProfileUpdateInput(
    fullPath: String,
    id: DastSiteProfileID,
    profileName: String,
    targetUrl: Option[String] = None,
    targetType: Option[DastTargetTypeEnum] = None,
    excludedUrls: Option[List[String]] = None,
    requestHeaders: Option[String] = None,
    auth: Option[DastSiteProfileAuthInput] = None,
    clientMutationId: Option[String] = None
  )

  object DastSiteProfileUpdateInput {

    implicit val encoder: ArgEncoder[DastSiteProfileUpdateInput] = new ArgEncoder[DastSiteProfileUpdateInput] {

      override def encode(value: DastSiteProfileUpdateInput): __Value =
        __ObjectValue(
          List(
            "fullPath" -> implicitly[ArgEncoder[String]].encode(value.fullPath),
            "id" -> implicitly[ArgEncoder[DastSiteProfileID]].encode(value.id),
            "profileName" -> implicitly[ArgEncoder[String]].encode(value.profileName),
            "targetUrl" -> value.targetUrl.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "targetType" -> value.targetType.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[DastTargetTypeEnum]].encode(value)),
            "excludedUrls" -> value
              .excludedUrls
              .fold(__NullValue: __Value)(value => __ListValue(value.map(value => implicitly[ArgEncoder[String]].encode(value)))),
            "requestHeaders" -> value.requestHeaders.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "auth" -> value.auth.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[DastSiteProfileAuthInput]].encode(value)),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class DastSiteTokenCreateInput(fullPath: String, targetUrl: Option[String] = None, clientMutationId: Option[String] = None)

  object DastSiteTokenCreateInput {

    implicit val encoder: ArgEncoder[DastSiteTokenCreateInput] = new ArgEncoder[DastSiteTokenCreateInput] {

      override def encode(value: DastSiteTokenCreateInput): __Value =
        __ObjectValue(
          List(
            "fullPath" -> implicitly[ArgEncoder[String]].encode(value.fullPath),
            "targetUrl" -> value.targetUrl.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class DastSiteValidationCreateInput(
    fullPath: String,
    dastSiteTokenId: DastSiteTokenID,
    validationPath: String,
    strategy: Option[DastSiteValidationStrategyEnum] = None,
    clientMutationId: Option[String] = None
  )

  object DastSiteValidationCreateInput {

    implicit val encoder: ArgEncoder[DastSiteValidationCreateInput] = new ArgEncoder[DastSiteValidationCreateInput] {

      override def encode(value: DastSiteValidationCreateInput): __Value =
        __ObjectValue(
          List(
            "fullPath" -> implicitly[ArgEncoder[String]].encode(value.fullPath),
            "dastSiteTokenId" -> implicitly[ArgEncoder[DastSiteTokenID]].encode(value.dastSiteTokenId),
            "validationPath" -> implicitly[ArgEncoder[String]].encode(value.validationPath),
            "strategy" -> value
              .strategy
              .fold(__NullValue: __Value)(value => implicitly[ArgEncoder[DastSiteValidationStrategyEnum]].encode(value)),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class DastSiteValidationRevokeInput(fullPath: String, normalizedTargetUrl: String, clientMutationId: Option[String] = None)

  object DastSiteValidationRevokeInput {

    implicit val encoder: ArgEncoder[DastSiteValidationRevokeInput] = new ArgEncoder[DastSiteValidationRevokeInput] {

      override def encode(value: DastSiteValidationRevokeInput): __Value =
        __ObjectValue(
          List(
            "fullPath" -> implicitly[ArgEncoder[String]].encode(value.fullPath),
            "normalizedTargetUrl" -> implicitly[ArgEncoder[String]].encode(value.normalizedTargetUrl),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class DeleteAnnotationInput(id: MetricsDashboardAnnotationID, clientMutationId: Option[String] = None)

  object DeleteAnnotationInput {

    implicit val encoder: ArgEncoder[DeleteAnnotationInput] = new ArgEncoder[DeleteAnnotationInput] {

      override def encode(value: DeleteAnnotationInput): __Value =
        __ObjectValue(
          List(
            "id" -> implicitly[ArgEncoder[MetricsDashboardAnnotationID]].encode(value.id),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class DesignManagementDeleteInput(
    projectPath: String,
    iid: String,
    filenames: List[String] = Nil,
    clientMutationId: Option[String] = None
  )

  object DesignManagementDeleteInput {

    implicit val encoder: ArgEncoder[DesignManagementDeleteInput] = new ArgEncoder[DesignManagementDeleteInput] {

      override def encode(value: DesignManagementDeleteInput): __Value =
        __ObjectValue(
          List(
            "projectPath" -> implicitly[ArgEncoder[String]].encode(value.projectPath),
            "iid" -> implicitly[ArgEncoder[String]].encode(value.iid),
            "filenames" -> __ListValue(value.filenames.map(value => implicitly[ArgEncoder[String]].encode(value))),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class DesignManagementMoveInput(
    id: DesignManagementDesignID,
    previous: Option[DesignManagementDesignID] = None,
    next: Option[DesignManagementDesignID] = None,
    clientMutationId: Option[String] = None
  )

  object DesignManagementMoveInput {

    implicit val encoder: ArgEncoder[DesignManagementMoveInput] = new ArgEncoder[DesignManagementMoveInput] {

      override def encode(value: DesignManagementMoveInput): __Value =
        __ObjectValue(
          List(
            "id" -> implicitly[ArgEncoder[DesignManagementDesignID]].encode(value.id),
            "previous" -> value
              .previous
              .fold(__NullValue: __Value)(value => implicitly[ArgEncoder[DesignManagementDesignID]].encode(value)),
            "next" -> value.next.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[DesignManagementDesignID]].encode(value)),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class DesignManagementUploadInput(
    projectPath: String,
    iid: String,
    files: List[Upload] = Nil,
    clientMutationId: Option[String] = None
  )

  object DesignManagementUploadInput {

    implicit val encoder: ArgEncoder[DesignManagementUploadInput] = new ArgEncoder[DesignManagementUploadInput] {

      override def encode(value: DesignManagementUploadInput): __Value =
        __ObjectValue(
          List(
            "projectPath" -> implicitly[ArgEncoder[String]].encode(value.projectPath),
            "iid" -> implicitly[ArgEncoder[String]].encode(value.iid),
            "files" -> __ListValue(value.files.map(value => implicitly[ArgEncoder[Upload]].encode(value))),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class DestroyBoardInput(id: BoardID, clientMutationId: Option[String] = None)

  object DestroyBoardInput {

    implicit val encoder: ArgEncoder[DestroyBoardInput] = new ArgEncoder[DestroyBoardInput] {

      override def encode(value: DestroyBoardInput): __Value =
        __ObjectValue(
          List(
            "id" -> implicitly[ArgEncoder[BoardID]].encode(value.id),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class DestroyBoardListInput(listId: ListID, clientMutationId: Option[String] = None)

  object DestroyBoardListInput {

    implicit val encoder: ArgEncoder[DestroyBoardListInput] = new ArgEncoder[DestroyBoardListInput] {

      override def encode(value: DestroyBoardListInput): __Value =
        __ObjectValue(
          List(
            "listId" -> implicitly[ArgEncoder[ListID]].encode(value.listId),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class DestroyComplianceFrameworkInput(id: ComplianceManagementFrameworkID, clientMutationId: Option[String] = None)

  object DestroyComplianceFrameworkInput {

    implicit val encoder: ArgEncoder[DestroyComplianceFrameworkInput] = new ArgEncoder[DestroyComplianceFrameworkInput] {

      override def encode(value: DestroyComplianceFrameworkInput): __Value =
        __ObjectValue(
          List(
            "id" -> implicitly[ArgEncoder[ComplianceManagementFrameworkID]].encode(value.id),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class DestroyContainerRepositoryInput(id: ContainerRepositoryID, clientMutationId: Option[String] = None)

  object DestroyContainerRepositoryInput {

    implicit val encoder: ArgEncoder[DestroyContainerRepositoryInput] = new ArgEncoder[DestroyContainerRepositoryInput] {

      override def encode(value: DestroyContainerRepositoryInput): __Value =
        __ObjectValue(
          List(
            "id" -> implicitly[ArgEncoder[ContainerRepositoryID]].encode(value.id),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class DestroyContainerRepositoryTagsInput(
    id: ContainerRepositoryID,
    tagNames: List[String] = Nil,
    clientMutationId: Option[String] = None
  )

  object DestroyContainerRepositoryTagsInput {

    implicit val encoder: ArgEncoder[DestroyContainerRepositoryTagsInput] = new ArgEncoder[DestroyContainerRepositoryTagsInput] {

      override def encode(value: DestroyContainerRepositoryTagsInput): __Value =
        __ObjectValue(
          List(
            "id" -> implicitly[ArgEncoder[ContainerRepositoryID]].encode(value.id),
            "tagNames" -> __ListValue(value.tagNames.map(value => implicitly[ArgEncoder[String]].encode(value))),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class DestroyEpicBoardInput(id: BoardsEpicBoardID, clientMutationId: Option[String] = None)

  object DestroyEpicBoardInput {

    implicit val encoder: ArgEncoder[DestroyEpicBoardInput] = new ArgEncoder[DestroyEpicBoardInput] {

      override def encode(value: DestroyEpicBoardInput): __Value =
        __ObjectValue(
          List(
            "id" -> implicitly[ArgEncoder[BoardsEpicBoardID]].encode(value.id),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class DestroyNoteInput(id: NoteID, clientMutationId: Option[String] = None)

  object DestroyNoteInput {

    implicit val encoder: ArgEncoder[DestroyNoteInput] = new ArgEncoder[DestroyNoteInput] {

      override def encode(value: DestroyNoteInput): __Value =
        __ObjectValue(
          List(
            "id" -> implicitly[ArgEncoder[NoteID]].encode(value.id),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class DestroyPackageInput(id: PackagesPackageID, clientMutationId: Option[String] = None)

  object DestroyPackageInput {

    implicit val encoder: ArgEncoder[DestroyPackageInput] = new ArgEncoder[DestroyPackageInput] {

      override def encode(value: DestroyPackageInput): __Value =
        __ObjectValue(
          List(
            "id" -> implicitly[ArgEncoder[PackagesPackageID]].encode(value.id),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class DestroySnippetInput(id: SnippetID, clientMutationId: Option[String] = None)

  object DestroySnippetInput {

    implicit val encoder: ArgEncoder[DestroySnippetInput] = new ArgEncoder[DestroySnippetInput] {

      override def encode(value: DestroySnippetInput): __Value =
        __ObjectValue(
          List(
            "id" -> implicitly[ArgEncoder[SnippetID]].encode(value.id),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class DiffImagePositionInput(
    headSha: String,
    baseSha: Option[String] = None,
    startSha: String,
    paths: DiffPathsInput,
    x: Int,
    y: Int,
    width: Int,
    height: Int
  )

  object DiffImagePositionInput {

    implicit val encoder: ArgEncoder[DiffImagePositionInput] = new ArgEncoder[DiffImagePositionInput] {

      override def encode(value: DiffImagePositionInput): __Value =
        __ObjectValue(
          List(
            "headSha" -> implicitly[ArgEncoder[String]].encode(value.headSha),
            "baseSha" -> value.baseSha.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "startSha" -> implicitly[ArgEncoder[String]].encode(value.startSha),
            "paths" -> implicitly[ArgEncoder[DiffPathsInput]].encode(value.paths),
            "x" -> implicitly[ArgEncoder[Int]].encode(value.x),
            "y" -> implicitly[ArgEncoder[Int]].encode(value.y),
            "width" -> implicitly[ArgEncoder[Int]].encode(value.width),
            "height" -> implicitly[ArgEncoder[Int]].encode(value.height)
          )
        )

    }

  }

  case class DiffPathsInput(oldPath: Option[String] = None, newPath: Option[String] = None)

  object DiffPathsInput {

    implicit val encoder: ArgEncoder[DiffPathsInput] = new ArgEncoder[DiffPathsInput] {

      override def encode(value: DiffPathsInput): __Value =
        __ObjectValue(
          List(
            "oldPath" -> value.oldPath.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "newPath" -> value.newPath.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class DiffPositionInput(
    headSha: String,
    baseSha: Option[String] = None,
    startSha: String,
    paths: DiffPathsInput,
    oldLine: Option[Int] = None,
    newLine: Option[Int] = None
  )

  object DiffPositionInput {

    implicit val encoder: ArgEncoder[DiffPositionInput] = new ArgEncoder[DiffPositionInput] {

      override def encode(value: DiffPositionInput): __Value =
        __ObjectValue(
          List(
            "headSha" -> implicitly[ArgEncoder[String]].encode(value.headSha),
            "baseSha" -> value.baseSha.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "startSha" -> implicitly[ArgEncoder[String]].encode(value.startSha),
            "paths" -> implicitly[ArgEncoder[DiffPathsInput]].encode(value.paths),
            "oldLine" -> value.oldLine.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Int]].encode(value)),
            "newLine" -> value.newLine.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Int]].encode(value))
          )
        )

    }

  }

  case class DisableDevopsAdoptionNamespaceInput(
    id: List[AnalyticsDevopsAdoptionEnabledNamespaceID] = Nil,
    clientMutationId: Option[String] = None
  )

  object DisableDevopsAdoptionNamespaceInput {

    implicit val encoder: ArgEncoder[DisableDevopsAdoptionNamespaceInput] = new ArgEncoder[DisableDevopsAdoptionNamespaceInput] {

      override def encode(value: DisableDevopsAdoptionNamespaceInput): __Value =
        __ObjectValue(
          List(
            "id" -> __ListValue(value.id.map(value => implicitly[ArgEncoder[AnalyticsDevopsAdoptionEnabledNamespaceID]].encode(value))),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class DiscussionToggleResolveInput(id: DiscussionID, resolve: Boolean, clientMutationId: Option[String] = None)

  object DiscussionToggleResolveInput {

    implicit val encoder: ArgEncoder[DiscussionToggleResolveInput] = new ArgEncoder[DiscussionToggleResolveInput] {

      override def encode(value: DiscussionToggleResolveInput): __Value =
        __ObjectValue(
          List(
            "id" -> implicitly[ArgEncoder[DiscussionID]].encode(value.id),
            "resolve" -> implicitly[ArgEncoder[Boolean]].encode(value.resolve),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class EchoCreateInput(
    errors: Option[List[String]] = None,
    messages: Option[List[String]] = None,
    clientMutationId: Option[String] = None
  )

  object EchoCreateInput {

    implicit val encoder: ArgEncoder[EchoCreateInput] = new ArgEncoder[EchoCreateInput] {

      override def encode(value: EchoCreateInput): __Value =
        __ObjectValue(
          List(
            "errors" -> value
              .errors
              .fold(__NullValue: __Value)(value => __ListValue(value.map(value => implicitly[ArgEncoder[String]].encode(value)))),
            "messages" -> value
              .messages
              .fold(__NullValue: __Value)(value => __ListValue(value.map(value => implicitly[ArgEncoder[String]].encode(value)))),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class EnableDevopsAdoptionNamespaceInput(
    namespaceId: NamespaceID,
    displayNamespaceId: Option[NamespaceID] = None,
    clientMutationId: Option[String] = None
  )

  object EnableDevopsAdoptionNamespaceInput {

    implicit val encoder: ArgEncoder[EnableDevopsAdoptionNamespaceInput] = new ArgEncoder[EnableDevopsAdoptionNamespaceInput] {

      override def encode(value: EnableDevopsAdoptionNamespaceInput): __Value =
        __ObjectValue(
          List(
            "namespaceId" -> implicitly[ArgEncoder[NamespaceID]].encode(value.namespaceId),
            "displayNamespaceId" -> value
              .displayNamespaceId
              .fold(__NullValue: __Value)(value => implicitly[ArgEncoder[NamespaceID]].encode(value)),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class EnvironmentsCanaryIngressUpdateInput(id: EnvironmentID, weight: Int, clientMutationId: Option[String] = None)

  object EnvironmentsCanaryIngressUpdateInput {

    implicit val encoder: ArgEncoder[EnvironmentsCanaryIngressUpdateInput] = new ArgEncoder[EnvironmentsCanaryIngressUpdateInput] {

      override def encode(value: EnvironmentsCanaryIngressUpdateInput): __Value =
        __ObjectValue(
          List(
            "id" -> implicitly[ArgEncoder[EnvironmentID]].encode(value.id),
            "weight" -> implicitly[ArgEncoder[Int]].encode(value.weight),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class EpicAddIssueInput(
    iid: String,
    groupPath: String,
    projectPath: String,
    issueIid: String,
    clientMutationId: Option[String] = None
  )

  object EpicAddIssueInput {

    implicit val encoder: ArgEncoder[EpicAddIssueInput] = new ArgEncoder[EpicAddIssueInput] {

      override def encode(value: EpicAddIssueInput): __Value =
        __ObjectValue(
          List(
            "iid" -> implicitly[ArgEncoder[String]].encode(value.iid),
            "groupPath" -> implicitly[ArgEncoder[String]].encode(value.groupPath),
            "projectPath" -> implicitly[ArgEncoder[String]].encode(value.projectPath),
            "issueIid" -> implicitly[ArgEncoder[String]].encode(value.issueIid),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class EpicBoardCreateInput(
    name: Option[String] = None,
    hideBacklogList: Option[Boolean] = None,
    hideClosedList: Option[Boolean] = None,
    labels: Option[List[String]] = None,
    labelIds: Option[List[LabelID]] = None,
    groupPath: Option[String] = None,
    clientMutationId: Option[String] = None
  )

  object EpicBoardCreateInput {

    implicit val encoder: ArgEncoder[EpicBoardCreateInput] = new ArgEncoder[EpicBoardCreateInput] {

      override def encode(value: EpicBoardCreateInput): __Value =
        __ObjectValue(
          List(
            "name" -> value.name.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "hideBacklogList" -> value.hideBacklogList.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)),
            "hideClosedList" -> value.hideClosedList.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)),
            "labels" -> value
              .labels
              .fold(__NullValue: __Value)(value => __ListValue(value.map(value => implicitly[ArgEncoder[String]].encode(value)))),
            "labelIds" -> value
              .labelIds
              .fold(__NullValue: __Value)(value => __ListValue(value.map(value => implicitly[ArgEncoder[LabelID]].encode(value)))),
            "groupPath" -> value.groupPath.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class EpicBoardListCreateInput(
    backlog: Option[Boolean] = None,
    labelId: Option[LabelID] = None,
    boardId: BoardsEpicBoardID,
    clientMutationId: Option[String] = None
  )

  object EpicBoardListCreateInput {

    implicit val encoder: ArgEncoder[EpicBoardListCreateInput] = new ArgEncoder[EpicBoardListCreateInput] {

      override def encode(value: EpicBoardListCreateInput): __Value =
        __ObjectValue(
          List(
            "backlog" -> value.backlog.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)),
            "labelId" -> value.labelId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[LabelID]].encode(value)),
            "boardId" -> implicitly[ArgEncoder[BoardsEpicBoardID]].encode(value.boardId),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class EpicBoardListDestroyInput(listId: BoardsEpicListID, clientMutationId: Option[String] = None)

  object EpicBoardListDestroyInput {

    implicit val encoder: ArgEncoder[EpicBoardListDestroyInput] = new ArgEncoder[EpicBoardListDestroyInput] {

      override def encode(value: EpicBoardListDestroyInput): __Value =
        __ObjectValue(
          List(
            "listId" -> implicitly[ArgEncoder[BoardsEpicListID]].encode(value.listId),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class EpicBoardUpdateInput(
    name: Option[String] = None,
    hideBacklogList: Option[Boolean] = None,
    hideClosedList: Option[Boolean] = None,
    labels: Option[List[String]] = None,
    labelIds: Option[List[LabelID]] = None,
    id: BoardsEpicBoardID,
    clientMutationId: Option[String] = None
  )

  object EpicBoardUpdateInput {

    implicit val encoder: ArgEncoder[EpicBoardUpdateInput] = new ArgEncoder[EpicBoardUpdateInput] {

      override def encode(value: EpicBoardUpdateInput): __Value =
        __ObjectValue(
          List(
            "name" -> value.name.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "hideBacklogList" -> value.hideBacklogList.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)),
            "hideClosedList" -> value.hideClosedList.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)),
            "labels" -> value
              .labels
              .fold(__NullValue: __Value)(value => __ListValue(value.map(value => implicitly[ArgEncoder[String]].encode(value)))),
            "labelIds" -> value
              .labelIds
              .fold(__NullValue: __Value)(value => __ListValue(value.map(value => implicitly[ArgEncoder[LabelID]].encode(value)))),
            "id" -> implicitly[ArgEncoder[BoardsEpicBoardID]].encode(value.id),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class EpicFilters(
    labelName: Option[List[Option[String]]] = None,
    authorUsername: Option[String] = None,
    myReactionEmoji: Option[String] = None,
    not: Option[NegatedEpicBoardIssueInput] = None,
    search: Option[String] = None
  )

  object EpicFilters {

    implicit val encoder: ArgEncoder[EpicFilters] = new ArgEncoder[EpicFilters] {

      override def encode(value: EpicFilters): __Value =
        __ObjectValue(
          List(
            "labelName" -> value
              .labelName
              .fold(__NullValue: __Value)(value =>
                __ListValue(value.map(value => value.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))))
              ),
            "authorUsername" -> value.authorUsername.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "myReactionEmoji" -> value.myReactionEmoji.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "not" -> value.not.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[NegatedEpicBoardIssueInput]].encode(value)),
            "search" -> value.search.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class EpicMoveListInput(
    boardId: BoardsEpicBoardID,
    epicId: EpicID,
    fromListId: Option[BoardsEpicListID] = None,
    toListId: BoardsEpicListID,
    moveBeforeId: Option[EpicID] = None,
    moveAfterId: Option[EpicID] = None,
    clientMutationId: Option[String] = None
  )

  object EpicMoveListInput {

    implicit val encoder: ArgEncoder[EpicMoveListInput] = new ArgEncoder[EpicMoveListInput] {

      override def encode(value: EpicMoveListInput): __Value =
        __ObjectValue(
          List(
            "boardId" -> implicitly[ArgEncoder[BoardsEpicBoardID]].encode(value.boardId),
            "epicId" -> implicitly[ArgEncoder[EpicID]].encode(value.epicId),
            "fromListId" -> value.fromListId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[BoardsEpicListID]].encode(value)),
            "toListId" -> implicitly[ArgEncoder[BoardsEpicListID]].encode(value.toListId),
            "moveBeforeId" -> value.moveBeforeId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[EpicID]].encode(value)),
            "moveAfterId" -> value.moveAfterId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[EpicID]].encode(value)),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class EpicSetSubscriptionInput(iid: String, groupPath: String, subscribedState: Boolean, clientMutationId: Option[String] = None)

  object EpicSetSubscriptionInput {

    implicit val encoder: ArgEncoder[EpicSetSubscriptionInput] = new ArgEncoder[EpicSetSubscriptionInput] {

      override def encode(value: EpicSetSubscriptionInput): __Value =
        __ObjectValue(
          List(
            "iid" -> implicitly[ArgEncoder[String]].encode(value.iid),
            "groupPath" -> implicitly[ArgEncoder[String]].encode(value.groupPath),
            "subscribedState" -> implicitly[ArgEncoder[Boolean]].encode(value.subscribedState),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class EpicTreeNodeFieldsInputType(
    id: EpicTreeSortingID,
    adjacentReferenceId: Option[EpicTreeSortingID] = None,
    relativePosition: Option[MoveType] = None,
    newParentId: Option[EpicID] = None
  )

  object EpicTreeNodeFieldsInputType {

    implicit val encoder: ArgEncoder[EpicTreeNodeFieldsInputType] = new ArgEncoder[EpicTreeNodeFieldsInputType] {

      override def encode(value: EpicTreeNodeFieldsInputType): __Value =
        __ObjectValue(
          List(
            "id" -> implicitly[ArgEncoder[EpicTreeSortingID]].encode(value.id),
            "adjacentReferenceId" -> value
              .adjacentReferenceId
              .fold(__NullValue: __Value)(value => implicitly[ArgEncoder[EpicTreeSortingID]].encode(value)),
            "relativePosition" -> value
              .relativePosition
              .fold(__NullValue: __Value)(value => implicitly[ArgEncoder[MoveType]].encode(value)),
            "newParentId" -> value.newParentId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[EpicID]].encode(value))
          )
        )

    }

  }

  case class EpicTreeReorderInput(baseEpicId: EpicID, moved: EpicTreeNodeFieldsInputType, clientMutationId: Option[String] = None)

  object EpicTreeReorderInput {

    implicit val encoder: ArgEncoder[EpicTreeReorderInput] = new ArgEncoder[EpicTreeReorderInput] {

      override def encode(value: EpicTreeReorderInput): __Value =
        __ObjectValue(
          List(
            "baseEpicId" -> implicitly[ArgEncoder[EpicID]].encode(value.baseEpicId),
            "moved" -> implicitly[ArgEncoder[EpicTreeNodeFieldsInputType]].encode(value.moved),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class EscalationPolicyCreateInput(
    projectPath: String,
    name: String,
    description: Option[String] = None,
    rules: List[EscalationRuleInput] = Nil,
    clientMutationId: Option[String] = None
  )

  object EscalationPolicyCreateInput {

    implicit val encoder: ArgEncoder[EscalationPolicyCreateInput] = new ArgEncoder[EscalationPolicyCreateInput] {

      override def encode(value: EscalationPolicyCreateInput): __Value =
        __ObjectValue(
          List(
            "projectPath" -> implicitly[ArgEncoder[String]].encode(value.projectPath),
            "name" -> implicitly[ArgEncoder[String]].encode(value.name),
            "description" -> value.description.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "rules" -> __ListValue(value.rules.map(value => implicitly[ArgEncoder[EscalationRuleInput]].encode(value))),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class EscalationPolicyDestroyInput(id: IncidentManagementEscalationPolicyID, clientMutationId: Option[String] = None)

  object EscalationPolicyDestroyInput {

    implicit val encoder: ArgEncoder[EscalationPolicyDestroyInput] = new ArgEncoder[EscalationPolicyDestroyInput] {

      override def encode(value: EscalationPolicyDestroyInput): __Value =
        __ObjectValue(
          List(
            "id" -> implicitly[ArgEncoder[IncidentManagementEscalationPolicyID]].encode(value.id),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class EscalationPolicyUpdateInput(
    id: IncidentManagementEscalationPolicyID,
    name: Option[String] = None,
    description: Option[String] = None,
    rules: Option[List[EscalationRuleInput]] = None,
    clientMutationId: Option[String] = None
  )

  object EscalationPolicyUpdateInput {

    implicit val encoder: ArgEncoder[EscalationPolicyUpdateInput] = new ArgEncoder[EscalationPolicyUpdateInput] {

      override def encode(value: EscalationPolicyUpdateInput): __Value =
        __ObjectValue(
          List(
            "id" -> implicitly[ArgEncoder[IncidentManagementEscalationPolicyID]].encode(value.id),
            "name" -> value.name.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "description" -> value.description.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "rules" -> value
              .rules
              .fold(__NullValue: __Value)(value =>
                __ListValue(value.map(value => implicitly[ArgEncoder[EscalationRuleInput]].encode(value)))
              ),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class EscalationRuleInput(oncallScheduleIid: String, elapsedTimeSeconds: Int, status: EscalationRuleStatus)

  object EscalationRuleInput {

    implicit val encoder: ArgEncoder[EscalationRuleInput] = new ArgEncoder[EscalationRuleInput] {

      override def encode(value: EscalationRuleInput): __Value =
        __ObjectValue(
          List(
            "oncallScheduleIid" -> implicitly[ArgEncoder[String]].encode(value.oncallScheduleIid),
            "elapsedTimeSeconds" -> implicitly[ArgEncoder[Int]].encode(value.elapsedTimeSeconds),
            "status" -> implicitly[ArgEncoder[EscalationRuleStatus]].encode(value.status)
          )
        )

    }

  }

  case class ExportRequirementsInput(
    sort: Option[Sort] = None,
    state: Option[RequirementState] = None,
    search: Option[String] = None,
    authorUsername: Option[List[String]] = None,
    projectPath: String,
    selectedFields: Option[List[String]] = None,
    clientMutationId: Option[String] = None
  )

  object ExportRequirementsInput {

    implicit val encoder: ArgEncoder[ExportRequirementsInput] = new ArgEncoder[ExportRequirementsInput] {

      override def encode(value: ExportRequirementsInput): __Value =
        __ObjectValue(
          List(
            "sort" -> value.sort.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Sort]].encode(value)),
            "state" -> value.state.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[RequirementState]].encode(value)),
            "search" -> value.search.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "authorUsername" -> value
              .authorUsername
              .fold(__NullValue: __Value)(value => __ListValue(value.map(value => implicitly[ArgEncoder[String]].encode(value)))),
            "projectPath" -> implicitly[ArgEncoder[String]].encode(value.projectPath),
            "selectedFields" -> value
              .selectedFields
              .fold(__NullValue: __Value)(value => __ListValue(value.map(value => implicitly[ArgEncoder[String]].encode(value)))),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class GitlabSubscriptionActivateInput(activationCode: String, clientMutationId: Option[String] = None)

  object GitlabSubscriptionActivateInput {

    implicit val encoder: ArgEncoder[GitlabSubscriptionActivateInput] = new ArgEncoder[GitlabSubscriptionActivateInput] {

      override def encode(value: GitlabSubscriptionActivateInput): __Value =
        __ObjectValue(
          List(
            "activationCode" -> implicitly[ArgEncoder[String]].encode(value.activationCode),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class HttpIntegrationCreateInput(
    projectPath: String,
    name: String,
    active: Boolean,
    payloadExample: Option[JsonString] = None,
    payloadAttributeMappings: Option[List[AlertManagementPayloadAlertFieldInput]] = None,
    clientMutationId: Option[String] = None
  )

  object HttpIntegrationCreateInput {

    implicit val encoder: ArgEncoder[HttpIntegrationCreateInput] = new ArgEncoder[HttpIntegrationCreateInput] {

      override def encode(value: HttpIntegrationCreateInput): __Value =
        __ObjectValue(
          List(
            "projectPath" -> implicitly[ArgEncoder[String]].encode(value.projectPath),
            "name" -> implicitly[ArgEncoder[String]].encode(value.name),
            "active" -> implicitly[ArgEncoder[Boolean]].encode(value.active),
            "payloadExample" -> value.payloadExample.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[JsonString]].encode(value)),
            "payloadAttributeMappings" -> value
              .payloadAttributeMappings
              .fold(__NullValue: __Value)(value =>
                __ListValue(value.map(value => implicitly[ArgEncoder[AlertManagementPayloadAlertFieldInput]].encode(value)))
              ),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class HttpIntegrationDestroyInput(id: AlertManagementHttpIntegrationID, clientMutationId: Option[String] = None)

  object HttpIntegrationDestroyInput {

    implicit val encoder: ArgEncoder[HttpIntegrationDestroyInput] = new ArgEncoder[HttpIntegrationDestroyInput] {

      override def encode(value: HttpIntegrationDestroyInput): __Value =
        __ObjectValue(
          List(
            "id" -> implicitly[ArgEncoder[AlertManagementHttpIntegrationID]].encode(value.id),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class HttpIntegrationResetTokenInput(id: AlertManagementHttpIntegrationID, clientMutationId: Option[String] = None)

  object HttpIntegrationResetTokenInput {

    implicit val encoder: ArgEncoder[HttpIntegrationResetTokenInput] = new ArgEncoder[HttpIntegrationResetTokenInput] {

      override def encode(value: HttpIntegrationResetTokenInput): __Value =
        __ObjectValue(
          List(
            "id" -> implicitly[ArgEncoder[AlertManagementHttpIntegrationID]].encode(value.id),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class HttpIntegrationUpdateInput(
    id: AlertManagementHttpIntegrationID,
    name: Option[String] = None,
    active: Option[Boolean] = None,
    payloadExample: Option[JsonString] = None,
    payloadAttributeMappings: Option[List[AlertManagementPayloadAlertFieldInput]] = None,
    clientMutationId: Option[String] = None
  )

  object HttpIntegrationUpdateInput {

    implicit val encoder: ArgEncoder[HttpIntegrationUpdateInput] = new ArgEncoder[HttpIntegrationUpdateInput] {

      override def encode(value: HttpIntegrationUpdateInput): __Value =
        __ObjectValue(
          List(
            "id" -> implicitly[ArgEncoder[AlertManagementHttpIntegrationID]].encode(value.id),
            "name" -> value.name.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "active" -> value.active.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)),
            "payloadExample" -> value.payloadExample.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[JsonString]].encode(value)),
            "payloadAttributeMappings" -> value
              .payloadAttributeMappings
              .fold(__NullValue: __Value)(value =>
                __ListValue(value.map(value => implicitly[ArgEncoder[AlertManagementPayloadAlertFieldInput]].encode(value)))
              ),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class IssueMoveInput(projectPath: String, iid: String, targetProjectPath: String, clientMutationId: Option[String] = None)

  object IssueMoveInput {

    implicit val encoder: ArgEncoder[IssueMoveInput] = new ArgEncoder[IssueMoveInput] {

      override def encode(value: IssueMoveInput): __Value =
        __ObjectValue(
          List(
            "projectPath" -> implicitly[ArgEncoder[String]].encode(value.projectPath),
            "iid" -> implicitly[ArgEncoder[String]].encode(value.iid),
            "targetProjectPath" -> implicitly[ArgEncoder[String]].encode(value.targetProjectPath),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class IssueMoveListInput(
    projectPath: String,
    iid: String,
    boardId: BoardID,
    fromListId: Option[String] = None,
    toListId: Option[String] = None,
    moveBeforeId: Option[String] = None,
    moveAfterId: Option[String] = None,
    epicId: Option[EpicID] = None,
    clientMutationId: Option[String] = None
  )

  object IssueMoveListInput {

    implicit val encoder: ArgEncoder[IssueMoveListInput] = new ArgEncoder[IssueMoveListInput] {

      override def encode(value: IssueMoveListInput): __Value =
        __ObjectValue(
          List(
            "projectPath" -> implicitly[ArgEncoder[String]].encode(value.projectPath),
            "iid" -> implicitly[ArgEncoder[String]].encode(value.iid),
            "boardId" -> implicitly[ArgEncoder[BoardID]].encode(value.boardId),
            "fromListId" -> value.fromListId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "toListId" -> value.toListId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "moveBeforeId" -> value.moveBeforeId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "moveAfterId" -> value.moveAfterId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "epicId" -> value.epicId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[EpicID]].encode(value)),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class IssueSetAssigneesInput(
    projectPath: String,
    iid: String,
    assigneeUsernames: List[String] = Nil,
    operationMode: Option[MutationOperationMode] = None,
    clientMutationId: Option[String] = None
  )

  object IssueSetAssigneesInput {

    implicit val encoder: ArgEncoder[IssueSetAssigneesInput] = new ArgEncoder[IssueSetAssigneesInput] {

      override def encode(value: IssueSetAssigneesInput): __Value =
        __ObjectValue(
          List(
            "projectPath" -> implicitly[ArgEncoder[String]].encode(value.projectPath),
            "iid" -> implicitly[ArgEncoder[String]].encode(value.iid),
            "assigneeUsernames" -> __ListValue(value.assigneeUsernames.map(value => implicitly[ArgEncoder[String]].encode(value))),
            "operationMode" -> value
              .operationMode
              .fold(__NullValue: __Value)(value => implicitly[ArgEncoder[MutationOperationMode]].encode(value)),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class IssueSetConfidentialInput(projectPath: String, iid: String, confidential: Boolean, clientMutationId: Option[String] = None)

  object IssueSetConfidentialInput {

    implicit val encoder: ArgEncoder[IssueSetConfidentialInput] = new ArgEncoder[IssueSetConfidentialInput] {

      override def encode(value: IssueSetConfidentialInput): __Value =
        __ObjectValue(
          List(
            "projectPath" -> implicitly[ArgEncoder[String]].encode(value.projectPath),
            "iid" -> implicitly[ArgEncoder[String]].encode(value.iid),
            "confidential" -> implicitly[ArgEncoder[Boolean]].encode(value.confidential),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class IssueSetDueDateInput(projectPath: String, iid: String, dueDate: Option[Time] = None, clientMutationId: Option[String] = None)

  object IssueSetDueDateInput {

    implicit val encoder: ArgEncoder[IssueSetDueDateInput] = new ArgEncoder[IssueSetDueDateInput] {

      override def encode(value: IssueSetDueDateInput): __Value =
        __ObjectValue(
          List(
            "projectPath" -> implicitly[ArgEncoder[String]].encode(value.projectPath),
            "iid" -> implicitly[ArgEncoder[String]].encode(value.iid),
            "dueDate" -> value.dueDate.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Time]].encode(value)),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class IssueSetEpicInput(projectPath: String, iid: String, epicId: Option[EpicID] = None, clientMutationId: Option[String] = None)

  object IssueSetEpicInput {

    implicit val encoder: ArgEncoder[IssueSetEpicInput] = new ArgEncoder[IssueSetEpicInput] {

      override def encode(value: IssueSetEpicInput): __Value =
        __ObjectValue(
          List(
            "projectPath" -> implicitly[ArgEncoder[String]].encode(value.projectPath),
            "iid" -> implicitly[ArgEncoder[String]].encode(value.iid),
            "epicId" -> value.epicId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[EpicID]].encode(value)),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class IssueSetIterationInput(
    projectPath: String,
    iid: String,
    iterationId: Option[IterationID] = None,
    clientMutationId: Option[String] = None
  )

  object IssueSetIterationInput {

    implicit val encoder: ArgEncoder[IssueSetIterationInput] = new ArgEncoder[IssueSetIterationInput] {

      override def encode(value: IssueSetIterationInput): __Value =
        __ObjectValue(
          List(
            "projectPath" -> implicitly[ArgEncoder[String]].encode(value.projectPath),
            "iid" -> implicitly[ArgEncoder[String]].encode(value.iid),
            "iterationId" -> value.iterationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[IterationID]].encode(value)),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class IssueSetLockedInput(projectPath: String, iid: String, locked: Boolean, clientMutationId: Option[String] = None)

  object IssueSetLockedInput {

    implicit val encoder: ArgEncoder[IssueSetLockedInput] = new ArgEncoder[IssueSetLockedInput] {

      override def encode(value: IssueSetLockedInput): __Value =
        __ObjectValue(
          List(
            "projectPath" -> implicitly[ArgEncoder[String]].encode(value.projectPath),
            "iid" -> implicitly[ArgEncoder[String]].encode(value.iid),
            "locked" -> implicitly[ArgEncoder[Boolean]].encode(value.locked),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class IssueSetSeverityInput(projectPath: String, iid: String, severity: IssuableSeverity, clientMutationId: Option[String] = None)

  object IssueSetSeverityInput {

    implicit val encoder: ArgEncoder[IssueSetSeverityInput] = new ArgEncoder[IssueSetSeverityInput] {

      override def encode(value: IssueSetSeverityInput): __Value =
        __ObjectValue(
          List(
            "projectPath" -> implicitly[ArgEncoder[String]].encode(value.projectPath),
            "iid" -> implicitly[ArgEncoder[String]].encode(value.iid),
            "severity" -> implicitly[ArgEncoder[IssuableSeverity]].encode(value.severity),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class IssueSetSubscriptionInput(subscribedState: Boolean, projectPath: String, iid: String, clientMutationId: Option[String] = None)

  object IssueSetSubscriptionInput {

    implicit val encoder: ArgEncoder[IssueSetSubscriptionInput] = new ArgEncoder[IssueSetSubscriptionInput] {

      override def encode(value: IssueSetSubscriptionInput): __Value =
        __ObjectValue(
          List(
            "subscribedState" -> implicitly[ArgEncoder[Boolean]].encode(value.subscribedState),
            "projectPath" -> implicitly[ArgEncoder[String]].encode(value.projectPath),
            "iid" -> implicitly[ArgEncoder[String]].encode(value.iid),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class IssueSetWeightInput(projectPath: String, iid: String, weight: Option[Int] = None, clientMutationId: Option[String] = None)

  object IssueSetWeightInput {

    implicit val encoder: ArgEncoder[IssueSetWeightInput] = new ArgEncoder[IssueSetWeightInput] {

      override def encode(value: IssueSetWeightInput): __Value =
        __ObjectValue(
          List(
            "projectPath" -> implicitly[ArgEncoder[String]].encode(value.projectPath),
            "iid" -> implicitly[ArgEncoder[String]].encode(value.iid),
            "weight" -> value.weight.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Int]].encode(value)),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class IterationCadenceCreateInput(
    groupPath: String,
    title: Option[String] = None,
    durationInWeeks: Option[Int] = None,
    iterationsInAdvance: Option[Int] = None,
    startDate: Option[Time] = None,
    automatic: Boolean,
    active: Boolean,
    rollOver: Option[Boolean] = None,
    description: Option[String] = None,
    clientMutationId: Option[String] = None
  )

  object IterationCadenceCreateInput {

    implicit val encoder: ArgEncoder[IterationCadenceCreateInput] = new ArgEncoder[IterationCadenceCreateInput] {

      override def encode(value: IterationCadenceCreateInput): __Value =
        __ObjectValue(
          List(
            "groupPath" -> implicitly[ArgEncoder[String]].encode(value.groupPath),
            "title" -> value.title.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "durationInWeeks" -> value.durationInWeeks.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Int]].encode(value)),
            "iterationsInAdvance" -> value
              .iterationsInAdvance
              .fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Int]].encode(value)),
            "startDate" -> value.startDate.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Time]].encode(value)),
            "automatic" -> implicitly[ArgEncoder[Boolean]].encode(value.automatic),
            "active" -> implicitly[ArgEncoder[Boolean]].encode(value.active),
            "rollOver" -> value.rollOver.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)),
            "description" -> value.description.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class IterationCadenceDestroyInput(id: IterationsCadenceID, clientMutationId: Option[String] = None)

  object IterationCadenceDestroyInput {

    implicit val encoder: ArgEncoder[IterationCadenceDestroyInput] = new ArgEncoder[IterationCadenceDestroyInput] {

      override def encode(value: IterationCadenceDestroyInput): __Value =
        __ObjectValue(
          List(
            "id" -> implicitly[ArgEncoder[IterationsCadenceID]].encode(value.id),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class IterationCadenceUpdateInput(
    id: IterationsCadenceID,
    title: Option[String] = None,
    durationInWeeks: Option[Int] = None,
    iterationsInAdvance: Option[Int] = None,
    startDate: Option[Time] = None,
    automatic: Option[Boolean] = None,
    active: Option[Boolean] = None,
    rollOver: Option[Boolean] = None,
    description: Option[String] = None,
    clientMutationId: Option[String] = None
  )

  object IterationCadenceUpdateInput {

    implicit val encoder: ArgEncoder[IterationCadenceUpdateInput] = new ArgEncoder[IterationCadenceUpdateInput] {

      override def encode(value: IterationCadenceUpdateInput): __Value =
        __ObjectValue(
          List(
            "id" -> implicitly[ArgEncoder[IterationsCadenceID]].encode(value.id),
            "title" -> value.title.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "durationInWeeks" -> value.durationInWeeks.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Int]].encode(value)),
            "iterationsInAdvance" -> value
              .iterationsInAdvance
              .fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Int]].encode(value)),
            "startDate" -> value.startDate.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Time]].encode(value)),
            "automatic" -> value.automatic.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)),
            "active" -> value.active.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)),
            "rollOver" -> value.rollOver.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)),
            "description" -> value.description.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class IterationDeleteInput(id: IterationID, clientMutationId: Option[String] = None)

  object IterationDeleteInput {

    implicit val encoder: ArgEncoder[IterationDeleteInput] = new ArgEncoder[IterationDeleteInput] {

      override def encode(value: IterationDeleteInput): __Value =
        __ObjectValue(
          List(
            "id" -> implicitly[ArgEncoder[IterationID]].encode(value.id),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class JiraImportStartInput(
    projectPath: String,
    jiraProjectKey: String,
    jiraProjectName: Option[String] = None,
    usersMapping: Option[List[JiraUsersMappingInputType]] = None,
    clientMutationId: Option[String] = None
  )

  object JiraImportStartInput {

    implicit val encoder: ArgEncoder[JiraImportStartInput] = new ArgEncoder[JiraImportStartInput] {

      override def encode(value: JiraImportStartInput): __Value =
        __ObjectValue(
          List(
            "projectPath" -> implicitly[ArgEncoder[String]].encode(value.projectPath),
            "jiraProjectKey" -> implicitly[ArgEncoder[String]].encode(value.jiraProjectKey),
            "jiraProjectName" -> value.jiraProjectName.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "usersMapping" -> value
              .usersMapping
              .fold(__NullValue: __Value)(value =>
                __ListValue(value.map(value => implicitly[ArgEncoder[JiraUsersMappingInputType]].encode(value)))
              ),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class JiraImportUsersInput(projectPath: String, startAt: Option[Int] = None, clientMutationId: Option[String] = None)

  object JiraImportUsersInput {

    implicit val encoder: ArgEncoder[JiraImportUsersInput] = new ArgEncoder[JiraImportUsersInput] {

      override def encode(value: JiraImportUsersInput): __Value =
        __ObjectValue(
          List(
            "projectPath" -> implicitly[ArgEncoder[String]].encode(value.projectPath),
            "startAt" -> value.startAt.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Int]].encode(value)),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class JiraUsersMappingInputType(jiraAccountId: String, gitlabId: Option[Int] = None)

  object JiraUsersMappingInputType {

    implicit val encoder: ArgEncoder[JiraUsersMappingInputType] = new ArgEncoder[JiraUsersMappingInputType] {

      override def encode(value: JiraUsersMappingInputType): __Value =
        __ObjectValue(
          List(
            "jiraAccountId" -> implicitly[ArgEncoder[String]].encode(value.jiraAccountId),
            "gitlabId" -> value.gitlabId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Int]].encode(value))
          )
        )

    }

  }

  case class JobPlayInput(id: CiBuildID, clientMutationId: Option[String] = None)

  object JobPlayInput {

    implicit val encoder: ArgEncoder[JobPlayInput] = new ArgEncoder[JobPlayInput] {

      override def encode(value: JobPlayInput): __Value =
        __ObjectValue(
          List(
            "id" -> implicitly[ArgEncoder[CiBuildID]].encode(value.id),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class JobRetryInput(id: CiBuildID, clientMutationId: Option[String] = None)

  object JobRetryInput {

    implicit val encoder: ArgEncoder[JobRetryInput] = new ArgEncoder[JobRetryInput] {

      override def encode(value: JobRetryInput): __Value =
        __ObjectValue(
          List(
            "id" -> implicitly[ArgEncoder[CiBuildID]].encode(value.id),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class LabelCreateInput(
    projectPath: Option[String] = None,
    groupPath: Option[String] = None,
    title: String,
    description: Option[String] = None,
    color: Option[String] = None,
    clientMutationId: Option[String] = None
  )

  object LabelCreateInput {

    implicit val encoder: ArgEncoder[LabelCreateInput] = new ArgEncoder[LabelCreateInput] {

      override def encode(value: LabelCreateInput): __Value =
        __ObjectValue(
          List(
            "projectPath" -> value.projectPath.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "groupPath" -> value.groupPath.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "title" -> implicitly[ArgEncoder[String]].encode(value.title),
            "description" -> value.description.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "color" -> value.color.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class MarkAsSpamSnippetInput(id: SnippetID, clientMutationId: Option[String] = None)

  object MarkAsSpamSnippetInput {

    implicit val encoder: ArgEncoder[MarkAsSpamSnippetInput] = new ArgEncoder[MarkAsSpamSnippetInput] {

      override def encode(value: MarkAsSpamSnippetInput): __Value =
        __ObjectValue(
          List(
            "id" -> implicitly[ArgEncoder[SnippetID]].encode(value.id),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class MergeRequestAcceptInput(
    projectPath: String,
    iid: String,
    strategy: Option[MergeStrategyEnum] = None,
    commitMessage: Option[String] = None,
    squashCommitMessage: Option[String] = None,
    sha: String,
    shouldRemoveSourceBranch: Option[Boolean] = None,
    squash: Option[Boolean] = None,
    clientMutationId: Option[String] = None
  )

  object MergeRequestAcceptInput {

    implicit val encoder: ArgEncoder[MergeRequestAcceptInput] = new ArgEncoder[MergeRequestAcceptInput] {

      override def encode(value: MergeRequestAcceptInput): __Value =
        __ObjectValue(
          List(
            "projectPath" -> implicitly[ArgEncoder[String]].encode(value.projectPath),
            "iid" -> implicitly[ArgEncoder[String]].encode(value.iid),
            "strategy" -> value.strategy.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[MergeStrategyEnum]].encode(value)),
            "commitMessage" -> value.commitMessage.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "squashCommitMessage" -> value
              .squashCommitMessage
              .fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "sha" -> implicitly[ArgEncoder[String]].encode(value.sha),
            "shouldRemoveSourceBranch" -> value
              .shouldRemoveSourceBranch
              .fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)),
            "squash" -> value.squash.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class MergeRequestCreateInput(
    projectPath: String,
    title: String,
    sourceBranch: String,
    targetBranch: String,
    description: Option[String] = None,
    labels: Option[List[String]] = None,
    clientMutationId: Option[String] = None
  )

  object MergeRequestCreateInput {

    implicit val encoder: ArgEncoder[MergeRequestCreateInput] = new ArgEncoder[MergeRequestCreateInput] {

      override def encode(value: MergeRequestCreateInput): __Value =
        __ObjectValue(
          List(
            "projectPath" -> implicitly[ArgEncoder[String]].encode(value.projectPath),
            "title" -> implicitly[ArgEncoder[String]].encode(value.title),
            "sourceBranch" -> implicitly[ArgEncoder[String]].encode(value.sourceBranch),
            "targetBranch" -> implicitly[ArgEncoder[String]].encode(value.targetBranch),
            "description" -> value.description.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "labels" -> value
              .labels
              .fold(__NullValue: __Value)(value => __ListValue(value.map(value => implicitly[ArgEncoder[String]].encode(value)))),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class MergeRequestReviewerRereviewInput(projectPath: String, iid: String, userId: UserID, clientMutationId: Option[String] = None)

  object MergeRequestReviewerRereviewInput {

    implicit val encoder: ArgEncoder[MergeRequestReviewerRereviewInput] = new ArgEncoder[MergeRequestReviewerRereviewInput] {

      override def encode(value: MergeRequestReviewerRereviewInput): __Value =
        __ObjectValue(
          List(
            "projectPath" -> implicitly[ArgEncoder[String]].encode(value.projectPath),
            "iid" -> implicitly[ArgEncoder[String]].encode(value.iid),
            "userId" -> implicitly[ArgEncoder[UserID]].encode(value.userId),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class MergeRequestSetAssigneesInput(
    projectPath: String,
    iid: String,
    assigneeUsernames: List[String] = Nil,
    operationMode: Option[MutationOperationMode] = None,
    clientMutationId: Option[String] = None
  )

  object MergeRequestSetAssigneesInput {

    implicit val encoder: ArgEncoder[MergeRequestSetAssigneesInput] = new ArgEncoder[MergeRequestSetAssigneesInput] {

      override def encode(value: MergeRequestSetAssigneesInput): __Value =
        __ObjectValue(
          List(
            "projectPath" -> implicitly[ArgEncoder[String]].encode(value.projectPath),
            "iid" -> implicitly[ArgEncoder[String]].encode(value.iid),
            "assigneeUsernames" -> __ListValue(value.assigneeUsernames.map(value => implicitly[ArgEncoder[String]].encode(value))),
            "operationMode" -> value
              .operationMode
              .fold(__NullValue: __Value)(value => implicitly[ArgEncoder[MutationOperationMode]].encode(value)),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class MergeRequestSetDraftInput(projectPath: String, iid: String, draft: Boolean, clientMutationId: Option[String] = None)

  object MergeRequestSetDraftInput {

    implicit val encoder: ArgEncoder[MergeRequestSetDraftInput] = new ArgEncoder[MergeRequestSetDraftInput] {

      override def encode(value: MergeRequestSetDraftInput): __Value =
        __ObjectValue(
          List(
            "projectPath" -> implicitly[ArgEncoder[String]].encode(value.projectPath),
            "iid" -> implicitly[ArgEncoder[String]].encode(value.iid),
            "draft" -> implicitly[ArgEncoder[Boolean]].encode(value.draft),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class MergeRequestSetLabelsInput(
    projectPath: String,
    iid: String,
    labelIds: List[LabelID] = Nil,
    operationMode: Option[MutationOperationMode] = None,
    clientMutationId: Option[String] = None
  )

  object MergeRequestSetLabelsInput {

    implicit val encoder: ArgEncoder[MergeRequestSetLabelsInput] = new ArgEncoder[MergeRequestSetLabelsInput] {

      override def encode(value: MergeRequestSetLabelsInput): __Value =
        __ObjectValue(
          List(
            "projectPath" -> implicitly[ArgEncoder[String]].encode(value.projectPath),
            "iid" -> implicitly[ArgEncoder[String]].encode(value.iid),
            "labelIds" -> __ListValue(value.labelIds.map(value => implicitly[ArgEncoder[LabelID]].encode(value))),
            "operationMode" -> value
              .operationMode
              .fold(__NullValue: __Value)(value => implicitly[ArgEncoder[MutationOperationMode]].encode(value)),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class MergeRequestSetLockedInput(projectPath: String, iid: String, locked: Boolean, clientMutationId: Option[String] = None)

  object MergeRequestSetLockedInput {

    implicit val encoder: ArgEncoder[MergeRequestSetLockedInput] = new ArgEncoder[MergeRequestSetLockedInput] {

      override def encode(value: MergeRequestSetLockedInput): __Value =
        __ObjectValue(
          List(
            "projectPath" -> implicitly[ArgEncoder[String]].encode(value.projectPath),
            "iid" -> implicitly[ArgEncoder[String]].encode(value.iid),
            "locked" -> implicitly[ArgEncoder[Boolean]].encode(value.locked),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class MergeRequestSetMilestoneInput(
    projectPath: String,
    iid: String,
    milestoneId: Option[MilestoneID] = None,
    clientMutationId: Option[String] = None
  )

  object MergeRequestSetMilestoneInput {

    implicit val encoder: ArgEncoder[MergeRequestSetMilestoneInput] = new ArgEncoder[MergeRequestSetMilestoneInput] {

      override def encode(value: MergeRequestSetMilestoneInput): __Value =
        __ObjectValue(
          List(
            "projectPath" -> implicitly[ArgEncoder[String]].encode(value.projectPath),
            "iid" -> implicitly[ArgEncoder[String]].encode(value.iid),
            "milestoneId" -> value.milestoneId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[MilestoneID]].encode(value)),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class MergeRequestSetSubscriptionInput(
    subscribedState: Boolean,
    projectPath: String,
    iid: String,
    clientMutationId: Option[String] = None
  )

  object MergeRequestSetSubscriptionInput {

    implicit val encoder: ArgEncoder[MergeRequestSetSubscriptionInput] = new ArgEncoder[MergeRequestSetSubscriptionInput] {

      override def encode(value: MergeRequestSetSubscriptionInput): __Value =
        __ObjectValue(
          List(
            "subscribedState" -> implicitly[ArgEncoder[Boolean]].encode(value.subscribedState),
            "projectPath" -> implicitly[ArgEncoder[String]].encode(value.projectPath),
            "iid" -> implicitly[ArgEncoder[String]].encode(value.iid),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class MergeRequestSetWipInput(projectPath: String, iid: String, wip: Boolean, clientMutationId: Option[String] = None)

  object MergeRequestSetWipInput {

    implicit val encoder: ArgEncoder[MergeRequestSetWipInput] = new ArgEncoder[MergeRequestSetWipInput] {

      override def encode(value: MergeRequestSetWipInput): __Value =
        __ObjectValue(
          List(
            "projectPath" -> implicitly[ArgEncoder[String]].encode(value.projectPath),
            "iid" -> implicitly[ArgEncoder[String]].encode(value.iid),
            "wip" -> implicitly[ArgEncoder[Boolean]].encode(value.wip),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class MergeRequestUpdateInput(
    projectPath: String,
    iid: String,
    title: Option[String] = None,
    targetBranch: Option[String] = None,
    description: Option[String] = None,
    state: Option[MergeRequestNewState] = None,
    clientMutationId: Option[String] = None
  )

  object MergeRequestUpdateInput {

    implicit val encoder: ArgEncoder[MergeRequestUpdateInput] = new ArgEncoder[MergeRequestUpdateInput] {

      override def encode(value: MergeRequestUpdateInput): __Value =
        __ObjectValue(
          List(
            "projectPath" -> implicitly[ArgEncoder[String]].encode(value.projectPath),
            "iid" -> implicitly[ArgEncoder[String]].encode(value.iid),
            "title" -> value.title.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "targetBranch" -> value.targetBranch.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "description" -> value.description.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "state" -> value.state.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[MergeRequestNewState]].encode(value)),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class MergeRequestsResolverNegatedParams(labels: Option[List[String]] = None, milestoneTitle: Option[String] = None)

  object MergeRequestsResolverNegatedParams {

    implicit val encoder: ArgEncoder[MergeRequestsResolverNegatedParams] = new ArgEncoder[MergeRequestsResolverNegatedParams] {

      override def encode(value: MergeRequestsResolverNegatedParams): __Value =
        __ObjectValue(
          List(
            "labels" -> value
              .labels
              .fold(__NullValue: __Value)(value => __ListValue(value.map(value => implicitly[ArgEncoder[String]].encode(value)))),
            "milestoneTitle" -> value.milestoneTitle.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class NamespaceIncreaseStorageTemporarilyInput(id: NamespaceID, clientMutationId: Option[String] = None)

  object NamespaceIncreaseStorageTemporarilyInput {

    implicit val encoder: ArgEncoder[NamespaceIncreaseStorageTemporarilyInput] = new ArgEncoder[NamespaceIncreaseStorageTemporarilyInput] {

      override def encode(value: NamespaceIncreaseStorageTemporarilyInput): __Value =
        __ObjectValue(
          List(
            "id" -> implicitly[ArgEncoder[NamespaceID]].encode(value.id),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class NegatedBoardIssueInput(
    labelName: Option[List[Option[String]]] = None,
    authorUsername: Option[String] = None,
    myReactionEmoji: Option[String] = None,
    iids: Option[List[String]] = None,
    milestoneTitle: Option[String] = None,
    assigneeUsername: Option[List[Option[String]]] = None,
    releaseTag: Option[String] = None,
    epicId: Option[EpicID] = None,
    iterationTitle: Option[String] = None,
    weight: Option[String] = None,
    iterationId: Option[List[IterationID]] = None,
    iterationWildcardId: Option[NegatedIterationWildcardId] = None
  )

  object NegatedBoardIssueInput {

    implicit val encoder: ArgEncoder[NegatedBoardIssueInput] = new ArgEncoder[NegatedBoardIssueInput] {

      override def encode(value: NegatedBoardIssueInput): __Value =
        __ObjectValue(
          List(
            "labelName" -> value
              .labelName
              .fold(__NullValue: __Value)(value =>
                __ListValue(value.map(value => value.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))))
              ),
            "authorUsername" -> value.authorUsername.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "myReactionEmoji" -> value.myReactionEmoji.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "iids" -> value
              .iids
              .fold(__NullValue: __Value)(value => __ListValue(value.map(value => implicitly[ArgEncoder[String]].encode(value)))),
            "milestoneTitle" -> value.milestoneTitle.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "assigneeUsername" -> value
              .assigneeUsername
              .fold(__NullValue: __Value)(value =>
                __ListValue(value.map(value => value.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))))
              ),
            "releaseTag" -> value.releaseTag.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "epicId" -> value.epicId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[EpicID]].encode(value)),
            "iterationTitle" -> value.iterationTitle.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "weight" -> value.weight.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "iterationId" -> value
              .iterationId
              .fold(__NullValue: __Value)(value => __ListValue(value.map(value => implicitly[ArgEncoder[IterationID]].encode(value)))),
            "iterationWildcardId" -> value
              .iterationWildcardId
              .fold(__NullValue: __Value)(value => implicitly[ArgEncoder[NegatedIterationWildcardId]].encode(value))
          )
        )

    }

  }

  case class NegatedEpicBoardIssueInput(
    labelName: Option[List[Option[String]]] = None,
    authorUsername: Option[String] = None,
    myReactionEmoji: Option[String] = None
  )

  object NegatedEpicBoardIssueInput {

    implicit val encoder: ArgEncoder[NegatedEpicBoardIssueInput] = new ArgEncoder[NegatedEpicBoardIssueInput] {

      override def encode(value: NegatedEpicBoardIssueInput): __Value =
        __ObjectValue(
          List(
            "labelName" -> value
              .labelName
              .fold(__NullValue: __Value)(value =>
                __ListValue(value.map(value => value.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))))
              ),
            "authorUsername" -> value.authorUsername.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "myReactionEmoji" -> value.myReactionEmoji.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class NegatedEpicFilterInput(
    labelName: Option[List[Option[String]]] = None,
    authorUsername: Option[String] = None,
    myReactionEmoji: Option[String] = None
  )

  object NegatedEpicFilterInput {

    implicit val encoder: ArgEncoder[NegatedEpicFilterInput] = new ArgEncoder[NegatedEpicFilterInput] {

      override def encode(value: NegatedEpicFilterInput): __Value =
        __ObjectValue(
          List(
            "labelName" -> value
              .labelName
              .fold(__NullValue: __Value)(value =>
                __ListValue(value.map(value => value.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))))
              ),
            "authorUsername" -> value.authorUsername.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "myReactionEmoji" -> value.myReactionEmoji.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class NegatedIssueFilterInput(
    iids: Option[List[String]] = None,
    labelName: Option[List[String]] = None,
    milestoneTitle: Option[List[String]] = None,
    assigneeUsernames: Option[List[String]] = None,
    assigneeId: Option[String] = None,
    epicId: Option[String] = None,
    weight: Option[String] = None,
    iterationId: Option[List[String]] = None,
    iterationWildcardId: Option[IterationWildcardId] = None
  )

  object NegatedIssueFilterInput {

    implicit val encoder: ArgEncoder[NegatedIssueFilterInput] = new ArgEncoder[NegatedIssueFilterInput] {

      override def encode(value: NegatedIssueFilterInput): __Value =
        __ObjectValue(
          List(
            "iids" -> value
              .iids
              .fold(__NullValue: __Value)(value => __ListValue(value.map(value => implicitly[ArgEncoder[String]].encode(value)))),
            "labelName" -> value
              .labelName
              .fold(__NullValue: __Value)(value => __ListValue(value.map(value => implicitly[ArgEncoder[String]].encode(value)))),
            "milestoneTitle" -> value
              .milestoneTitle
              .fold(__NullValue: __Value)(value => __ListValue(value.map(value => implicitly[ArgEncoder[String]].encode(value)))),
            "assigneeUsernames" -> value
              .assigneeUsernames
              .fold(__NullValue: __Value)(value => __ListValue(value.map(value => implicitly[ArgEncoder[String]].encode(value)))),
            "assigneeId" -> value.assigneeId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "epicId" -> value.epicId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "weight" -> value.weight.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "iterationId" -> value
              .iterationId
              .fold(__NullValue: __Value)(value => __ListValue(value.map(value => implicitly[ArgEncoder[String]].encode(value)))),
            "iterationWildcardId" -> value
              .iterationWildcardId
              .fold(__NullValue: __Value)(value => implicitly[ArgEncoder[IterationWildcardId]].encode(value))
          )
        )

    }

  }

  case class OncallRotationActivePeriodInputType(startTime: String, endTime: String)

  object OncallRotationActivePeriodInputType {

    implicit val encoder: ArgEncoder[OncallRotationActivePeriodInputType] = new ArgEncoder[OncallRotationActivePeriodInputType] {

      override def encode(value: OncallRotationActivePeriodInputType): __Value =
        __ObjectValue(
          List(
            "startTime" -> implicitly[ArgEncoder[String]].encode(value.startTime),
            "endTime" -> implicitly[ArgEncoder[String]].encode(value.endTime)
          )
        )

    }

  }

  case class OncallRotationCreateInput(
    projectPath: String,
    scheduleIid: String,
    name: String,
    startsAt: OncallRotationDateInputType,
    endsAt: Option[OncallRotationDateInputType] = None,
    rotationLength: OncallRotationLengthInputType,
    activePeriod: Option[OncallRotationActivePeriodInputType] = None,
    participants: List[OncallUserInputType] = Nil,
    clientMutationId: Option[String] = None
  )

  object OncallRotationCreateInput {

    implicit val encoder: ArgEncoder[OncallRotationCreateInput] = new ArgEncoder[OncallRotationCreateInput] {

      override def encode(value: OncallRotationCreateInput): __Value =
        __ObjectValue(
          List(
            "projectPath" -> implicitly[ArgEncoder[String]].encode(value.projectPath),
            "scheduleIid" -> implicitly[ArgEncoder[String]].encode(value.scheduleIid),
            "name" -> implicitly[ArgEncoder[String]].encode(value.name),
            "startsAt" -> implicitly[ArgEncoder[OncallRotationDateInputType]].encode(value.startsAt),
            "endsAt" -> value.endsAt.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[OncallRotationDateInputType]].encode(value)),
            "rotationLength" -> implicitly[ArgEncoder[OncallRotationLengthInputType]].encode(value.rotationLength),
            "activePeriod" -> value
              .activePeriod
              .fold(__NullValue: __Value)(value => implicitly[ArgEncoder[OncallRotationActivePeriodInputType]].encode(value)),
            "participants" -> __ListValue(value.participants.map(value => implicitly[ArgEncoder[OncallUserInputType]].encode(value))),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class OncallRotationDateInputType(date: String, time: String)

  object OncallRotationDateInputType {

    implicit val encoder: ArgEncoder[OncallRotationDateInputType] = new ArgEncoder[OncallRotationDateInputType] {

      override def encode(value: OncallRotationDateInputType): __Value =
        __ObjectValue(
          List("date" -> implicitly[ArgEncoder[String]].encode(value.date), "time" -> implicitly[ArgEncoder[String]].encode(value.time))
        )

    }

  }

  case class OncallRotationDestroyInput(
    projectPath: String,
    scheduleIid: String,
    id: IncidentManagementOncallRotationID,
    clientMutationId: Option[String] = None
  )

  object OncallRotationDestroyInput {

    implicit val encoder: ArgEncoder[OncallRotationDestroyInput] = new ArgEncoder[OncallRotationDestroyInput] {

      override def encode(value: OncallRotationDestroyInput): __Value =
        __ObjectValue(
          List(
            "projectPath" -> implicitly[ArgEncoder[String]].encode(value.projectPath),
            "scheduleIid" -> implicitly[ArgEncoder[String]].encode(value.scheduleIid),
            "id" -> implicitly[ArgEncoder[IncidentManagementOncallRotationID]].encode(value.id),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class OncallRotationLengthInputType(length: Int, unit: OncallRotationUnitEnum)

  object OncallRotationLengthInputType {

    implicit val encoder: ArgEncoder[OncallRotationLengthInputType] = new ArgEncoder[OncallRotationLengthInputType] {

      override def encode(value: OncallRotationLengthInputType): __Value =
        __ObjectValue(
          List(
            "length" -> implicitly[ArgEncoder[Int]].encode(value.length),
            "unit" -> implicitly[ArgEncoder[OncallRotationUnitEnum]].encode(value.unit)
          )
        )

    }

  }

  case class OncallRotationUpdateInput(
    id: IncidentManagementOncallRotationID,
    name: Option[String] = None,
    startsAt: Option[OncallRotationDateInputType] = None,
    endsAt: Option[OncallRotationDateInputType] = None,
    rotationLength: Option[OncallRotationLengthInputType] = None,
    activePeriod: Option[OncallRotationActivePeriodInputType] = None,
    participants: Option[List[OncallUserInputType]] = None,
    clientMutationId: Option[String] = None
  )

  object OncallRotationUpdateInput {

    implicit val encoder: ArgEncoder[OncallRotationUpdateInput] = new ArgEncoder[OncallRotationUpdateInput] {

      override def encode(value: OncallRotationUpdateInput): __Value =
        __ObjectValue(
          List(
            "id" -> implicitly[ArgEncoder[IncidentManagementOncallRotationID]].encode(value.id),
            "name" -> value.name.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "startsAt" -> value
              .startsAt
              .fold(__NullValue: __Value)(value => implicitly[ArgEncoder[OncallRotationDateInputType]].encode(value)),
            "endsAt" -> value.endsAt.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[OncallRotationDateInputType]].encode(value)),
            "rotationLength" -> value
              .rotationLength
              .fold(__NullValue: __Value)(value => implicitly[ArgEncoder[OncallRotationLengthInputType]].encode(value)),
            "activePeriod" -> value
              .activePeriod
              .fold(__NullValue: __Value)(value => implicitly[ArgEncoder[OncallRotationActivePeriodInputType]].encode(value)),
            "participants" -> value
              .participants
              .fold(__NullValue: __Value)(value =>
                __ListValue(value.map(value => implicitly[ArgEncoder[OncallUserInputType]].encode(value)))
              ),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class OncallScheduleCreateInput(
    projectPath: String,
    name: String,
    description: Option[String] = None,
    timezone: String,
    clientMutationId: Option[String] = None
  )

  object OncallScheduleCreateInput {

    implicit val encoder: ArgEncoder[OncallScheduleCreateInput] = new ArgEncoder[OncallScheduleCreateInput] {

      override def encode(value: OncallScheduleCreateInput): __Value =
        __ObjectValue(
          List(
            "projectPath" -> implicitly[ArgEncoder[String]].encode(value.projectPath),
            "name" -> implicitly[ArgEncoder[String]].encode(value.name),
            "description" -> value.description.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "timezone" -> implicitly[ArgEncoder[String]].encode(value.timezone),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class OncallScheduleDestroyInput(projectPath: String, iid: String, clientMutationId: Option[String] = None)

  object OncallScheduleDestroyInput {

    implicit val encoder: ArgEncoder[OncallScheduleDestroyInput] = new ArgEncoder[OncallScheduleDestroyInput] {

      override def encode(value: OncallScheduleDestroyInput): __Value =
        __ObjectValue(
          List(
            "projectPath" -> implicitly[ArgEncoder[String]].encode(value.projectPath),
            "iid" -> implicitly[ArgEncoder[String]].encode(value.iid),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class OncallScheduleUpdateInput(
    projectPath: String,
    iid: String,
    name: Option[String] = None,
    description: Option[String] = None,
    timezone: Option[String] = None,
    clientMutationId: Option[String] = None
  )

  object OncallScheduleUpdateInput {

    implicit val encoder: ArgEncoder[OncallScheduleUpdateInput] = new ArgEncoder[OncallScheduleUpdateInput] {

      override def encode(value: OncallScheduleUpdateInput): __Value =
        __ObjectValue(
          List(
            "projectPath" -> implicitly[ArgEncoder[String]].encode(value.projectPath),
            "iid" -> implicitly[ArgEncoder[String]].encode(value.iid),
            "name" -> value.name.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "description" -> value.description.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "timezone" -> value.timezone.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class OncallUserInputType(
    username: String,
    colorPalette: Option[DataVisualizationColorEnum] = None,
    colorWeight: Option[DataVisualizationWeightEnum] = None
  )

  object OncallUserInputType {

    implicit val encoder: ArgEncoder[OncallUserInputType] = new ArgEncoder[OncallUserInputType] {

      override def encode(value: OncallUserInputType): __Value =
        __ObjectValue(
          List(
            "username" -> implicitly[ArgEncoder[String]].encode(value.username),
            "colorPalette" -> value
              .colorPalette
              .fold(__NullValue: __Value)(value => implicitly[ArgEncoder[DataVisualizationColorEnum]].encode(value)),
            "colorWeight" -> value
              .colorWeight
              .fold(__NullValue: __Value)(value => implicitly[ArgEncoder[DataVisualizationWeightEnum]].encode(value))
          )
        )

    }

  }

  case class PipelineCancelInput(id: CiPipelineID, clientMutationId: Option[String] = None)

  object PipelineCancelInput {

    implicit val encoder: ArgEncoder[PipelineCancelInput] = new ArgEncoder[PipelineCancelInput] {

      override def encode(value: PipelineCancelInput): __Value =
        __ObjectValue(
          List(
            "id" -> implicitly[ArgEncoder[CiPipelineID]].encode(value.id),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class PipelineDestroyInput(id: CiPipelineID, clientMutationId: Option[String] = None)

  object PipelineDestroyInput {

    implicit val encoder: ArgEncoder[PipelineDestroyInput] = new ArgEncoder[PipelineDestroyInput] {

      override def encode(value: PipelineDestroyInput): __Value =
        __ObjectValue(
          List(
            "id" -> implicitly[ArgEncoder[CiPipelineID]].encode(value.id),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class PipelineRetryInput(id: CiPipelineID, clientMutationId: Option[String] = None)

  object PipelineRetryInput {

    implicit val encoder: ArgEncoder[PipelineRetryInput] = new ArgEncoder[PipelineRetryInput] {

      override def encode(value: PipelineRetryInput): __Value =
        __ObjectValue(
          List(
            "id" -> implicitly[ArgEncoder[CiPipelineID]].encode(value.id),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class PrometheusIntegrationCreateInput(projectPath: String, active: Boolean, apiUrl: String, clientMutationId: Option[String] = None)

  object PrometheusIntegrationCreateInput {

    implicit val encoder: ArgEncoder[PrometheusIntegrationCreateInput] = new ArgEncoder[PrometheusIntegrationCreateInput] {

      override def encode(value: PrometheusIntegrationCreateInput): __Value =
        __ObjectValue(
          List(
            "projectPath" -> implicitly[ArgEncoder[String]].encode(value.projectPath),
            "active" -> implicitly[ArgEncoder[Boolean]].encode(value.active),
            "apiUrl" -> implicitly[ArgEncoder[String]].encode(value.apiUrl),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class PrometheusIntegrationResetTokenInput(id: IntegrationsPrometheusID, clientMutationId: Option[String] = None)

  object PrometheusIntegrationResetTokenInput {

    implicit val encoder: ArgEncoder[PrometheusIntegrationResetTokenInput] = new ArgEncoder[PrometheusIntegrationResetTokenInput] {

      override def encode(value: PrometheusIntegrationResetTokenInput): __Value =
        __ObjectValue(
          List(
            "id" -> implicitly[ArgEncoder[IntegrationsPrometheusID]].encode(value.id),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class PrometheusIntegrationUpdateInput(
    id: IntegrationsPrometheusID,
    active: Option[Boolean] = None,
    apiUrl: Option[String] = None,
    clientMutationId: Option[String] = None
  )

  object PrometheusIntegrationUpdateInput {

    implicit val encoder: ArgEncoder[PrometheusIntegrationUpdateInput] = new ArgEncoder[PrometheusIntegrationUpdateInput] {

      override def encode(value: PrometheusIntegrationUpdateInput): __Value =
        __ObjectValue(
          List(
            "id" -> implicitly[ArgEncoder[IntegrationsPrometheusID]].encode(value.id),
            "active" -> value.active.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)),
            "apiUrl" -> value.apiUrl.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class PromoteToEpicInput(projectPath: String, iid: String, groupPath: Option[String] = None, clientMutationId: Option[String] = None)

  object PromoteToEpicInput {

    implicit val encoder: ArgEncoder[PromoteToEpicInput] = new ArgEncoder[PromoteToEpicInput] {

      override def encode(value: PromoteToEpicInput): __Value =
        __ObjectValue(
          List(
            "projectPath" -> implicitly[ArgEncoder[String]].encode(value.projectPath),
            "iid" -> implicitly[ArgEncoder[String]].encode(value.iid),
            "groupPath" -> value.groupPath.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class ReleaseAssetLinkCreateInput(
    name: String,
    url: String,
    directAssetPath: Option[String] = None,
    linkType: Option[ReleaseAssetLinkType] = None,
    projectPath: String,
    tagName: String,
    clientMutationId: Option[String] = None
  )

  object ReleaseAssetLinkCreateInput {

    implicit val encoder: ArgEncoder[ReleaseAssetLinkCreateInput] = new ArgEncoder[ReleaseAssetLinkCreateInput] {

      override def encode(value: ReleaseAssetLinkCreateInput): __Value =
        __ObjectValue(
          List(
            "name" -> implicitly[ArgEncoder[String]].encode(value.name),
            "url" -> implicitly[ArgEncoder[String]].encode(value.url),
            "directAssetPath" -> value.directAssetPath.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "linkType" -> value.linkType.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[ReleaseAssetLinkType]].encode(value)),
            "projectPath" -> implicitly[ArgEncoder[String]].encode(value.projectPath),
            "tagName" -> implicitly[ArgEncoder[String]].encode(value.tagName),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class ReleaseAssetLinkDeleteInput(id: ReleasesLinkID, clientMutationId: Option[String] = None)

  object ReleaseAssetLinkDeleteInput {

    implicit val encoder: ArgEncoder[ReleaseAssetLinkDeleteInput] = new ArgEncoder[ReleaseAssetLinkDeleteInput] {

      override def encode(value: ReleaseAssetLinkDeleteInput): __Value =
        __ObjectValue(
          List(
            "id" -> implicitly[ArgEncoder[ReleasesLinkID]].encode(value.id),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class ReleaseAssetLinkInput(
    name: String,
    url: String,
    directAssetPath: Option[String] = None,
    linkType: Option[ReleaseAssetLinkType] = None
  )

  object ReleaseAssetLinkInput {

    implicit val encoder: ArgEncoder[ReleaseAssetLinkInput] = new ArgEncoder[ReleaseAssetLinkInput] {

      override def encode(value: ReleaseAssetLinkInput): __Value =
        __ObjectValue(
          List(
            "name" -> implicitly[ArgEncoder[String]].encode(value.name),
            "url" -> implicitly[ArgEncoder[String]].encode(value.url),
            "directAssetPath" -> value.directAssetPath.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "linkType" -> value.linkType.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[ReleaseAssetLinkType]].encode(value))
          )
        )

    }

  }

  case class ReleaseAssetLinkUpdateInput(
    id: ReleasesLinkID,
    name: Option[String] = None,
    url: Option[String] = None,
    directAssetPath: Option[String] = None,
    linkType: Option[ReleaseAssetLinkType] = None,
    clientMutationId: Option[String] = None
  )

  object ReleaseAssetLinkUpdateInput {

    implicit val encoder: ArgEncoder[ReleaseAssetLinkUpdateInput] = new ArgEncoder[ReleaseAssetLinkUpdateInput] {

      override def encode(value: ReleaseAssetLinkUpdateInput): __Value =
        __ObjectValue(
          List(
            "id" -> implicitly[ArgEncoder[ReleasesLinkID]].encode(value.id),
            "name" -> value.name.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "url" -> value.url.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "directAssetPath" -> value.directAssetPath.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "linkType" -> value.linkType.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[ReleaseAssetLinkType]].encode(value)),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class ReleaseAssetsInput(links: Option[List[ReleaseAssetLinkInput]] = None)

  object ReleaseAssetsInput {

    implicit val encoder: ArgEncoder[ReleaseAssetsInput] = new ArgEncoder[ReleaseAssetsInput] {

      override def encode(value: ReleaseAssetsInput): __Value =
        __ObjectValue(
          List(
            "links" -> value
              .links
              .fold(__NullValue: __Value)(value =>
                __ListValue(value.map(value => implicitly[ArgEncoder[ReleaseAssetLinkInput]].encode(value)))
              )
          )
        )

    }

  }

  case class ReleaseCreateInput(
    projectPath: String,
    tagName: String,
    ref: Option[String] = None,
    name: Option[String] = None,
    description: Option[String] = None,
    releasedAt: Option[Time] = None,
    milestones: Option[List[String]] = None,
    assets: Option[ReleaseAssetsInput] = None,
    clientMutationId: Option[String] = None
  )

  object ReleaseCreateInput {

    implicit val encoder: ArgEncoder[ReleaseCreateInput] = new ArgEncoder[ReleaseCreateInput] {

      override def encode(value: ReleaseCreateInput): __Value =
        __ObjectValue(
          List(
            "projectPath" -> implicitly[ArgEncoder[String]].encode(value.projectPath),
            "tagName" -> implicitly[ArgEncoder[String]].encode(value.tagName),
            "ref" -> value.ref.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "name" -> value.name.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "description" -> value.description.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "releasedAt" -> value.releasedAt.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Time]].encode(value)),
            "milestones" -> value
              .milestones
              .fold(__NullValue: __Value)(value => __ListValue(value.map(value => implicitly[ArgEncoder[String]].encode(value)))),
            "assets" -> value.assets.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[ReleaseAssetsInput]].encode(value)),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class ReleaseDeleteInput(projectPath: String, tagName: String, clientMutationId: Option[String] = None)

  object ReleaseDeleteInput {

    implicit val encoder: ArgEncoder[ReleaseDeleteInput] = new ArgEncoder[ReleaseDeleteInput] {

      override def encode(value: ReleaseDeleteInput): __Value =
        __ObjectValue(
          List(
            "projectPath" -> implicitly[ArgEncoder[String]].encode(value.projectPath),
            "tagName" -> implicitly[ArgEncoder[String]].encode(value.tagName),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class ReleaseUpdateInput(
    projectPath: String,
    tagName: String,
    name: Option[String] = None,
    description: Option[String] = None,
    releasedAt: Option[Time] = None,
    milestones: Option[List[String]] = None,
    clientMutationId: Option[String] = None
  )

  object ReleaseUpdateInput {

    implicit val encoder: ArgEncoder[ReleaseUpdateInput] = new ArgEncoder[ReleaseUpdateInput] {

      override def encode(value: ReleaseUpdateInput): __Value =
        __ObjectValue(
          List(
            "projectPath" -> implicitly[ArgEncoder[String]].encode(value.projectPath),
            "tagName" -> implicitly[ArgEncoder[String]].encode(value.tagName),
            "name" -> value.name.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "description" -> value.description.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "releasedAt" -> value.releasedAt.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Time]].encode(value)),
            "milestones" -> value
              .milestones
              .fold(__NullValue: __Value)(value => __ListValue(value.map(value => implicitly[ArgEncoder[String]].encode(value)))),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class RemoveProjectFromSecurityDashboardInput(id: ProjectID, clientMutationId: Option[String] = None)

  object RemoveProjectFromSecurityDashboardInput {

    implicit val encoder: ArgEncoder[RemoveProjectFromSecurityDashboardInput] = new ArgEncoder[RemoveProjectFromSecurityDashboardInput] {

      override def encode(value: RemoveProjectFromSecurityDashboardInput): __Value =
        __ObjectValue(
          List(
            "id" -> implicitly[ArgEncoder[ProjectID]].encode(value.id),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class RepositionImageDiffNoteInput(id: DiffNoteID, position: UpdateDiffImagePositionInput, clientMutationId: Option[String] = None)

  object RepositionImageDiffNoteInput {

    implicit val encoder: ArgEncoder[RepositionImageDiffNoteInput] = new ArgEncoder[RepositionImageDiffNoteInput] {

      override def encode(value: RepositionImageDiffNoteInput): __Value =
        __ObjectValue(
          List(
            "id" -> implicitly[ArgEncoder[DiffNoteID]].encode(value.id),
            "position" -> implicitly[ArgEncoder[UpdateDiffImagePositionInput]].encode(value.position),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class RunnerDeleteInput(id: CiRunnerID, clientMutationId: Option[String] = None)

  object RunnerDeleteInput {

    implicit val encoder: ArgEncoder[RunnerDeleteInput] = new ArgEncoder[RunnerDeleteInput] {

      override def encode(value: RunnerDeleteInput): __Value =
        __ObjectValue(
          List(
            "id" -> implicitly[ArgEncoder[CiRunnerID]].encode(value.id),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class RunnerUpdateInput(
    id: CiRunnerID,
    description: Option[String] = None,
    maximumTimeout: Option[Int] = None,
    accessLevel: Option[CiRunnerAccessLevel] = None,
    active: Option[Boolean] = None,
    locked: Option[Boolean] = None,
    runUntagged: Option[Boolean] = None,
    tagList: Option[List[String]] = None,
    publicProjectsMinutesCostFactor: Option[Double] = None,
    privateProjectsMinutesCostFactor: Option[Double] = None,
    clientMutationId: Option[String] = None
  )

  object RunnerUpdateInput {

    implicit val encoder: ArgEncoder[RunnerUpdateInput] = new ArgEncoder[RunnerUpdateInput] {

      override def encode(value: RunnerUpdateInput): __Value =
        __ObjectValue(
          List(
            "id" -> implicitly[ArgEncoder[CiRunnerID]].encode(value.id),
            "description" -> value.description.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "maximumTimeout" -> value.maximumTimeout.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Int]].encode(value)),
            "accessLevel" -> value
              .accessLevel
              .fold(__NullValue: __Value)(value => implicitly[ArgEncoder[CiRunnerAccessLevel]].encode(value)),
            "active" -> value.active.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)),
            "locked" -> value.locked.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)),
            "runUntagged" -> value.runUntagged.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)),
            "tagList" -> value
              .tagList
              .fold(__NullValue: __Value)(value => __ListValue(value.map(value => implicitly[ArgEncoder[String]].encode(value)))),
            "publicProjectsMinutesCostFactor" -> value
              .publicProjectsMinutesCostFactor
              .fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Double]].encode(value)),
            "privateProjectsMinutesCostFactor" -> value
              .privateProjectsMinutesCostFactor
              .fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Double]].encode(value)),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class RunnersRegistrationTokenResetInput(`type`: CiRunnerType, id: Option[String] = None, clientMutationId: Option[String] = None)

  object RunnersRegistrationTokenResetInput {

    implicit val encoder: ArgEncoder[RunnersRegistrationTokenResetInput] = new ArgEncoder[RunnersRegistrationTokenResetInput] {

      override def encode(value: RunnersRegistrationTokenResetInput): __Value =
        __ObjectValue(
          List(
            "type" -> implicitly[ArgEncoder[CiRunnerType]].encode(value.`type`),
            "id" -> value.id.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class SastCiConfigurationAnalyzersEntityInput(
    name: String,
    enabled: Boolean,
    variables: Option[List[SastCiConfigurationEntityInput]] = None
  )

  object SastCiConfigurationAnalyzersEntityInput {

    implicit val encoder: ArgEncoder[SastCiConfigurationAnalyzersEntityInput] = new ArgEncoder[SastCiConfigurationAnalyzersEntityInput] {

      override def encode(value: SastCiConfigurationAnalyzersEntityInput): __Value =
        __ObjectValue(
          List(
            "name" -> implicitly[ArgEncoder[String]].encode(value.name),
            "enabled" -> implicitly[ArgEncoder[Boolean]].encode(value.enabled),
            "variables" -> value
              .variables
              .fold(__NullValue: __Value)(value =>
                __ListValue(value.map(value => implicitly[ArgEncoder[SastCiConfigurationEntityInput]].encode(value)))
              )
          )
        )

    }

  }

  case class SastCiConfigurationEntityInput(field: String, defaultValue: String, value: String)

  object SastCiConfigurationEntityInput {

    implicit val encoder: ArgEncoder[SastCiConfigurationEntityInput] = new ArgEncoder[SastCiConfigurationEntityInput] {

      override def encode(value: SastCiConfigurationEntityInput): __Value =
        __ObjectValue(
          List(
            "field" -> implicitly[ArgEncoder[String]].encode(value.field),
            "defaultValue" -> implicitly[ArgEncoder[String]].encode(value.defaultValue),
            "value" -> implicitly[ArgEncoder[String]].encode(value.value)
          )
        )

    }

  }

  case class SastCiConfigurationInput(
    global: Option[List[SastCiConfigurationEntityInput]] = None,
    pipeline: Option[List[SastCiConfigurationEntityInput]] = None,
    analyzers: Option[List[SastCiConfigurationAnalyzersEntityInput]] = None
  )

  object SastCiConfigurationInput {

    implicit val encoder: ArgEncoder[SastCiConfigurationInput] = new ArgEncoder[SastCiConfigurationInput] {

      override def encode(value: SastCiConfigurationInput): __Value =
        __ObjectValue(
          List(
            "global" -> value
              .global
              .fold(__NullValue: __Value)(value =>
                __ListValue(value.map(value => implicitly[ArgEncoder[SastCiConfigurationEntityInput]].encode(value)))
              ),
            "pipeline" -> value
              .pipeline
              .fold(__NullValue: __Value)(value =>
                __ListValue(value.map(value => implicitly[ArgEncoder[SastCiConfigurationEntityInput]].encode(value)))
              ),
            "analyzers" -> value
              .analyzers
              .fold(__NullValue: __Value)(value =>
                __ListValue(value.map(value => implicitly[ArgEncoder[SastCiConfigurationAnalyzersEntityInput]].encode(value)))
              )
          )
        )

    }

  }

  case class ScanExecutionPolicyCommitInput(
    projectPath: String,
    policyYaml: String,
    operationMode: MutationOperationMode,
    clientMutationId: Option[String] = None
  )

  object ScanExecutionPolicyCommitInput {

    implicit val encoder: ArgEncoder[ScanExecutionPolicyCommitInput] = new ArgEncoder[ScanExecutionPolicyCommitInput] {

      override def encode(value: ScanExecutionPolicyCommitInput): __Value =
        __ObjectValue(
          List(
            "projectPath" -> implicitly[ArgEncoder[String]].encode(value.projectPath),
            "policyYaml" -> implicitly[ArgEncoder[String]].encode(value.policyYaml),
            "operationMode" -> implicitly[ArgEncoder[MutationOperationMode]].encode(value.operationMode),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class SecurityPolicyProjectAssignInput(
    projectPath: String,
    securityPolicyProjectId: ProjectID,
    clientMutationId: Option[String] = None
  )

  object SecurityPolicyProjectAssignInput {

    implicit val encoder: ArgEncoder[SecurityPolicyProjectAssignInput] = new ArgEncoder[SecurityPolicyProjectAssignInput] {

      override def encode(value: SecurityPolicyProjectAssignInput): __Value =
        __ObjectValue(
          List(
            "projectPath" -> implicitly[ArgEncoder[String]].encode(value.projectPath),
            "securityPolicyProjectId" -> implicitly[ArgEncoder[ProjectID]].encode(value.securityPolicyProjectId),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class SecurityPolicyProjectCreateInput(projectPath: String, clientMutationId: Option[String] = None)

  object SecurityPolicyProjectCreateInput {

    implicit val encoder: ArgEncoder[SecurityPolicyProjectCreateInput] = new ArgEncoder[SecurityPolicyProjectCreateInput] {

      override def encode(value: SecurityPolicyProjectCreateInput): __Value =
        __ObjectValue(
          List(
            "projectPath" -> implicitly[ArgEncoder[String]].encode(value.projectPath),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class SnippetBlobActionInputType(
    action: SnippetBlobActionEnum,
    previousPath: Option[String] = None,
    filePath: String,
    content: Option[String] = None
  )

  object SnippetBlobActionInputType {

    implicit val encoder: ArgEncoder[SnippetBlobActionInputType] = new ArgEncoder[SnippetBlobActionInputType] {

      override def encode(value: SnippetBlobActionInputType): __Value =
        __ObjectValue(
          List(
            "action" -> implicitly[ArgEncoder[SnippetBlobActionEnum]].encode(value.action),
            "previousPath" -> value.previousPath.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "filePath" -> implicitly[ArgEncoder[String]].encode(value.filePath),
            "content" -> value.content.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class TerraformStateDeleteInput(id: TerraformStateID, clientMutationId: Option[String] = None)

  object TerraformStateDeleteInput {

    implicit val encoder: ArgEncoder[TerraformStateDeleteInput] = new ArgEncoder[TerraformStateDeleteInput] {

      override def encode(value: TerraformStateDeleteInput): __Value =
        __ObjectValue(
          List(
            "id" -> implicitly[ArgEncoder[TerraformStateID]].encode(value.id),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class TerraformStateLockInput(id: TerraformStateID, clientMutationId: Option[String] = None)

  object TerraformStateLockInput {

    implicit val encoder: ArgEncoder[TerraformStateLockInput] = new ArgEncoder[TerraformStateLockInput] {

      override def encode(value: TerraformStateLockInput): __Value =
        __ObjectValue(
          List(
            "id" -> implicitly[ArgEncoder[TerraformStateID]].encode(value.id),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class TerraformStateUnlockInput(id: TerraformStateID, clientMutationId: Option[String] = None)

  object TerraformStateUnlockInput {

    implicit val encoder: ArgEncoder[TerraformStateUnlockInput] = new ArgEncoder[TerraformStateUnlockInput] {

      override def encode(value: TerraformStateUnlockInput): __Value =
        __ObjectValue(
          List(
            "id" -> implicitly[ArgEncoder[TerraformStateID]].encode(value.id),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class Timeframe(start: Date, end: Date)

  object Timeframe {

    implicit val encoder: ArgEncoder[Timeframe] = new ArgEncoder[Timeframe] {

      override def encode(value: Timeframe): __Value =
        __ObjectValue(
          List("start" -> implicitly[ArgEncoder[Date]].encode(value.start), "end" -> implicitly[ArgEncoder[Date]].encode(value.end))
        )

    }

  }

  case class TodoCreateInput(targetId: TodoableID, clientMutationId: Option[String] = None)

  object TodoCreateInput {

    implicit val encoder: ArgEncoder[TodoCreateInput] = new ArgEncoder[TodoCreateInput] {

      override def encode(value: TodoCreateInput): __Value =
        __ObjectValue(
          List(
            "targetId" -> implicitly[ArgEncoder[TodoableID]].encode(value.targetId),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class TodoMarkDoneInput(id: TodoID, clientMutationId: Option[String] = None)

  object TodoMarkDoneInput {

    implicit val encoder: ArgEncoder[TodoMarkDoneInput] = new ArgEncoder[TodoMarkDoneInput] {

      override def encode(value: TodoMarkDoneInput): __Value =
        __ObjectValue(
          List(
            "id" -> implicitly[ArgEncoder[TodoID]].encode(value.id),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class TodoRestoreInput(id: TodoID, clientMutationId: Option[String] = None)

  object TodoRestoreInput {

    implicit val encoder: ArgEncoder[TodoRestoreInput] = new ArgEncoder[TodoRestoreInput] {

      override def encode(value: TodoRestoreInput): __Value =
        __ObjectValue(
          List(
            "id" -> implicitly[ArgEncoder[TodoID]].encode(value.id),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class TodoRestoreManyInput(ids: List[TodoID] = Nil, clientMutationId: Option[String] = None)

  object TodoRestoreManyInput {

    implicit val encoder: ArgEncoder[TodoRestoreManyInput] = new ArgEncoder[TodoRestoreManyInput] {

      override def encode(value: TodoRestoreManyInput): __Value =
        __ObjectValue(
          List(
            "ids" -> __ListValue(value.ids.map(value => implicitly[ArgEncoder[TodoID]].encode(value))),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class TodosMarkAllDoneInput(clientMutationId: Option[String] = None)

  object TodosMarkAllDoneInput {

    implicit val encoder: ArgEncoder[TodosMarkAllDoneInput] = new ArgEncoder[TodosMarkAllDoneInput] {

      override def encode(value: TodosMarkAllDoneInput): __Value =
        __ObjectValue(
          List(
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class UpdateAlertStatusInput(
    projectPath: String,
    iid: String,
    status: AlertManagementStatus,
    clientMutationId: Option[String] = None
  )

  object UpdateAlertStatusInput {

    implicit val encoder: ArgEncoder[UpdateAlertStatusInput] = new ArgEncoder[UpdateAlertStatusInput] {

      override def encode(value: UpdateAlertStatusInput): __Value =
        __ObjectValue(
          List(
            "projectPath" -> implicitly[ArgEncoder[String]].encode(value.projectPath),
            "iid" -> implicitly[ArgEncoder[String]].encode(value.iid),
            "status" -> implicitly[ArgEncoder[AlertManagementStatus]].encode(value.status),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class UpdateBoardEpicUserPreferencesInput(
    boardId: BoardID,
    epicId: EpicID,
    collapsed: Boolean,
    clientMutationId: Option[String] = None
  )

  object UpdateBoardEpicUserPreferencesInput {

    implicit val encoder: ArgEncoder[UpdateBoardEpicUserPreferencesInput] = new ArgEncoder[UpdateBoardEpicUserPreferencesInput] {

      override def encode(value: UpdateBoardEpicUserPreferencesInput): __Value =
        __ObjectValue(
          List(
            "boardId" -> implicitly[ArgEncoder[BoardID]].encode(value.boardId),
            "epicId" -> implicitly[ArgEncoder[EpicID]].encode(value.epicId),
            "collapsed" -> implicitly[ArgEncoder[Boolean]].encode(value.collapsed),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class UpdateBoardInput(
    name: Option[String] = None,
    hideBacklogList: Option[Boolean] = None,
    hideClosedList: Option[Boolean] = None,
    id: BoardID,
    assigneeId: Option[UserID] = None,
    milestoneId: Option[MilestoneID] = None,
    iterationId: Option[IterationID] = None,
    weight: Option[Int] = None,
    labels: Option[List[String]] = None,
    labelIds: Option[List[LabelID]] = None,
    clientMutationId: Option[String] = None
  )

  object UpdateBoardInput {

    implicit val encoder: ArgEncoder[UpdateBoardInput] = new ArgEncoder[UpdateBoardInput] {

      override def encode(value: UpdateBoardInput): __Value =
        __ObjectValue(
          List(
            "name" -> value.name.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "hideBacklogList" -> value.hideBacklogList.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)),
            "hideClosedList" -> value.hideClosedList.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)),
            "id" -> implicitly[ArgEncoder[BoardID]].encode(value.id),
            "assigneeId" -> value.assigneeId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[UserID]].encode(value)),
            "milestoneId" -> value.milestoneId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[MilestoneID]].encode(value)),
            "iterationId" -> value.iterationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[IterationID]].encode(value)),
            "weight" -> value.weight.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Int]].encode(value)),
            "labels" -> value
              .labels
              .fold(__NullValue: __Value)(value => __ListValue(value.map(value => implicitly[ArgEncoder[String]].encode(value)))),
            "labelIds" -> value
              .labelIds
              .fold(__NullValue: __Value)(value => __ListValue(value.map(value => implicitly[ArgEncoder[LabelID]].encode(value)))),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class UpdateBoardListInput(
    position: Option[Int] = None,
    collapsed: Option[Boolean] = None,
    listId: ListID,
    clientMutationId: Option[String] = None
  )

  object UpdateBoardListInput {

    implicit val encoder: ArgEncoder[UpdateBoardListInput] = new ArgEncoder[UpdateBoardListInput] {

      override def encode(value: UpdateBoardListInput): __Value =
        __ObjectValue(
          List(
            "position" -> value.position.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Int]].encode(value)),
            "collapsed" -> value.collapsed.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)),
            "listId" -> implicitly[ArgEncoder[ListID]].encode(value.listId),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class UpdateComplianceFrameworkInput(
    id: ComplianceManagementFrameworkID,
    params: ComplianceFrameworkInput,
    clientMutationId: Option[String] = None
  )

  object UpdateComplianceFrameworkInput {

    implicit val encoder: ArgEncoder[UpdateComplianceFrameworkInput] = new ArgEncoder[UpdateComplianceFrameworkInput] {

      override def encode(value: UpdateComplianceFrameworkInput): __Value =
        __ObjectValue(
          List(
            "id" -> implicitly[ArgEncoder[ComplianceManagementFrameworkID]].encode(value.id),
            "params" -> implicitly[ArgEncoder[ComplianceFrameworkInput]].encode(value.params),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class UpdateContainerExpirationPolicyInput(
    projectPath: String,
    enabled: Option[Boolean] = None,
    cadence: Option[ContainerExpirationPolicyCadenceEnum] = None,
    olderThan: Option[ContainerExpirationPolicyOlderThanEnum] = None,
    keepN: Option[ContainerExpirationPolicyKeepEnum] = None,
    nameRegex: Option[UntrustedRegexp] = None,
    nameRegexKeep: Option[UntrustedRegexp] = None,
    clientMutationId: Option[String] = None
  )

  object UpdateContainerExpirationPolicyInput {

    implicit val encoder: ArgEncoder[UpdateContainerExpirationPolicyInput] = new ArgEncoder[UpdateContainerExpirationPolicyInput] {

      override def encode(value: UpdateContainerExpirationPolicyInput): __Value =
        __ObjectValue(
          List(
            "projectPath" -> implicitly[ArgEncoder[String]].encode(value.projectPath),
            "enabled" -> value.enabled.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)),
            "cadence" -> value
              .cadence
              .fold(__NullValue: __Value)(value => implicitly[ArgEncoder[ContainerExpirationPolicyCadenceEnum]].encode(value)),
            "olderThan" -> value
              .olderThan
              .fold(__NullValue: __Value)(value => implicitly[ArgEncoder[ContainerExpirationPolicyOlderThanEnum]].encode(value)),
            "keepN" -> value
              .keepN
              .fold(__NullValue: __Value)(value => implicitly[ArgEncoder[ContainerExpirationPolicyKeepEnum]].encode(value)),
            "nameRegex" -> value.nameRegex.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[UntrustedRegexp]].encode(value)),
            "nameRegexKeep" -> value
              .nameRegexKeep
              .fold(__NullValue: __Value)(value => implicitly[ArgEncoder[UntrustedRegexp]].encode(value)),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class UpdateDiffImagePositionInput(
    x: Option[Int] = None,
    y: Option[Int] = None,
    width: Option[Int] = None,
    height: Option[Int] = None
  )

  object UpdateDiffImagePositionInput {

    implicit val encoder: ArgEncoder[UpdateDiffImagePositionInput] = new ArgEncoder[UpdateDiffImagePositionInput] {

      override def encode(value: UpdateDiffImagePositionInput): __Value =
        __ObjectValue(
          List(
            "x" -> value.x.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Int]].encode(value)),
            "y" -> value.y.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Int]].encode(value)),
            "width" -> value.width.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Int]].encode(value)),
            "height" -> value.height.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Int]].encode(value))
          )
        )

    }

  }

  case class UpdateEpicBoardListInput(
    position: Option[Int] = None,
    collapsed: Option[Boolean] = None,
    listId: BoardsEpicListID,
    clientMutationId: Option[String] = None
  )

  object UpdateEpicBoardListInput {

    implicit val encoder: ArgEncoder[UpdateEpicBoardListInput] = new ArgEncoder[UpdateEpicBoardListInput] {

      override def encode(value: UpdateEpicBoardListInput): __Value =
        __ObjectValue(
          List(
            "position" -> value.position.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Int]].encode(value)),
            "collapsed" -> value.collapsed.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)),
            "listId" -> implicitly[ArgEncoder[BoardsEpicListID]].encode(value.listId),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class UpdateEpicInput(
    iid: String,
    groupPath: String,
    title: Option[String] = None,
    description: Option[String] = None,
    confidential: Option[Boolean] = None,
    startDateFixed: Option[String] = None,
    dueDateFixed: Option[String] = None,
    startDateIsFixed: Option[Boolean] = None,
    dueDateIsFixed: Option[Boolean] = None,
    addLabelIds: Option[List[String]] = None,
    removeLabelIds: Option[List[String]] = None,
    stateEvent: Option[EpicStateEvent] = None,
    clientMutationId: Option[String] = None
  )

  object UpdateEpicInput {

    implicit val encoder: ArgEncoder[UpdateEpicInput] = new ArgEncoder[UpdateEpicInput] {

      override def encode(value: UpdateEpicInput): __Value =
        __ObjectValue(
          List(
            "iid" -> implicitly[ArgEncoder[String]].encode(value.iid),
            "groupPath" -> implicitly[ArgEncoder[String]].encode(value.groupPath),
            "title" -> value.title.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "description" -> value.description.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "confidential" -> value.confidential.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)),
            "startDateFixed" -> value.startDateFixed.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "dueDateFixed" -> value.dueDateFixed.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "startDateIsFixed" -> value.startDateIsFixed.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)),
            "dueDateIsFixed" -> value.dueDateIsFixed.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)),
            "addLabelIds" -> value
              .addLabelIds
              .fold(__NullValue: __Value)(value => __ListValue(value.map(value => implicitly[ArgEncoder[String]].encode(value)))),
            "removeLabelIds" -> value
              .removeLabelIds
              .fold(__NullValue: __Value)(value => __ListValue(value.map(value => implicitly[ArgEncoder[String]].encode(value)))),
            "stateEvent" -> value.stateEvent.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[EpicStateEvent]].encode(value)),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class UpdateImageDiffNoteInput(
    id: NoteID,
    body: Option[String] = None,
    position: Option[UpdateDiffImagePositionInput] = None,
    clientMutationId: Option[String] = None
  )

  object UpdateImageDiffNoteInput {

    implicit val encoder: ArgEncoder[UpdateImageDiffNoteInput] = new ArgEncoder[UpdateImageDiffNoteInput] {

      override def encode(value: UpdateImageDiffNoteInput): __Value =
        __ObjectValue(
          List(
            "id" -> implicitly[ArgEncoder[NoteID]].encode(value.id),
            "body" -> value.body.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "position" -> value
              .position
              .fold(__NullValue: __Value)(value => implicitly[ArgEncoder[UpdateDiffImagePositionInput]].encode(value)),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class UpdateIssueInput(
    projectPath: String,
    iid: String,
    description: Option[String] = None,
    dueDate: Option[ISO8601Date] = None,
    confidential: Option[Boolean] = None,
    locked: Option[Boolean] = None,
    `type`: Option[IssueType] = None,
    title: Option[String] = None,
    milestoneId: Option[String] = None,
    addLabelIds: Option[List[String]] = None,
    removeLabelIds: Option[List[String]] = None,
    stateEvent: Option[IssueStateEvent] = None,
    healthStatus: Option[HealthStatus] = None,
    weight: Option[Int] = None,
    epicId: Option[EpicID] = None,
    clientMutationId: Option[String] = None
  )

  object UpdateIssueInput {

    implicit val encoder: ArgEncoder[UpdateIssueInput] = new ArgEncoder[UpdateIssueInput] {

      override def encode(value: UpdateIssueInput): __Value =
        __ObjectValue(
          List(
            "projectPath" -> implicitly[ArgEncoder[String]].encode(value.projectPath),
            "iid" -> implicitly[ArgEncoder[String]].encode(value.iid),
            "description" -> value.description.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "dueDate" -> value.dueDate.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[ISO8601Date]].encode(value)),
            "confidential" -> value.confidential.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)),
            "locked" -> value.locked.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)),
            "type" -> value.`type`.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[IssueType]].encode(value)),
            "title" -> value.title.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "milestoneId" -> value.milestoneId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "addLabelIds" -> value
              .addLabelIds
              .fold(__NullValue: __Value)(value => __ListValue(value.map(value => implicitly[ArgEncoder[String]].encode(value)))),
            "removeLabelIds" -> value
              .removeLabelIds
              .fold(__NullValue: __Value)(value => __ListValue(value.map(value => implicitly[ArgEncoder[String]].encode(value)))),
            "stateEvent" -> value.stateEvent.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[IssueStateEvent]].encode(value)),
            "healthStatus" -> value.healthStatus.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[HealthStatus]].encode(value)),
            "weight" -> value.weight.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Int]].encode(value)),
            "epicId" -> value.epicId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[EpicID]].encode(value)),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class UpdateIterationInput(
    groupPath: String,
    id: String,
    title: Option[String] = None,
    description: Option[String] = None,
    startDate: Option[String] = None,
    dueDate: Option[String] = None,
    clientMutationId: Option[String] = None
  )

  object UpdateIterationInput {

    implicit val encoder: ArgEncoder[UpdateIterationInput] = new ArgEncoder[UpdateIterationInput] {

      override def encode(value: UpdateIterationInput): __Value =
        __ObjectValue(
          List(
            "groupPath" -> implicitly[ArgEncoder[String]].encode(value.groupPath),
            "id" -> implicitly[ArgEncoder[String]].encode(value.id),
            "title" -> value.title.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "description" -> value.description.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "startDate" -> value.startDate.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "dueDate" -> value.dueDate.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class UpdateNamespacePackageSettingsInput(
    namespacePath: String,
    mavenDuplicatesAllowed: Option[Boolean] = None,
    mavenDuplicateExceptionRegex: Option[UntrustedRegexp] = None,
    genericDuplicatesAllowed: Option[Boolean] = None,
    genericDuplicateExceptionRegex: Option[UntrustedRegexp] = None,
    clientMutationId: Option[String] = None
  )

  object UpdateNamespacePackageSettingsInput {

    implicit val encoder: ArgEncoder[UpdateNamespacePackageSettingsInput] = new ArgEncoder[UpdateNamespacePackageSettingsInput] {

      override def encode(value: UpdateNamespacePackageSettingsInput): __Value =
        __ObjectValue(
          List(
            "namespacePath" -> implicitly[ArgEncoder[String]].encode(value.namespacePath),
            "mavenDuplicatesAllowed" -> value
              .mavenDuplicatesAllowed
              .fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)),
            "mavenDuplicateExceptionRegex" -> value
              .mavenDuplicateExceptionRegex
              .fold(__NullValue: __Value)(value => implicitly[ArgEncoder[UntrustedRegexp]].encode(value)),
            "genericDuplicatesAllowed" -> value
              .genericDuplicatesAllowed
              .fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)),
            "genericDuplicateExceptionRegex" -> value
              .genericDuplicateExceptionRegex
              .fold(__NullValue: __Value)(value => implicitly[ArgEncoder[UntrustedRegexp]].encode(value)),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class UpdateNoteInput(
    id: NoteID,
    body: Option[String] = None,
    confidential: Option[Boolean] = None,
    clientMutationId: Option[String] = None
  )

  object UpdateNoteInput {

    implicit val encoder: ArgEncoder[UpdateNoteInput] = new ArgEncoder[UpdateNoteInput] {

      override def encode(value: UpdateNoteInput): __Value =
        __ObjectValue(
          List(
            "id" -> implicitly[ArgEncoder[NoteID]].encode(value.id),
            "body" -> value.body.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "confidential" -> value.confidential.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class UpdateRequirementInput(
    title: Option[String] = None,
    description: Option[String] = None,
    projectPath: String,
    state: Option[RequirementState] = None,
    iid: String,
    lastTestReportState: Option[TestReportState] = None,
    clientMutationId: Option[String] = None
  )

  object UpdateRequirementInput {

    implicit val encoder: ArgEncoder[UpdateRequirementInput] = new ArgEncoder[UpdateRequirementInput] {

      override def encode(value: UpdateRequirementInput): __Value =
        __ObjectValue(
          List(
            "title" -> value.title.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "description" -> value.description.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "projectPath" -> implicitly[ArgEncoder[String]].encode(value.projectPath),
            "state" -> value.state.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[RequirementState]].encode(value)),
            "iid" -> implicitly[ArgEncoder[String]].encode(value.iid),
            "lastTestReportState" -> value
              .lastTestReportState
              .fold(__NullValue: __Value)(value => implicitly[ArgEncoder[TestReportState]].encode(value)),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class UpdateSnippetInput(
    id: SnippetID,
    title: Option[String] = None,
    description: Option[String] = None,
    visibilityLevel: Option[VisibilityLevelsEnum] = None,
    blobActions: Option[List[SnippetBlobActionInputType]] = None,
    clientMutationId: Option[String] = None
  )

  object UpdateSnippetInput {

    implicit val encoder: ArgEncoder[UpdateSnippetInput] = new ArgEncoder[UpdateSnippetInput] {

      override def encode(value: UpdateSnippetInput): __Value =
        __ObjectValue(
          List(
            "id" -> implicitly[ArgEncoder[SnippetID]].encode(value.id),
            "title" -> value.title.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "description" -> value.description.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "visibilityLevel" -> value
              .visibilityLevel
              .fold(__NullValue: __Value)(value => implicitly[ArgEncoder[VisibilityLevelsEnum]].encode(value)),
            "blobActions" -> value
              .blobActions
              .fold(__NullValue: __Value)(value =>
                __ListValue(value.map(value => implicitly[ArgEncoder[SnippetBlobActionInputType]].encode(value)))
              ),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class UserCalloutCreateInput(featureName: String, clientMutationId: Option[String] = None)

  object UserCalloutCreateInput {

    implicit val encoder: ArgEncoder[UserCalloutCreateInput] = new ArgEncoder[UserCalloutCreateInput] {

      override def encode(value: UserCalloutCreateInput): __Value =
        __ObjectValue(
          List(
            "featureName" -> implicitly[ArgEncoder[String]].encode(value.featureName),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class VulnerabilityConfirmInput(id: VulnerabilityID, clientMutationId: Option[String] = None)

  object VulnerabilityConfirmInput {

    implicit val encoder: ArgEncoder[VulnerabilityConfirmInput] = new ArgEncoder[VulnerabilityConfirmInput] {

      override def encode(value: VulnerabilityConfirmInput): __Value =
        __ObjectValue(
          List(
            "id" -> implicitly[ArgEncoder[VulnerabilityID]].encode(value.id),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class VulnerabilityDismissInput(
    id: VulnerabilityID,
    comment: Option[String] = None,
    dismissalReason: Option[VulnerabilityDismissalReason] = None,
    clientMutationId: Option[String] = None
  )

  object VulnerabilityDismissInput {

    implicit val encoder: ArgEncoder[VulnerabilityDismissInput] = new ArgEncoder[VulnerabilityDismissInput] {

      override def encode(value: VulnerabilityDismissInput): __Value =
        __ObjectValue(
          List(
            "id" -> implicitly[ArgEncoder[VulnerabilityID]].encode(value.id),
            "comment" -> value.comment.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "dismissalReason" -> value
              .dismissalReason
              .fold(__NullValue: __Value)(value => implicitly[ArgEncoder[VulnerabilityDismissalReason]].encode(value)),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class VulnerabilityExternalIssueLinkCreateInput(
    id: VulnerabilityID,
    linkType: VulnerabilityExternalIssueLinkType,
    externalTracker: VulnerabilityExternalIssueLinkExternalTracker,
    clientMutationId: Option[String] = None
  )

  object VulnerabilityExternalIssueLinkCreateInput {

    implicit val encoder: ArgEncoder[VulnerabilityExternalIssueLinkCreateInput] =
      new ArgEncoder[VulnerabilityExternalIssueLinkCreateInput] {

        override def encode(value: VulnerabilityExternalIssueLinkCreateInput): __Value =
          __ObjectValue(
            List(
              "id" -> implicitly[ArgEncoder[VulnerabilityID]].encode(value.id),
              "linkType" -> implicitly[ArgEncoder[VulnerabilityExternalIssueLinkType]].encode(value.linkType),
              "externalTracker" -> implicitly[ArgEncoder[VulnerabilityExternalIssueLinkExternalTracker]].encode(value.externalTracker),
              "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
            )
          )

      }

  }

  case class VulnerabilityExternalIssueLinkDestroyInput(id: VulnerabilitiesExternalIssueLinkID, clientMutationId: Option[String] = None)

  object VulnerabilityExternalIssueLinkDestroyInput {

    implicit val encoder: ArgEncoder[VulnerabilityExternalIssueLinkDestroyInput] =
      new ArgEncoder[VulnerabilityExternalIssueLinkDestroyInput] {

        override def encode(value: VulnerabilityExternalIssueLinkDestroyInput): __Value =
          __ObjectValue(
            List(
              "id" -> implicitly[ArgEncoder[VulnerabilitiesExternalIssueLinkID]].encode(value.id),
              "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
            )
          )

      }

  }

  case class VulnerabilityResolveInput(id: VulnerabilityID, clientMutationId: Option[String] = None)

  object VulnerabilityResolveInput {

    implicit val encoder: ArgEncoder[VulnerabilityResolveInput] = new ArgEncoder[VulnerabilityResolveInput] {

      override def encode(value: VulnerabilityResolveInput): __Value =
        __ObjectValue(
          List(
            "id" -> implicitly[ArgEncoder[VulnerabilityID]].encode(value.id),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class VulnerabilityRevertToDetectedInput(id: VulnerabilityID, clientMutationId: Option[String] = None)

  object VulnerabilityRevertToDetectedInput {

    implicit val encoder: ArgEncoder[VulnerabilityRevertToDetectedInput] = new ArgEncoder[VulnerabilityRevertToDetectedInput] {

      override def encode(value: VulnerabilityRevertToDetectedInput): __Value =
        __ObjectValue(
          List(
            "id" -> implicitly[ArgEncoder[VulnerabilityID]].encode(value.id),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  case class iterationCreateInput(
    projectPath: Option[String] = None,
    groupPath: Option[String] = None,
    iterationsCadenceId: Option[IterationsCadenceID] = None,
    title: Option[String] = None,
    description: Option[String] = None,
    startDate: Option[String] = None,
    dueDate: Option[String] = None,
    clientMutationId: Option[String] = None
  )

  object iterationCreateInput {

    implicit val encoder: ArgEncoder[iterationCreateInput] = new ArgEncoder[iterationCreateInput] {

      override def encode(value: iterationCreateInput): __Value =
        __ObjectValue(
          List(
            "projectPath" -> value.projectPath.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "groupPath" -> value.groupPath.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "iterationsCadenceId" -> value
              .iterationsCadenceId
              .fold(__NullValue: __Value)(value => implicitly[ArgEncoder[IterationsCadenceID]].encode(value)),
            "title" -> value.title.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "description" -> value.description.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "startDate" -> value.startDate.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "dueDate" -> value.dueDate.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)),
            "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))
          )
        )

    }

  }

  type Query = _root_.caliban.client.Operations.RootQuery

  object Query {

    /** CI related settings that apply to the entire instance.
      */
    def ciApplicationSettings[A](
      innerSelection: SelectionBuilder[CiApplicationSettings, A]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootQuery, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("ciApplicationSettings", OptionOf(Obj(innerSelection)))

    /** Linted and processed contents of a CI config. Should not be requested more than once per request.
      */
    def ciConfig[A](
      projectPath: String,
      sha: Option[String] = None,
      content: String,
      dryRun: Option[Boolean] = None
    )(
      innerSelection: SelectionBuilder[CiConfig, A]
    )(
      implicit encoder0: ArgEncoder[String],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[String],
      encoder3: ArgEncoder[Option[Boolean]]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootQuery, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "ciConfig",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("projectPath", projectPath, "ID!")(encoder0),
          Argument("sha", sha, "String")(encoder1),
          Argument("content", content, "String!")(encoder2),
          Argument("dryRun", dryRun, "Boolean")(encoder3)
        )
      )

    /** Find a container repository.
      */
    def containerRepository[A](
      id: ContainerRepositoryID
    )(
      innerSelection: SelectionBuilder[ContainerRepositoryDetails, A]
    )(
      implicit encoder0: ArgEncoder[ContainerRepositoryID]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootQuery, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field("containerRepository", OptionOf(Obj(innerSelection)), arguments = List(Argument("id", id, "ContainerRepositoryID!")(encoder0)))

    /** Fields related to the current license.
      */
    def currentLicense[A](
      innerSelection: SelectionBuilder[CurrentLicense, A]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootQuery, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("currentLicense", OptionOf(Obj(innerSelection)))

    /** Get information about current user.
      */
    def currentUser[A](
      innerSelection: SelectionBuilder[UserCore, A]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootQuery, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("currentUser", OptionOf(Obj(innerSelection)))

    /** Fields related to design management.
      */
    def designManagement[A](
      innerSelection: SelectionBuilder[DesignManagement, A]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootQuery, A] =
      _root_.caliban.client.SelectionBuilder.Field("designManagement", Obj(innerSelection))

    /** Get configured DevOps adoption namespaces. **BETA** This endpoint is subject to change without notice.
      */
    def devopsAdoptionEnabledNamespaces[A](
      displayNamespaceId: Option[NamespaceID] = None,
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[DevopsAdoptionEnabledNamespaceConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[NamespaceID]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[String]],
      encoder3: ArgEncoder[Option[Int]],
      encoder4: ArgEncoder[Option[Int]]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootQuery, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "devopsAdoptionEnabledNamespaces",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("displayNamespaceId", displayNamespaceId, "NamespaceID")(encoder0),
          Argument("after", after, "String")(encoder1),
          Argument("before", before, "String")(encoder2),
          Argument("first", first, "Int")(encoder3),
          Argument("last", last, "Int")(encoder4)
        )
      )

    /** Testing endpoint to validate the API with
      */
    def echo(text: String)(implicit encoder0: ArgEncoder[String]): SelectionBuilder[_root_.caliban.client.Operations.RootQuery, String] =
      _root_.caliban.client.SelectionBuilder.Field("echo", Scalar(), arguments = List(Argument("text", text, "String!")(encoder0)))

    /** Find a Geo node.
      */
    def geoNode[A](
      name: Option[String] = None
    )(
      innerSelection: SelectionBuilder[GeoNode, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootQuery, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field("geoNode", OptionOf(Obj(innerSelection)), arguments = List(Argument("name", name, "String")(encoder0)))

    /** Find a group.
      */
    def group[A](
      fullPath: String
    )(
      innerSelection: SelectionBuilder[Group, A]
    )(
      implicit encoder0: ArgEncoder[String]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootQuery, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field("group", OptionOf(Obj(innerSelection)), arguments = List(Argument("fullPath", fullPath, "ID!")(encoder0)))

    /** Fields related to Instance Security Dashboard.
      */
    def instanceSecurityDashboard[A](
      innerSelection: SelectionBuilder[InstanceSecurityDashboard, A]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootQuery, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("instanceSecurityDashboard", OptionOf(Obj(innerSelection)))

    /** Get statistics on the instance. Deprecated in 13.10: This was renamed.
      */
    @deprecated("This was renamed. Please use `Query.usageTrendsMeasurements`. Deprecated in 13.10.", "")
    def instanceStatisticsMeasurements[A](
      identifier: MeasurementIdentifier,
      recordedAfter: Option[Time] = None,
      recordedBefore: Option[Time] = None,
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[UsageTrendsMeasurementConnection, A]
    )(
      implicit encoder0: ArgEncoder[MeasurementIdentifier],
      encoder1: ArgEncoder[Option[Time]],
      encoder2: ArgEncoder[Option[Time]],
      encoder3: ArgEncoder[Option[String]],
      encoder4: ArgEncoder[Option[String]],
      encoder5: ArgEncoder[Option[Int]],
      encoder6: ArgEncoder[Option[Int]]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootQuery, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "instanceStatisticsMeasurements",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("identifier", identifier, "MeasurementIdentifier!")(encoder0),
          Argument("recordedAfter", recordedAfter, "Time")(encoder1),
          Argument("recordedBefore", recordedBefore, "Time")(encoder2),
          Argument("after", after, "String")(encoder3),
          Argument("before", before, "String")(encoder4),
          Argument("first", first, "Int")(encoder5),
          Argument("last", last, "Int")(encoder6)
        )
      )

    /** Find an issue.
      */
    def issue[A](
      id: IssueID
    )(
      innerSelection: SelectionBuilder[Issue, A]
    )(
      implicit encoder0: ArgEncoder[IssueID]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootQuery, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field("issue", OptionOf(Obj(innerSelection)), arguments = List(Argument("id", id, "IssueID!")(encoder0)))

    /** Find an iteration.
      */
    def iteration[A](
      id: IterationID
    )(
      innerSelection: SelectionBuilder[Iteration, A]
    )(
      implicit encoder0: ArgEncoder[IterationID]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootQuery, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field("iteration", OptionOf(Obj(innerSelection)), arguments = List(Argument("id", id, "IterationID!")(encoder0)))

    /** Fields related to entries in the license history.
      */
    def licenseHistoryEntries[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[LicenseHistoryEntryConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootQuery, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "licenseHistoryEntries",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** Find a merge request.
      */
    def mergeRequest[A](
      id: MergeRequestID
    )(
      innerSelection: SelectionBuilder[MergeRequest, A]
    )(
      implicit encoder0: ArgEncoder[MergeRequestID]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootQuery, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field("mergeRequest", OptionOf(Obj(innerSelection)), arguments = List(Argument("id", id, "MergeRequestID!")(encoder0)))

    /** Metadata about GitLab.
      */
    def metadata[A](
      innerSelection: SelectionBuilder[Metadata, A]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootQuery, Option[A]] =
      _root_.caliban.client.SelectionBuilder.Field("metadata", OptionOf(Obj(innerSelection)))

    /** Find a milestone.
      */
    def milestone[A](
      id: MilestoneID
    )(
      innerSelection: SelectionBuilder[Milestone, A]
    )(
      implicit encoder0: ArgEncoder[MilestoneID]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootQuery, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field("milestone", OptionOf(Obj(innerSelection)), arguments = List(Argument("id", id, "MilestoneID!")(encoder0)))

    /** Find a namespace.
      */
    def namespace[A](
      fullPath: String
    )(
      innerSelection: SelectionBuilder[Namespace, A]
    )(
      implicit encoder0: ArgEncoder[String]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootQuery, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field("namespace", OptionOf(Obj(innerSelection)), arguments = List(Argument("fullPath", fullPath, "ID!")(encoder0)))

    /** Find a package.
      */
    def `package`[A](
      id: PackagesPackageID
    )(
      innerSelection: SelectionBuilder[PackageDetailsType, A]
    )(
      implicit encoder0: ArgEncoder[PackagesPackageID]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootQuery, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field("package", OptionOf(Obj(innerSelection)), arguments = List(Argument("id", id, "PackagesPackageID!")(encoder0)))

    /** Find a project.
      */
    def project[A](
      fullPath: String
    )(
      innerSelection: SelectionBuilder[Project, A]
    )(
      implicit encoder0: ArgEncoder[String]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootQuery, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field("project", OptionOf(Obj(innerSelection)), arguments = List(Argument("fullPath", fullPath, "ID!")(encoder0)))

    /** Find projects visible to the current user.
      */
    def projects[A](
      membership: Option[Boolean] = None,
      search: Option[String] = None,
      ids: Option[List[String]] = None,
      searchNamespaces: Option[Boolean] = None,
      sort: Option[String] = None,
      topics: Option[List[String]] = None,
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[ProjectConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[Boolean]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[List[String]]],
      encoder3: ArgEncoder[Option[Boolean]],
      encoder4: ArgEncoder[Option[String]],
      encoder5: ArgEncoder[Option[List[String]]],
      encoder6: ArgEncoder[Option[String]],
      encoder7: ArgEncoder[Option[String]],
      encoder8: ArgEncoder[Option[Int]],
      encoder9: ArgEncoder[Option[Int]]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootQuery, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "projects",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("membership", membership, "Boolean")(encoder0),
          Argument("search", search, "String")(encoder1),
          Argument("ids", ids, "[ID!]")(encoder2),
          Argument("searchNamespaces", searchNamespaces, "Boolean")(encoder3),
          Argument("sort", sort, "String")(encoder4),
          Argument("topics", topics, "[String!]")(encoder5),
          Argument("after", after, "String")(encoder6),
          Argument("before", before, "String")(encoder7),
          Argument("first", first, "Int")(encoder8),
          Argument("last", last, "Int")(encoder9)
        )
      )

    /** Find a runner. Available only when feature flag `runner_graphql_query` is enabled.
      */
    def runner[A](
      id: CiRunnerID
    )(
      innerSelection: SelectionBuilder[CiRunner, A]
    )(
      implicit encoder0: ArgEncoder[CiRunnerID]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootQuery, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field("runner", OptionOf(Obj(innerSelection)), arguments = List(Argument("id", id, "CiRunnerID!")(encoder0)))

    /** Supported runner platforms.
      */
    def runnerPlatforms[A](
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[RunnerPlatformConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[String]],
      encoder1: ArgEncoder[Option[String]],
      encoder2: ArgEncoder[Option[Int]],
      encoder3: ArgEncoder[Option[Int]]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootQuery, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "runnerPlatforms",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after, "String")(encoder0),
          Argument("before", before, "String")(encoder1),
          Argument("first", first, "Int")(encoder2),
          Argument("last", last, "Int")(encoder3)
        )
      )

    /** Runner setup instructions.
      */
    def runnerSetup[A](
      platform: String,
      architecture: String
    )(
      innerSelection: SelectionBuilder[RunnerSetup, A]
    )(
      implicit encoder0: ArgEncoder[String],
      encoder1: ArgEncoder[String]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootQuery, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "runnerSetup",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("platform", platform, "String!")(encoder0), Argument("architecture", architecture, "String!")(encoder1))
      )

    /** Find runners visible to the current user. Available only when feature flag `runner_graphql_query` is enabled.
      */
    def runners[A](
      status: Option[CiRunnerStatus] = None,
      `type`: Option[CiRunnerType] = None,
      tagList: Option[List[String]] = None,
      search: Option[String] = None,
      sort: Option[CiRunnerSort] = None,
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[CiRunnerConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[CiRunnerStatus]],
      encoder1: ArgEncoder[Option[CiRunnerType]],
      encoder2: ArgEncoder[Option[List[String]]],
      encoder3: ArgEncoder[Option[String]],
      encoder4: ArgEncoder[Option[CiRunnerSort]],
      encoder5: ArgEncoder[Option[String]],
      encoder6: ArgEncoder[Option[String]],
      encoder7: ArgEncoder[Option[Int]],
      encoder8: ArgEncoder[Option[Int]]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootQuery, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "runners",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("status", status, "CiRunnerStatus")(encoder0),
          Argument("type", `type`, "CiRunnerType")(encoder1),
          Argument("tagList", tagList, "[String!]")(encoder2),
          Argument("search", search, "String")(encoder3),
          Argument("sort", sort, "CiRunnerSort")(encoder4),
          Argument("after", after, "String")(encoder5),
          Argument("before", before, "String")(encoder6),
          Argument("first", first, "Int")(encoder7),
          Argument("last", last, "Int")(encoder8)
        )
      )

    /** Find Snippets visible to the current user.
      */
    def snippets[A](
      ids: Option[List[SnippetID]] = None,
      visibility: Option[VisibilityScopesEnum] = None,
      authorId: Option[UserID] = None,
      projectId: Option[ProjectID] = None,
      `type`: Option[TypeEnum] = None,
      explore: Option[Boolean] = None,
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[SnippetConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[List[SnippetID]]],
      encoder1: ArgEncoder[Option[VisibilityScopesEnum]],
      encoder2: ArgEncoder[Option[UserID]],
      encoder3: ArgEncoder[Option[ProjectID]],
      encoder4: ArgEncoder[Option[TypeEnum]],
      encoder5: ArgEncoder[Option[Boolean]],
      encoder6: ArgEncoder[Option[String]],
      encoder7: ArgEncoder[Option[String]],
      encoder8: ArgEncoder[Option[Int]],
      encoder9: ArgEncoder[Option[Int]]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootQuery, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "snippets",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("ids", ids, "[SnippetID!]")(encoder0),
          Argument("visibility", visibility, "VisibilityScopesEnum")(encoder1),
          Argument("authorId", authorId, "UserID")(encoder2),
          Argument("projectId", projectId, "ProjectID")(encoder3),
          Argument("type", `type`, "TypeEnum")(encoder4),
          Argument("explore", explore, "Boolean")(encoder5),
          Argument("after", after, "String")(encoder6),
          Argument("before", before, "String")(encoder7),
          Argument("first", first, "Int")(encoder8),
          Argument("last", last, "Int")(encoder9)
        )
      )

    /** Get statistics on the instance.
      */
    def usageTrendsMeasurements[A](
      identifier: MeasurementIdentifier,
      recordedAfter: Option[Time] = None,
      recordedBefore: Option[Time] = None,
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[UsageTrendsMeasurementConnection, A]
    )(
      implicit encoder0: ArgEncoder[MeasurementIdentifier],
      encoder1: ArgEncoder[Option[Time]],
      encoder2: ArgEncoder[Option[Time]],
      encoder3: ArgEncoder[Option[String]],
      encoder4: ArgEncoder[Option[String]],
      encoder5: ArgEncoder[Option[Int]],
      encoder6: ArgEncoder[Option[Int]]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootQuery, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "usageTrendsMeasurements",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("identifier", identifier, "MeasurementIdentifier!")(encoder0),
          Argument("recordedAfter", recordedAfter, "Time")(encoder1),
          Argument("recordedBefore", recordedBefore, "Time")(encoder2),
          Argument("after", after, "String")(encoder3),
          Argument("before", before, "String")(encoder4),
          Argument("first", first, "Int")(encoder5),
          Argument("last", last, "Int")(encoder6)
        )
      )

    /** Find a user.
      */
    def user[A](
      id: Option[UserID] = None,
      username: Option[String] = None
    )(
      innerSelection: SelectionBuilder[UserCore, A]
    )(
      implicit encoder0: ArgEncoder[Option[UserID]],
      encoder1: ArgEncoder[Option[String]]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootQuery, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "user",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("id", id, "UserID")(encoder0), Argument("username", username, "String")(encoder1))
      )

    /** Find users.
      */
    def users[A](
      ids: Option[List[String]] = None,
      usernames: Option[List[String]] = None,
      sort: Option[Sort] = None,
      search: Option[String] = None,
      admins: Option[Boolean] = None,
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[UserCoreConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[List[String]]],
      encoder1: ArgEncoder[Option[List[String]]],
      encoder2: ArgEncoder[Option[Sort]],
      encoder3: ArgEncoder[Option[String]],
      encoder4: ArgEncoder[Option[Boolean]],
      encoder5: ArgEncoder[Option[String]],
      encoder6: ArgEncoder[Option[String]],
      encoder7: ArgEncoder[Option[Int]],
      encoder8: ArgEncoder[Option[Int]]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootQuery, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "users",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("ids", ids, "[ID!]")(encoder0),
          Argument("usernames", usernames, "[String!]")(encoder1),
          Argument("sort", sort, "Sort")(encoder2),
          Argument("search", search, "String")(encoder3),
          Argument("admins", admins, "Boolean")(encoder4),
          Argument("after", after, "String")(encoder5),
          Argument("before", before, "String")(encoder6),
          Argument("first", first, "Int")(encoder7),
          Argument("last", last, "Int")(encoder8)
        )
      )

    /** Vulnerabilities reported on projects on the current user's instance security dashboard.
      */
    def vulnerabilities[A](
      projectId: Option[List[String]] = None,
      reportType: Option[List[VulnerabilityReportType]] = None,
      severity: Option[List[VulnerabilitySeverity]] = None,
      state: Option[List[VulnerabilityState]] = None,
      scanner: Option[List[String]] = None,
      scannerId: Option[List[VulnerabilitiesScannerID]] = None,
      sort: Option[VulnerabilitySort] = None,
      hasResolution: Option[Boolean] = None,
      hasIssues: Option[Boolean] = None,
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[VulnerabilityConnection, A]
    )(
      implicit encoder0: ArgEncoder[Option[List[String]]],
      encoder1: ArgEncoder[Option[List[VulnerabilityReportType]]],
      encoder2: ArgEncoder[Option[List[VulnerabilitySeverity]]],
      encoder3: ArgEncoder[Option[List[VulnerabilityState]]],
      encoder4: ArgEncoder[Option[List[String]]],
      encoder5: ArgEncoder[Option[List[VulnerabilitiesScannerID]]],
      encoder6: ArgEncoder[Option[VulnerabilitySort]],
      encoder7: ArgEncoder[Option[Boolean]],
      encoder8: ArgEncoder[Option[Boolean]],
      encoder9: ArgEncoder[Option[String]],
      encoder10: ArgEncoder[Option[String]],
      encoder11: ArgEncoder[Option[Int]],
      encoder12: ArgEncoder[Option[Int]]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootQuery, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "vulnerabilities",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("projectId", projectId, "[ID!]")(encoder0),
          Argument("reportType", reportType, "[VulnerabilityReportType!]")(encoder1),
          Argument("severity", severity, "[VulnerabilitySeverity!]")(encoder2),
          Argument("state", state, "[VulnerabilityState!]")(encoder3),
          Argument("scanner", scanner, "[String!]")(encoder4),
          Argument("scannerId", scannerId, "[VulnerabilitiesScannerID!]")(encoder5),
          Argument("sort", sort, "VulnerabilitySort")(encoder6),
          Argument("hasResolution", hasResolution, "Boolean")(encoder7),
          Argument("hasIssues", hasIssues, "Boolean")(encoder8),
          Argument("after", after, "String")(encoder9),
          Argument("before", before, "String")(encoder10),
          Argument("first", first, "Int")(encoder11),
          Argument("last", last, "Int")(encoder12)
        )
      )

    /** Number of vulnerabilities per day for the projects on the current user's instance security dashboard.
      */
    def vulnerabilitiesCountByDay[A](
      startDate: ISO8601Date,
      endDate: ISO8601Date,
      after: Option[String] = None,
      before: Option[String] = None,
      first: Option[Int] = None,
      last: Option[Int] = None
    )(
      innerSelection: SelectionBuilder[VulnerabilitiesCountByDayConnection, A]
    )(
      implicit encoder0: ArgEncoder[ISO8601Date],
      encoder1: ArgEncoder[ISO8601Date],
      encoder2: ArgEncoder[Option[String]],
      encoder3: ArgEncoder[Option[String]],
      encoder4: ArgEncoder[Option[Int]],
      encoder5: ArgEncoder[Option[Int]]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootQuery, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "vulnerabilitiesCountByDay",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("startDate", startDate, "ISO8601Date!")(encoder0),
          Argument("endDate", endDate, "ISO8601Date!")(encoder1),
          Argument("after", after, "String")(encoder2),
          Argument("before", before, "String")(encoder3),
          Argument("first", first, "Int")(encoder4),
          Argument("last", last, "Int")(encoder5)
        )
      )

    /** Find a vulnerability.
      */
    def vulnerability[A](
      id: VulnerabilityID
    )(
      innerSelection: SelectionBuilder[Vulnerability, A]
    )(
      implicit encoder0: ArgEncoder[VulnerabilityID]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootQuery, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field("vulnerability", OptionOf(Obj(innerSelection)), arguments = List(Argument("id", id, "VulnerabilityID!")(encoder0)))

  }

  type Mutation = _root_.caliban.client.Operations.RootMutation

  object Mutation {

    def addProjectToSecurityDashboard[A](
      input: AddProjectToSecurityDashboardInput
    )(
      innerSelection: SelectionBuilder[AddProjectToSecurityDashboardPayload, A]
    )(
      implicit encoder0: ArgEncoder[AddProjectToSecurityDashboardInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "addProjectToSecurityDashboard",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "AddProjectToSecurityDashboardInput!")(encoder0))
      )

    def adminSidekiqQueuesDeleteJobs[A](
      input: AdminSidekiqQueuesDeleteJobsInput
    )(
      innerSelection: SelectionBuilder[AdminSidekiqQueuesDeleteJobsPayload, A]
    )(
      implicit encoder0: ArgEncoder[AdminSidekiqQueuesDeleteJobsInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "adminSidekiqQueuesDeleteJobs",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "AdminSidekiqQueuesDeleteJobsInput!")(encoder0))
      )

    def alertSetAssignees[A](
      input: AlertSetAssigneesInput
    )(
      innerSelection: SelectionBuilder[AlertSetAssigneesPayload, A]
    )(
      implicit encoder0: ArgEncoder[AlertSetAssigneesInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "alertSetAssignees",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "AlertSetAssigneesInput!")(encoder0))
      )

    def alertTodoCreate[A](
      input: AlertTodoCreateInput
    )(
      innerSelection: SelectionBuilder[AlertTodoCreatePayload, A]
    )(
      implicit encoder0: ArgEncoder[AlertTodoCreateInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "alertTodoCreate",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "AlertTodoCreateInput!")(encoder0))
      )

    def apiFuzzingCiConfigurationCreate[A](
      input: ApiFuzzingCiConfigurationCreateInput
    )(
      innerSelection: SelectionBuilder[ApiFuzzingCiConfigurationCreatePayload, A]
    )(
      implicit encoder0: ArgEncoder[ApiFuzzingCiConfigurationCreateInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "apiFuzzingCiConfigurationCreate",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "ApiFuzzingCiConfigurationCreateInput!")(encoder0))
      )

    def awardEmojiAdd[A](
      input: AwardEmojiAddInput
    )(
      innerSelection: SelectionBuilder[AwardEmojiAddPayload, A]
    )(
      implicit encoder0: ArgEncoder[AwardEmojiAddInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field("awardEmojiAdd", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "AwardEmojiAddInput!")(encoder0)))

    def awardEmojiRemove[A](
      input: AwardEmojiRemoveInput
    )(
      innerSelection: SelectionBuilder[AwardEmojiRemovePayload, A]
    )(
      implicit encoder0: ArgEncoder[AwardEmojiRemoveInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "awardEmojiRemove",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "AwardEmojiRemoveInput!")(encoder0))
      )

    def awardEmojiToggle[A](
      input: AwardEmojiToggleInput
    )(
      innerSelection: SelectionBuilder[AwardEmojiTogglePayload, A]
    )(
      implicit encoder0: ArgEncoder[AwardEmojiToggleInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "awardEmojiToggle",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "AwardEmojiToggleInput!")(encoder0))
      )

    def boardEpicCreate[A](
      input: BoardEpicCreateInput
    )(
      innerSelection: SelectionBuilder[BoardEpicCreatePayload, A]
    )(
      implicit encoder0: ArgEncoder[BoardEpicCreateInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "boardEpicCreate",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "BoardEpicCreateInput!")(encoder0))
      )

    def boardListCreate[A](
      input: BoardListCreateInput
    )(
      innerSelection: SelectionBuilder[BoardListCreatePayload, A]
    )(
      implicit encoder0: ArgEncoder[BoardListCreateInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "boardListCreate",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "BoardListCreateInput!")(encoder0))
      )

    def boardListUpdateLimitMetrics[A](
      input: BoardListUpdateLimitMetricsInput
    )(
      innerSelection: SelectionBuilder[BoardListUpdateLimitMetricsPayload, A]
    )(
      implicit encoder0: ArgEncoder[BoardListUpdateLimitMetricsInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "boardListUpdateLimitMetrics",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "BoardListUpdateLimitMetricsInput!")(encoder0))
      )

    /** **BETA** This endpoint is subject to change without notice.
      */
    def bulkEnableDevopsAdoptionNamespaces[A](
      input: BulkEnableDevopsAdoptionNamespacesInput
    )(
      innerSelection: SelectionBuilder[BulkEnableDevopsAdoptionNamespacesPayload, A]
    )(
      implicit encoder0: ArgEncoder[BulkEnableDevopsAdoptionNamespacesInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "bulkEnableDevopsAdoptionNamespaces",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "BulkEnableDevopsAdoptionNamespacesInput!")(encoder0))
      )

    def ciCdSettingsUpdate[A](
      input: CiCdSettingsUpdateInput
    )(
      innerSelection: SelectionBuilder[CiCdSettingsUpdatePayload, A]
    )(
      implicit encoder0: ArgEncoder[CiCdSettingsUpdateInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "ciCdSettingsUpdate",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "CiCdSettingsUpdateInput!")(encoder0))
      )

    def ciJobTokenScopeAddProject[A](
      input: CiJobTokenScopeAddProjectInput
    )(
      innerSelection: SelectionBuilder[CiJobTokenScopeAddProjectPayload, A]
    )(
      implicit encoder0: ArgEncoder[CiJobTokenScopeAddProjectInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "ciJobTokenScopeAddProject",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "CiJobTokenScopeAddProjectInput!")(encoder0))
      )

    def ciJobTokenScopeRemoveProject[A](
      input: CiJobTokenScopeRemoveProjectInput
    )(
      innerSelection: SelectionBuilder[CiJobTokenScopeRemoveProjectPayload, A]
    )(
      implicit encoder0: ArgEncoder[CiJobTokenScopeRemoveProjectInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "ciJobTokenScopeRemoveProject",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "CiJobTokenScopeRemoveProjectInput!")(encoder0))
      )

    def clusterAgentDelete[A](
      input: ClusterAgentDeleteInput
    )(
      innerSelection: SelectionBuilder[ClusterAgentDeletePayload, A]
    )(
      implicit encoder0: ArgEncoder[ClusterAgentDeleteInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "clusterAgentDelete",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "ClusterAgentDeleteInput!")(encoder0))
      )

    def clusterAgentTokenCreate[A](
      input: ClusterAgentTokenCreateInput
    )(
      innerSelection: SelectionBuilder[ClusterAgentTokenCreatePayload, A]
    )(
      implicit encoder0: ArgEncoder[ClusterAgentTokenCreateInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "clusterAgentTokenCreate",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "ClusterAgentTokenCreateInput!")(encoder0))
      )

    def clusterAgentTokenDelete[A](
      input: ClusterAgentTokenDeleteInput
    )(
      innerSelection: SelectionBuilder[ClusterAgentTokenDeletePayload, A]
    )(
      implicit encoder0: ArgEncoder[ClusterAgentTokenDeleteInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "clusterAgentTokenDelete",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "ClusterAgentTokenDeleteInput!")(encoder0))
      )

    def commitCreate[A](
      input: CommitCreateInput
    )(
      innerSelection: SelectionBuilder[CommitCreatePayload, A]
    )(
      implicit encoder0: ArgEncoder[CommitCreateInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field("commitCreate", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "CommitCreateInput!")(encoder0)))

    /** Configure SAST for a project by enabling SAST in a new or modified `.gitlab-ci.yml` file in a new branch. The new branch and a URL
      * to create a Merge Request are a part of the response.
      */
    def configureSast[A](
      input: ConfigureSastInput
    )(
      innerSelection: SelectionBuilder[ConfigureSastPayload, A]
    )(
      implicit encoder0: ArgEncoder[ConfigureSastInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field("configureSast", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "ConfigureSastInput!")(encoder0)))

    /** Configure Secret Detection for a project by enabling Secret Detection in a new or modified `.gitlab-ci.yml` file in a new branch.
      * The new branch and a URL to create a Merge Request are a part of the response.
      */
    def configureSecretDetection[A](
      input: ConfigureSecretDetectionInput
    )(
      innerSelection: SelectionBuilder[ConfigureSecretDetectionPayload, A]
    )(
      implicit encoder0: ArgEncoder[ConfigureSecretDetectionInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "configureSecretDetection",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "ConfigureSecretDetectionInput!")(encoder0))
      )

    def createAlertIssue[A](
      input: CreateAlertIssueInput
    )(
      innerSelection: SelectionBuilder[CreateAlertIssuePayload, A]
    )(
      implicit encoder0: ArgEncoder[CreateAlertIssueInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "createAlertIssue",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "CreateAlertIssueInput!")(encoder0))
      )

    def createAnnotation[A](
      input: CreateAnnotationInput
    )(
      innerSelection: SelectionBuilder[CreateAnnotationPayload, A]
    )(
      implicit encoder0: ArgEncoder[CreateAnnotationInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "createAnnotation",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "CreateAnnotationInput!")(encoder0))
      )

    def createBoard[A](
      input: CreateBoardInput
    )(
      innerSelection: SelectionBuilder[CreateBoardPayload, A]
    )(
      implicit encoder0: ArgEncoder[CreateBoardInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field("createBoard", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "CreateBoardInput!")(encoder0)))

    def createBranch[A](
      input: CreateBranchInput
    )(
      innerSelection: SelectionBuilder[CreateBranchPayload, A]
    )(
      implicit encoder0: ArgEncoder[CreateBranchInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field("createBranch", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "CreateBranchInput!")(encoder0)))

    def createClusterAgent[A](
      input: CreateClusterAgentInput
    )(
      innerSelection: SelectionBuilder[CreateClusterAgentPayload, A]
    )(
      implicit encoder0: ArgEncoder[CreateClusterAgentInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "createClusterAgent",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "CreateClusterAgentInput!")(encoder0))
      )

    def createComplianceFramework[A](
      input: CreateComplianceFrameworkInput
    )(
      innerSelection: SelectionBuilder[CreateComplianceFrameworkPayload, A]
    )(
      implicit encoder0: ArgEncoder[CreateComplianceFrameworkInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "createComplianceFramework",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "CreateComplianceFrameworkInput!")(encoder0))
      )

    /** Available only when feature flag `custom_emoji` is enabled.
      */
    def createCustomEmoji[A](
      input: CreateCustomEmojiInput
    )(
      innerSelection: SelectionBuilder[CreateCustomEmojiPayload, A]
    )(
      implicit encoder0: ArgEncoder[CreateCustomEmojiInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "createCustomEmoji",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "CreateCustomEmojiInput!")(encoder0))
      )

    def createDiffNote[A](
      input: CreateDiffNoteInput
    )(
      innerSelection: SelectionBuilder[CreateDiffNotePayload, A]
    )(
      implicit encoder0: ArgEncoder[CreateDiffNoteInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field("createDiffNote", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "CreateDiffNoteInput!")(encoder0)))

    def createEpic[A](
      input: CreateEpicInput
    )(
      innerSelection: SelectionBuilder[CreateEpicPayload, A]
    )(
      implicit encoder0: ArgEncoder[CreateEpicInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field("createEpic", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "CreateEpicInput!")(encoder0)))

    def createImageDiffNote[A](
      input: CreateImageDiffNoteInput
    )(
      innerSelection: SelectionBuilder[CreateImageDiffNotePayload, A]
    )(
      implicit encoder0: ArgEncoder[CreateImageDiffNoteInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "createImageDiffNote",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "CreateImageDiffNoteInput!")(encoder0))
      )

    def createIssue[A](
      input: CreateIssueInput
    )(
      innerSelection: SelectionBuilder[CreateIssuePayload, A]
    )(
      implicit encoder0: ArgEncoder[CreateIssueInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field("createIssue", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "CreateIssueInput!")(encoder0)))

    @deprecated("Use iterationCreate. Deprecated in 14.0.", "")
    def createIteration[A](
      input: CreateIterationInput
    )(
      innerSelection: SelectionBuilder[CreateIterationPayload, A]
    )(
      implicit encoder0: ArgEncoder[CreateIterationInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "createIteration",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "CreateIterationInput!")(encoder0))
      )

    def createNote[A](
      input: CreateNoteInput
    )(
      innerSelection: SelectionBuilder[CreateNotePayload, A]
    )(
      implicit encoder0: ArgEncoder[CreateNoteInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field("createNote", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "CreateNoteInput!")(encoder0)))

    def createRequirement[A](
      input: CreateRequirementInput
    )(
      innerSelection: SelectionBuilder[CreateRequirementPayload, A]
    )(
      implicit encoder0: ArgEncoder[CreateRequirementInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "createRequirement",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "CreateRequirementInput!")(encoder0))
      )

    def createSnippet[A](
      input: CreateSnippetInput
    )(
      innerSelection: SelectionBuilder[CreateSnippetPayload, A]
    )(
      implicit encoder0: ArgEncoder[CreateSnippetInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field("createSnippet", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "CreateSnippetInput!")(encoder0)))

    def createTestCase[A](
      input: CreateTestCaseInput
    )(
      innerSelection: SelectionBuilder[CreateTestCasePayload, A]
    )(
      implicit encoder0: ArgEncoder[CreateTestCaseInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field("createTestCase", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "CreateTestCaseInput!")(encoder0)))

    def dastOnDemandScanCreate[A](
      input: DastOnDemandScanCreateInput
    )(
      innerSelection: SelectionBuilder[DastOnDemandScanCreatePayload, A]
    )(
      implicit encoder0: ArgEncoder[DastOnDemandScanCreateInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "dastOnDemandScanCreate",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "DastOnDemandScanCreateInput!")(encoder0))
      )

    def dastProfileCreate[A](
      input: DastProfileCreateInput
    )(
      innerSelection: SelectionBuilder[DastProfileCreatePayload, A]
    )(
      implicit encoder0: ArgEncoder[DastProfileCreateInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "dastProfileCreate",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "DastProfileCreateInput!")(encoder0))
      )

    def dastProfileDelete[A](
      input: DastProfileDeleteInput
    )(
      innerSelection: SelectionBuilder[DastProfileDeletePayload, A]
    )(
      implicit encoder0: ArgEncoder[DastProfileDeleteInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "dastProfileDelete",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "DastProfileDeleteInput!")(encoder0))
      )

    def dastProfileRun[A](
      input: DastProfileRunInput
    )(
      innerSelection: SelectionBuilder[DastProfileRunPayload, A]
    )(
      implicit encoder0: ArgEncoder[DastProfileRunInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field("dastProfileRun", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "DastProfileRunInput!")(encoder0)))

    def dastProfileUpdate[A](
      input: DastProfileUpdateInput
    )(
      innerSelection: SelectionBuilder[DastProfileUpdatePayload, A]
    )(
      implicit encoder0: ArgEncoder[DastProfileUpdateInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "dastProfileUpdate",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "DastProfileUpdateInput!")(encoder0))
      )

    def dastScannerProfileCreate[A](
      input: DastScannerProfileCreateInput
    )(
      innerSelection: SelectionBuilder[DastScannerProfileCreatePayload, A]
    )(
      implicit encoder0: ArgEncoder[DastScannerProfileCreateInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "dastScannerProfileCreate",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "DastScannerProfileCreateInput!")(encoder0))
      )

    def dastScannerProfileDelete[A](
      input: DastScannerProfileDeleteInput
    )(
      innerSelection: SelectionBuilder[DastScannerProfileDeletePayload, A]
    )(
      implicit encoder0: ArgEncoder[DastScannerProfileDeleteInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "dastScannerProfileDelete",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "DastScannerProfileDeleteInput!")(encoder0))
      )

    def dastScannerProfileUpdate[A](
      input: DastScannerProfileUpdateInput
    )(
      innerSelection: SelectionBuilder[DastScannerProfileUpdatePayload, A]
    )(
      implicit encoder0: ArgEncoder[DastScannerProfileUpdateInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "dastScannerProfileUpdate",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "DastScannerProfileUpdateInput!")(encoder0))
      )

    def dastSiteProfileCreate[A](
      input: DastSiteProfileCreateInput
    )(
      innerSelection: SelectionBuilder[DastSiteProfileCreatePayload, A]
    )(
      implicit encoder0: ArgEncoder[DastSiteProfileCreateInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "dastSiteProfileCreate",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "DastSiteProfileCreateInput!")(encoder0))
      )

    def dastSiteProfileDelete[A](
      input: DastSiteProfileDeleteInput
    )(
      innerSelection: SelectionBuilder[DastSiteProfileDeletePayload, A]
    )(
      implicit encoder0: ArgEncoder[DastSiteProfileDeleteInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "dastSiteProfileDelete",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "DastSiteProfileDeleteInput!")(encoder0))
      )

    def dastSiteProfileUpdate[A](
      input: DastSiteProfileUpdateInput
    )(
      innerSelection: SelectionBuilder[DastSiteProfileUpdatePayload, A]
    )(
      implicit encoder0: ArgEncoder[DastSiteProfileUpdateInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "dastSiteProfileUpdate",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "DastSiteProfileUpdateInput!")(encoder0))
      )

    def dastSiteTokenCreate[A](
      input: DastSiteTokenCreateInput
    )(
      innerSelection: SelectionBuilder[DastSiteTokenCreatePayload, A]
    )(
      implicit encoder0: ArgEncoder[DastSiteTokenCreateInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "dastSiteTokenCreate",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "DastSiteTokenCreateInput!")(encoder0))
      )

    def dastSiteValidationCreate[A](
      input: DastSiteValidationCreateInput
    )(
      innerSelection: SelectionBuilder[DastSiteValidationCreatePayload, A]
    )(
      implicit encoder0: ArgEncoder[DastSiteValidationCreateInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "dastSiteValidationCreate",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "DastSiteValidationCreateInput!")(encoder0))
      )

    def dastSiteValidationRevoke[A](
      input: DastSiteValidationRevokeInput
    )(
      innerSelection: SelectionBuilder[DastSiteValidationRevokePayload, A]
    )(
      implicit encoder0: ArgEncoder[DastSiteValidationRevokeInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "dastSiteValidationRevoke",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "DastSiteValidationRevokeInput!")(encoder0))
      )

    def deleteAnnotation[A](
      input: DeleteAnnotationInput
    )(
      innerSelection: SelectionBuilder[DeleteAnnotationPayload, A]
    )(
      implicit encoder0: ArgEncoder[DeleteAnnotationInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "deleteAnnotation",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "DeleteAnnotationInput!")(encoder0))
      )

    def designManagementDelete[A](
      input: DesignManagementDeleteInput
    )(
      innerSelection: SelectionBuilder[DesignManagementDeletePayload, A]
    )(
      implicit encoder0: ArgEncoder[DesignManagementDeleteInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "designManagementDelete",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "DesignManagementDeleteInput!")(encoder0))
      )

    def designManagementMove[A](
      input: DesignManagementMoveInput
    )(
      innerSelection: SelectionBuilder[DesignManagementMovePayload, A]
    )(
      implicit encoder0: ArgEncoder[DesignManagementMoveInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "designManagementMove",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "DesignManagementMoveInput!")(encoder0))
      )

    def designManagementUpload[A](
      input: DesignManagementUploadInput
    )(
      innerSelection: SelectionBuilder[DesignManagementUploadPayload, A]
    )(
      implicit encoder0: ArgEncoder[DesignManagementUploadInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "designManagementUpload",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "DesignManagementUploadInput!")(encoder0))
      )

    def destroyBoard[A](
      input: DestroyBoardInput
    )(
      innerSelection: SelectionBuilder[DestroyBoardPayload, A]
    )(
      implicit encoder0: ArgEncoder[DestroyBoardInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field("destroyBoard", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "DestroyBoardInput!")(encoder0)))

    def destroyBoardList[A](
      input: DestroyBoardListInput
    )(
      innerSelection: SelectionBuilder[DestroyBoardListPayload, A]
    )(
      implicit encoder0: ArgEncoder[DestroyBoardListInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "destroyBoardList",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "DestroyBoardListInput!")(encoder0))
      )

    def destroyComplianceFramework[A](
      input: DestroyComplianceFrameworkInput
    )(
      innerSelection: SelectionBuilder[DestroyComplianceFrameworkPayload, A]
    )(
      implicit encoder0: ArgEncoder[DestroyComplianceFrameworkInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "destroyComplianceFramework",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "DestroyComplianceFrameworkInput!")(encoder0))
      )

    def destroyContainerRepository[A](
      input: DestroyContainerRepositoryInput
    )(
      innerSelection: SelectionBuilder[DestroyContainerRepositoryPayload, A]
    )(
      implicit encoder0: ArgEncoder[DestroyContainerRepositoryInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "destroyContainerRepository",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "DestroyContainerRepositoryInput!")(encoder0))
      )

    def destroyContainerRepositoryTags[A](
      input: DestroyContainerRepositoryTagsInput
    )(
      innerSelection: SelectionBuilder[DestroyContainerRepositoryTagsPayload, A]
    )(
      implicit encoder0: ArgEncoder[DestroyContainerRepositoryTagsInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "destroyContainerRepositoryTags",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "DestroyContainerRepositoryTagsInput!")(encoder0))
      )

    def destroyEpicBoard[A](
      input: DestroyEpicBoardInput
    )(
      innerSelection: SelectionBuilder[DestroyEpicBoardPayload, A]
    )(
      implicit encoder0: ArgEncoder[DestroyEpicBoardInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "destroyEpicBoard",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "DestroyEpicBoardInput!")(encoder0))
      )

    def destroyNote[A](
      input: DestroyNoteInput
    )(
      innerSelection: SelectionBuilder[DestroyNotePayload, A]
    )(
      implicit encoder0: ArgEncoder[DestroyNoteInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field("destroyNote", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "DestroyNoteInput!")(encoder0)))

    def destroyPackage[A](
      input: DestroyPackageInput
    )(
      innerSelection: SelectionBuilder[DestroyPackagePayload, A]
    )(
      implicit encoder0: ArgEncoder[DestroyPackageInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field("destroyPackage", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "DestroyPackageInput!")(encoder0)))

    def destroySnippet[A](
      input: DestroySnippetInput
    )(
      innerSelection: SelectionBuilder[DestroySnippetPayload, A]
    )(
      implicit encoder0: ArgEncoder[DestroySnippetInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field("destroySnippet", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "DestroySnippetInput!")(encoder0)))

    /** **BETA** This endpoint is subject to change without notice.
      */
    def disableDevopsAdoptionNamespace[A](
      input: DisableDevopsAdoptionNamespaceInput
    )(
      innerSelection: SelectionBuilder[DisableDevopsAdoptionNamespacePayload, A]
    )(
      implicit encoder0: ArgEncoder[DisableDevopsAdoptionNamespaceInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "disableDevopsAdoptionNamespace",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "DisableDevopsAdoptionNamespaceInput!")(encoder0))
      )

    /** Toggles the resolved state of a discussion
      */
    def discussionToggleResolve[A](
      input: DiscussionToggleResolveInput
    )(
      innerSelection: SelectionBuilder[DiscussionToggleResolvePayload, A]
    )(
      implicit encoder0: ArgEncoder[DiscussionToggleResolveInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "discussionToggleResolve",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "DiscussionToggleResolveInput!")(encoder0))
      )

    /** A mutation that does not perform any changes.
      *
      * This is expected to be used for testing of endpoints, to verify that a user has mutation access.
      */
    def echoCreate[A](
      input: EchoCreateInput
    )(
      innerSelection: SelectionBuilder[EchoCreatePayload, A]
    )(
      implicit encoder0: ArgEncoder[EchoCreateInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field("echoCreate", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "EchoCreateInput!")(encoder0)))

    /** **BETA** This endpoint is subject to change without notice.
      */
    def enableDevopsAdoptionNamespace[A](
      input: EnableDevopsAdoptionNamespaceInput
    )(
      innerSelection: SelectionBuilder[EnableDevopsAdoptionNamespacePayload, A]
    )(
      implicit encoder0: ArgEncoder[EnableDevopsAdoptionNamespaceInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "enableDevopsAdoptionNamespace",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "EnableDevopsAdoptionNamespaceInput!")(encoder0))
      )

    def environmentsCanaryIngressUpdate[A](
      input: EnvironmentsCanaryIngressUpdateInput
    )(
      innerSelection: SelectionBuilder[EnvironmentsCanaryIngressUpdatePayload, A]
    )(
      implicit encoder0: ArgEncoder[EnvironmentsCanaryIngressUpdateInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "environmentsCanaryIngressUpdate",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "EnvironmentsCanaryIngressUpdateInput!")(encoder0))
      )

    def epicAddIssue[A](
      input: EpicAddIssueInput
    )(
      innerSelection: SelectionBuilder[EpicAddIssuePayload, A]
    )(
      implicit encoder0: ArgEncoder[EpicAddIssueInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field("epicAddIssue", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "EpicAddIssueInput!")(encoder0)))

    def epicBoardCreate[A](
      input: EpicBoardCreateInput
    )(
      innerSelection: SelectionBuilder[EpicBoardCreatePayload, A]
    )(
      implicit encoder0: ArgEncoder[EpicBoardCreateInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "epicBoardCreate",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "EpicBoardCreateInput!")(encoder0))
      )

    def epicBoardListCreate[A](
      input: EpicBoardListCreateInput
    )(
      innerSelection: SelectionBuilder[EpicBoardListCreatePayload, A]
    )(
      implicit encoder0: ArgEncoder[EpicBoardListCreateInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "epicBoardListCreate",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "EpicBoardListCreateInput!")(encoder0))
      )

    /** Destroys an epic board list.
      */
    def epicBoardListDestroy[A](
      input: EpicBoardListDestroyInput
    )(
      innerSelection: SelectionBuilder[EpicBoardListDestroyPayload, A]
    )(
      implicit encoder0: ArgEncoder[EpicBoardListDestroyInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "epicBoardListDestroy",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "EpicBoardListDestroyInput!")(encoder0))
      )

    def epicBoardUpdate[A](
      input: EpicBoardUpdateInput
    )(
      innerSelection: SelectionBuilder[EpicBoardUpdatePayload, A]
    )(
      implicit encoder0: ArgEncoder[EpicBoardUpdateInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "epicBoardUpdate",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "EpicBoardUpdateInput!")(encoder0))
      )

    def epicMoveList[A](
      input: EpicMoveListInput
    )(
      innerSelection: SelectionBuilder[EpicMoveListPayload, A]
    )(
      implicit encoder0: ArgEncoder[EpicMoveListInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field("epicMoveList", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "EpicMoveListInput!")(encoder0)))

    def epicSetSubscription[A](
      input: EpicSetSubscriptionInput
    )(
      innerSelection: SelectionBuilder[EpicSetSubscriptionPayload, A]
    )(
      implicit encoder0: ArgEncoder[EpicSetSubscriptionInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "epicSetSubscription",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "EpicSetSubscriptionInput!")(encoder0))
      )

    def epicTreeReorder[A](
      input: EpicTreeReorderInput
    )(
      innerSelection: SelectionBuilder[EpicTreeReorderPayload, A]
    )(
      implicit encoder0: ArgEncoder[EpicTreeReorderInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "epicTreeReorder",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "EpicTreeReorderInput!")(encoder0))
      )

    def escalationPolicyCreate[A](
      input: EscalationPolicyCreateInput
    )(
      innerSelection: SelectionBuilder[EscalationPolicyCreatePayload, A]
    )(
      implicit encoder0: ArgEncoder[EscalationPolicyCreateInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "escalationPolicyCreate",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "EscalationPolicyCreateInput!")(encoder0))
      )

    def escalationPolicyDestroy[A](
      input: EscalationPolicyDestroyInput
    )(
      innerSelection: SelectionBuilder[EscalationPolicyDestroyPayload, A]
    )(
      implicit encoder0: ArgEncoder[EscalationPolicyDestroyInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "escalationPolicyDestroy",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "EscalationPolicyDestroyInput!")(encoder0))
      )

    def escalationPolicyUpdate[A](
      input: EscalationPolicyUpdateInput
    )(
      innerSelection: SelectionBuilder[EscalationPolicyUpdatePayload, A]
    )(
      implicit encoder0: ArgEncoder[EscalationPolicyUpdateInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "escalationPolicyUpdate",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "EscalationPolicyUpdateInput!")(encoder0))
      )

    def exportRequirements[A](
      input: ExportRequirementsInput
    )(
      innerSelection: SelectionBuilder[ExportRequirementsPayload, A]
    )(
      implicit encoder0: ArgEncoder[ExportRequirementsInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "exportRequirements",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "ExportRequirementsInput!")(encoder0))
      )

    def gitlabSubscriptionActivate[A](
      input: GitlabSubscriptionActivateInput
    )(
      innerSelection: SelectionBuilder[GitlabSubscriptionActivatePayload, A]
    )(
      implicit encoder0: ArgEncoder[GitlabSubscriptionActivateInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "gitlabSubscriptionActivate",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "GitlabSubscriptionActivateInput!")(encoder0))
      )

    def httpIntegrationCreate[A](
      input: HttpIntegrationCreateInput
    )(
      innerSelection: SelectionBuilder[HttpIntegrationCreatePayload, A]
    )(
      implicit encoder0: ArgEncoder[HttpIntegrationCreateInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "httpIntegrationCreate",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "HttpIntegrationCreateInput!")(encoder0))
      )

    def httpIntegrationDestroy[A](
      input: HttpIntegrationDestroyInput
    )(
      innerSelection: SelectionBuilder[HttpIntegrationDestroyPayload, A]
    )(
      implicit encoder0: ArgEncoder[HttpIntegrationDestroyInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "httpIntegrationDestroy",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "HttpIntegrationDestroyInput!")(encoder0))
      )

    def httpIntegrationResetToken[A](
      input: HttpIntegrationResetTokenInput
    )(
      innerSelection: SelectionBuilder[HttpIntegrationResetTokenPayload, A]
    )(
      implicit encoder0: ArgEncoder[HttpIntegrationResetTokenInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "httpIntegrationResetToken",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "HttpIntegrationResetTokenInput!")(encoder0))
      )

    def httpIntegrationUpdate[A](
      input: HttpIntegrationUpdateInput
    )(
      innerSelection: SelectionBuilder[HttpIntegrationUpdatePayload, A]
    )(
      implicit encoder0: ArgEncoder[HttpIntegrationUpdateInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "httpIntegrationUpdate",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "HttpIntegrationUpdateInput!")(encoder0))
      )

    def issueMove[A](
      input: IssueMoveInput
    )(
      innerSelection: SelectionBuilder[IssueMovePayload, A]
    )(
      implicit encoder0: ArgEncoder[IssueMoveInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field("issueMove", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "IssueMoveInput!")(encoder0)))

    def issueMoveList[A](
      input: IssueMoveListInput
    )(
      innerSelection: SelectionBuilder[IssueMoveListPayload, A]
    )(
      implicit encoder0: ArgEncoder[IssueMoveListInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field("issueMoveList", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "IssueMoveListInput!")(encoder0)))

    def issueSetAssignees[A](
      input: IssueSetAssigneesInput
    )(
      innerSelection: SelectionBuilder[IssueSetAssigneesPayload, A]
    )(
      implicit encoder0: ArgEncoder[IssueSetAssigneesInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "issueSetAssignees",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "IssueSetAssigneesInput!")(encoder0))
      )

    def issueSetConfidential[A](
      input: IssueSetConfidentialInput
    )(
      innerSelection: SelectionBuilder[IssueSetConfidentialPayload, A]
    )(
      implicit encoder0: ArgEncoder[IssueSetConfidentialInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "issueSetConfidential",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "IssueSetConfidentialInput!")(encoder0))
      )

    def issueSetDueDate[A](
      input: IssueSetDueDateInput
    )(
      innerSelection: SelectionBuilder[IssueSetDueDatePayload, A]
    )(
      implicit encoder0: ArgEncoder[IssueSetDueDateInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "issueSetDueDate",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "IssueSetDueDateInput!")(encoder0))
      )

    def issueSetEpic[A](
      input: IssueSetEpicInput
    )(
      innerSelection: SelectionBuilder[IssueSetEpicPayload, A]
    )(
      implicit encoder0: ArgEncoder[IssueSetEpicInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field("issueSetEpic", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "IssueSetEpicInput!")(encoder0)))

    def issueSetIteration[A](
      input: IssueSetIterationInput
    )(
      innerSelection: SelectionBuilder[IssueSetIterationPayload, A]
    )(
      implicit encoder0: ArgEncoder[IssueSetIterationInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "issueSetIteration",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "IssueSetIterationInput!")(encoder0))
      )

    def issueSetLocked[A](
      input: IssueSetLockedInput
    )(
      innerSelection: SelectionBuilder[IssueSetLockedPayload, A]
    )(
      implicit encoder0: ArgEncoder[IssueSetLockedInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field("issueSetLocked", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "IssueSetLockedInput!")(encoder0)))

    def issueSetSeverity[A](
      input: IssueSetSeverityInput
    )(
      innerSelection: SelectionBuilder[IssueSetSeverityPayload, A]
    )(
      implicit encoder0: ArgEncoder[IssueSetSeverityInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "issueSetSeverity",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "IssueSetSeverityInput!")(encoder0))
      )

    def issueSetSubscription[A](
      input: IssueSetSubscriptionInput
    )(
      innerSelection: SelectionBuilder[IssueSetSubscriptionPayload, A]
    )(
      implicit encoder0: ArgEncoder[IssueSetSubscriptionInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "issueSetSubscription",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "IssueSetSubscriptionInput!")(encoder0))
      )

    def issueSetWeight[A](
      input: IssueSetWeightInput
    )(
      innerSelection: SelectionBuilder[IssueSetWeightPayload, A]
    )(
      implicit encoder0: ArgEncoder[IssueSetWeightInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field("issueSetWeight", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "IssueSetWeightInput!")(encoder0)))

    def iterationCadenceCreate[A](
      input: IterationCadenceCreateInput
    )(
      innerSelection: SelectionBuilder[IterationCadenceCreatePayload, A]
    )(
      implicit encoder0: ArgEncoder[IterationCadenceCreateInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "iterationCadenceCreate",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "IterationCadenceCreateInput!")(encoder0))
      )

    def iterationCadenceDestroy[A](
      input: IterationCadenceDestroyInput
    )(
      innerSelection: SelectionBuilder[IterationCadenceDestroyPayload, A]
    )(
      implicit encoder0: ArgEncoder[IterationCadenceDestroyInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "iterationCadenceDestroy",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "IterationCadenceDestroyInput!")(encoder0))
      )

    def iterationCadenceUpdate[A](
      input: IterationCadenceUpdateInput
    )(
      innerSelection: SelectionBuilder[IterationCadenceUpdatePayload, A]
    )(
      implicit encoder0: ArgEncoder[IterationCadenceUpdateInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "iterationCadenceUpdate",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "IterationCadenceUpdateInput!")(encoder0))
      )

    def iterationCreate[A](
      input: iterationCreateInput
    )(
      innerSelection: SelectionBuilder[iterationCreatePayload, A]
    )(
      implicit encoder0: ArgEncoder[iterationCreateInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "iterationCreate",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "iterationCreateInput!")(encoder0))
      )

    def iterationDelete[A](
      input: IterationDeleteInput
    )(
      innerSelection: SelectionBuilder[IterationDeletePayload, A]
    )(
      implicit encoder0: ArgEncoder[IterationDeleteInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "iterationDelete",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "IterationDeleteInput!")(encoder0))
      )

    def jiraImportStart[A](
      input: JiraImportStartInput
    )(
      innerSelection: SelectionBuilder[JiraImportStartPayload, A]
    )(
      implicit encoder0: ArgEncoder[JiraImportStartInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "jiraImportStart",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "JiraImportStartInput!")(encoder0))
      )

    def jiraImportUsers[A](
      input: JiraImportUsersInput
    )(
      innerSelection: SelectionBuilder[JiraImportUsersPayload, A]
    )(
      implicit encoder0: ArgEncoder[JiraImportUsersInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "jiraImportUsers",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "JiraImportUsersInput!")(encoder0))
      )

    def jobPlay[A](
      input: JobPlayInput
    )(
      innerSelection: SelectionBuilder[JobPlayPayload, A]
    )(
      implicit encoder0: ArgEncoder[JobPlayInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field("jobPlay", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "JobPlayInput!")(encoder0)))

    def jobRetry[A](
      input: JobRetryInput
    )(
      innerSelection: SelectionBuilder[JobRetryPayload, A]
    )(
      implicit encoder0: ArgEncoder[JobRetryInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field("jobRetry", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "JobRetryInput!")(encoder0)))

    def labelCreate[A](
      input: LabelCreateInput
    )(
      innerSelection: SelectionBuilder[LabelCreatePayload, A]
    )(
      implicit encoder0: ArgEncoder[LabelCreateInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field("labelCreate", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "LabelCreateInput!")(encoder0)))

    def markAsSpamSnippet[A](
      input: MarkAsSpamSnippetInput
    )(
      innerSelection: SelectionBuilder[MarkAsSpamSnippetPayload, A]
    )(
      implicit encoder0: ArgEncoder[MarkAsSpamSnippetInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "markAsSpamSnippet",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "MarkAsSpamSnippetInput!")(encoder0))
      )

    /** Accepts a merge request. When accepted, the source branch will be merged into the target branch, either immediately if possible, or
      * using one of the automatic merge strategies.
      */
    def mergeRequestAccept[A](
      input: MergeRequestAcceptInput
    )(
      innerSelection: SelectionBuilder[MergeRequestAcceptPayload, A]
    )(
      implicit encoder0: ArgEncoder[MergeRequestAcceptInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "mergeRequestAccept",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "MergeRequestAcceptInput!")(encoder0))
      )

    def mergeRequestCreate[A](
      input: MergeRequestCreateInput
    )(
      innerSelection: SelectionBuilder[MergeRequestCreatePayload, A]
    )(
      implicit encoder0: ArgEncoder[MergeRequestCreateInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "mergeRequestCreate",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "MergeRequestCreateInput!")(encoder0))
      )

    def mergeRequestReviewerRereview[A](
      input: MergeRequestReviewerRereviewInput
    )(
      innerSelection: SelectionBuilder[MergeRequestReviewerRereviewPayload, A]
    )(
      implicit encoder0: ArgEncoder[MergeRequestReviewerRereviewInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "mergeRequestReviewerRereview",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "MergeRequestReviewerRereviewInput!")(encoder0))
      )

    def mergeRequestSetAssignees[A](
      input: MergeRequestSetAssigneesInput
    )(
      innerSelection: SelectionBuilder[MergeRequestSetAssigneesPayload, A]
    )(
      implicit encoder0: ArgEncoder[MergeRequestSetAssigneesInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "mergeRequestSetAssignees",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "MergeRequestSetAssigneesInput!")(encoder0))
      )

    def mergeRequestSetDraft[A](
      input: MergeRequestSetDraftInput
    )(
      innerSelection: SelectionBuilder[MergeRequestSetDraftPayload, A]
    )(
      implicit encoder0: ArgEncoder[MergeRequestSetDraftInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "mergeRequestSetDraft",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "MergeRequestSetDraftInput!")(encoder0))
      )

    def mergeRequestSetLabels[A](
      input: MergeRequestSetLabelsInput
    )(
      innerSelection: SelectionBuilder[MergeRequestSetLabelsPayload, A]
    )(
      implicit encoder0: ArgEncoder[MergeRequestSetLabelsInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "mergeRequestSetLabels",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "MergeRequestSetLabelsInput!")(encoder0))
      )

    def mergeRequestSetLocked[A](
      input: MergeRequestSetLockedInput
    )(
      innerSelection: SelectionBuilder[MergeRequestSetLockedPayload, A]
    )(
      implicit encoder0: ArgEncoder[MergeRequestSetLockedInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "mergeRequestSetLocked",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "MergeRequestSetLockedInput!")(encoder0))
      )

    def mergeRequestSetMilestone[A](
      input: MergeRequestSetMilestoneInput
    )(
      innerSelection: SelectionBuilder[MergeRequestSetMilestonePayload, A]
    )(
      implicit encoder0: ArgEncoder[MergeRequestSetMilestoneInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "mergeRequestSetMilestone",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "MergeRequestSetMilestoneInput!")(encoder0))
      )

    def mergeRequestSetSubscription[A](
      input: MergeRequestSetSubscriptionInput
    )(
      innerSelection: SelectionBuilder[MergeRequestSetSubscriptionPayload, A]
    )(
      implicit encoder0: ArgEncoder[MergeRequestSetSubscriptionInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "mergeRequestSetSubscription",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "MergeRequestSetSubscriptionInput!")(encoder0))
      )

    @deprecated("Use mergeRequestSetDraft. Deprecated in 13.12.", "")
    def mergeRequestSetWip[A](
      input: MergeRequestSetWipInput
    )(
      innerSelection: SelectionBuilder[MergeRequestSetWipPayload, A]
    )(
      implicit encoder0: ArgEncoder[MergeRequestSetWipInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "mergeRequestSetWip",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "MergeRequestSetWipInput!")(encoder0))
      )

    /** Update attributes of a merge request
      */
    def mergeRequestUpdate[A](
      input: MergeRequestUpdateInput
    )(
      innerSelection: SelectionBuilder[MergeRequestUpdatePayload, A]
    )(
      implicit encoder0: ArgEncoder[MergeRequestUpdateInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "mergeRequestUpdate",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "MergeRequestUpdateInput!")(encoder0))
      )

    def namespaceIncreaseStorageTemporarily[A](
      input: NamespaceIncreaseStorageTemporarilyInput
    )(
      innerSelection: SelectionBuilder[NamespaceIncreaseStorageTemporarilyPayload, A]
    )(
      implicit encoder0: ArgEncoder[NamespaceIncreaseStorageTemporarilyInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "namespaceIncreaseStorageTemporarily",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "NamespaceIncreaseStorageTemporarilyInput!")(encoder0))
      )

    def oncallRotationCreate[A](
      input: OncallRotationCreateInput
    )(
      innerSelection: SelectionBuilder[OncallRotationCreatePayload, A]
    )(
      implicit encoder0: ArgEncoder[OncallRotationCreateInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "oncallRotationCreate",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "OncallRotationCreateInput!")(encoder0))
      )

    def oncallRotationDestroy[A](
      input: OncallRotationDestroyInput
    )(
      innerSelection: SelectionBuilder[OncallRotationDestroyPayload, A]
    )(
      implicit encoder0: ArgEncoder[OncallRotationDestroyInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "oncallRotationDestroy",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "OncallRotationDestroyInput!")(encoder0))
      )

    def oncallRotationUpdate[A](
      input: OncallRotationUpdateInput
    )(
      innerSelection: SelectionBuilder[OncallRotationUpdatePayload, A]
    )(
      implicit encoder0: ArgEncoder[OncallRotationUpdateInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "oncallRotationUpdate",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "OncallRotationUpdateInput!")(encoder0))
      )

    def oncallScheduleCreate[A](
      input: OncallScheduleCreateInput
    )(
      innerSelection: SelectionBuilder[OncallScheduleCreatePayload, A]
    )(
      implicit encoder0: ArgEncoder[OncallScheduleCreateInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "oncallScheduleCreate",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "OncallScheduleCreateInput!")(encoder0))
      )

    def oncallScheduleDestroy[A](
      input: OncallScheduleDestroyInput
    )(
      innerSelection: SelectionBuilder[OncallScheduleDestroyPayload, A]
    )(
      implicit encoder0: ArgEncoder[OncallScheduleDestroyInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "oncallScheduleDestroy",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "OncallScheduleDestroyInput!")(encoder0))
      )

    def oncallScheduleUpdate[A](
      input: OncallScheduleUpdateInput
    )(
      innerSelection: SelectionBuilder[OncallScheduleUpdatePayload, A]
    )(
      implicit encoder0: ArgEncoder[OncallScheduleUpdateInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "oncallScheduleUpdate",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "OncallScheduleUpdateInput!")(encoder0))
      )

    def pipelineCancel[A](
      input: PipelineCancelInput
    )(
      innerSelection: SelectionBuilder[PipelineCancelPayload, A]
    )(
      implicit encoder0: ArgEncoder[PipelineCancelInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field("pipelineCancel", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "PipelineCancelInput!")(encoder0)))

    def pipelineDestroy[A](
      input: PipelineDestroyInput
    )(
      innerSelection: SelectionBuilder[PipelineDestroyPayload, A]
    )(
      implicit encoder0: ArgEncoder[PipelineDestroyInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "pipelineDestroy",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "PipelineDestroyInput!")(encoder0))
      )

    def pipelineRetry[A](
      input: PipelineRetryInput
    )(
      innerSelection: SelectionBuilder[PipelineRetryPayload, A]
    )(
      implicit encoder0: ArgEncoder[PipelineRetryInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field("pipelineRetry", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "PipelineRetryInput!")(encoder0)))

    def prometheusIntegrationCreate[A](
      input: PrometheusIntegrationCreateInput
    )(
      innerSelection: SelectionBuilder[PrometheusIntegrationCreatePayload, A]
    )(
      implicit encoder0: ArgEncoder[PrometheusIntegrationCreateInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "prometheusIntegrationCreate",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "PrometheusIntegrationCreateInput!")(encoder0))
      )

    def prometheusIntegrationResetToken[A](
      input: PrometheusIntegrationResetTokenInput
    )(
      innerSelection: SelectionBuilder[PrometheusIntegrationResetTokenPayload, A]
    )(
      implicit encoder0: ArgEncoder[PrometheusIntegrationResetTokenInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "prometheusIntegrationResetToken",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "PrometheusIntegrationResetTokenInput!")(encoder0))
      )

    def prometheusIntegrationUpdate[A](
      input: PrometheusIntegrationUpdateInput
    )(
      innerSelection: SelectionBuilder[PrometheusIntegrationUpdatePayload, A]
    )(
      implicit encoder0: ArgEncoder[PrometheusIntegrationUpdateInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "prometheusIntegrationUpdate",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "PrometheusIntegrationUpdateInput!")(encoder0))
      )

    def promoteToEpic[A](
      input: PromoteToEpicInput
    )(
      innerSelection: SelectionBuilder[PromoteToEpicPayload, A]
    )(
      implicit encoder0: ArgEncoder[PromoteToEpicInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field("promoteToEpic", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "PromoteToEpicInput!")(encoder0)))

    def releaseAssetLinkCreate[A](
      input: ReleaseAssetLinkCreateInput
    )(
      innerSelection: SelectionBuilder[ReleaseAssetLinkCreatePayload, A]
    )(
      implicit encoder0: ArgEncoder[ReleaseAssetLinkCreateInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "releaseAssetLinkCreate",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "ReleaseAssetLinkCreateInput!")(encoder0))
      )

    def releaseAssetLinkDelete[A](
      input: ReleaseAssetLinkDeleteInput
    )(
      innerSelection: SelectionBuilder[ReleaseAssetLinkDeletePayload, A]
    )(
      implicit encoder0: ArgEncoder[ReleaseAssetLinkDeleteInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "releaseAssetLinkDelete",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "ReleaseAssetLinkDeleteInput!")(encoder0))
      )

    def releaseAssetLinkUpdate[A](
      input: ReleaseAssetLinkUpdateInput
    )(
      innerSelection: SelectionBuilder[ReleaseAssetLinkUpdatePayload, A]
    )(
      implicit encoder0: ArgEncoder[ReleaseAssetLinkUpdateInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "releaseAssetLinkUpdate",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "ReleaseAssetLinkUpdateInput!")(encoder0))
      )

    def releaseCreate[A](
      input: ReleaseCreateInput
    )(
      innerSelection: SelectionBuilder[ReleaseCreatePayload, A]
    )(
      implicit encoder0: ArgEncoder[ReleaseCreateInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field("releaseCreate", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "ReleaseCreateInput!")(encoder0)))

    def releaseDelete[A](
      input: ReleaseDeleteInput
    )(
      innerSelection: SelectionBuilder[ReleaseDeletePayload, A]
    )(
      implicit encoder0: ArgEncoder[ReleaseDeleteInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field("releaseDelete", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "ReleaseDeleteInput!")(encoder0)))

    def releaseUpdate[A](
      input: ReleaseUpdateInput
    )(
      innerSelection: SelectionBuilder[ReleaseUpdatePayload, A]
    )(
      implicit encoder0: ArgEncoder[ReleaseUpdateInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field("releaseUpdate", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "ReleaseUpdateInput!")(encoder0)))

    def removeProjectFromSecurityDashboard[A](
      input: RemoveProjectFromSecurityDashboardInput
    )(
      innerSelection: SelectionBuilder[RemoveProjectFromSecurityDashboardPayload, A]
    )(
      implicit encoder0: ArgEncoder[RemoveProjectFromSecurityDashboardInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "removeProjectFromSecurityDashboard",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "RemoveProjectFromSecurityDashboardInput!")(encoder0))
      )

    /** Repositions a DiffNote on an image (a `Note` where the `position.positionType` is `"image"`)
      */
    def repositionImageDiffNote[A](
      input: RepositionImageDiffNoteInput
    )(
      innerSelection: SelectionBuilder[RepositionImageDiffNotePayload, A]
    )(
      implicit encoder0: ArgEncoder[RepositionImageDiffNoteInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "repositionImageDiffNote",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "RepositionImageDiffNoteInput!")(encoder0))
      )

    /** Available only when feature flag `runner_graphql_query` is enabled.
      */
    def runnerDelete[A](
      input: RunnerDeleteInput
    )(
      innerSelection: SelectionBuilder[RunnerDeletePayload, A]
    )(
      implicit encoder0: ArgEncoder[RunnerDeleteInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field("runnerDelete", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "RunnerDeleteInput!")(encoder0)))

    /** Available only when feature flag `runner_graphql_query` is enabled.
      */
    def runnerUpdate[A](
      input: RunnerUpdateInput
    )(
      innerSelection: SelectionBuilder[RunnerUpdatePayload, A]
    )(
      implicit encoder0: ArgEncoder[RunnerUpdateInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field("runnerUpdate", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "RunnerUpdateInput!")(encoder0)))

    /** Available only when feature flag `runner_graphql_query` is enabled.
      */
    def runnersRegistrationTokenReset[A](
      input: RunnersRegistrationTokenResetInput
    )(
      innerSelection: SelectionBuilder[RunnersRegistrationTokenResetPayload, A]
    )(
      implicit encoder0: ArgEncoder[RunnersRegistrationTokenResetInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "runnersRegistrationTokenReset",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "RunnersRegistrationTokenResetInput!")(encoder0))
      )

    def scanExecutionPolicyCommit[A](
      input: ScanExecutionPolicyCommitInput
    )(
      innerSelection: SelectionBuilder[ScanExecutionPolicyCommitPayload, A]
    )(
      implicit encoder0: ArgEncoder[ScanExecutionPolicyCommitInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "scanExecutionPolicyCommit",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "ScanExecutionPolicyCommitInput!")(encoder0))
      )

    def securityPolicyProjectAssign[A](
      input: SecurityPolicyProjectAssignInput
    )(
      innerSelection: SelectionBuilder[SecurityPolicyProjectAssignPayload, A]
    )(
      implicit encoder0: ArgEncoder[SecurityPolicyProjectAssignInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "securityPolicyProjectAssign",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "SecurityPolicyProjectAssignInput!")(encoder0))
      )

    def securityPolicyProjectCreate[A](
      input: SecurityPolicyProjectCreateInput
    )(
      innerSelection: SelectionBuilder[SecurityPolicyProjectCreatePayload, A]
    )(
      implicit encoder0: ArgEncoder[SecurityPolicyProjectCreateInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "securityPolicyProjectCreate",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "SecurityPolicyProjectCreateInput!")(encoder0))
      )

    def terraformStateDelete[A](
      input: TerraformStateDeleteInput
    )(
      innerSelection: SelectionBuilder[TerraformStateDeletePayload, A]
    )(
      implicit encoder0: ArgEncoder[TerraformStateDeleteInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "terraformStateDelete",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "TerraformStateDeleteInput!")(encoder0))
      )

    def terraformStateLock[A](
      input: TerraformStateLockInput
    )(
      innerSelection: SelectionBuilder[TerraformStateLockPayload, A]
    )(
      implicit encoder0: ArgEncoder[TerraformStateLockInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "terraformStateLock",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "TerraformStateLockInput!")(encoder0))
      )

    def terraformStateUnlock[A](
      input: TerraformStateUnlockInput
    )(
      innerSelection: SelectionBuilder[TerraformStateUnlockPayload, A]
    )(
      implicit encoder0: ArgEncoder[TerraformStateUnlockInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "terraformStateUnlock",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "TerraformStateUnlockInput!")(encoder0))
      )

    def todoCreate[A](
      input: TodoCreateInput
    )(
      innerSelection: SelectionBuilder[TodoCreatePayload, A]
    )(
      implicit encoder0: ArgEncoder[TodoCreateInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field("todoCreate", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "TodoCreateInput!")(encoder0)))

    def todoMarkDone[A](
      input: TodoMarkDoneInput
    )(
      innerSelection: SelectionBuilder[TodoMarkDonePayload, A]
    )(
      implicit encoder0: ArgEncoder[TodoMarkDoneInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field("todoMarkDone", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "TodoMarkDoneInput!")(encoder0)))

    def todoRestore[A](
      input: TodoRestoreInput
    )(
      innerSelection: SelectionBuilder[TodoRestorePayload, A]
    )(
      implicit encoder0: ArgEncoder[TodoRestoreInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field("todoRestore", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "TodoRestoreInput!")(encoder0)))

    def todoRestoreMany[A](
      input: TodoRestoreManyInput
    )(
      innerSelection: SelectionBuilder[TodoRestoreManyPayload, A]
    )(
      implicit encoder0: ArgEncoder[TodoRestoreManyInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "todoRestoreMany",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "TodoRestoreManyInput!")(encoder0))
      )

    def todosMarkAllDone[A](
      input: TodosMarkAllDoneInput
    )(
      innerSelection: SelectionBuilder[TodosMarkAllDonePayload, A]
    )(
      implicit encoder0: ArgEncoder[TodosMarkAllDoneInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "todosMarkAllDone",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "TodosMarkAllDoneInput!")(encoder0))
      )

    def updateAlertStatus[A](
      input: UpdateAlertStatusInput
    )(
      innerSelection: SelectionBuilder[UpdateAlertStatusPayload, A]
    )(
      implicit encoder0: ArgEncoder[UpdateAlertStatusInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "updateAlertStatus",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "UpdateAlertStatusInput!")(encoder0))
      )

    def updateBoard[A](
      input: UpdateBoardInput
    )(
      innerSelection: SelectionBuilder[UpdateBoardPayload, A]
    )(
      implicit encoder0: ArgEncoder[UpdateBoardInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field("updateBoard", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "UpdateBoardInput!")(encoder0)))

    def updateBoardEpicUserPreferences[A](
      input: UpdateBoardEpicUserPreferencesInput
    )(
      innerSelection: SelectionBuilder[UpdateBoardEpicUserPreferencesPayload, A]
    )(
      implicit encoder0: ArgEncoder[UpdateBoardEpicUserPreferencesInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "updateBoardEpicUserPreferences",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "UpdateBoardEpicUserPreferencesInput!")(encoder0))
      )

    def updateBoardList[A](
      input: UpdateBoardListInput
    )(
      innerSelection: SelectionBuilder[UpdateBoardListPayload, A]
    )(
      implicit encoder0: ArgEncoder[UpdateBoardListInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "updateBoardList",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "UpdateBoardListInput!")(encoder0))
      )

    def updateComplianceFramework[A](
      input: UpdateComplianceFrameworkInput
    )(
      innerSelection: SelectionBuilder[UpdateComplianceFrameworkPayload, A]
    )(
      implicit encoder0: ArgEncoder[UpdateComplianceFrameworkInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "updateComplianceFramework",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "UpdateComplianceFrameworkInput!")(encoder0))
      )

    def updateContainerExpirationPolicy[A](
      input: UpdateContainerExpirationPolicyInput
    )(
      innerSelection: SelectionBuilder[UpdateContainerExpirationPolicyPayload, A]
    )(
      implicit encoder0: ArgEncoder[UpdateContainerExpirationPolicyInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "updateContainerExpirationPolicy",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "UpdateContainerExpirationPolicyInput!")(encoder0))
      )

    def updateEpic[A](
      input: UpdateEpicInput
    )(
      innerSelection: SelectionBuilder[UpdateEpicPayload, A]
    )(
      implicit encoder0: ArgEncoder[UpdateEpicInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field("updateEpic", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "UpdateEpicInput!")(encoder0)))

    def updateEpicBoardList[A](
      input: UpdateEpicBoardListInput
    )(
      innerSelection: SelectionBuilder[UpdateEpicBoardListPayload, A]
    )(
      implicit encoder0: ArgEncoder[UpdateEpicBoardListInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "updateEpicBoardList",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "UpdateEpicBoardListInput!")(encoder0))
      )

    /** Updates a DiffNote on an image (a `Note` where the `position.positionType` is `"image"`). If the body of the Note contains only
      * quick actions, the Note will be destroyed during the update, and no Note will be returned.
      */
    def updateImageDiffNote[A](
      input: UpdateImageDiffNoteInput
    )(
      innerSelection: SelectionBuilder[UpdateImageDiffNotePayload, A]
    )(
      implicit encoder0: ArgEncoder[UpdateImageDiffNoteInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "updateImageDiffNote",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "UpdateImageDiffNoteInput!")(encoder0))
      )

    def updateIssue[A](
      input: UpdateIssueInput
    )(
      innerSelection: SelectionBuilder[UpdateIssuePayload, A]
    )(
      implicit encoder0: ArgEncoder[UpdateIssueInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field("updateIssue", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "UpdateIssueInput!")(encoder0)))

    def updateIteration[A](
      input: UpdateIterationInput
    )(
      innerSelection: SelectionBuilder[UpdateIterationPayload, A]
    )(
      implicit encoder0: ArgEncoder[UpdateIterationInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "updateIteration",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "UpdateIterationInput!")(encoder0))
      )

    def updateNamespacePackageSettings[A](
      input: UpdateNamespacePackageSettingsInput
    )(
      innerSelection: SelectionBuilder[UpdateNamespacePackageSettingsPayload, A]
    )(
      implicit encoder0: ArgEncoder[UpdateNamespacePackageSettingsInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "updateNamespacePackageSettings",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "UpdateNamespacePackageSettingsInput!")(encoder0))
      )

    /** Updates a Note. If the body of the Note contains only quick actions, the Note will be destroyed during the update, and no Note will
      * be returned.
      */
    def updateNote[A](
      input: UpdateNoteInput
    )(
      innerSelection: SelectionBuilder[UpdateNotePayload, A]
    )(
      implicit encoder0: ArgEncoder[UpdateNoteInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field("updateNote", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "UpdateNoteInput!")(encoder0)))

    def updateRequirement[A](
      input: UpdateRequirementInput
    )(
      innerSelection: SelectionBuilder[UpdateRequirementPayload, A]
    )(
      implicit encoder0: ArgEncoder[UpdateRequirementInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "updateRequirement",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "UpdateRequirementInput!")(encoder0))
      )

    def updateSnippet[A](
      input: UpdateSnippetInput
    )(
      innerSelection: SelectionBuilder[UpdateSnippetPayload, A]
    )(
      implicit encoder0: ArgEncoder[UpdateSnippetInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field("updateSnippet", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "UpdateSnippetInput!")(encoder0)))

    def userCalloutCreate[A](
      input: UserCalloutCreateInput
    )(
      innerSelection: SelectionBuilder[UserCalloutCreatePayload, A]
    )(
      implicit encoder0: ArgEncoder[UserCalloutCreateInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "userCalloutCreate",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "UserCalloutCreateInput!")(encoder0))
      )

    def vulnerabilityConfirm[A](
      input: VulnerabilityConfirmInput
    )(
      innerSelection: SelectionBuilder[VulnerabilityConfirmPayload, A]
    )(
      implicit encoder0: ArgEncoder[VulnerabilityConfirmInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "vulnerabilityConfirm",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "VulnerabilityConfirmInput!")(encoder0))
      )

    def vulnerabilityDismiss[A](
      input: VulnerabilityDismissInput
    )(
      innerSelection: SelectionBuilder[VulnerabilityDismissPayload, A]
    )(
      implicit encoder0: ArgEncoder[VulnerabilityDismissInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "vulnerabilityDismiss",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "VulnerabilityDismissInput!")(encoder0))
      )

    def vulnerabilityExternalIssueLinkCreate[A](
      input: VulnerabilityExternalIssueLinkCreateInput
    )(
      innerSelection: SelectionBuilder[VulnerabilityExternalIssueLinkCreatePayload, A]
    )(
      implicit encoder0: ArgEncoder[VulnerabilityExternalIssueLinkCreateInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "vulnerabilityExternalIssueLinkCreate",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "VulnerabilityExternalIssueLinkCreateInput!")(encoder0))
      )

    def vulnerabilityExternalIssueLinkDestroy[A](
      input: VulnerabilityExternalIssueLinkDestroyInput
    )(
      innerSelection: SelectionBuilder[VulnerabilityExternalIssueLinkDestroyPayload, A]
    )(
      implicit encoder0: ArgEncoder[VulnerabilityExternalIssueLinkDestroyInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "vulnerabilityExternalIssueLinkDestroy",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "VulnerabilityExternalIssueLinkDestroyInput!")(encoder0))
      )

    def vulnerabilityResolve[A](
      input: VulnerabilityResolveInput
    )(
      innerSelection: SelectionBuilder[VulnerabilityResolvePayload, A]
    )(
      implicit encoder0: ArgEncoder[VulnerabilityResolveInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "vulnerabilityResolve",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "VulnerabilityResolveInput!")(encoder0))
      )

    def vulnerabilityRevertToDetected[A](
      input: VulnerabilityRevertToDetectedInput
    )(
      innerSelection: SelectionBuilder[VulnerabilityRevertToDetectedPayload, A]
    )(
      implicit encoder0: ArgEncoder[VulnerabilityRevertToDetectedInput]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "vulnerabilityRevertToDetected",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input, "VulnerabilityRevertToDetectedInput!")(encoder0))
      )

  }

  type Subscription = _root_.caliban.client.Operations.RootSubscription

  object Subscription {

    /** Triggered when the assignees of an issuable are updated.
      */
    def issuableAssigneesUpdated[A](
      issuableId: IssuableID
    )(
      onEpic: SelectionBuilder[Epic, A],
      onIssue: SelectionBuilder[Issue, A],
      onMergeRequest: SelectionBuilder[MergeRequest, A]
    )(
      implicit encoder0: ArgEncoder[IssuableID]
    ): SelectionBuilder[_root_.caliban.client.Operations.RootSubscription, Option[A]] = _root_
      .caliban
      .client
      .SelectionBuilder
      .Field(
        "issuableAssigneesUpdated",
        OptionOf(ChoiceOf(Map("Epic" -> Obj(onEpic), "Issue" -> Obj(onIssue), "MergeRequest" -> Obj(onMergeRequest)))),
        arguments = List(Argument("issuableId", issuableId, "IssuableID!")(encoder0))
      )

  }

}
